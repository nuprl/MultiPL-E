{
  "name": "mbpp_129_magic_square_test",
  "language": "rb",
  "prompt": "# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_magic_square_test\n    candidate = method(:magic_square_test)\n    assert_equal(true, candidate.call([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n    assert_equal(true, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n    assert_equal(false, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # You may assume that the matrix only contains distinct integers between 1 and n^2\n  # n is the size of the matrix\n  n = my_matrix.size\n  sum = n * (n**2 + 1) / 2\n  # Check rows\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == sum\n  end\n  # Check columns\n  (0...n).each do |i|\n    sum_column = 0\n    (0...n).each do |j|\n      sum_column += my_matrix[j][i]\n    end\n    return false unless sum_column == sum\n  end\n  # Check diagonals\n  sum_diagonal_1 = 0\n  sum_diagonal_2 = 0\n  (0...n).each do |i|\n    sum_diagonal_1 += my_matrix[i][i]\n    sum_diagonal_2 += my_matrix[i][n - 1 - i]\n  end\n  return false unless sum_diagonal_1 == sum && sum_diagonal_2 == sum\n  true\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is equal\n  row_sum = my_matrix[0].reduce(:+)\n  for i in 1..my_matrix.length-1\n    if row_sum != my_matrix[i].reduce(:+)\n      return false\n    end\n  end\n  # check if the sum of each column is equal\n  for i in 0..my_matrix.length-1\n    column_sum = 0\n    for j in 0..my_matrix.length-1\n      column_sum += my_matrix[j][i]\n    end\n    if column_sum != row_sum\n      return false\n    end\n  end\n  # check if the sum of each diagonal is equal\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  return true\nend",
    "  # Get the length of the matrix\n  n = my_matrix.length\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if the sum of the first row is equal to the sum of the other rows\n  if my_matrix.all? { |row| row.reduce(:+) == sum }\n    # Check if the sum of the first row is equal to the sum of the columns\n    if (0...n).all? { |i| my_matrix.map { |row| row[i] }.reduce(:+) == sum }\n      # Check if the sum of the first row is equal to the sum of the diagonals\n      if (0...n).all? { |i| my_matrix[i][i] + my_matrix[i][n - i - 1] == sum }\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  #   magic_square_test([[1,2,3],\n  #                      [4,5,6],\n  #                      [7,8,9]])\n  # should return false\n  #\n  #   magic_square_test([[4,9,2],\n  #                      [3,5,7],\n  #                      [8,1,6]])\n  # should return true\n  #\n  # Hint: You can represent a matrix as an array of arrays.\n  # For example, the matrix above can be represented as:\n  #   [\n  #     [4,9,2],\n  #     [3,5,7],\n  #     [8,1,6]\n  #   ]\n  #\n  # Hint: You can use the transpose method to get the columns of a matrix.\n  # For example, the transpose of the matrix above is:\n  #   [\n  #     [4,3,8],\n  #     [9,5,1],\n  #     [2,7,6]\n  #   ]\n  #\n  # Hint: You can use the flatten method to get a one-dimensional array of a matrix.\n  # For example, the flatten of the matrix above is:\n  #   [4,3,8,9,5,1,2,7,6]\n  #\n  # Hint: You can use the sum method to get the sum of an array.\n  # For example, the sum of [1,2,3] is 6.\n  #\n  # Hint: You can use the uniq method to get the unique elements of an array.\n  # For example, the unique elements of [1,2,2,3,3,3] are [1,2,3].\n  #\n  # Hint: You can use the all? method to check if all elements of an",
    "  # TODO\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a matrix where the sum of each row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there throughout this course.)\n  # You may assume that the matrix is square (i.e., the number of rows is the same as the number of columns).\n  # You may NOT use any of the functions we've written in class.\n  # You may NOT use any of the methods on the matrix class.\n  # You may NOT use any of the methods on the array class.\n  # You may NOT use any of the methods on the enumerable module.\n  # You may NOT use any of the methods on the integer class.\n  # You may NOT use any of the methods on the string class.\n  # You may NOT use any of the methods on the hash class.\n  # You may NOT use any of the methods on the range class.\n  # You may NOT use any of the methods on the set class.\n  # You may NOT use any of the methods on the float class.\n  # You may NOT use any of the methods on the complex class.\n  # You may NOT use any of the methods on the rational class.\n  # You may NOT use any of the methods on the numeric class.\n  # You may NOT use any of the methods on the math module.\n  # You may NOT use any of the methods on the cmath module.\n  # You may NOT use any of the methods on the file class.\n  # You may NOT use any of the methods on the dir class.\n  # You may NOT use any of the methods on the time class.\n  # You may NOT use any of the methods on the date class.\n  # You may NOT use any of the methods on the datetime class.\n  # You may NOT use any of the methods on the socket class.\n  # You may NOT use any of the methods on the thread class.\n  # You may NOT use any of the methods on the threadgroup class.\n  # You may NOT use any of the methods on the mutex class.\n  # You may NOT use any of the methods on the conditionvariable class.\n  # You may NOT use any of the methods on the queue class.\n",
    "  # Write your code here\n  return false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column or diagonal.\n  # You may not use any built-in methods for determining the length of a row, column or diagonal.\n  # You may not use any built-in methods for determining the size of the matrix.\n  # You may not use any built-in methods for determining whether a matrix is a square.\n  # You may not use any built-in methods for determining whether a matrix is a rectangle.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or a kite.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or a kite or a quadrilateral.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or a kite or a quadrilateral or a polygon.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or",
    "  # TODO\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # Hint: You can use the same logic as the Sudoku solver!\n  # Note: The matrix can be any size. It does not have to be a square.\n  # Note: If the matrix is not square, return nil.\n  # Note: If the matrix is nil, return nil.\n  return nil if my_matrix.nil?\n  return nil if my_matrix.length != my_matrix[0].length\n  return nil if my_matrix.length == 0\n  sum = my_matrix[0].inject(:+)\n  my_matrix.each do |row|\n    return false if row.inject(:+) != sum\n  end\n  my_matrix.transpose.each do |col|\n    return false if col.inject(:+) != sum\n  end\n  diag1 = 0\n  diag2 = 0\n  (0..my_matrix.length-1).each do |i|\n    diag1 += my_matrix[i][i]\n    diag2 += my_matrix[i][my_matrix.length-1-i]\n  end\n  return false if diag1 != sum || diag2 != sum\n  true\nend",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Check if the matrix is square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square.\n  #\n  # Hint: you may want to use Array#transpose\n  # Hint: you may want to use Array#each_with_index\n  # Hint: you may want to use Array#sum\n  # Hint: you may want to use Array#map\n  # Hint: you may want to use Array#all?\n  # Hint: you may want to use Array#flatten\n  # Hint: you may want to use Array#include?\n  # Hint: you may want to use Array#rotate\n  # Hint: you may want to use Array#zip\n  # Hint: you may want to use Array#uniq\n  # Hint: you may want to use Array#sort\n  # Hint: you may want to use Array#first\n  # Hint: you may want to use Array#last\n  # Hint: you may want to use Array#count\n  # Hint: you may want to use Array#all?\n  # Hint: you may want to use Array#each\n  # Hint: you may want to use Array#inject\n  # Hint: you may want to use Array#max\n  # Hint: you may want to use Array#min\n  # Hint: you may want to use Array#reduce\n  # Hint: you may want to use Array#select\n  # Hint: you may want to use Array#reject\n  # Hint: you may want to use Array#partition\n  # Hint: you may want to use Array#group_by\n  # Hint: you may want to use Array#each_with_object\n  # Hint: you may want to use Array#each_with_index\n  # Hint: you may want to use Array#",
    "  # TODO: return true/false depending on whether the matrix is a magic square or not.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for determining the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the length of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the length of a matrix.\n  # You may not use any built-in methods for determining the number of rows, columns, or diagonals in a matrix.\n  # You may not use any built-in methods for determining the number of elements in a matrix.\n  # You may not use any built-in methods for determining whether a matrix is a square matrix.\n  # You may not use any built-in methods for determining whether a matrix is a matrix.\n  # You may not use any built-in methods for determining whether a matrix is a 2D array.\n  # You may not use any built-in methods for determining whether a matrix is an array.\n  # You may not use any built-in methods for determining whether a matrix is an object.\n  # You may not use any built-in methods for determining whether a matrix is a number.\n  # You may not use any built-in methods for determining whether a matrix is a string.\n  # You may not use any built-in methods for determining whether a matrix is a symbol.\n  # You may not use any built-in methods for determining whether a matrix is a boolean.\n  # You may not use any built-in methods for determining whether a matrix is a hash.\n  # You may not use any built-in methods for determining whether a matrix is a range.\n  # You may not use any built-in methods for determining whether a matrix is a proc.\n  # You may not use any built-in methods for determining whether a matrix is a lambda.\n  # You may not use any built-in methods for determining whether a",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  sum_row = my_matrix.map { |row| row.reduce(:+) }\n  sum_col = my_matrix.transpose.map { |col| col.reduce(:+) }\n  sum_diag = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n              my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  sum_row.uniq.length == 1 && sum_col.uniq.length == 1 && sum_diag.uniq.length == 1\nend",
    "  # check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check that the matrix has an odd number of rows and columns\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check that the matrix has a unique set of numbers\n  if my_matrix.flatten.uniq.length != my_matrix.length ** 2\n    return false\n  end\n  # check that the sum of each row is the same\n  if my_matrix.map { |row| row.reduce(:+) }.uniq.length != 1\n    return false\n  end\n  # check that the sum of each column is the same\n  if my_matrix.transpose.map { |row| row.reduce(:+) }.uniq.length != 1\n    return false\n  end\n  # check that the sum of the diagonals is the same\n  if my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) != my_matrix.map.with_index { |row, i| row[-i-1] }.reduce(:+)\n    return false\n  end\n  # if all tests pass, return true\n  return true\nend",
    "  # Calculate the sum of the first row.\n  sum = 0\n  my_matrix[0].each do |value|\n    sum += value\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the size of a matrix.\n  # You may not use any built-in methods for finding the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for finding the sum of a matrix.\n  # You may not use any built-in methods for finding the product of a matrix.\n  # You may not use any built-in methods for finding the transpose of a matrix.\n  # You may not use any built-in methods for finding the inverse of a matrix.\n  # You may not use any built-in methods for finding the determinant of a matrix.\n  # You may not use any built-in methods for finding the trace of a matrix.\n  # You may not use any built-in methods for finding the rank of a matrix.\n  # You may not use any built-in methods for finding the eigenvalues of a matrix.\n  # You may not use any built-in methods for finding the eigenvectors of a matrix.\n  # You may not use any built-in methods for finding the LU decomposition of a matrix.\n  # You may not use any built-in methods for finding the QR decomposition of a matrix.\n  # You may not use any built-in methods for finding the Cholesky decomposition of a matrix.\n  # You may not use any built-in methods for finding the singular value decomposition of a matrix.\n  # You may not use any built-in methods for finding the Moore-Penrose pseudoinverse of a matrix.\n  # You may not use any built-in methods for finding the",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  # TODO: return false if not\n  # TODO: return false if not square\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # The sum of every row and column is 15.\n  # The sum of every diagonal is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of the elements in the matrix is also 15.\n  # The sum of",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Calculate the sum of the first row.\n  sum = 0\n  my_matrix[0].each do |value|\n    sum += value\n  end",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  sum = 0\n  for i in 0..my_matrix.length-1\n    sum += my_matrix[0][i]\n  end\n  for i in 0..my_matrix.length-1\n    row_sum = 0\n    col_sum = 0\n    for j in 0..my_matrix.length-1\n      row_sum += my_matrix[i][j]\n      col_sum += my_matrix[j][i]\n    end\n    if row_sum != sum || col_sum != sum\n      return false\n    end\n  end\n  return true\nend",
    "  # Write your code here\nend",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square\n  # Check the sum of each row\n  sum = my_matrix[0].reduce(:+)\n  for i in 1..my_matrix.length-1\n    if sum != my_matrix[i].reduce(:+)\n      return false\n    end\n  end\n  # Check the sum of each column\n  for i in 0..my_matrix.length-1\n    sum_col = 0\n    for j in 0..my_matrix.length-1\n      sum_col += my_matrix[j][i]\n    end\n    if sum_col != sum\n      return false\n    end\n  end\n  # Check the sum of the diagonal\n  sum_diag = 0\n  for i in 0..my_matrix.length-1\n    sum_diag += my_matrix[i][i]\n  end\n  if sum_diag != sum\n    return false\n  end\n  # Check the sum of the other diagonal\n  sum_diag = 0\n  for i in 0..my_matrix.length-1\n    sum_diag += my_matrix[i][my_matrix.length-1-i]\n  end\n  if sum_diag != sum\n    return false\n  end\n  return true\nend",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if matrix is odd\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check if matrix is magic square\n  magic_number = my_matrix.length * (my_matrix.length ** 2 + 1) / 2\n  # check rows\n  my_matrix.each do |row|\n    sum = 0\n    row.each do |element|\n      sum += element\n    end\n    if sum != magic_number\n      return false\n    end\n  end\n  # check columns\n  for i in 0..my_matrix.length - 1\n    sum = 0\n    for j in 0..my_matrix.length - 1\n      sum += my_matrix[j][i]\n    end\n    if sum != magic_number\n      return false\n    end\n  end\n  # check diagonals\n  sum = 0\n  for i in 0..my_matrix.length - 1\n    sum += my_matrix[i][i]\n  end\n  if sum != magic_number\n    return false\n  end\n  sum = 0\n  for i in 0..my_matrix.length - 1\n    sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if sum != magic_number\n    return false\n  end\n  return true\nend",
    "  # Check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of each row,\n  # column, and diagonal is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # 153\n  #  48\n  # 962\n  # In the above example, 15 + 3 + 9 = 48 + 3 + 6 = 9 + 6 + 2 = 24\n  # Therefore, this is a magic square.\n  # Hint: You may need to create an array of the sums of each row,\n  # column, and diagonal.\n  # Hint: You may need to use the each_with_index method.\n  # Hint: You may need to use the transpose method.\n  # Hint: You may need to use the diagonal method.\n  # Hint: You may need to use the reverse method.\n  # Hint: You may need to use the sum method.\n  # Hint: You may need to use the all? method.\n  # Hint: You may need to use the uniq method.\n  # Hint: You may need to use the == operator.\n  # Hint: You may need to use the eql? method.\nend",
    "  # get the size of the matrix\n  size = my_matrix.size\n  # get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # check if the sum of each row is equal to the sum of the first row\n  for i in 0..size-1\n    if my_matrix[i].reduce(:+) != sum\n      return false\n    end\n  end\n  # check if the sum of each column is equal to the sum of the first row\n  for i in 0..size-1\n    if my_matrix.transpose[i].reduce(:+) != sum\n      return false\n    end\n  end\n  # check if the sum of the diagonal is equal to the sum of the first row\n  if my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) != sum\n    return false\n  end\n  if my_matrix.map.with_index { |row, i| row[size-i-1] }.reduce(:+) != sum\n    return false\n  end\n  # if all the above tests pass, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may use the transpose method you wrote in the previous exercise.\n  # You may use the sum method you wrote in the previous exercise.\n  # You may not use any loops (for, while, do, etc.)\n  # You may not use any conditional statements (if, unless, case, etc.)\n  # You may not use any ternary operators (a ? b : c).\n  # You may not use any built-in array methods.\n  # You may not use any built-in hash methods.\n  # You may not use any built-in string methods.\n  # You may not use any built-in math methods.\n  # You may not use any built-in symbol methods.\n  # You may not use any built-in enumerable methods.\n  # You may not use any built-in enumerator methods.\n  # You may not use any built-in range methods.\n  # You may not use any built-in complex methods.\n  # You may not use any built-in rational methods.\n  # You may not use any built-in matrix methods.\n  # You may not use any built-in set methods.\n  # You may not use any built-in proc methods.\n  # You may not use any built-in method methods.\n  # You may not use any built-in binding methods.\n  # You may not use any built-in thread methods.\n  # You may not use any built-in thread group methods.\n  # You may not use any built-in fiber methods.\n  # You may not use any built-in mutex methods.\n  # You may not use any built-in condition variable methods.\n  # You may not use any built-in queue methods.\n  # You may not use any built-in struct methods.\n  # You may not use any built-in dir methods.\n  # You may not use any built-in file methods.\n  # You may not use any built-",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # matrix_1 = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]\n  # matrix_1 is a magic square because all rows, columns, and diagonals sum to 15.\n  # matrix_2 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n  # matrix_2 is not a magic square because not all rows, columns, and diagonals sum to 15.\n  # matrix_3 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n  # matrix_3 is a magic square because all rows, columns, and diagonals sum to 34.\n  # matrix_4 = [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]\n  # matrix_4 is a magic square because all rows, columns, and diagonals sum to 65.\nend",
    "  # calculate the sum of each row\n  row_sum = []\n  my_matrix.each do |row|\n    row_sum << row.sum\n  end\n  # calculate the sum of each column\n  column_sum = []\n  my_matrix.transpose.each do |column|\n    column_sum << column.sum\n  end\n  # calculate the sum of each diagonal\n  diagonal_sum = []\n  diagonal_sum << (0..2).collect { |i| my_matrix[i][i] }.sum\n  diagonal_sum << (0..2).collect { |i| my_matrix[i][2 - i] }.sum\n  # check if all sums are equal\n  if row_sum.uniq.length == 1 && column_sum.uniq.length == 1 && diagonal_sum.uniq.length == 1\n    puts \"It's a magic square!\"\n  else\n    puts \"It's not a magic square!\"\n  end\nend",
    "  # TODO: return true if it is a magic square, and false otherwise\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  sum = my_matrix.flatten.inject(:+) / my_matrix.length\n  my_matrix.each do |row|\n    return false if row.inject(:+) != sum\n  end\n  my_matrix.transpose.each do |col|\n    return false if col.inject(:+) != sum\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # matrix_1 = [\n  #   [1, 2, 3],\n  #   [4, 5, 6],\n  #   [7, 8, 9]\n  # ]\n  # => false\n  # matrix_2 = [\n  #   [4, 9, 2],\n  #   [3, 5, 7],\n  #   [8, 1, 6]\n  # ]\n  # => true\n  # matrix_3 = [\n  #   [7, 12, 1, 14],\n  #   [2, 13, 8, 11],\n  #   [16, 3, 10, 5],\n  #   [9, 6, 15, 4]\n  # ]\n  # => true\n  # matrix_4 = [\n  #   [23, 28, 21],\n  #   [22, 24, 26],\n  #   [27, 20, 25]\n  # ]\n  # => false\n  # matrix_5 = [\n  #   [16, 23, 17],\n  #   [78, 32, 21],\n  #   [17, 16, 15]\n  # ]\n  # => false\nend",
    "  # Calculate the sum of all the rows\n  row_sum = 0\n  my_matrix.each do |row|\n    row_sum += row.reduce(:+)\n  end",
    "  # calculate the sum of each row\n  row_sum = 0\n  my_matrix.each do |row|\n    row_sum += row.sum\n  end",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if all rows and columns add up to the same number\n  sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    if row.reduce(:+) != sum\n      return false\n    end\n  end\n  my_matrix.transpose.each do |column|\n    if column.reduce(:+) != sum\n      return false\n    end\n  end\n  # check if diagonals add up to the same number\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, index|\n    diagonal_sum += row[index]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, index|\n    diagonal_sum += row[my_matrix.length - index - 1]\n  end\n  if diagonal_sum != sum\n    return false\n  end\n  # if all tests pass, return true\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in ruby methods that are not available in 1.8.7.\n  # You may not use any gems.\n  # You may not use any loops.\n  # Hint: You only need to check the sum of one row, column, and diagonal.\n  # Hint: You may use the transpose method.\n  # Hint: You may use the flatten method.\n  # Hint: You may use the sum method.\n  # Hint: You may use the uniq method.\n  # Hint: You may use the all? method.\n  # Hint: You may use the == method.\n  # Hint: You may use the zip method.\n  # Hint: You may use the rotate method.\n  # Hint: You may use the reverse method.\n  # Hint: You may use the map method.\n  # Hint: You may use the inject method.\n  # Hint: You may use the select method.\n  # Hint: You may use the sort method.\n  # Hint: You may use the first method.\n  # Hint: You may use the last method.\n  # Hint: You may use the sample method.\n  # Hint: You may use the shuffle method.\n  # Hint: You may use the rand method.\n  # Hint: You may use the times method.\n  # Hint: You may use the upto method.\n  # Hint: You may use the downto method.\n  # Hint: You may use the step method.\n  # Hint: You may use the each method.\n  # Hint: You may use the each_with_index method.\n  # Hint: You may use the each_index method.\n  # Hint: You may use the each_with_object method.\n  # Hint: You may use the each_entry method.\n  # H",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic square https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  # matrix = [\n  #   [1, 2, 3],\n  #   [4, 5, 6],\n  #   [7, 8, 9]\n  # ]\n  # magic_square_test(matrix) => true\n  # matrix = [\n  #   [4, 9, 2],\n  #   [3, 5, 7],\n  #   [8, 1, 6]\n  # ]\n  # magic_square_test(matrix) => true\n  # matrix = [\n  #   [7, 12, 1, 14],\n  #   [2, 13, 8, 11],\n  #   [16, 3, 10, 5],\n  #   [9, 6, 15, 4]\n  # ]\n  # magic_square_test(matrix) => true\n  # matrix = [\n  #   [23, 28, 21],\n  #   [22, 24, 26],\n  #   [27, 20, 25]\n  # ]\n  # magic_square_test(matrix) => false\n  # matrix = [\n  #   [16, 23, 17],\n  #   [78, 32, 21],\n  #   [17, 16, 15]\n  # ]\n  # magic_square_test(matrix) => false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, every column, and both diagonals sum to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Note:\n  #   - The matrix can be any size.\n  #   - The matrix might not be square.\n  #   - The matrix might not be rectangular.\n  #   - The matrix might not be a matrix.\n  #   - The matrix might not be an array.\n  #   - The matrix might not exist.\n  #   - The matrix might be empty.\n  #   - The matrix might be nil.\n  #   - The matrix might contain non-numeric values.\n  #   - The matrix might contain non-integer values.\n  #   - The matrix might contain non-real values.\n  #   - The matrix might contain non-finite values.\n  #   - The matrix might contain infinite values.\n  #   - The matrix might contain NaN values.\n  #   - The matrix might contain complex values.\n  #   - The matrix might contain rational values.\n  #   - The matrix might contain negative values.\n  #   - The matrix might contain values greater than the number of rows or columns.\n  #   - The matrix might contain values less than 1.\n  #   - The matrix might contain values equal to 0.\n  #   - The matrix might contain values equal to 1.\n  #   - The matrix might contain values equal to the number of",
    "  # TODO: Implement the function\n  # Hint: You'll need to use the `sum` method\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If you get stuck, try googling \"how to find the sum of an array ruby\"\n  # If",
    "  # sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # sum of each column\n  col_sum = my_matrix.transpose.map { |col| col.reduce(:+) }\n  # sum of diagonals\n  diag_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n              my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # check if all sums are equal\n  row_sum.uniq.length == 1 && col_sum.uniq.length == 1 && diag_sum.uniq.length == 1\nend",
    "  # Write your code here\nend",
    "  # check if the matrix is a square\n  return false unless my_matrix.length == my_matrix[0].length\n  # check if the matrix is a magic square\n  return false unless my_matrix.length.odd?\n  # check if the matrix is a magic square\n  return false unless my_matrix.flatten.sort == (1..my_matrix.length**2).to_a\n  # check if the matrix is a magic square\n  return false unless my_matrix.map { |row| row.reduce(:+) }.uniq.length == 1\n  # check if the matrix is a magic square\n  return false unless my_matrix.transpose.map { |col| col.reduce(:+) }.uniq.length == 1\n  # check if the matrix is a magic square\n  return false unless my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) == my_matrix.length * (my_matrix.length**2 + 1) / 2\n  # check if the matrix is a magic square\n  return false unless my_matrix.map.with_index { |row, i| row[my_matrix.length - i - 1] }.reduce(:+) == my_matrix.length * (my_matrix.length**2 + 1) / 2\n  # if all the tests pass, return true\n  true\nend",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (of n x n size where n is the number of rows and columns)\n  # Example of a magic square:\n  # 7 1 6\n  # 8 5 3\n  # 2 9 4\n  #\n  # Hint: You can first transpose the matrix, and then compare the rows to see if they are equal.\n  # Then you can compare the columns to see if they are equal.\n  # And finally, you can add the two diagonals and compare to see if they are equal.\n  #\n  # Note: You can assume that the matrix is always square (has the same number of rows as columns)\n  # Also, you can assume that all the numbers in the matrix are positive integers.\nend",
    "  # Get the length of the matrix\n  n = my_matrix.length\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if the sum of the first row is equal to the sum of the other rows\n  if my_matrix.all? { |row| row.reduce(:+) == sum }\n    # Check if the sum of the first row is equal to the sum of the columns\n    if my_matrix.transpose.all? { |col| col.reduce(:+) == sum }\n      # Check if the sum of the first row is equal to the sum of the diagonals\n      if my_matrix.each_with_index.all? { |row, i| row[i] + my_matrix[n-i-1][i] == sum }\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  # Calculate the sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # Calculate the sum of each column\n  col_sum = my_matrix.transpose.map { |col| col.reduce(:+) }\n  # Calculate the sum of each diagonal\n  diag_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n              my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # Check if all sums are equal\n  row_sum.uniq.length == 1 && col_sum.uniq.length == 1 && diag_sum.uniq.length == 1\nend",
    "  # calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end",
    "  # Check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  #\n  #     is a magic square because:\n  #     1 + 2 + 3 = 6 (row 1)\n  #     4 + 5 + 6 = 15 (row 2)\n  #     7 + 8 + 9 = 24 (row 3)\n  #     1 + 4 + 7 = 12 (column 1)\n  #     2 + 5 + 8 = 15 (column 2)\n  #     3 + 6 + 9 = 18 (column 3)\n  #     1 + 5 + 9 = 15 (diagonal 1)\n  #     3 + 5 + 7 = 15 (diagonal 2)\n  #\n  #     1  2  3  4\n  #     5  6  7  8\n  #     9 10 11 12\n  #     13 14 15 16\n  #\n  #     is not a magic square because:\n  #     1 + 2 + 3 + 4 = 10 (row 1)\n  #     5 + 6 + 7 + 8 = 26 (row 2)\n  #     9 + 10 + 11 + 12 = 42 (row 3)\n  #     13 + 14 + 15 + 16 = 54 (row 4)\n  #     1 + 5 + 9 + 13 = 28 (column 1)\n  #     2 + 6 + 10 + 14 = 32 (column 2)\n  #     3 + 7 + 11 + 15 = 36 (column 3)\n  #     4 + 8 + 12 + 16 = 40 (column 4)\n  #     1 + 6 + 11 + 16 = 34 (diagonal 1)\n  #     4 + 7 + 10 + 13 = 34 (diagonal 2)\n  #\n  # Hint: use the `sum` method.\n  # Hint: use the `all?` method.\n  # Hint: use the `transpose",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  # The magic sum for this matrix is 15.\n  # (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. 45/3 = 15.)\n  #\n  # Hint: You can first calculate the magic sum, then check if all the rows, columns, and diagonals add up to it.\n  #       You can also do it the other way around.",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in diagonal functions.\n  # You may not use any of the built-in equality functions.\n  # You may not use any of the built-in comparison functions.\n  # You may not use any of the built-in arithmetic functions.\n  # You may not use any of the built-in mathematical functions.\n  # You may not use any of the built-in trigonometric functions.\n  # You may not use any of the built-in random number functions.\n  # You may not use any of the built-in rounding functions.\n  # You may not use any of the built-in absolute value functions.\n  # You may not use any of the built-in exponentiation functions.\n  # You may not use any of the built-in logarithmic functions.\n  # You may not use any of the built-in square root functions.\n  # You may not use any of the built-in cube root functions.\n  # You may not use any of the built-in factorial functions.\n  # You may not use any of the built-in string functions.\n  # You may not use any of the built-in array functions.\n  # You may not use any of the built-in hash functions.\n  # You may not use any of the built-in set functions.\n  # You may not use any of the built-in range functions.\n  # You may not use any of the built-in time functions.\n  # You may not use any of the built-in date functions.\n  # You may not use any of the built-in file functions.\n  # You may not use any of the built-in directory functions.\n  # You may not use any of the built-in process functions.\n  # You may not use any of the built-in system functions.\n  # You may not use any of the built-",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example of magic square:\n  #   8 1 6\n  #   3 5 7\n  #   4 9 2\n  # (The sum of all rows, columns and diagonals is 15)\n  # Example of non-magic square:\n  #   1 1 1\n  #   1 1 1\n  #   1 1 1\n  # (The sum of all rows, columns and diagonals is 3)\n  # Hint: you may want to use the `sum` method\n  # Hint: you may want to use the `all?` method\nend",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum += row.reduce(:+)\n  end\n  sum_array << sum\n  sum = 0\n  my_matrix.transpose.each do |row|\n    sum += row.reduce(:+)\n  end\n  sum_array << sum\n  sum = 0\n  my_matrix.each_with_index do |row, index|\n    sum += row[index]\n  end\n  sum_array << sum\n  sum = 0\n  my_matrix.each_with_index do |row, index|\n    sum += row[row.length - index - 1]\n  end\n  sum_array << sum\n  sum_array.uniq.length == 1\nend",
    "  # Check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square matrix\n  if my_matrix.length == my_matrix[0].length\n    # check if the matrix is a magic square\n    if magic_square?(my_matrix)\n      puts \"The matrix is a magic square.\"\n    else\n      puts \"The matrix is not a magic square.\"\n    end\n  else\n    puts \"The matrix is not a square matrix.\"\n  end\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, every column, and both diagonals sum to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Example:\n  # [2, 7, 6]\n  # [9, 5, 1]\n  # [4, 3, 8]\n  #\n  # This matrix is not magic because not every row, every column, and both diagonals sum to 15.\n  # (2 + 7 + 6 != 15, 9 + 5 + 1 != 15, 4 + 3 + 8 != 15,\n  #  2 + 9 + 4 != 15, 7 + 5 + 3 != 15, 6 + 1 + 8 != 15,\n  #  2 + 5 + 8 != 15, 6 + 5 + 4 != 15)\n  #\n  # Hint: You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check whether a matrix is a magic square using nested loops.\n  #       You can check",
    "  # calculate the sum of the first row\n  # calculate the sum of the second row\n  # calculate the sum of the third row\n  # calculate the sum of the first column\n  # calculate the sum of the second column\n  # calculate the sum of the third column\n  # calculate the sum of the first diagonal\n  # calculate the sum of the second diagonal\n  # check if all sums are equal\nend",
    "  # TODO: Return whether the matrix is a magic square or not\n  sum_rows = 0\n  sum_columns = 0\n  sum_diagonals = 0\n  sum_diagonals_2 = 0\n  sum_rows_2 = 0\n  sum_columns_2 = 0\n  sum_rows_3 = 0\n  sum_columns_3 = 0\n  sum_rows_4 = 0\n  sum_columns_4 = 0\n  sum_rows_5 = 0\n  sum_columns_5 = 0\n  sum_rows_6 = 0\n  sum_columns_6 = 0\n  sum_rows_7 = 0\n  sum_columns_7 = 0\n  sum_rows_8 = 0\n  sum_columns_8 = 0\n  sum_rows_9 = 0\n  sum_columns_9 = 0\n  sum_rows_10 = 0\n  sum_columns_10 = 0\n  sum_rows_11 = 0\n  sum_columns_11 = 0\n  sum_rows_12 = 0\n  sum_columns_12 = 0\n  sum_rows_13 = 0\n  sum_columns_13 = 0\n  sum_rows_14 = 0\n  sum_columns_14 = 0\n  sum_rows_15 = 0\n  sum_columns_15 = 0\n  sum_rows_16 = 0\n  sum_columns_16 = 0\n  sum_rows_17 = 0\n  sum_columns_17 = 0\n  sum_rows_18 = 0\n  sum_columns_18 = 0\n  sum_rows_19 = 0\n  sum_columns_19 = 0\n  sum_rows_20 = 0\n  sum_columns_20 = 0\n  sum_rows_21 = 0\n  sum_columns_21 = 0\n  sum_rows_22 = 0\n  sum_columns_22 = 0\n  sum_rows_23 = 0\n  sum_columns_23 = 0\n  sum_rows_24 = 0\n  sum_columns_24 = 0\n  sum_rows_25 = 0\n  sum_columns_25 = 0\n  sum_rows",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for determining the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the length of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the number of rows, columns, or diagonals.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n  # You may not use any built-in methods for determining the class of an object.\n  # You may not use any built-in methods for determining the type of an object.\n",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you may need to use a single line of code for this!\n  my_matrix.flatten.reduce(:+) == my_matrix.flatten.reduce(:+)\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?` here.\n  # Note 2: you can use `transpose` to get the columns of a matrix.\n  # Note 3: you can use `map` to apply a function to each element of a matrix.\n  # Note 4: you can use `flatten` to turn a matrix into a vector.\n  # Note 5: you can use `uniq` to get the unique elements of a vector.\n  # Note 6: you can use `count` to count the number of elements in a vector.\n  # Note 7: you can use `include?` to check whether a vector contains an element.\n  # Note 8: you can use `all?` to check whether all elements of a vector are true.\n  # Note 9: you can use `any?` to check whether any elements of a vector are true.\n  # Note 10: you can use `none?` to check whether no elements of a vector are true.\n  # Note 11: you can use `==` to compare two vectors.\n  # Note 12: you can use `zip` to combine two vectors into a matrix.\n  # Note 13: you can use `rotate` to rotate a matrix.\n  # Note 14: you can use `transpose` to transpose a matrix.\n  # Note 15: you can use `flatten` to flatten a matrix into a vector.\n  # Note 16: you can use `sum` to sum the elements of a vector.\n  # Note 17: you can use `all?` to check whether all elements of a vector are the same.\n  # Note 18: you can use `map` to apply a function to each element of a vector.\n  # Note 19: you can use `count` to count the number of elements in a vector.\n  # Note 20: you can use `include?` to check whether a vector contains an element.\n  # Note 21: you can use `all?` to check whether all elements of a vector are true.\n  # Note 22: you can use `any?` to check whether any elements of a vector are true.\n  # Note 23: you can use `none?` to check",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, column, and diagonal adds up to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # More info: http://en.wikipedia.org/wiki/Magic_square\n  #\n  # Hint: Use the `sum` method to sum the values in a row, column, or diagonal.\n  #       You can use `my_matrix[x]` to get the row at index x.\n  #       You can use `my_matrix[x][y]` to get the value at column x, row y.\n  #       You can use `my_matrix.transpose` to get the columns instead of the rows.\n  #       You can use `my_matrix.map.with_index` to iterate over both the row and column index.\n  #       You can use `my_matrix.each_with_index` to iterate over both the row and column index.\n  #       You can use `my_matrix.each_index` to iterate over the row index.\n  #       You can use `(0...my_matrix.length).each` to iterate over the column index.\n  #       You can use `(0...my_matrix.length).to_a` to get an array of indices.\n  #       You can use `my_matrix.map { |row| row[x] }` to get the column at index x.\n  #       You can use `my_matrix",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Remember that a magic square is a square matrix where the sum of each row,\n  # column, and diagonal is the same.\n  # You may assume that the matrix is square (i.e. the number of rows and columns\n  # are equal).\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  magic_square = false\n  if my_matrix.length == my_matrix[0].length\n    magic_square = true\n    sum = 0\n    sum_row = 0\n    sum_col = 0\n    for i in 0..my_matrix.length-1\n      sum += my_matrix[i][i]\n    end\n    for i in 0..my_matrix.length-1\n      for j in 0..my_matrix[i].length-1\n        sum_row += my_matrix[i][j]\n        sum_col += my_matrix[j][i]\n      end\n      if sum_row != sum || sum_col != sum\n        magic_square = false\n      end\n      sum_row = 0\n      sum_col = 0\n    end\n  end\n  return magic_square\nend",
    "  # TODO: implement this method\nend",
    "  # TODO\nend",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix (where the number of rows and columns are equal)\n  # where the sum of each row, column and diagonal are equal.\n  # Diagonal: top left to bottom right\n  # Diagonal: top right to bottom left\n  # For example:\n  # [[8, 1, 6],\n  #  [3, 5, 7],\n  #  [4, 9, 2]]\n  # is a magic square because:\n  # 8 + 1 + 6 = 15\n  # 3 + 5 + 7 = 15\n  # 4 + 9 + 2 = 15\n  # 15 + 15 + 15 = 45 (all rows, columns and diagonals have same sum)\n  #\n  # [[8, 1, 6],\n  #  [3, 5, 7],\n  #  [4, 9, 2]]\n  # is NOT a magic square because:\n  # 8 + 1 + 6 = 15\n  # 3 + 5 + 7 = 15\n  # 4 + 9 + 2 = 15\n  # 15 + 15 + 15 = 45 (all rows, columns and diagonals have same sum)\n  #\n  # [[1, 2, 3],\n  #  [4, 5, 6],\n  #  [7, 8, 9]]\n  # is NOT a magic square because:\n  # 1 + 2 + 3 = 6\n  # 4 + 5 + 6 = 15\n  # 7 + 8 + 9 = 24\n  # 6 + 15 + 24 = 45 (all rows, columns and diagonals have same sum)\n  #\n  # [[16, 23, 17],\n  #  [78, 32, 21],\n  #  [17, 16, 15]]\n  # is NOT a magic square because:\n  # 16 + 23 + 17 = 56\n  # 78 + 32 + 21 = 131\n  # 17 + 16 + 15 = 48\n  # 56 + 131 + 48 = 235 (all rows, columns and diagonals have same sum)\n  #\n  # [[4, 9, 2],\n  #  [3, 5, 7],\n  #  [8, 1, 6]]\n  # is",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square because every row, column, and diagonal adds up to 15.\n  # (8 + 1 + 6 = 3 + 5 + 7 = 4 + 9 + 2 = 15).\n  # The following matrix is NOT a magic square:\n  #   [23, 28, 21]\n  #   [22, 24, 26]\n  #   [27, 20, 25]\n  # Hint: You may find the Array#sum method useful here.\n  # Hint: You may find the following methods useful: Array#transpose, Array#map, and Enumerable#all?\n  # Hint: You may find the following method useful: Integer#even?\n  # Hint: You may find the following method useful: Array#each_with_index\n  # Hint: You may find the following method useful: Array#each_index\n  # Hint: You may find the following method useful: Array#reverse\n  # Hint: You may find the following method useful: Array#rotate\n  # Hint: You may find the following method useful: Array#rotate!\n  # Hint: You may find the following method useful: Array#rotate\n  # Hint: You may find the following method useful: Array#rotate!\n  # Hint: You may find the following method useful: Array#rotate\n  # Hint: You may find the following method useful: Array#rotate!\n  # Hint: You may find the following method useful: Array#rotate\n  # Hint: You may find the following method useful: Array#rotate!\n  # Hint: You may find the following method useful: Array#rotate\n  # Hint: You may find the following method useful: Array#rotate!\n  # Hint: You may find the following method useful: Array#rotate",
    "  # TODO\nend",
    "  # Write your code here\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # calculate the sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # calculate the sum of each column\n  column_sum = my_matrix.transpose.map { |column| column.reduce(:+) }\n  # calculate the sum of the diagonals\n  diagonal_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+), my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # if all the sums are equal, then it's a magic square\n  row_sum.uniq.length == 1 && column_sum.uniq.length == 1 && diagonal_sum.uniq.length == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note that there are many ways to do this, and several different\n  # strategies.  You might want to draw some examples on paper first.\n  #\n  # A few tests have been provided for you, but you should write your own.\n  #\n  # A magic square has the following properties:\n  # - All rows, columns, and diagonals add up to the same number.\n  # - All rows, columns, and diagonals have the same numbers.\n  # - All numbers are different.\n  #\n  # Hint: The `uniq` method removes duplicates from a list.\n  #\n  # Example:\n  # [1,2,3].uniq # => [1,2,3]\n  # [1,1,1].uniq # => [1]\n  #\n  # Note: For this problem, we can ignore the possibility of empty cells.\n  #\n  # See: http://en.wikipedia.org/wiki/Magic_square",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |number|\n    sum += number\n  end\n  # Check if the sum of the first row is equal to the sum of the other rows\n  my_matrix.each do |row|\n    sum_row = 0\n    row.each do |number|\n      sum_row += number\n    end\n    if sum_row != sum\n      return false\n    end\n  end\n  # Check if the sum of the first column is equal to the sum of the other columns\n  for i in 0..2\n    sum_column = 0\n    my_matrix.each do |row|\n      sum_column += row[i]\n    end\n    if sum_column != sum\n      return false\n    end\n  end\n  # Check if the sum of the first diagonal is equal to the sum of the other diagonal\n  sum_diagonal = 0\n  for i in 0..2\n    sum_diagonal += my_matrix[i][i]\n  end\n  if sum_diagonal != sum\n    return false\n  end\n  sum_diagonal = 0\n  for i in 0..2\n    sum_diagonal += my_matrix[i][2-i]\n  end\n  if sum_diagonal != sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of each row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as transpose, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as sum, etc.\n  # You may not use any built-in methods such as all?, etc.\n  # You may not use any built-in methods such as any?, etc.\n  # You may not use any built-in methods such as select, etc.\n  # You may not use any built-in methods such as reject, etc.\n  # You may not use any built-in methods such as map, etc.\n  # You may not use any built-in methods such as reduce, etc.\n  # You may not use any built-in methods such as inject, etc.\n  # You may not use any built-in methods such as group_by, etc.\n  # You may not use any built-in methods such as partition, etc.\n  # You may not use any built-in methods such as sort, etc.\n  # You may not use any built-in methods such as sort_by, etc.\n  # You may not use any built-in methods such as zip, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  # You may not use any built-in methods such as flatten, etc.\n  #",
    "  # check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check that the matrix is a magic square\n  # check that the rows sum to the same value\n  # check that the columns sum to the same value\n  # check that the diagonals sum to the same value\n  # if all of these conditions are true, return true\n  # otherwise, return false\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of numbers where the sums of the rows,\n  # columns and diagonals are all equal.\n  #\n  # For example:\n  # [8, 1, 6;\n  #  3, 5, 7;\n  #  4, 9, 2]\n  #\n  # is a magic square because:\n  # 8 + 1 + 6 = 15\n  # 3 + 5 + 7 = 15\n  # 4 + 9 + 2 = 15\n  #\n  # 8 + 3 + 4 = 15\n  # 1 + 5 + 9 = 15\n  # 6 + 7 + 2 = 15\n  #\n  # 8 + 5 + 2 = 15\n  # 6 + 5 + 4 = 15\n  #\n  # Note that the rows, columns and diagonals need to add up to the same number.\n  # In this case, 15.\n  #\n  # Hint: You can use the Array#sum method to help you.\n  #\n  # Hint: You can use the Array#transpose method to help you.\n  #\n  # Hint: You can use the Array#diagonal method to help you.\n  #\n  # Hint: You can use the Array#reverse method to help you.\n  #\n  # Hint: You can use the Array#all? method to help you.\n  #\n  # Hint: You can use the Array#uniq method to help you.\n  #\n  # Hint: You can use the Array#combination method to help you.\n  #\n  # Hint: You can use the Array#permutation method to help you.\n  #\n  # Hint: You can use the Array#product method to help you.\n  #\n  # Hint: You can use the Array#map method to help you.\n  #\n  # Hint: You can use the Array#each method to help you.\n  #\n  # Hint: You can use the Array#each_with_index method to help you.\n  #\n  # Hint: You can use the Array#each_with_object method to help you.\n  #",
    "  # TODO\nend",
    "  # Your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as transpose, etc.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for checking equality of arrays.\n  # You may not use any built-in methods for checking equality of integers.\n  # You may not use any built-in methods for checking equality of strings.\n  # You may not use any built-in methods for checking equality of floats.\n  # You may not use any built-in methods for checking equality of booleans.\n  # You may not use any built-in methods for checking equality of hashes.\n  # You may not use any built-in methods for checking equality of sets.\n  # You may not use any built-in methods for checking equality of ranges.\n  # You may not use any built-in methods for checking equality of regular expressions.\n  # You may not use any built-in methods for checking equality of symbols.\n  # You may not use any built-in methods for checking equality of complex numbers.\n  # You may not use any built-in methods for checking equality of rational numbers.\n  # You may not use any built-in methods for checking equality of big decimals.\n  # You may not use any built-in methods for checking equality of big integers.\n  # You may not use any built-in methods for checking equality of big ratios.\n  # You may not use any built-in methods for checking equality of matrices.\n  # You may not use any built-in methods for checking equality of vectors.\n  # You may not use any built-in methods for checking equality of rational matrices.\n  # You may not use any built-in methods for checking equality of rational vectors.\n  # You may not use any built-in methods for checking equality of complex matrices.\n  # You may not use any",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  #\n  #     1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #     1 + 4 + 7 = 2 + 5 + 8 = 3 + 6 + 9\n  #     1 + 5 + 9 = 3 + 5 + 7\n  #\n  #     1  8  3\n  #     4  5  6\n  #     7  2  9\n  #\n  #     1 + 8 + 3 = 12 != 4 + 5 + 6 = 15\n  #     1 + 4 + 7 = 12 != 2 + 5 + 8 = 15\n  #     1 + 5 + 9 = 15 != 3 + 5 + 7 = 15\n  #\n  #     1  2  3\n  #     4  5  6\n  #     7  8 10\n  #\n  #     1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 10\n  #     1 + 4 + 7 = 2 + 5 + 8 = 3 + 6 + 10\n  #     1 + 5 + 10 = 3 + 5 + 7\n  #\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  #\n  #     1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #     1 + 4 + 7 = 2 + 5 + 8 = 3 + 6 + 9\n  #     1 + 5 + 9 = 3 + 5 + 7\n  #\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  #\n  #     1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #     1 + 4 + 7 = 2 + 5 + 8 = 3 + 6 + 9\n  #     1 + 5",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` here to calculate the sum of each row/column/diagonal.\n  # Note: you can use `all?` to check if all elements in an array are the same.\n  # Note: you can use `transpose` to transpose a matrix.\n  # Note: you can use `map` to apply a function to each element of an array.\n  # Note: you can use `flatten` to flatten a matrix to a vector.\n  # Note: you can use `uniq` to get the unique elements of an array.\n  # Note: you can use `diagonal` to get the diagonal of a matrix.\n  # Note: you can use `reverse_diagonal` to get the reverse diagonal of a matrix.\n  # Note: you can use `rotate` to rotate a matrix.\n  # Note: you can use `zip` to zip two arrays together.\n  # Note: you can use `product` to get the Cartesian product of two arrays.\n  # Note: you can use `include?` to check if an array contains an element.\n  # Note: you can use `count` to count the number of elements in an array.\n  # Note: you can use `each_with_index` to iterate over the indices and elements of an array.\n  # Note: you can use `find_index` to get the index of the first element that matches a condition.\n  # Note: you can use `reduce(:+)` to sum the elements of an array.\n  # Note: you can use `reduce(:*)` to multiply the elements of an array.\n  # Note: you can use `reduce(:^)` to exponentiate the elements of an array.\n  # Note: you can use `reduce(:&)` to perform a bitwise AND on the elements of an array.\n  # Note: you can use `reduce(:|)` to perform a bitwise OR on the elements of an array.\n  # Note: you can use `reduce(:%)` to perform a modulo on the elements of an array.\n  # Note: you can use `reduce(",
    "  # TODO: Return whether the matrix is a magic square or not\n  # A magic square is a square matrix of the same size, each cell of which contains a different integer, and such that the sum of the integers in each row, in each column, and in the two diagonals is the same.\n  # https://en.wikipedia.org/wiki/Magic_square\n  #\n  # Example:\n  # [4, 9, 2]\n  # [3, 5, 7]\n  # [8, 1, 6]\n  #\n  # This is a magic square because every row, column and diagonal sums to 15.\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as `transpose` in your solution.\n  # You may not use any of the built-in `sum` methods in your solution.\n  # You may not use any of the built-in `map` methods in your solution.\n  # You may not use any of the built-in `select` methods in your solution.\n  # You may not use any of the built-in `find` methods in your solution.\n  # You may not use any of the built-in `reduce` methods in your solution.\n  # You may not use any of the built-in `flatten` methods in your solution.\n  # You may not use any of the built-in `zip` methods in your solution.\n  # You may not use any of the built-in `product` methods in your solution.\n  # You may not use any of the built-in `permutation` methods in your solution.\n  # You may not use any of the built-in `combination` methods in your solution.\n  # You may not use any of the built-in `cycle` methods in your solution.\n  # You may not use any of the built-in `sample` methods in your solution.\n  # You may not use any of the built-in `shuffle` methods in your solution.\n  # You may not use any of the built-in `reverse` methods in your solution.\n  # You may not use any of the built-in `rotate` methods in your solution.\n  # You may not use any of the built-in `sort` methods in your solution.\n  # You may not use any of the built-in `uniq` methods in your solution.\n  # You may not use any of the built-in `compact` methods in your solution.\n  # You may not use any of the built-in `flatten` methods in your solution.\n  # You may not use any of the built-in `partition` methods in your solution.\n",
    "  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n ",
    "  # Check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of numbers where the sum of each row,\n  # column, and diagonal is the same.\n  #\n  # For example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # In this matrix, the sum of each row and column is 15.\n  # The sum of each diagonal is also 15.\n  # Therefore, this is a magic square.\n  #\n  # More examples:\n  # http://en.wikipedia.org/wiki/Magic_square\n  #\n  # YOUR CODE HERE\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if matrix is odd\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check if matrix is magic\n  # check if rows add up to same number\n  row_sum = my_matrix[0].inject(:+)\n  for i in 1..my_matrix.length-1\n    if my_matrix[i].inject(:+) != row_sum\n      return false\n    end\n  end\n  # check if columns add up to same number\n  for i in 0..my_matrix.length-1\n    column_sum = 0\n    for j in 0..my_matrix.length-1\n      column_sum += my_matrix[j][i]\n    end\n    if column_sum != row_sum\n      return false\n    end\n  end\n  # check if diagonals add up to same number\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  return true\nend",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if matrix is odd\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check if matrix is magic square\n  # check if sum of rows is equal\n  row_sum = my_matrix[0].sum\n  for i in 1..(my_matrix.length - 1)\n    if my_matrix[i].sum != row_sum\n      return false\n    end\n  end\n  # check if sum of columns is equal\n  for i in 0..(my_matrix.length - 1)\n    col_sum = 0\n    for j in 0..(my_matrix.length - 1)\n      col_sum += my_matrix[j][i]\n    end\n    if col_sum != row_sum\n      return false\n    end\n  end\n  # check if sum of diagonals is equal\n  diag_sum = 0\n  for i in 0..(my_matrix.length - 1)\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != row_sum\n    return false\n  end\n  diag_sum = 0\n  for i in 0..(my_matrix.length - 1)\n    diag_sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if diag_sum != row_sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true if it is a magic square, and false otherwise\n  # Hint: a magic square has the same sum for each row, column, and diagonal\n  # (you will need to write a helper method to calculate this)\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  return false if my_matrix.length < 3\n  return false if my_matrix.length > 15",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info here: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `rows`, `columns`, and `diagonals` functions you wrote earlier.\n  # Hint: use the `sum` function you wrote earlier.\n  # Hint: use the `all_equal?` function you wrote earlier.\n  # Hint: use the `all?` function you wrote earlier.\n  # Hint: use the `map` function you wrote earlier.\n  # Hint: use the `reduce` function you wrote earlier.\n  # Hint: use the `zip` function you wrote earlier.\n  # Hint: use the `transpose` function you wrote earlier.\n  # Hint: use the `rotate` function you wrote earlier.\n  # Hint: use the `reverse` function you wrote earlier.\n  # Hint: use the `flatten` function you wrote earlier.\n  # Hint: use the `uniq` function you wrote earlier.\n  # Hint: use the `==` operator.\n  # Hint: use the `!=` operator.\n  # Hint: use the `&&` operator.\n  # Hint: use the `||` operator.\n  # Hint: use the `!` operator.\n  # Hint: use the `<=>` operator.\n  # Hint: use the `<` operator.\n  # Hint: use the `>` operator.\n  # Hint: use the `<=` operator.\n  # Hint: use the `>=` operator.\n  # Hint: use the `+` operator.\n  # Hint: use the `-` operator.\n  # Hint: use the `*` operator.\n  # Hint: use the `/` operator.\n  # Hint: use the `%` operator.\n  # Hint: use the `**` operator.\n  # Hint: use the `[]` operator.\n  # Hint: use the",
    "  # Your code here\nend",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  # TODO: return false if not\n  # TODO: return false if matrix is not square\n  # TODO: raise a custom exception if matrix is nil\n  raise ArgumentError if my_matrix.nil?\n  raise ArgumentError if my_matrix.length != my_matrix[0].length\n  sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false if row.reduce(:+) != sum\n  end\n  my_matrix.transpose.each do |column|\n    return false if column.reduce(:+) != sum\n  end\n  diagonal = 0\n  my_matrix.each_with_index do |row, index|\n    diagonal += row[index]\n  end\n  return false if diagonal != sum\n  diagonal = 0\n  my_matrix.each_with_index do |row, index|\n    diagonal += row[my_matrix.length - 1 - index]\n  end\n  return false if diagonal != sum\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `sum` method\n  # Hint: use the `all?` method\n  # Hint: use the `diagonal` method\n  # Hint: use the `transpose` method\n  # Hint: use the `map` method\n  # Hint: use the `flatten` method\n  # Hint: use the `uniq` method\n  # Hint: use the `==` method\n  # Hint: use the `reduce` method\n  # Hint: use the `sum` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use the `==` method\n  # Hint: use",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in array functions.\n  # You may not use any of the built-in math functions.\n  # You may not use any of the built-in string functions.\n  # You may not use any of the built-in hash functions.\n  # You may not use any of the built-in set functions.\n  # You may not use any of the built-in range functions.\n  # You may not use any of the built-in symbol functions.\n  # You may not use any of the built-in time functions.\n  # You may not use any of the built-in enumerable functions.\n  # You may not use any of the built-in exception functions.\n  # You may not use any of the built-in numeric functions.\n  # You may not use any of the built-in complex functions.\n  # You may not use any of the built-in rational functions.\n  # You may not use any of the built-in proc functions.\n  # You may not use any of the built-in method functions.\n  # You may not use any of the built-in io functions.\n  # You may not use any of the built-in dir functions.\n  # You may not use any of the built-in file functions.\n  # You may not use any of the built-in gc functions.\n  # You may not use any of the built-in thread functions.\n  # You may not use any of the built-in mutex functions.\n  # You may not use any of the built-in condition variable functions.\n  # You may not use any of the built-in queue functions.\n  # You may not use any of the built-in sized queue functions.\n  # You may not use any of the built-in socket functions.\n  # You may not use any of the built-in struct functions.\n  # You may not use any of the built-in random functions.\n",
    "  # TODO: Return whether the matrix is a magic square or not\n  if my_matrix.length == 0\n    return false\n  end\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  if my_matrix.length.odd?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false\n  end\n  if my_matrix.length.even?\n    return false",
    "  # TODO: implement this function\n  # Hint: You can use the `sum` method to get the sum of all the elements in a matrix row\n  # If all the rows are the same, and all the columns are the same, and the diagonals are the same, then it is a magic square\n  # You can compare arrays with the `==` operator, for example:\n  # [1,2,3] == [1,2,3] => true\n  # [1,2,3] == [3,2,1] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6], [7,8,9]] => true\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6], [9,8,7]] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6]] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6], [7,8,9], [1,2,3]] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6], [7,8,9], [7,8,9]] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2,3], [4,5,6], [7,8,9], [7,8,10]] => false\n  # [[1,2,3], [4,5,6], [7,8,9]] == [[1,2",
    "  # Check if the matrix is a square matrix\n  return false unless my_matrix.length == my_matrix[0].length\n  # Check if the matrix is a magic square\n  return false unless my_matrix.length.odd?\n  # Check if the sum of the rows is equal to the sum of the columns\n  return false unless my_matrix.length * (my_matrix.length ** 2 + 1) / 2 == my_matrix.inject(:+)\n  # Check if the sum of the diagonals is equal to the sum of the rows\n  return false unless my_matrix.length * (my_matrix.length ** 2 + 1) / 2 == my_matrix.map.with_index { |row, index| row[index] }.inject(:+)\n  return false unless my_matrix.length * (my_matrix.length ** 2 + 1) / 2 == my_matrix.map.with_index { |row, index| row[my_matrix.length - 1 - index] }.inject(:+)\n  # Check if the numbers are unique\n  return false unless my_matrix.flatten.uniq.length == my_matrix.length ** 2\n  true\nend",
    "  # check if the matrix is a square\n  return false unless my_matrix.length == my_matrix[0].length",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  sum = 0\n  my_matrix.each do |row|\n    sum += row[0]\n  end\n  my_matrix.each do |row|\n    sum_row = 0\n    row.each do |num|\n      sum_row += num\n    end\n    return false if sum_row != sum\n  end\n  my_matrix.transpose.each do |row|\n    sum_row = 0\n    row.each do |num|\n      sum_row += num\n    end\n    return false if sum_row != sum\n  end\n  sum_diag = 0\n  my_matrix.each_with_index do |row, index|\n    sum_diag += row[index]\n  end\n  return false if sum_diag != sum\n  sum_diag = 0\n  my_matrix.each_with_index do |row, index|\n    sum_diag += row[my_matrix.length - index - 1]\n  end\n  return false if sum_diag != sum\n  true\nend",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_diag = 0\n  sum_diag_2 = 0\n  sum_line = 0\n  sum_col = 0\n  i = 0\n  j = 0\n  while i < my_matrix.length\n    sum += my_matrix[i][i]\n    sum_diag_2 += my_matrix[i][my_matrix.length - i - 1]\n    i += 1\n  end\n  while j < my_matrix.length\n    i = 0\n    while i < my_matrix.length\n      sum_line += my_matrix[j][i]\n      sum_col += my_matrix[i][j]\n      i += 1\n    end\n    if sum_line != sum || sum_col != sum\n      return false\n    end\n    sum_line = 0\n    sum_col = 0\n    j += 1\n  end\n  if sum_diag != sum_diag_2\n    return false\n  end\n  return true\nend",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  return false if my_matrix.length == 0\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  return false if my_matrix.flatten.uniq.length != my_matrix.length**2\n  return false if my_matrix.flatten.inject(:+) != my_matrix.length**3/2\n  return false if my_matrix.transpose.map { |row| row.inject(:+) }.uniq.length != 1\n  return false if my_matrix.map { |row| row.inject(:+) }.uniq.length != 1\n  return false if my_matrix.map.with_index { |row, i| row[i] }.inject(:+) != my_matrix.length**3/2\n  return false if my_matrix.map.with_index { |row, i| row[-i-1] }.inject(:+) != my_matrix.length**3/2\n  return true\nend",
    "  # calculate the sum of each row\n  row_sums = []\n  my_matrix.each do |row|\n    row_sums << row.reduce(:+)\n  end",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if matrix is odd\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check if all rows sum to the same number\n  row_sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    if row.reduce(:+) != row_sum\n      return false\n    end\n  end\n  # check if all columns sum to the same number\n  column_sum = 0\n  my_matrix.each do |row|\n    column_sum += row[0]\n  end\n  my_matrix.each_with_index do |row, row_index|\n    column_sum_check = 0\n    row.each_with_index do |column, column_index|\n      column_sum_check += my_matrix[column_index][row_index]\n    end\n    if column_sum_check != column_sum\n      return false\n    end\n  end\n  # check if diagonals sum to the same number\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum += row[row_index]\n  end\n  my_matrix.each_with_index do |row, row_index|\n    diagonal_sum_check = 0\n    row.each_with_index do |column, column_index|\n      diagonal_sum_check += my_matrix[column_index][(my_matrix.length - 1) - row_index]\n    end\n    if diagonal_sum_check != diagonal_sum\n      return false\n    end\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`.\n  # Note: you can use `matrix.transpose` to get the transpose.\n  # Note: you can use `matrix.map(&:sum)` to get the row/column sums.\n  # Note: you can use `matrix.flatten.sum` to get the sum of all elements.\n  # Note: you can use `matrix.flatten.uniq.size` to get the number of unique elements.\n  # Note: you can use `matrix.flatten.uniq.size == 1` to check if all elements are the same.\n  # Note: you can use `matrix.flatten.uniq.size == matrix.flatten.size` to check if all elements are different.\n  # Note: you can use `matrix.flatten.uniq.size == matrix.flatten.size && matrix.flatten.uniq.size == 1` to check if all elements are the same.\n  # Note: you can use `matrix.flatten.uniq.size == matrix.flatten.size && matrix.flatten.uniq.size != 1` to check if all elements are different.\n  # Note: you can use `matrix.flatten.uniq.size == matrix.flatten.size && matrix.flatten.uniq.size != 1 && matrix.flatten.uniq.size == matrix.flatten.sum` to check if all elements are different and the sum of all elements is equal to the number of unique elements.\n  # Note: you can use `matrix.flatten.uniq.size == matrix.flatten.size && matrix.flatten.uniq.size != 1 && matrix.flatten.uniq.size == matrix.flatten.sum && matrix.flatten.sum == matrix.map(&:sum).uniq.size` to check if all elements are different and the sum of all elements is equal to the number of unique elements and the sum of all elements is equal to the number of unique row/column sums.\n  # Note: you can use `matrix.flatten.uniq.size == matrix.fl",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |number|\n    sum += number\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  return false if my_matrix.length == 0\n  return false if my_matrix.length != my_matrix[0].length\n  return false if my_matrix.length.odd?\n  return false if my_matrix.flatten.uniq.length != my_matrix.length**2\n  return false if my_matrix.flatten.sum != (my_matrix.length**3 + my_matrix.length)/2\n  return false if my_matrix.transpose.map { |row| row.sum }.uniq.length != 1\n  return false if my_matrix.map { |row| row.sum }.uniq.length != 1\n  return false if my_matrix.map.with_index { |row, index| row[index] }.sum != (my_matrix.length**3 + my_matrix.length)/2\n  return false if my_matrix.map.with_index { |row, index| row[my_matrix.length - index - 1] }.sum != (my_matrix.length**3 + my_matrix.length)/2\n  return true\nend",
    "  # sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # sum of each column\n  column_sum = my_matrix.transpose.map { |column| column.reduce(:+) }\n  # sum of diagonals\n  diagonal_sum = [\n    my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n    my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)\n  ]",
    "  # Check that the matrix is square.\n  return false unless my_matrix.length == my_matrix[0].length",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, every column, and both diagonals sum to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Hint: Use the `sum` method on arrays.\n  # (https://ruby-doc.org/core-2.5.0/Array.html#method-i-sum)\n  #\n  # Hint: Use the `all?` method on arrays.\n  # (https://ruby-doc.org/core-2.5.0/Array.html#method-i-all-3F)\n  #\n  # Hint: Use the `transpose` method on arrays.\n  # (https://ruby-doc.org/core-2.5.0/Array.html#method-i-transpose)\n  #\n  # Hint: Use the `diagonal` method on matrices.\n  # (https://ruby-doc.org/stdlib-2.5.0/libdoc/matrix/rdoc/Matrix.html#method-i-diagonal)\n  #\n  # Hint: Use the `unshift` method on arrays.\n  # (https://ruby-doc.org/core-2.5.0/Array.html#method-i-unshift)\n  #\n  # Hint: Use the `push` method on arrays.\n  # (https://ruby-doc.org/core-2.5.0",
    "  # calculate the sum of each row\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # calculate the sum of each column\n  column_sum = my_matrix.transpose.map { |row| row.reduce(:+) }\n  # calculate the sum of the diagonals\n  diagonal_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n                  my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # check if all sums are equal\n  row_sum.uniq.size == 1 && column_sum.uniq.size == 1 && diagonal_sum.uniq.size == 1\nend",
    "  # sum of rows\n  row_sum = my_matrix.map { |row| row.reduce(:+) }\n  # sum of columns\n  col_sum = my_matrix.transpose.map { |col| col.reduce(:+) }\n  # sum of diagonals\n  diag_sum = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n              my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  # check if all sums are equal\n  row_sum.uniq.length == 1 && col_sum.uniq.length == 1 && diag_sum.uniq.length == 1\nend",
    "  # calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # check if each row has the same sum\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # check if each column has the same sum\n  my_matrix.transpose.each do |col|\n    col_sum = 0\n    col.each do |num|\n      col_sum += num\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # check if the diagonals have the same sum\n  diag_sum = 0\n  my_matrix.each_with_index do |row, idx|\n    diag_sum += row[idx]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  my_matrix.each_with_index do |row, idx|\n    diag_sum += row[-idx - 1]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  # Check if the matrix is a square matrix.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square.\n  # You may assume that the matrix is at least 1x1.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square.\n  # You may assume that the matrix is at least 1x1.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square.\n  # You may assume that the matrix is at least 1x1.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square.\n  # You may assume that the matrix is at least 1x1.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any built-in sorting functions.\n  # You may assume that the matrix is square.\n  # You may assume that the matrix is at least 1x1.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You",
    "  # Check if the matrix is square\n  # Check if the sum of each row is equal to the sum of each column\n  # Check if the sum of each diagonal is equal to the sum of each row\nend",
    "  # calculate the sum of each row\n  row_sum = 0\n  my_matrix.each do |row|\n    row_sum = row.reduce(:+)\n  end\n  # calculate the sum of each column\n  column_sum = 0\n  my_matrix.transpose.each do |column|\n    column_sum = column.reduce(:+)\n  end\n  # calculate the sum of the diagonals\n  diagonal_sum = 0\n  my_matrix.each_with_index do |row, index|\n    diagonal_sum += row[index]\n  end\n  # compare the sums\n  if row_sum == column_sum && column_sum == diagonal_sum\n    return true\n  else\n    return false\n  end\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for checking equality between two arrays.\n  # You may not use any built-in methods for checking whether an array contains only integers.\n  # You may not use any built-in methods for checking whether an array is a square matrix.\n  # You may not use any built-in methods for checking whether an array is a matrix.\n  # You may not use any built-in methods for checking whether an array is empty.\n  # You may not use any built-in methods for checking whether an array is nil.\n  # You may not use any built-in methods for checking whether an array is a 2D array.\n  # You may not use any built-in methods for checking whether an array is a 1D array.\n  # You may not use any built-in methods for checking whether an array is a hash.\n  # You may not use any built-in methods for checking whether an array is a string.\n  # You may not use any built-in methods for checking whether an array is a number.\n  # You may not use any built-in methods for checking whether an array is a symbol.\n  # You may not use any built-in methods for checking whether an array is a boolean.\n  # You may not use any built-in methods for checking whether an array is a float.\n  # You may not use any built-in methods for checking whether an array is a complex number.\n  # You may not use any built-in methods for checking whether an array is a rational number.\n  # You may not use any built-in methods for checking whether an array is a matrix.\n  # You may not use any built-in methods for checking whether an array is a vector.\n  # You may not use any built",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  magic_sum = 0\n  for i in 0..my_matrix.length-1\n    magic_sum += my_matrix[0][i]\n  end\n  for i in 0..my_matrix.length-1\n    sum = 0\n    for j in 0..my_matrix.length-1\n      sum += my_matrix[i][j]\n    end\n    if sum != magic_sum\n      return false\n    end\n  end\n  for i in 0..my_matrix.length-1\n    sum = 0\n    for j in 0..my_matrix.length-1\n      sum += my_matrix[j][i]\n    end\n    if sum != magic_sum\n      return false\n    end\n  end\n  sum = 0\n  for i in 0..my_matrix.length-1\n    sum += my_matrix[i][i]\n  end\n  if sum != magic_sum\n    return false\n  end\n  sum = 0\n  for i in 0..my_matrix.length-1\n    sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if sum != magic_sum\n    return false\n  end\n  return true\nend",
    "  # TODO\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  if my_matrix.size == 0\n    return false\n  end\n  if my_matrix.size == 1\n    return true\n  end\n  if my_matrix.size == 2\n    return false\n  end\n  if my_matrix.size == 3\n    sum = my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2]\n    if sum != my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2]\n      return false\n    end\n    if sum != my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2]\n      return false\n    end\n    if sum != my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0]\n      return false\n    end\n    if sum != my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1]\n      return false\n    end\n    if sum != my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2]\n      return false\n    end\n    if sum != my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n      return false\n    end\n    if sum != my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n      return false\n    end\n    return true\n  end\n  if my_matrix.size == 4\n    sum = my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] + my_matrix[0][3]\n    if sum != my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] + my_matrix[1][3]\n     ",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square has the following properties:\n  # - Each row and each column add up to the same number.\n  # - The diagonals also add up to the same number.\n  # - All rows are the same length\n  # - All rows are composed of unique numbers. No number is repeated in a row.\n  # - All elements in the matrix are numbers. There are no nil values.\n  # - The numbers are consecutive. For a 3x3 matrix, the numbers are 1-9.\n  # - The bottom right corner of the matrix is the greatest number.\n  # - The bottom left corner of the matrix is the smallest number.\n  # - The matrix is square.\n  # - The matrix is at least 3x3.\n  # - The matrix is at most 10x10.\n  # - The matrix is not empty.\n  # - The matrix is not ragged. Every row is the same length.\n  # - The matrix is not jagged. Every column is the same height.\n  # - The matrix does not contain nil values.\n  # - The matrix's first row is in ascending order.\n  # - The matrix's first column is in ascending order.\n  # - The matrix's last row is in descending order.\n  # - The matrix's last column is in descending order.\n  # - The matrix's first row is unique.\n  # - The matrix's first column is unique.\n  # - The matrix's last row is unique.\n  # - The matrix's last column is unique.\n  # - The matrix's first row and first column are the same length.\n  # - The matrix's last row and last column are the same length.\n  # - The matrix's first row and last row are the same length.\n  # - The matrix's first column and last column are the same length.\n  # - The matrix's first row and last column are the same length.\n  # - The matrix's first column and last row are the same length.\n  # - The matrix's first row and first column are unique.\n  # - The matrix's last row and last column are unique.\n  # - The matrix's first row and last row are unique.\n ",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions such as transpose, etc.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the length of a row, column, or diagonal.\n  # You may not use any built-in methods for finding the size of the matrix.\n  # You may not use any built-in methods for finding the number of rows or columns.\n  # You may not use any built-in methods for finding the diagonal.\n  # You may not use any built-in methods for finding the transpose of the matrix.\n  # You may not use any built-in methods for finding the sum of the matrix.\n  # You may not use any built-in methods for finding the product of the matrix.\n  # You may not use any built-in methods for finding the determinant of the matrix.\n  # You may not use any built-in methods for finding the inverse of the matrix.\n  # You may not use any built-in methods for finding the trace of the matrix.\n  # You may not use any built-in methods for finding the rank of the matrix.\n  # You may not use any built-in methods for finding the eigenvalues of the matrix.\n  # You may not use any built-in methods for finding the eigenvectors of the matrix.\n  # You may not use any built-in methods for finding the LU decomposition of the matrix.\n  # You may not use any built-in methods for finding the QR decomposition of the matrix.\n  # You may not use any built-in methods for finding the Cholesky decomposition of the matrix.\n  # You may not use any built-in methods for finding the singular value decomposition of the matrix.\n  # You may not use any built-in methods for finding the trace of the matrix.\n  #",
    "  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not\n  # TODO: Return whether the matrix is a magic square or not",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is magic\n  # check if the sum of each row is the same\n  sum = my_matrix[0].reduce(:+)\n  for i in 1..my_matrix.length-1\n    if my_matrix[i].reduce(:+) != sum\n      return false\n    end\n  end\n  # check if the sum of each column is the same\n  for i in 0..my_matrix.length-1\n    if my_matrix.map{|row| row[i]}.reduce(:+) != sum\n      return false\n    end\n  end\n  # check if the sum of the diagonals is the same\n  if my_matrix.map.with_index{|row, i| row[i]}.reduce(:+) != sum\n    return false\n  end\n  if my_matrix.map.with_index{|row, i| row[my_matrix.length-1-i]}.reduce(:+) != sum\n    return false\n  end\n  return true\nend",
    "  # check if all rows have the same sum\n  row_sum = my_matrix[0].reduce(:+)\n  my_matrix.each do |row|\n    return false if row.reduce(:+) != row_sum\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # You may assume that the matrix only contains integers.\n  # Hint: you can use `sum` and `all?`\n  # Hint: you can use `all?` on an array of booleans to determine whether they are all true.\n  # Hint: you can use `map` to apply a function to each element of an array.\n  # Hint: you can use `transpose` to transpose a matrix.\n  # Hint: you can use `flatten` to flatten a matrix to a one-dimensional array.\n  # Hint: you can use `uniq` to get the unique elements of an array.\n  # Hint: you can use `sort` to sort an array.\n  # Hint: you can use `==` to compare arrays.\n  # Hint: you can use `sum` to sum the elements of an array.\n  # Hint: you can use `all?` to check whether all elements of an array are true.\n  # Hint: you can use `any?` to check whether any elements of an array are true.\n  # Hint: you can use `each_with_index` to iterate over an array, passing the index as a second argument to the block.\n  # Hint: you can use `each_with_index` to iterate over a matrix, passing the index as a second argument to the block.\n  # Hint: you can use `each_with_index` to iterate over a matrix, passing the index as a second argument to the block.\n  # Hint: you can use `each_with_index` to iterate over a matrix, passing the index as a second argument to the block.\n  # Hint: you can use `each_with_index` to iterate over a matrix, passing the index as a second argument to the block.\n  # Hint: you can use `each_with_index` to iterate over a matrix, passing the index as a second argument to the block.\n  # Hint: you can use `each_with_index` to iterate over a matrix, passing the index as a second argument to the block.\n  # Hint:",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are all equal to the same number.\n  # The numbers in the matrix are not necessarily distinct.\n  # Your function should work for an arbitrarily sized matrix (of equal width and height).\n  # You may assume that the matrix contains only integers.\nend",
    "  # Calculate the sum of the first row\n  sum = 0\n  for i in 0..2\n    sum += my_matrix[0][i]\n  end\n  # Check the other rows\n  for i in 1..2\n    row_sum = 0\n    for j in 0..2\n      row_sum += my_matrix[i][j]\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check the columns\n  for i in 0..2\n    col_sum = 0\n    for j in 0..2\n      col_sum += my_matrix[j][i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check the diagonals\n  diag_sum = 0\n  for i in 0..2\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  for i in 0..2\n    diag_sum += my_matrix[i][2-i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  # Check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  #   magic_square_test([[8, 1, 6],\n  #                      [3, 5, 7],\n  #                      [4, 9, 2]])\n  #   => true\n  # Example:\n  #   magic_square_test([[16, 23, 17],\n  #                      [78, 32, 21],\n  #                      [17, 16, 15]])\n  #   => false\nend",
    "  # First, we need to check that the matrix is square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Get the size of the matrix\n  size = my_matrix.size\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if the sum of the first row is equal to the sum of the other rows\n  if my_matrix.all? { |row| row.reduce(:+) == sum }\n    # Check if the sum of the first row is equal to the sum of the columns\n    if my_matrix.transpose.all? { |column| column.reduce(:+) == sum }\n      # Check if the sum of the first row is equal to the sum of the diagonals\n      if my_matrix.each_with_index.all? { |row, i| row[i] + row[size - i - 1] == sum }\n        return true\n      end\n    end\n  end\n  false\nend",
    "  # check if the matrix is a square\n  return false if my_matrix.length != my_matrix[0].length",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  sum = 0\n  sum_diag = 0\n  sum_diag2 = 0\n  my_matrix.each do |row|\n    sum += row.sum\n  end\n  my_matrix.each_with_index do |row, index|\n    sum_diag += row[index]\n  end\n  my_matrix.each_with_index do |row, index|\n    sum_diag2 += row[-index-1]\n  end\n  sum_diag == sum && sum_diag2 == sum\nend",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`.\n  # Note 2: remember that the diagonal is also part of the square.\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  # should return true.\n  # Example 2:\n  # [16, 2, 3, 13]\n  # [5, 11, 10, 8]\n  # [9,  7, 6, 12]\n  # [4, 14, 15, 1]\n  # should return true.\n  # Example 3:\n  # [7, 12, 1, 14]\n  # [2, 13, 8, 11]\n  # [16, 3, 10, 5]\n  # [9, 6, 15, 4]\n  # should return false.\n  # Example 4:\n  # [23, 28, 21]\n  # [22, 24, 26]\n  # [27, 20, 25]\n  # should return false.\n  # Example 5:\n  # [11, 24, 7, 20, 3]\n  # [4, 12, 25, 8, 16]\n  # [17, 5, 13, 21, 9]\n  # [10, 18, 1, 14, 22]\n  # [23, 6, 19, 2, 15]\n  # should return false.\n  # Example 6:\n  # [1, 1]\n  # [1, 1]\n  # should return false.\n  # Example 7:\n  # [8]\n  # should return false.\n  # Example 8:\n  # []\n  # should return false.\n  # Example 9:\n  # [1, 2, 3]\n  # [4, 5, 6]\n  # [7, 8, 9]\n  # should return false.\n  # Example 10:\n  # [1, 2, 3]\n  # [1, 2, 3]\n  # [1, 2, 3]\n  # should return false.\n  # Example 11:\n  # [1, 2, 3]\n",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end",
    "  # First, we need to check that the matrix is square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n ",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |element|\n    sum += element\n  end",
    "  # calculate the sum of each row\n  row_sum = 0\n  my_matrix.each do |row|\n    row_sum += row.reduce(:+)\n  end\n  # calculate the sum of each column\n  col_sum = 0\n  my_matrix.transpose.each do |col|\n    col_sum += col.reduce(:+)\n  end\n  # calculate the sum of the diagonals\n  diag_sum = 0\n  (0...my_matrix.length).each do |i|\n    diag_sum += my_matrix[i][i]\n  end\n  diag_sum2 = 0\n  (0...my_matrix.length).each do |i|\n    diag_sum2 += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  # compare the sums\n  if row_sum == col_sum && col_sum == diag_sum && diag_sum == diag_sum2\n    return true\n  else\n    return false\n  end\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is equal\n  row_sum = 0\n  my_matrix.each do |row|\n    row_sum = row.reduce(:+)\n    break\n  end\n  my_matrix.each do |row|\n    if row.reduce(:+) != row_sum\n      return false\n    end\n  end\n  # check if the sum of each column is equal\n  column_sum = 0\n  for i in 0..my_matrix.length-1\n    column_sum += my_matrix[0][i]\n  end\n  for i in 0..my_matrix.length-1\n    sum = 0\n    for j in 0..my_matrix.length-1\n      sum += my_matrix[j][i]\n    end\n    if sum != column_sum\n      return false\n    end\n  end\n  # check if the sum of each diagonal is equal\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  for i in 0..my_matrix.length-1\n    sum = 0\n    sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if sum != diagonal_sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #     1  2  3\n  #     4  5  6\n  #     7  8  9\n  #     is a magic square, because:\n  #     1 + 2 + 3 = 6 = 4 + 5 + 6 = 7 + 8 + 9\n  #     1 + 4 + 7 = 2 + 5 + 8 = 3 + 6 + 9\n  #     1 + 5 + 9 = 3 + 5 + 7\n  #     (The diagonal from top left to bottom right is not counted.)\n  # Example:\n  #     1  2  3  4\n  #     5  6  7  8\n  #     9 10 11 12\n  #     13 14 15 16\n  #     is not a magic square, because:\n  #     1 + 2 + 3 + 4 = 10 != 5 + 6 + 7 + 8 = 26\n  #     1 + 5 + 9 + 13 = 28 != 2 + 6 + 10 + 14 = 32\n  #     1 + 6 + 11 + 16 = 34 != 3 + 7 + 11 + 15 = 36\n  #     1 + 7 + 11 + 13 = 32 != 4 + 8 + 12 + 16 = 40\n  #     1 + 8 + 12 + 13 = 34 != 3 + 6 + 9 + 12 = 30\n  #     1 + 9 + 11 + 13 = 34 != 2 + 5 + 8 + 11 = 26\n  #     1 + 10 + 11 + 12 = 34 != 4 + 7 + 10 + 13 = 34\n  #     1 + 5 + 10 + 15 = 31 != 3 + 6 + 9 + 12 = 30\n  #     1 + 6 + 9 + 14 = 30 != 2 + 5 + 8 + 11 = 26\n  #     1 + 7 + 10 + 13 = 31 != 4 + 8 + 12 + 16 = 40\n  #     1 + 8 + 11 + 12 = 32 != 3 + 7 + 11 + 15 = 36\n  #     1 + 9 + 10 + 11 = 31 != 2 + 6 + 10 + 14 = 32\n",
    "  # First, we need to make sure that the matrix is square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use a helper function to calculate the sum of each row/column/diagonal.\n  # Hint: you can use .reduce(:+) to sum an array.\n  # Hint: don't forget that the matrix might not be square.\n  # Hint: you can compare arrays with the == operator.\n  # Hint: use .all? to test that every element in an array meets a certain condition.\n  # Hint: you can rotate a matrix with .transpose and/or .reverse.\n  # Hint: you can iterate through a matrix with .each.\n  # Hint: you can flatten a matrix with .flatten.\n  # Hint: you can get the size of a matrix with .size.\n  # Hint: you can get the first element of an array with [0].\n  # Hint: you can get the last element of an array with [-1].\n  # Hint: you can get the first row of a matrix with matrix[0]\n  # Hint: you can get the last row of a matrix with matrix[-1]\n  # Hint: you can get the first column of a matrix with matrix.transpose[0]\n  # Hint: you can get the last column of a matrix with matrix.transpose[-1]\n  # Hint: you can get the first diagonal of a matrix with (0...matrix.size).collect {|i| matrix[i][i]}\n  # Hint: you can get the second diagonal of a matrix with (0...matrix.size).collect {|i| matrix[i][matrix.size-i-1]}\nend",
    "  # TODO\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # Note 2: remember that `all?` will stop iterating as soon as it returns false.\n  # So if you have a matrix with non-unique elements, you may find that `all?`\n  # returns true for some tests even if the matrix is not a magic square...\n  # (What should you do in this case?)\nend",
    "  # TODO: return true/false\n  # 1. check if all rows and columns have the same sum\n  # 2. check if the diagonals have the same sum\n  # 3. check if the matrix is square\n  # 4. check if the numbers in the matrix are consecutive\n  # 5. check if the numbers in the matrix are unique\n  # 6. check if the numbers in the matrix are positive\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?` here.\n  # Note 2: you can use `transpose` to transpose a matrix.\n  # Note 3: you can use `map` to apply a function to every element of a matrix.\n  # Note 4: you can use `flatten` to flatten a matrix.\n  # Note 5: you can use `uniq` to remove duplicate elements from an array.\n  # Note 6: you can use `include?` to check if an array contains a value.\n  # Note 7: you can use `max` and `min` to get the maximum and minimum value of an array.\n  # Note 8: you can use `reduce` to combine all elements of an array.\n  # Note 9: you can use `zip` to combine two arrays.\n  # Note 10: you can use `count` to count the number of elements in an array.\n  # Note 11: you can use `each_with_index` to iterate over an array with an index.\n  # Note 12: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 13: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 14: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 15: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 16: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 17: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 18: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 19: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 20: you can use `each_with_index` to iterate over a matrix with an index.\n  # Note 21: you can use `each_with_index` to iterate over a matrix with",
    "  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |num|\n    sum += num\n  end\n  # Check that all rows have the same sum\n  my_matrix.each do |row|\n    row_sum = 0\n    row.each do |num|\n      row_sum += num\n    end\n    if row_sum != sum\n      return false\n    end\n  end\n  # Check that all columns have the same sum\n  for i in 0..my_matrix.length-1\n    col_sum = 0\n    my_matrix.each do |row|\n      col_sum += row[i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Check that the diagonals have the same sum\n  diag_sum = 0\n  for i in 0..my_matrix.length-1\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  for i in 0..my_matrix.length-1\n    diag_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  # If all tests pass, return true\n  return true\nend",
    "  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n  # TODO: return true/false\n ",
    "  # Check if the matrix is a square matrix.\n  if my_matrix.length != my_matrix[0].length\n    puts \"The matrix is not a square matrix.\"\n    return false\n  end",
    "  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Test if all rows have the same sum\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == sum\n  end\n  # Test if all columns have the same sum\n  (0...my_matrix.length).each do |i|\n    column_sum = 0\n    my_matrix.each do |row|\n      column_sum += row[i]\n    end\n    return false unless column_sum == sum\n  end\n  # Test if the diagonals have the same sum\n  diagonal_sum = 0\n  (0...my_matrix.length).each do |i|\n    diagonal_sum += my_matrix[i][i]\n  end\n  return false unless diagonal_sum == sum\n  diagonal_sum = 0\n  (0...my_matrix.length).each do |i|\n    diagonal_sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  return false unless diagonal_sum == sum\n  # If all tests pass, return true\n  true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  sum = 0\n  sum_diag_1 = 0\n  sum_diag_2 = 0\n  sum_col = 0\n  sum_row = 0\n  n = my_matrix.length\n  for i in 0..n-1\n    sum += my_matrix[0][i]\n  end\n  for i in 0..n-1\n    for j in 0..n-1\n      sum_diag_1 += my_matrix[i][i]\n      sum_diag_2 += my_matrix[i][n-1-i]\n      sum_col += my_matrix[j][i]\n      sum_row += my_matrix[i][j]\n    end\n    if sum_diag_1 != sum || sum_diag_2 != sum || sum_col != sum || sum_row != sum\n      return false\n    end\n    sum_diag_1 = 0\n    sum_diag_2 = 0\n    sum_col = 0\n    sum_row = 0\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use a helper function to calculate the sum of each row/column/diagonal.\n  # Hint: you can use .transpose to easily calculate the columns of a matrix.\n  # Hint: you can use diagonal_sum_test(my_matrix) to test if the diagonals are equal.\n  # Hint: you can use .each_with_index to iterate through both the rows and columns of a matrix.\n  # Hint: you can use .map to create a new array from an existing one.\n  # Hint: you can use .all? to test if all elements in an array are true.\n  # Hint: you can use .uniq to remove duplicate elements from an array.\n  # Hint: you can use .count to count the number of elements in an array.\n  # Hint: you can use .empty? to test if an array is empty.\n  # Hint: you can use .nil? to test if an object is nil.\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining equality.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  # You may not use any built-in methods for determining the sum of a collection of numbers.\n  #",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix of integers where the sum of the rows,\n  # columns and diagonals are all equal.\n  #\n  # For example, this is a magic square:\n  # [[8, 1, 6],\n  #  [3, 5, 7],\n  #  [4, 9, 2]]\n  #\n  # This is not a magic square:\n  # [[1, 2, 3],\n  #  [4, 5, 6],\n  #  [7, 8, 9]]\n  #\n  # Hint: use the `sum` method.\n  # Hint: use the `all?` method.\n  # Hint: use the `==` operator.\n  # Hint: use the `transpose` method.\n  # Hint: use the `diagonal` method.\n  # Hint: use the `reverse` method.\n  # Hint: use the `map` method.\n  # Hint: use the `reduce` method.\n  # Hint: use the `inject` method.\n  # Hint: use the `*` operator.\n  # Hint: use the `+` operator.\n  # Hint: use the `-` operator.\n  # Hint: use the `/` operator.\n  # Hint: use the `%` operator.\n  # Hint: use the `**` operator.\n  # Hint: use the `<` operator.\n  # Hint: use the `>` operator.\n  # Hint: use the `<=` operator.\n  # Hint: use the `>=` operator.\n  # Hint: use the `!=` operator.\n  # Hint: use the `&&` operator.\n  # Hint: use the `||` operator.\n  # Hint: use the `!` operator.\n  # Hint: use the `[]` operator.\n  # Hint: use the `[]=` operator.\n  # Hint: use the `<<` operator.\n  # Hint: use the `[]` method.\n  # Hint:",
    "  # First, we need to check if the matrix is square.\n  # If it's not square, it can't be a magic square.\n  if !square_test(my_matrix)\n    return false\n  end\n  # Now we need to check if the sum of each row, column, and diagonal is the same.\n  # We'll start with the rows.\n  # We'll use a variable to keep track of the sum of the first row.\n  # We'll use this to compare against the sum of the other rows.\n  first_row_sum = 0\n  my_matrix[0].each do |element|\n    first_row_sum += element\n  end\n  # Now we'll check the other rows.\n  # We'll use a variable to keep track of the index of the row we're checking.\n  row_index = 1\n  while row_index < my_matrix.length\n    # We'll use a variable to keep track of the sum of the current row.\n    row_sum = 0\n    my_matrix[row_index].each do |element|\n      row_sum += element\n    end\n    # Now we'll compare the sum of the current row to the sum of the first row.\n    if row_sum != first_row_sum\n      return false\n    end\n    # We'll increment the row index.\n    row_index += 1\n  end\n  # Now we'll check the columns.\n  # We'll use a variable to keep track of the index of the column we're checking.\n  column_index = 0\n  while column_index < my_matrix[0].length\n    # We'll use a variable to keep track of the sum of the current column.\n    column_sum = 0\n    # We'll use a variable to keep track of the index of the row we're checking.\n    row_index = 0\n    while row_index < my_matrix.length\n      column_sum += my_matrix[row_index][column_index]\n      row_index += 1\n    end\n    # Now we'll compare the sum of the current column to the sum of the first row.\n    if column_sum != first_row_sum\n      return false\n    end\n    #",
    "  # Check for square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is equal to the sum of each column\n  # check if the sum of each diagonal is equal to the sum of each column\n  sum = my_matrix[0].reduce(:+)\n  for i in 0...my_matrix.length\n    if my_matrix[i].reduce(:+) != sum\n      return false\n    end\n    if my_matrix.transpose[i].reduce(:+) != sum\n      return false\n    end\n  end\n  if my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) != sum\n    return false\n  end\n  if my_matrix.map.with_index { |row, i| row[my_matrix.length - 1 - i] }.reduce(:+) != sum\n    return false\n  end\n  return true\nend",
    "  # Check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square\n  # Calculate the sum of the first row\n  sum = 0\n  my_matrix[0].each do |i|\n    sum += i\n  end\n  # Check if the sum of the other rows is the same\n  for i in 1..(my_matrix.length - 1)\n    sum_row = 0\n    my_matrix[i].each do |j|\n      sum_row += j\n    end\n    if sum_row != sum\n      return false\n    end\n  end\n  # Check if the sum of the columns is the same\n  for i in 0..(my_matrix.length - 1)\n    sum_col = 0\n    for j in 0..(my_matrix.length - 1)\n      sum_col += my_matrix[j][i]\n    end\n    if sum_col != sum\n      return false\n    end\n  end\n  # Check if the sum of the diagonals is the same\n  sum_diag1 = 0\n  sum_diag2 = 0\n  for i in 0..(my_matrix.length - 1)\n    sum_diag1 += my_matrix[i][i]\n    sum_diag2 += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if sum_diag1 != sum || sum_diag2 != sum\n    return false\n  end\n  # If all the tests are passed, return true\n  return true\nend",
    "  # Check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # Check if the matrix is a magic square\n  # First, check the sum of each row\n  sum = my_matrix[0].inject(:+)\n  for i in 1..my_matrix.length-1\n    if my_matrix[i].inject(:+) != sum\n      return false\n    end\n  end\n  # Then, check the sum of each column\n  for i in 0..my_matrix.length-1\n    col_sum = 0\n    for j in 0..my_matrix.length-1\n      col_sum += my_matrix[j][i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # Finally, check the sum of the two diagonals\n  diag_sum = 0\n  for i in 0..my_matrix.length-1\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  for i in 0..my_matrix.length-1\n    diag_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  sum = 0\n  sum = my_matrix[0].inject(:+)\n  for i in 0..my_matrix.length-1\n    if sum != my_matrix[i].inject(:+)\n      return false\n    end\n  end\n  for i in 0..my_matrix.length-1\n    sum_col = 0\n    for j in 0..my_matrix.length-1\n      sum_col += my_matrix[j][i]\n    end\n    if sum != sum_col\n      return false\n    end\n  end\n  sum_diag = 0\n  for i in 0..my_matrix.length-1\n    sum_diag += my_matrix[i][i]\n  end\n  if sum != sum_diag\n    return false\n  end\n  sum_diag = 0\n  for i in 0..my_matrix.length-1\n    sum_diag += my_matrix[i][my_matrix.length-1-i]\n  end\n  if sum != sum_diag\n    return false\n  end\n  return true\nend",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if all rows have the same sum\n  sum = my_matrix[0].sum\n  my_matrix.each do |row|\n    if row.sum != sum\n      return false\n    end\n  end\n  # check if all columns have the same sum\n  for i in 0...my_matrix.length\n    col_sum = 0\n    for j in 0...my_matrix.length\n      col_sum += my_matrix[j][i]\n    end\n    if col_sum != sum\n      return false\n    end\n  end\n  # check if the two diagonals have the same sum\n  diag_sum = 0\n  for i in 0...my_matrix.length\n    diag_sum += my_matrix[i][i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  diag_sum = 0\n  for i in 0...my_matrix.length\n    diag_sum += my_matrix[i][my_matrix.length - 1 - i]\n  end\n  if diag_sum != sum\n    return false\n  end\n  return true\nend",
    "  # check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is equal to the sum of each column\n  # check if the sum of each diagonal is equal to the sum of each column\n  # check if the sum of each diagonal is equal to the sum of each row\n  sum = my_matrix[0].sum\n  my_matrix.each do |row|\n    if row.sum != sum\n      return false\n    end\n  end\n  my_matrix.transpose.each do |column|\n    if column.sum != sum\n      return false\n    end\n  end\n  diagonal_1 = 0\n  diagonal_2 = 0\n  my_matrix.each_with_index do |row, i|\n    diagonal_1 += row[i]\n    diagonal_2 += row[my_matrix.length - i - 1]\n  end\n  if diagonal_1 != sum || diagonal_2 != sum\n    return false\n  end\n  return true\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions in Ruby.\n  # Your method should return a boolean.\n  # Hint: You can represent a matrix as an array of arrays.\n  # For example, a matrix with 2 rows and 3 columns can be represented as follows:\n  # matrix = [[1, 2, 3], [4, 5, 6]]\n  # matrix[0][0] # => 1\n  # matrix[0][1] # => 2\n  # matrix[0][2] # => 3\n  # matrix[1][0] # => 4\n  # matrix[1][1] # => 5\n  # matrix[1][2] # => 6\n  # matrix[row][column]\n  #\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions in Ruby.\n  # Your method should return a boolean.\n  # Hint: You can represent a matrix as an array of arrays.\n  # For example, a matrix with 2 rows and 3 columns can be represented as follows:\n  # matrix = [[1, 2, 3], [4, 5, 6]]\n  # matrix[0][0] # => 1\n  # matrix[0][1] # => 2\n  # matrix[0][2] # => 3\n  # matrix[1][0] # => 4\n  # matrix[1][1] # => 5\n  # matrix[1][2] # => 6\n  # matrix[row][column]\n  #\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions in Ruby.\n  # Your method should return a boolean.\n  # Hint: You can represent a matrix as an array of arrays.\n  # For example, a matrix with 2 rows and 3 columns can be represented as follows:\n  # matrix = [[1, 2, 3], [4, 5, 6]]\n  # matrix[0][",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # calculate the sum of each row\n  row_sums = []\n  my_matrix.each do |row|\n    row_sums << row.reduce(:+)\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row,\n  # every column, and both diagonals is the same.\n  # (Magic Square: https://en.wikipedia.org/wiki/Magic_square)\n  #\n  # Example:\n  # [8, 1, 6]\n  # [3, 5, 7]\n  # [4, 9, 2]\n  #\n  # This matrix is magic because every row, every column, and both diagonals sum to 15.\n  # (8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15,\n  #  8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15,\n  #  8 + 5 + 2 = 15, 6 + 5 + 4 = 15)\n  #\n  # Hint: Use the `sum_array` function you wrote earlier.\n  # Hint: You'll need to use Array#transpose to get the columns of a matrix.\n  # Hint: You'll need to use Array#reverse to reverse the order of a row or column.\n  # Hint: You'll need to use Enumerable#all? to test that every element in an array meets a condition.\n  # Hint: You'll need to use Enumerable#each_with_index to get the index of an element in an array.\n  # Hint: You'll need to use Integer#== to test that two integers are equal.\n  # Hint: You'll need to use Array#sum to sum the elements in an array.\n  # Hint: You'll need to use Array#map to transform the elements in an array.\n  # Hint: You'll need to use Array#uniq to remove duplicate elements from an array.\n  # Hint: You'll need to use Array#length to get the number of elements in an array.\n  # Hint: You'll need to use Array#sort to sort the elements in an array.\n  # Hint: You'll need to use Array#first to get the first element in an array.\n  # Hint: You'll need to use Array#last",
    "  # TODO: Return whether the matrix is a magic square or not\n  sum = 0\n  sum_array = []\n  my_matrix.each do |row|\n    sum = row.sum\n    sum_array << sum\n  end\n  sum_array.uniq.length == 1\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are all equal.\n  # The sum of each row, column, and diagonal should all be equal to the same number.\n  # The numbers in the matrix are all distinct.\n  # The matrix is square.\n  # The matrix is n x n (where n is the number of rows/columns).\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive numbers starting from 1.\n  # The matrix is filled with consecutive",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square.\n  #\n  # Hint: you may want to use the `sum` method.\n  # Hint: you may want to use the `all?` method.\n  # Hint: you may want to use the `diagonal` method.\n  # Hint: you may want to use the `transpose` method.\n  # Hint: you may want to use the `map` method.\n  # Hint: you may want to use the `reduce` method.\n  # Hint: you may want to use the `==` operator.\n  # Hint: you may want to use the `[]` operator.\n  # Hint: you may want to use the `size` method.\n  # Hint: you may want to use the `length` method.\n  # Hint: you may want to use the `first` method.\n  # Hint: you may want to use the `last` method.\n  # Hint: you may want to use the `each` method.\n  # Hint: you may want to use the `each_with_index` method.\n  # Hint: you may want to use the `each_with_object` method.\n  # Hint: you may want to use the `each_with_object` method.\n  # Hint: you may want to use the `inject` method.\n  # Hint: you may want to use the `inject` method.\n  # Hint: you may want to use the `inject` method.\n  # Hint: you may want to use the `inject` method.\n  # Hint: you may want to use the `inject` method.\n  # Hint: you may want to use the `inject` method.\n  # Hint:",
    "  # Check if the matrix is a square matrix\n  if my_matrix.size != my_matrix[0].size\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sums of the rows, columns, and diagonals are equal.\n  # The sum of each row and column should be 15.\n  # The sum of each diagonal should be 15.\n  # The sum of the elements in the main diagonal should be equal to the sum of the elements in the opposite diagonal.\n  # The elements of the matrix are distinct.\n  # The elements of the matrix are integers.\n  # The elements of the matrix are between 1 and 9.\n  # The matrix is a square matrix.\n  # The matrix is a 3x3 matrix.\n  # The matrix is a 2D array.\n  # The matrix is a nested array.\n  # The matrix is a nested array of integers.\n  # The matrix is a nested array of integers between 1 and 9.\n  # The matrix is a nested array of integers between 1 and 9 and the sum of each row and column should be 15.\n  # The matrix is a nested array of integers between 1 and 9 and the sum of each row and column should be 15 and the sum of each diagonal should be 15.\n  # The matrix is a nested array of integers between 1 and 9 and the sum of each row and column should be 15 and the sum of each diagonal should be 15 and the sum of the elements in the main diagonal should be equal to the sum of the elements in the opposite diagonal.\n  # The matrix is a nested array of integers between 1 and 9 and the sum of each row and column should be 15 and the sum of each diagonal should be 15 and the sum of the elements in the main diagonal should be equal to the sum of the elements in the opposite diagonal and the elements of the matrix are distinct.\n  # The matrix is a nested array of integers between 1 and 9 and the sum of each row and column should be 15 and the sum of each diagonal should be 15 and the sum of the elements in the main diagonal should be equal to the sum of the elements in the opposite diagonal and the elements of the matrix are distinct and the matrix is a square matrix.\n  # The matrix is a nested array of integers between 1 and 9 and the sum of each row and column should be 15 and the sum of each diagonal should be 15 and the sum of the elements in the",
    "  magic_square = true\n  # Check the sum of each row\n  my_matrix.each do |row|\n    if row.reduce(:+) != 15\n      magic_square = false\n    end\n  end\n  # Check the sum of each column\n  my_matrix.transpose.each do |column|\n    if column.reduce(:+) != 15\n      magic_square = false\n    end\n  end\n  # Check the sum of the diagonals\n  diagonal_1 = [my_matrix[0][0], my_matrix[1][1], my_matrix[2][2]]\n  diagonal_2 = [my_matrix[0][2], my_matrix[1][1], my_matrix[2][0]]\n  if diagonal_1.reduce(:+) != 15 || diagonal_2.reduce(:+) != 15\n    magic_square = false\n  end\n  return magic_square\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column, and diagonal are equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in sum functions.\n  # You may not use any of the built-in sort functions.\n  # You may not use any of the built-in enumerable functions.\n  # You may not use any of the built-in hash functions.\n  # You may not use any of the built-in range functions.\n  # You may not use any of the built-in string functions.\n  # You may not use any of the built-in symbol functions.\n  # You may not use any of the built-in time functions.\n  # You may not use any of the built-in math functions.\n  # You may not use any of the built-in file functions.\n  # You may not use any of the built-in exception functions.\n  # You may not use any of the built-in enumerable functions.\n  # You may not use any of the built-in enumerator functions.\n  # You may not use any of the built-in thread functions.\n  # You may not use any of the built-in thread group functions.\n  # You may not use any of the built-in fiber functions.\n  # You may not use any of the built-in process functions.\n  # You may not use any of the built-in dir functions.\n  # You may not use any of the built-in file test functions.\n  # You may not use any of the built-in io functions.\n  # You may not use any of the built-in socket functions.\n  # You may not use any of the built-in gc functions.\n  # You may not use any of the built-in object space functions.\n  # You may not use any of the built-in marshal functions.\n  # You may not use any of the built-in struct functions.\n  # You may not use any of the built-in random functions.\n  # You may not use any of the built-in complex functions",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any of the built-in `sum` methods.\n  # You may not use any of the built-in `all?` methods.\n  # You may not use any of the built-in `select` methods.\n  # You may not use any of the built-in `map` methods.\n  # You may not use any of the built-in `reduce` methods.\n  # You may not use any of the built-in `find` methods.\n  # You may not use any of the built-in `detect` methods.\n  # You may not use any of the built-in `flatten` methods.\n  # You may not use any of the built-in `uniq` methods.\n  # You may not use any of the built-in `zip` methods.\n  # You may not use any of the built-in `transpose` methods.\n  # You may not use any of the built-in `product` methods.\n  # You may not use any of the built-in `combination` methods.\n  # You may not use any of the built-in `permutation` methods.\n  # You may not use any of the built-in `cycle` methods.\n  # You may not use any of the built-in `chunk` methods.\n  # You may not use any of the built-in `slice_before` methods.\n  # You may not use any of the built-in `each_cons` methods.\n  # You may not use any of the built-in `each_slice` methods.\n  # You may not use any of the built-in `partition` methods.\n  # You may not use any of the built-in `group_by` methods.\n  # You may not use any of the built-in `first` methods.\n  # You may not use any of the built-in `all` methods.\n  # You may",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Hint: use the `sum` and `all?` methods.\n  # Hint: you may need a nested array comprehension.\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for a 3x3 matrix.\n  # Then, re-implement the method for n x n matrices.\n  # (Note: you shouldn't need multiple `if` statements at this point.)\n  # If you're stuck, try first implementing the method for",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and `all?`\n  # Note: you can use `sum` and",
    "  # check if matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end"
  ]
}