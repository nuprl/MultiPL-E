{
  "name": "mbpp_129_magic_square_test",
  "language": "rb",
  "prompt": "# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_magic_square_test\n    candidate = method(:magic_square_test)\n    assert_equal(true, candidate.call([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))\n    assert_equal(true, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))\n    assert_equal(false, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # You may assume that the matrix only contains distinct integers between 1 and n^2\n  # n is the size of the matrix\n  n = my_matrix.size\n  sum = n * (n**2 + 1) / 2\n  # Check rows\n  my_matrix.each do |row|\n    return false unless row.reduce(:+) == sum\n  end\n  # Check columns\n  (0...n).each do |i|\n    sum_column = 0\n    (0...n).each do |j|\n      sum_column += my_matrix[j][i]\n    end\n    return false unless sum_column == sum\n  end\n  # Check diagonals\n  sum_diagonal_1 = 0\n  sum_diagonal_2 = 0\n  (0...n).each do |i|\n    sum_diagonal_1 += my_matrix[i][i]\n    sum_diagonal_2 += my_matrix[i][n - 1 - i]\n  end\n  return false unless sum_diagonal_1 == sum && sum_diagonal_2 == sum\n  true\nend",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check if the matrix is a magic square\n  # check if the sum of each row is equal\n  row_sum = my_matrix[0].reduce(:+)\n  for i in 1..my_matrix.length-1\n    if row_sum != my_matrix[i].reduce(:+)\n      return false\n    end\n  end\n  # check if the sum of each column is equal\n  for i in 0..my_matrix.length-1\n    column_sum = 0\n    for j in 0..my_matrix.length-1\n      column_sum += my_matrix[j][i]\n    end\n    if column_sum != row_sum\n      return false\n    end\n  end\n  # check if the sum of each diagonal is equal\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  diagonal_sum = 0\n  for i in 0..my_matrix.length-1\n    diagonal_sum += my_matrix[i][my_matrix.length-1-i]\n  end\n  if diagonal_sum != row_sum\n    return false\n  end\n  return true\nend",
    "  # Get the length of the matrix\n  n = my_matrix.length\n  # Get the sum of the first row\n  sum = my_matrix[0].reduce(:+)\n  # Check if the sum of the first row is equal to the sum of the other rows\n  if my_matrix.all? { |row| row.reduce(:+) == sum }\n    # Check if the sum of the first row is equal to the sum of the columns\n    if (0...n).all? { |i| my_matrix.map { |row| row[i] }.reduce(:+) == sum }\n      # Check if the sum of the first row is equal to the sum of the diagonals\n      if (0...n).all? { |i| my_matrix[i][i] + my_matrix[i][n - i - 1] == sum }\n        return true\n      end\n    end\n  end\n  return false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (More info: https://en.wikipedia.org/wiki/Magic_square)\n  # Example:\n  #   magic_square_test([[1,2,3],\n  #                      [4,5,6],\n  #                      [7,8,9]])\n  # should return false\n  #\n  #   magic_square_test([[4,9,2],\n  #                      [3,5,7],\n  #                      [8,1,6]])\n  # should return true\n  #\n  # Hint: You can represent a matrix as an array of arrays.\n  # For example, the matrix above can be represented as:\n  #   [\n  #     [4,9,2],\n  #     [3,5,7],\n  #     [8,1,6]\n  #   ]\n  #\n  # Hint: You can use the transpose method to get the columns of a matrix.\n  # For example, the transpose of the matrix above is:\n  #   [\n  #     [4,3,8],\n  #     [9,5,1],\n  #     [2,7,6]\n  #   ]\n  #\n  # Hint: You can use the flatten method to get a one-dimensional array of a matrix.\n  # For example, the flatten of the matrix above is:\n  #   [4,3,8,9,5,1,2,7,6]\n  #\n  # Hint: You can use the sum method to get the sum of an array.\n  # For example, the sum of [1,2,3] is 6.\n  #\n  # Hint: You can use the uniq method to get the unique elements of an array.\n  # For example, the unique elements of [1,2,2,3,3,3] are [1,2,3].\n  #\n  # Hint: You can use the all? method to check if all elements of an",
    "  # TODO\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a matrix where the sum of each row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there throughout this course.)\n  # You may assume that the matrix is square (i.e., the number of rows is the same as the number of columns).\n  # You may NOT use any of the functions we've written in class.\n  # You may NOT use any of the methods on the matrix class.\n  # You may NOT use any of the methods on the array class.\n  # You may NOT use any of the methods on the enumerable module.\n  # You may NOT use any of the methods on the integer class.\n  # You may NOT use any of the methods on the string class.\n  # You may NOT use any of the methods on the hash class.\n  # You may NOT use any of the methods on the range class.\n  # You may NOT use any of the methods on the set class.\n  # You may NOT use any of the methods on the float class.\n  # You may NOT use any of the methods on the complex class.\n  # You may NOT use any of the methods on the rational class.\n  # You may NOT use any of the methods on the numeric class.\n  # You may NOT use any of the methods on the math module.\n  # You may NOT use any of the methods on the cmath module.\n  # You may NOT use any of the methods on the file class.\n  # You may NOT use any of the methods on the dir class.\n  # You may NOT use any of the methods on the time class.\n  # You may NOT use any of the methods on the date class.\n  # You may NOT use any of the methods on the datetime class.\n  # You may NOT use any of the methods on the socket class.\n  # You may NOT use any of the methods on the thread class.\n  # You may NOT use any of the methods on the threadgroup class.\n  # You may NOT use any of the methods on the mutex class.\n  # You may NOT use any of the methods on the conditionvariable class.\n  # You may NOT use any of the methods on the queue class.\n",
    "  # Write your code here\n  return false\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for calculating the sum of a row, column or diagonal.\n  # You may not use any built-in methods for determining the length of a row, column or diagonal.\n  # You may not use any built-in methods for determining the size of the matrix.\n  # You may not use any built-in methods for determining whether a matrix is a square.\n  # You may not use any built-in methods for determining whether a matrix is a rectangle.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or a kite.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or a kite or a quadrilateral.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or a kite or a quadrilateral or a polygon.\n  # You may not use any built-in methods for determining whether a matrix is a square or a rectangle or a parallelogram or a trapezoid or a rhombus or",
    "  # TODO\nend",
    "  # check if the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix where the sum of each row, column and diagonal is equal.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # Hint: You can use the same logic as the Sudoku solver!\n  # Note: The matrix can be any size. It does not have to be a square.\n  # Note: If the matrix is not square, return nil.\n  # Note: If the matrix is nil, return nil.\n  return nil if my_matrix.nil?\n  return nil if my_matrix.length != my_matrix[0].length\n  return nil if my_matrix.length == 0\n  sum = my_matrix[0].inject(:+)\n  my_matrix.each do |row|\n    return false if row.inject(:+) != sum\n  end\n  my_matrix.transpose.each do |col|\n    return false if col.inject(:+) != sum\n  end\n  diag1 = 0\n  diag2 = 0\n  (0..my_matrix.length-1).each do |i|\n    diag1 += my_matrix[i][i]\n    diag2 += my_matrix[i][my_matrix.length-1-i]\n  end\n  return false if diag1 != sum || diag2 != sum\n  true\nend",
    "  # Check if the matrix is a square matrix\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Check if the matrix is square.\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # check if the matrix is a square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end",
    "  # Write your code here\nend",
    "  # TODO: return true/false depending on whether the matrix is a magic square.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # (Magic squares have appeared here and there in recreational mathematics.)\n  # Example:\n  #   [8, 1, 6]\n  #   [3, 5, 7]\n  #   [4, 9, 2]\n  # is a magic square.\n  #\n  # Hint: you may want to use Array#transpose\n  # Hint: you may want to use Array#each_with_index\n  # Hint: you may want to use Array#sum\n  # Hint: you may want to use Array#map\n  # Hint: you may want to use Array#all?\n  # Hint: you may want to use Array#flatten\n  # Hint: you may want to use Array#include?\n  # Hint: you may want to use Array#rotate\n  # Hint: you may want to use Array#zip\n  # Hint: you may want to use Array#uniq\n  # Hint: you may want to use Array#sort\n  # Hint: you may want to use Array#first\n  # Hint: you may want to use Array#last\n  # Hint: you may want to use Array#count\n  # Hint: you may want to use Array#all?\n  # Hint: you may want to use Array#each\n  # Hint: you may want to use Array#inject\n  # Hint: you may want to use Array#max\n  # Hint: you may want to use Array#min\n  # Hint: you may want to use Array#reduce\n  # Hint: you may want to use Array#select\n  # Hint: you may want to use Array#reject\n  # Hint: you may want to use Array#partition\n  # Hint: you may want to use Array#group_by\n  # Hint: you may want to use Array#each_with_object\n  # Hint: you may want to use Array#each_with_index\n  # Hint: you may want to use Array#",
    "  # TODO: return true/false depending on whether the matrix is a magic square or not.\n  # A magic square is a square matrix in which the sum of every row, column, and diagonal is the same.\n  # You may assume that the matrix contains only integers.\n  # You may not use any of the built-in matrix functions.\n  # You may not use any built-in methods for determining whether a matrix is a magic square.\n  # You may not use any built-in methods for determining the sum of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the length of a row, column, or diagonal.\n  # You may not use any built-in methods for determining the length of a matrix.\n  # You may not use any built-in methods for determining the number of rows, columns, or diagonals in a matrix.\n  # You may not use any built-in methods for determining the number of elements in a matrix.\n  # You may not use any built-in methods for determining whether a matrix is a square matrix.\n  # You may not use any built-in methods for determining whether a matrix is a matrix.\n  # You may not use any built-in methods for determining whether a matrix is a 2D array.\n  # You may not use any built-in methods for determining whether a matrix is an array.\n  # You may not use any built-in methods for determining whether a matrix is an object.\n  # You may not use any built-in methods for determining whether a matrix is a number.\n  # You may not use any built-in methods for determining whether a matrix is a string.\n  # You may not use any built-in methods for determining whether a matrix is a symbol.\n  # You may not use any built-in methods for determining whether a matrix is a boolean.\n  # You may not use any built-in methods for determining whether a matrix is a hash.\n  # You may not use any built-in methods for determining whether a matrix is a range.\n  # You may not use any built-in methods for determining whether a matrix is a proc.\n  # You may not use any built-in methods for determining whether a matrix is a lambda.\n  # You may not use any built-in methods for determining whether a",
    "  # TODO: return true if all rows, columns and diagonals have\n  # the same sum\n  sum_row = my_matrix.map { |row| row.reduce(:+) }\n  sum_col = my_matrix.transpose.map { |col| col.reduce(:+) }\n  sum_diag = [my_matrix.map.with_index { |row, i| row[i] }.reduce(:+),\n              my_matrix.map.with_index { |row, i| row[-i - 1] }.reduce(:+)]\n  sum_row.uniq.length == 1 && sum_col.uniq.length == 1 && sum_diag.uniq.length == 1\nend",
    "  # check that the matrix is square\n  if my_matrix.length != my_matrix[0].length\n    return false\n  end\n  # check that the matrix has an odd number of rows and columns\n  if my_matrix.length % 2 == 0\n    return false\n  end\n  # check that the matrix has a unique set of numbers\n  if my_matrix.flatten.uniq.length != my_matrix.length ** 2\n    return false\n  end\n  # check that the sum of each row is the same\n  if my_matrix.map { |row| row.reduce(:+) }.uniq.length != 1\n    return false\n  end\n  # check that the sum of each column is the same\n  if my_matrix.transpose.map { |row| row.reduce(:+) }.uniq.length != 1\n    return false\n  end\n  # check that the sum of the diagonals is the same\n  if my_matrix.map.with_index { |row, i| row[i] }.reduce(:+) != my_matrix.map.with_index { |row, i| row[-i-1] }.reduce(:+)\n    return false\n  end\n  # if all tests pass, return true\n  return true\nend",
    "  # Calculate the sum of the first row.\n  sum = 0\n  my_matrix[0].each do |value|\n    sum += value\n  end"
  ]
}