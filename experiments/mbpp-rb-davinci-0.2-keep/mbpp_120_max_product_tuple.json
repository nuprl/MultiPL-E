{
  "name": "mbpp_120_max_product_tuple",
  "language": "rb",
  "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_product_tuple\n    candidate = method(:max_product_tuple)\n    assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))\n    assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))\n    assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.map { |tuple| tuple.reduce(:*) }.max\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend",
    "  max = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max\n      max = product\n    end\n  end\n  return max\nend",
    "  list1.map { |x, y| x * y }.max\nend",
    "  list1.map { |x| x[0] * x[1] }.max\nend",
    "  list1.map {|x| x[0] * x[1]}.max\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend",
    "  list1.map {|x,y| (x-y).abs}.max\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  return max_product\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend",
    "  list1.map { |tuple| tuple[0] * tuple[1] }.max\nend",
    "  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      if product > max_product\n        max_product = product\n      end\n    end\n  end\n  max_product\nend",
    "  list1.map { |x| x.inject(:*) }.max\nend",
    "  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    max_product = product if product > max_product\n  end\n  max_product\nend",
    "  list1.map{|x| x[0] * x[1]}.max\nend",
    "  max_product = 0\n  list1.each do |tuple1|\n    list1.each do |tuple2|\n      product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n      max_product = product if product > max_product\n    end\n  end\n  max_product\nend",
    "  max_product = 0\n  list1.each do |tuple|\n    product = tuple[0] * tuple[1]\n    if product > max_product\n      max_product = product\n    end\n  end\n  max_product\nend"
  ]
}