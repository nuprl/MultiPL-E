{
  "name": "mbpp_807_first_odd",
  "language": "rb",
  "prompt": "# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_odd\n    candidate = method(:first_odd)\n    assert_equal(1, candidate.call([1, 3, 5]))\n    assert_equal(1, candidate.call([2, 4, 1, 3]))\n    assert_equal(9, candidate.call([8, 9, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.find { |num| num.odd? }\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.find { |num| num % 2 == 1 }\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    return num if num.odd?\n  end\nend",
    "  nums.find(&:odd?)\nend",
    "  nums.find { |num| num.odd? }\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    return num if num.odd?\n  end\nend",
    "  nums.each do |num|\n    if num.odd?\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    if num % 2 == 1\n      return num\n    end\n  end\nend",
    "  nums.each do |num|\n    return num if num.odd?\n  end\nend",
    "  nums.find(&:odd?)\nend",
    "  nums.each do |num|\n    return num if num.odd?\n  end\nend",
    "  nums.each do |num|\n    if num % 2 != 0\n      return num\n    end\n  end\nend"
  ]
}