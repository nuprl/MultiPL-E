{
  "name": "mbpp_94_index_minimum",
  "language": "rb",
  "prompt": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_minimum\n    candidate = method(:index_minimum)\n    assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))\n    assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))\n    assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Your code here\nend",
    "  test_list.each_with_index.min[1]\nend",
    "  test_list.each_with_index.min[1]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend",
    "  # your code here\nend",
    "  test_list.each_with_index do |tuple, index|\n    if test_list[index][1] == test_list.min_by { |tuple| tuple[1] }[1]\n      return test_list[index][0]\n    end\n  end\nend",
    "  # Your code here\nend",
    "  test_list.each_with_index.min[1]\nend",
    "  # your code here\n  min = test_list[0][1]\n  index = 0\n  test_list.each_with_index do |tuple, i|\n    if tuple[1] < min\n      min = tuple[1]\n      index = i\n    end\n  end\n  test_list[index][0]\nend",
    "  test_list.min_by { |tuple| tuple[1] }[0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend",
    "  test_list.each_with_index.min[1]\nend",
    "  test_list.each_with_index.min[1]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    if tuple[1] < test_list[min_index][1]\n      min_index = index\n    end\n  end\n  test_list[min_index][0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend",
    "  min_index = 0\n  test_list.each_with_index do |tuple, index|\n    min_index = index if tuple[1] < test_list[min_index][1]\n  end\n  test_list[min_index][0]\nend"
  ]
}