{
  "name": "mbpp_407_rearrange_bigger",
  "language": "rb",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, idx|\n    if idx < n.length - 1\n      if n[idx].to_i > n[idx + 1].to_i\n        n[idx], n[idx + 1] = n[idx + 1], n[idx]\n        break\n      end\n    end\n  end\n  n.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpijmdqza4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpijmdqza4.rb:18:in `test_rearrange_bigger'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n  => 18:     assert_equal(21, candidate.call(12))\n     19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006345938 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.58 tests/s, 157.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpd199lwvk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpd199lwvk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008079539 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.77 tests/s, 247.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # n = n.to_s.split('').map(&:to_i)\n  # n.permutation.to_a.map(&:join).map(&:to_i).select { |num| num > n }.min\n  n.to_s.chars.sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpk6gqi6b5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpk6gqi6b5.rb:12:in `test_rearrange_bigger'\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n     11:     assert_equal(21, candidate.call(12))\n  => 12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n     15: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006402719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.18 tests/s, 312.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  i = n_arr.length - 1\n  while i > 0\n    if n_arr[i] > n_arr[i-1]\n      n_arr[i], n_arr[i-1] = n_arr[i-1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp8sptzzdi\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp8sptzzdi.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00635386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.38 tests/s, 314.77 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  n = n.to_s.split('').map(&:to_i)\n  i = n.size - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmp1iap_ubt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp1iap_ubt.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006268289 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.53 tests/s, 319.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array of chars, sort in descending order, join and convert back to integer\n  n.to_s.chars.sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpx7j5ocuj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpx7j5ocuj.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006379876 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.74 tests/s, 313.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the biggest possible\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is bigger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert back to integer and return\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpl4blgz04\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpl4blgz04.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006205337 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n161.15 tests/s, 322.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpqu32wxwl\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqu32wxwl.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006123545 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.30 tests/s, 326.61 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && num < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmps6ytyngk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmps6ytyngk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006141887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.82 tests/s, 325.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpr5tgywb8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpr5tgywb8.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006105903 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.78 tests/s, 327.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Convert the number to an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first digit that is smaller than the digit to its right\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      # Find the smallest digit to the right of the pivot that is greater than the pivot\n      swap_index = i + 1\n      (i + 1).upto(digits.length - 1) do |j|\n        swap_index = j if digits[j] > digits[i] && digits[j] < digits[swap_index]\n      end\n      # Swap the pivot with the smallest digit to its right that is greater than the pivot\n      digits[i], digits[swap_index] = digits[swap_index], digits[i]\n      # Reverse the digits to the right of the pivot\n      digits[i + 1..-1] = digits[i + 1..-1].reverse\n      # Return the number\n      return digits.join.to_i\n    end\n  end\n  # Return -1 if no bigger number exists\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp2vhp_6bt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2vhp_6bt.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00606097 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.99 tests/s, 329.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # convert back to integer and return\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmpwb5rwvp1\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpwb5rwvp1.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006101906 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.88 tests/s, 327.77 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      n[i], n[i-1] = n[i-1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmp3tvssc5w\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3tvssc5w.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006242722 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.19 tests/s, 320.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if i is at the end of the array, then there is no bigger number\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmp7tkq1nki\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7tkq1nki.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006116357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.50 tests/s, 326.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpe2vazbtk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpe2vazbtk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006292893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.91 tests/s, 317.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is not in descending order\n  # find the next largest digit to the right of that digit\n  # swap the two digits\n  # sort the digits to the right of the swapped digits\n  # join the digits together\n  # return the number\n  digits = n.to_s.split('').map(&:to_i)\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  if i == digits.length - 1\n    return -1\n  end\n  j = i + 1\n  while j < digits.length\n    if digits[j] <= digits[i]\n      break\n    end\n    j += 1\n  end\n  j -= 1\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmpb8cko_q5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpb8cko_q5.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006260378 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.73 tests/s, 319.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr.each_with_index do |num2, j|\n      if num2 > num && j > i\n        n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n        return n_arr.join.to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpf89rf4u9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpf89rf4u9.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006352175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.43 tests/s, 314.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmpng5iublk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpng5iublk.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.012329912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.10 tests/s, 81.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && num < n[i+1]\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmp6r1p_jv7\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6r1p_jv7.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009750078 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.56 tests/s, 205.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmp61n114hi\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp61n114hi.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006154614 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.48 tests/s, 324.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpqgyptc00\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqgyptc00.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.013431922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.45 tests/s, 148.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpulksdpkb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpulksdpkb.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007487017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.56 tests/s, 267.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0 && n[i] <= n[i-1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i-1]\n    j -= 1\n  end\n  n[i-1], n[j] = n[j], n[i-1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpeq9lq7lg\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpeq9lq7lg.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008064905 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.99 tests/s, 247.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  permutations = n.to_s.split('').permutation.map(&:join).map(&:to_i)\n  # find the next biggest number\n  permutations.sort.reverse.find { |p| p > n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpp0xymaja\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpp0xymaja.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007462646 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.00 tests/s, 268.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split(\"\").map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      n[i], n[i-1] = n[i-1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmppqudx1h_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppqudx1h_.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007349421 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.07 tests/s, 272.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpmkfi4s_q\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpmkfi4s_q.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007514931 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.07 tests/s, 266.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_str.split('').permutation.map(&:join).map(&:to_i).select { |num| num > n }.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpivf_qqxn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpivf_qqxn.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007257748 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.78 tests/s, 275.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if n_array[index].to_i > n_array[index + 1].to_i\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp5pyw992p\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5pyw992p.rb:18:in `test_rearrange_bigger'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n  => 18:     assert_equal(21, candidate.call(12))\n     19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.007502441 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.29 tests/s, 133.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('')\n  i = digits.size - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpvqw54d0t\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpvqw54d0t.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006786133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.36 tests/s, 294.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit from the right that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is bigger than the pivot\n  # swap the pivot with the smallest digit\n  # sort the digits to the right of the pivot in ascending order\n  # join the digits to form the number\n  digits = n.to_s.split('')\n  pivot = digits.length - 2\n  while pivot >= 0\n    if digits[pivot] < digits[pivot + 1]\n      swap = pivot + 1\n      (pivot + 1..digits.length - 1).each do |i|\n        swap = i if digits[i] < digits[swap] && digits[i] > digits[pivot]\n      end\n      digits[pivot], digits[swap] = digits[swap], digits[pivot]\n      digits[pivot + 1..-1] = digits[pivot + 1..-1].sort\n      return digits.join.to_i\n    end\n    pivot -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmppcj3tq7n\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmppcj3tq7n.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007059068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.66 tests/s, 283.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |digit, index|\n    if index < n_array.length - 1\n      if digit.to_i < n_array[index + 1].to_i\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join.to_i\n      end\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmptax_7y0_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmptax_7y0_.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00716215 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.62 tests/s, 279.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp01purtb6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp01purtb6.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00825085 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.20 tests/s, 242.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.each_with_index do |digit, i|\n    if digits[i + 1] && digits[i + 1] > digit\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp_7najhix\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_7najhix.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007864975 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.15 tests/s, 254.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  # sort them\n  # find the next biggest number\n  # return it\n  # if there is no next biggest number, return -1\n  perms = n.to_s.split('').permutation.to_a.map { |perm| perm.join('').to_i }.sort\n  perms.each_with_index do |perm, i|\n    return perms[i + 1] if perm == n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp5vlwwc80\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5vlwwc80.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007229969 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.31 tests/s, 276.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  return -1 if n.sort.join == n.join\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp46zogmmj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp46zogmmj.rb:16:in `test_rearrange_bigger'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n  => 16:     assert_equal(21, candidate.call(12))\n     17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.007901488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.56 tests/s, 126.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpozz4vfgh\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpozz4vfgh.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007614737 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.32 tests/s, 262.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |d, i| d < digits[i + 1] }[1]\n  # find the smallest digit to the right of the index that is larger than the digit at the index\n  swap_index = digits[index + 1..-1].each_with_index.find { |d, i| d > digits[index] }[1] + index + 1\n  # swap the digits\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # sort the digits to the right of the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # convert to integer\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpy62fgvts\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmpy62fgvts.rb:6:in `<'\n/tmp/tmpy62fgvts.rb:6:in `block in rearrange_bigger'\n/tmp/tmpy62fgvts.rb:6:in `each'\n/tmp/tmpy62fgvts.rb:6:in `each_with_index'\n/tmp/tmpy62fgvts.rb:6:in `each'\n/tmp/tmpy62fgvts.rb:6:in `find'\n/tmp/tmpy62fgvts.rb:6:in `rearrange_bigger'\n/tmp/tmpy62fgvts.rb:21:in `call'\n/tmp/tmpy62fgvts.rb:21:in `test_rearrange_bigger'\n     18:   def test_rearrange_bigger\n     19:     candidate = method(:rearrange_bigger)\n     20:     assert_equal(21, candidate.call(12))\n  => 21:     assert_equal(false, candidate.call(10))\n     22:     assert_equal(120, candidate.call(102))\n     23:   end\n     24: end\n===============================================================================\n\nFinished in 0.001341269 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n745.56 tests/s, 745.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp6nv1oymz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6nv1oymz.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007076259 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.32 tests/s, 282.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i + 1] && n[i + 1] > num\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpv27ec0f5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpv27ec0f5.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006796288 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.14 tests/s, 294.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join('').to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpgjysexdy\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgjysexdy.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006801638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.02 tests/s, 294.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index] < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkehouknx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkehouknx.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008009238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.86 tests/s, 249.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpulksdpkb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpulksdpkb.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007487017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.56 tests/s, 267.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpqway2j7v\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqway2j7v.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007142029 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.02 tests/s, 280.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array of chars\n  # sort array\n  # join array\n  # convert to int\n  n.to_s.chars.sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpcqpd1z9t\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpcqpd1z9t.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.011719992 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n85.32 tests/s, 85.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpj6dg506y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpj6dg506y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006530571 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.13 tests/s, 306.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp5kxlgpu_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5kxlgpu_.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008331116 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.03 tests/s, 240.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.size == 1\n  i = n.size - 1\n  while i > 0 && n[i] <= n[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.size - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpea7bqotk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpea7bqotk.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00707868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.27 tests/s, 282.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp4evo4oad\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp4evo4oad.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007050338 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.84 tests/s, 283.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpvg30a_wf\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpvg30a_wf.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006535978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.00 tests/s, 306.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if n_arr[i].to_i < n_arr[i + 1].to_i\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpf7fuhcni\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpf7fuhcni.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007263543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.67 tests/s, 275.35 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit from the right that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpd1twbslx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpd1twbslx.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.010020615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.79 tests/s, 199.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # If no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # Find the smallest digit to the right of i that is larger than digits[i]\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # Swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # Reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # Return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp72ycp8op\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp72ycp8op.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00723739 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.17 tests/s, 276.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if n_arr[index + 1] && n_arr[index + 1] > num\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpak2no3rt\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpak2no3rt.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.011027454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.68 tests/s, 181.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array, sort, join, convert to int\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp_oaijjbk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_oaijjbk.rb:10:in `test_rearrange_bigger'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n  => 10:     assert_equal(21, candidate.call(12))\n     11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006791534 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.24 tests/s, 147.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Convert the number to an array of digits\n  digits = n.to_s.split(\"\")\n  # Find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # If no such digit exists, the number is already the biggest possible\n  return -1 if i < 0\n  # Find the smallest digit to the right of the pivot that is bigger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # Swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # Reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # Return the number as an integer\n  digits.join(\"\").to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp_ugzgcsr\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_ugzgcsr.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006756014 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.02 tests/s, 296.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is less than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpl0j7kx2_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpl0j7kx2_.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006765501 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.81 tests/s, 295.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "",
      "stderr": "/tmp/tmp71fmj6xv.rb:6: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp71fmj6xv.rb:13: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  n = n.to_s\n  # split string into array of chars\n  n = n.split('')\n  # find the first digit that is smaller than the digit to its right\n  n.each_with_index do |digit, index|\n    if digit < n[index+1]\n      # swap the two digits\n      n[index], n[index+1] = n[index+1], n[index]\n      # return the number\n      return n.join('').to_i\n    end\n  end\n  # if no such digit exists, return -1\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp2l8pjbyd\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of String with nil failed\n/tmp/tmp2l8pjbyd.rb:9:in `<'\n/tmp/tmp2l8pjbyd.rb:9:in `block in rearrange_bigger'\n/tmp/tmp2l8pjbyd.rb:8:in `each'\n/tmp/tmp2l8pjbyd.rb:8:in `each_with_index'\n/tmp/tmp2l8pjbyd.rb:8:in `rearrange_bigger'\n/tmp/tmp2l8pjbyd.rb:24:in `call'\n/tmp/tmp2l8pjbyd.rb:24:in `test_rearrange_bigger'\n     21:   def test_rearrange_bigger\n     22:     candidate = method(:rearrange_bigger)\n     23:     assert_equal(21, candidate.call(12))\n  => 24:     assert_equal(false, candidate.call(10))\n     25:     assert_equal(120, candidate.call(102))\n     26:   end\n     27: end\n===============================================================================\n\nFinished in 0.00130972 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n763.52 tests/s, 763.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpr5tgywb8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpr5tgywb8.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006105903 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.78 tests/s, 327.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp7paalp63\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7paalp63.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006667322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.99 tests/s, 299.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmpng5iublk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpng5iublk.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.012329912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.10 tests/s, 81.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first number that is smaller than the number to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # If we found such a number, swap it with the smallest number to its right that is bigger than it\n  if i >= 0\n    j = digits.length - 1\n    while j >= 0 && digits[j] <= digits[i]\n      j -= 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n  end\n  # Reverse the numbers to the right of the number we swapped\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # Return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp5dlw9o4k\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5dlw9o4k.rb:28:in `test_rearrange_bigger'\n     25:   def test_rearrange_bigger\n     26:     candidate = method(:rearrange_bigger)\n     27:     assert_equal(21, candidate.call(12))\n  => 28:     assert_equal(false, candidate.call(10))\n     29:     assert_equal(120, candidate.call(102))\n     30:   end\n     31: end\n<false> expected but was\n<1>\n===============================================================================\n\nFinished in 0.00674907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.17 tests/s, 296.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.split('').uniq.length == 1\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0 && n[i] <= n[i - 1]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpfg5hoj7x\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpfg5hoj7x.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007580981 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.91 tests/s, 263.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  # if there is no such digit, then the number is the largest possible\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if the number is the largest possible, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpnt545f9q\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnt545f9q.rb:38:in `test_rearrange_bigger'\n     35:   def test_rearrange_bigger\n     36:     candidate = method(:rearrange_bigger)\n     37:     assert_equal(21, candidate.call(12))\n  => 38:     assert_equal(false, candidate.call(10))\n     39:     assert_equal(120, candidate.call(102))\n     40:   end\n     41: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007799681 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.21 tests/s, 256.42 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.each_with_index do |digit, index|\n    next if index == 0\n    if digit > digits[index - 1]\n      digits[index], digits[index - 1] = digits[index - 1], digits[index]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpnqfc8dov\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnqfc8dov.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007709983 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.70 tests/s, 259.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i < n_arr.length - 1\n      if num < n_arr[i + 1]\n        n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n        return n_arr.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpnl8d4zs4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnl8d4zs4.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007053533 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.77 tests/s, 283.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split string into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp9vdiy11c\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp9vdiy11c.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.007305043 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.89 tests/s, 136.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpulksdpkb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpulksdpkb.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007487017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.56 tests/s, 267.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp70flrxvn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp70flrxvn.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006709281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.05 tests/s, 298.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # if n is a single digit, there is no bigger number\n  return nil if n < 10\n  # convert n to an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit after it\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, there is no bigger number\n  return nil if i == digits.length - 1\n  # find the smallest digit that is bigger than the digit at i\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the digits at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits after i\n  digits[i + 1..-1].sort!\n  # convert the array of digits back to an integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp7oi8codn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7oi8codn.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007434952 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.50 tests/s, 269.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpjl4idovx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjl4idovx.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00751922 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.99 tests/s, 265.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of that digit that is larger than it\n  # swap those digits\n  # reverse the digits to the right of the swapped digits\n  n_arr = n.to_s.split('')\n  i = n_arr.length - 2\n  while i >= 0\n    if n_arr[i] < n_arr[i + 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i < 0\n  j = n_arr.length - 1\n  while j > i\n    if n_arr[j] > n_arr[i]\n      break\n    end\n    j -= 1\n  end\n  n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n  n_arr[i + 1..-1] = n_arr[i + 1..-1].reverse\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpo5lejace\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpo5lejace.rb:32:in `test_rearrange_bigger'\n     29:   def test_rearrange_bigger\n     30:     candidate = method(:rearrange_bigger)\n     31:     assert_equal(21, candidate.call(12))\n  => 32:     assert_equal(false, candidate.call(10))\n     33:     assert_equal(120, candidate.call(102))\n     34:   end\n     35: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006883413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.28 tests/s, 290.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  return -1 if digits.length == 1\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      (digits.length - 1).downto(i + 1) do |j|\n        if digits[j] > digits[i]\n          digits[i], digits[j] = digits[j], digits[i]\n          digits[i + 1..-1] = digits[i + 1..-1].sort\n          return digits.join('').to_i\n        end\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp1220d2lb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp1220d2lb.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006745362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.25 tests/s, 296.50 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpw5lc16l6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpw5lc16l6.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006709023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.05 tests/s, 298.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the digit found above\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found above\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpy23ehg38\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpy23ehg38.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009067215 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.29 tests/s, 220.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpal3393ot\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpal3393ot.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008240607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.35 tests/s, 242.70 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  digits = n.to_s.split('')\n  permutations = digits.permutation.to_a\n  # sort the permutations\n  permutations.sort!\n  # find the index of the given number\n  index = permutations.index(digits)\n  # return the next bigger number\n  return permutations[index + 1].join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpv87uy9rj\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval):\n  NoMethodError: undefined method `join' for nil:NilClass\n  \n    return permutations[index + 1].join.to_i\n                                  ^^^^^\n/tmp/tmpv87uy9rj.rb:11:in `rearrange_bigger'\n/tmp/tmpv87uy9rj.rb:18:in `call'\n/tmp/tmpv87uy9rj.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n===============================================================================\n\nFinished in 0.003023074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n330.79 tests/s, 330.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split(\"\").map(&:to_i)\n  n_array.permutation.to_a.map {|a| a.join.to_i}.sort.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp073h4p6r\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp073h4p6r.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007004982 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.76 tests/s, 285.51 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, idx|\n    if n_array[idx + 1] && n_array[idx + 1].to_i > num.to_i\n      n_array[idx], n_array[idx + 1] = n_array[idx + 1], n_array[idx]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmphrk01hui\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphrk01hui.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007097599 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.89 tests/s, 281.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the digit found above that is greater than the digit found above\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found above\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmprjjix0ha\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmprjjix0ha.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006825419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.51 tests/s, 293.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.permutation.to_a.map { |x| x.join.to_i }.sort.reverse.each do |x|\n    return x if x > n.join.to_i\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpo11y1pxn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpo11y1pxn.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00656849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.24 tests/s, 304.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of i that is greater than digits[i]\n  j = digits.length - 1\n  while digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap digits[i] and digits[j]\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of i\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpjwzs541a\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjwzs541a.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007189959 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.08 tests/s, 278.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp70flrxvn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp70flrxvn.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006709281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.05 tests/s, 298.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    n.each_with_index do |num2, i2|\n      if num.to_i > num2.to_i && i2 > i\n        n[i], n[i2] = n[i2], n[i]\n        return n.join.to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp53hsho_r\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp53hsho_r.rb:18:in `test_rearrange_bigger'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n  => 18:     assert_equal(21, candidate.call(12))\n     19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.008774893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.96 tests/s, 113.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpolz9rjc5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpolz9rjc5.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008267834 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.95 tests/s, 241.90 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # join the digits back into a number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpq7eq79nm\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpq7eq79nm.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008287767 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.66 tests/s, 241.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # return -1 if n.to_s.size == 1\n  # return -1 if n.to_s.chars.sort.join.to_i == n\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join.to_i\n  # n.to_s.chars.sort.join\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpiz8b7rb7.rb:31: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiz8b7rb7.rb:38: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  arr = n.to_s.split('')\n  i = arr.size - 1\n  while i > 0 && arr[i - 1] >= arr[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = arr.size - 1\n  while arr[j] <= arr[i - 1]\n    j -= 1\n  end\n  arr[i - 1], arr[j] = arr[j], arr[i - 1]\n  arr[i..-1] = arr[i..-1].reverse\n  arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpfr6wc6ct\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpfr6wc6ct.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008002798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.96 tests/s, 249.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    next if index == 0\n    if num > n_arr[index - 1]\n      n_arr[index - 1], n_arr[index] = n_arr[index], n_arr[index - 1]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpd04msnts\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpd04msnts.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007915077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.34 tests/s, 252.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if num.to_i > n[i+1].to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join('').to_i\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpv33sjbdn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpv33sjbdn.rb:16:in `test_rearrange_bigger'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n  => 16:     assert_equal(21, candidate.call(12))\n     17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.007577231 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.97 tests/s, 131.97 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      digits[i], digits[i - 1] = digits[i - 1], digits[i]\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpozz4vfgh\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpozz4vfgh.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007614737 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.32 tests/s, 262.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.permutation.to_a.map { |a| a.join('').to_i }.sort.reverse.select { |x| x > n }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp2pdvvm0n\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2pdvvm0n.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007830932 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.70 tests/s, 255.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i+1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp_2ag6if9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_2ag6if9.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00683158 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.38 tests/s, 292.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_str_arr = n_str.split('')\n  n_str_arr.sort!\n  n_str_arr.reverse!\n  n_str_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp264sblge\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp264sblge.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007864086 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.16 tests/s, 254.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |a| a.join('').to_i }.sort.reverse.each do |i|\n    return i if i > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpkas__fq1\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkas__fq1.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.012371386 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.83 tests/s, 161.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  num_array = n.to_s.split('')\n  num_array.each_with_index do |num, index|\n    if index == num_array.length - 1\n      return -1\n    elsif num_array[index] < num_array[index + 1]\n      num_array[index], num_array[index + 1] = num_array[index + 1], num_array[index]\n      return num_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpkywuarhu\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkywuarhu.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006977342 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.32 tests/s, 286.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.length == 1\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp4_0lgkh5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp4_0lgkh5.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007549296 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.46 tests/s, 264.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # get the index of the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |d, i| d < digits[i + 1] }[1]\n  # get the index of the smallest digit that is bigger than the digit at the index\n  # found above\n  swap_index = digits[index + 1..-1].each_with_index.find { |d, i| d > digits[index] }[1] + index + 1\n  # swap the digits at the two indexes\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # sort the digits after the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpajnl59k7\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmpajnl59k7.rb:6:in `<'\n/tmp/tmpajnl59k7.rb:6:in `block in rearrange_bigger'\n/tmp/tmpajnl59k7.rb:6:in `each'\n/tmp/tmpajnl59k7.rb:6:in `each_with_index'\n/tmp/tmpajnl59k7.rb:6:in `each'\n/tmp/tmpajnl59k7.rb:6:in `find'\n/tmp/tmpajnl59k7.rb:6:in `rearrange_bigger'\n/tmp/tmpajnl59k7.rb:22:in `call'\n/tmp/tmpajnl59k7.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n===============================================================================\n\nFinished in 0.001306439 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n765.44 tests/s, 765.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of that digit that is larger than it\n  # swap those digits\n  # sort the digits to the right of the swapped digits\n  # return the number\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i-1]\n      break\n    end\n    i -= 1\n  end\n  if i > 0\n    j = i\n    while j < n.length\n      if n[j] < n[i-1]\n        break\n      end\n      j += 1\n    end\n    n[i-1], n[j-1] = n[j-1], n[i-1]\n    n[i..-1] = n[i..-1].sort\n  end\n  n.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmput8yrqt5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmput8yrqt5.rb:34:in `test_rearrange_bigger'\n     31:   def test_rearrange_bigger\n     32:     candidate = method(:rearrange_bigger)\n     33:     assert_equal(21, candidate.call(12))\n  => 34:     assert_equal(false, candidate.call(10))\n     35:     assert_equal(120, candidate.call(102))\n     36:   end\n     37: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007491132 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.49 tests/s, 266.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map { |x| x.join('').to_i }.select { |x| x > n }.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmphren0qqb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphren0qqb.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007320829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.60 tests/s, 273.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('').map(&:to_i)\n  return -1 if digits.length == 1\n  return -1 if digits.sort.reverse == digits\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp8uvmnri8.rb:7: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmp8uvmnri8.rb:14: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the next digit\n  i = 0\n  while i < digits.length - 1\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit that is larger than the digit at i\n  j = i + 1\n  while j < digits.length\n    if digits[j] > digits[i]\n      break\n    end\n    j += 1\n  end\n  # swap the digits at i and j\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits after i\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpeb2gx0_d\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpeb2gx0_d.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007319336 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.62 tests/s, 273.25 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # convert to integer and return\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp_23biufe\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_23biufe.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007302198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.95 tests/s, 273.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  # swap the pivot with the smallest digit to the right\n  # sort the digits to the right of the pivot in ascending order\n  # join the digits and return the number\n  digits = n.to_s.split('')\n  pivot = digits.length - 2\n  while pivot >= 0\n    if digits[pivot] < digits[pivot + 1]\n      break\n    else\n      pivot -= 1\n    end\n  end\n  return -1 if pivot == -1\n  swap_index = pivot + 1\n  (pivot + 1...digits.length).each do |i|\n    if digits[i] > digits[pivot] && digits[i] < digits[swap_index]\n      swap_index = i\n    end\n  end\n  digits[pivot], digits[swap_index] = digits[swap_index], digits[pivot]\n  digits[pivot + 1..-1] = digits[pivot + 1..-1].sort\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpo3gj30d7\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpo3gj30d7.rb:33:in `test_rearrange_bigger'\n     30:   def test_rearrange_bigger\n     31:     candidate = method(:rearrange_bigger)\n     32:     assert_equal(21, candidate.call(12))\n  => 33:     assert_equal(false, candidate.call(10))\n     34:     assert_equal(120, candidate.call(102))\n     35:   end\n     36: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009602826 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.14 tests/s, 208.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the next\n  i = 0\n  while i < digits.length - 1\n    break if digits[i] < digits[i+1]\n    i += 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == digits.length - 1\n  # find the smallest digit to the right of the pivot that is bigger than the pivot\n  j = i + 1\n  while j < digits.length\n    break if digits[i] < digits[j]\n    j += 1\n  end\n  # swap the pivot with the smallest digit to the right\n  digits[i], digits[j] = digits[j], digits[i]\n  # sort the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].sort\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp7keg87if\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp7keg87if.rb:31:in `test_rearrange_bigger'\n     28:   def test_rearrange_bigger\n     29:     candidate = method(:rearrange_bigger)\n     30:     assert_equal(21, candidate.call(12))\n  => 31:     assert_equal(false, candidate.call(10))\n     32:     assert_equal(120, candidate.call(102))\n     33:   end\n     34: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007735136 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.28 tests/s, 258.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot that is larger than the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp8987qj80\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp8987qj80.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007051162 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.82 tests/s, 283.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  i = digits.length - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.length - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpjo38jbyy\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjo38jbyy.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006715317 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.91 tests/s, 297.83 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpx1orpgn0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpx1orpgn0.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008375832 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.39 tests/s, 238.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr_sorted = n_arr.sort\n  n_arr_sorted_reverse = n_arr_sorted.reverse\n  n_arr_sorted_reverse_str = n_arr_sorted_reverse.join('')\n  n_arr_sorted_reverse_int = n_arr_sorted_reverse_str.to_i\n  if n_arr_sorted_reverse_int > n\n    return n_arr_sorted_reverse_int\n  else\n    return -1\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp2_mj18ax\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2_mj18ax.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007190678 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.07 tests/s, 278.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first number that is smaller than the number to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if there is no such number, return -1\n  return -1 if i < 0\n  # find the smallest number to the right of the number found above that is greater than it\n  j = digits.length - 1\n  while j > i && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two numbers\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the numbers to the right of the number found above\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpnc2b16nq\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnc2b16nq.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007864669 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.15 tests/s, 254.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.chars.sort == n.to_s.chars.sort.reverse\n  n.to_s.chars.sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpxg9ss_5j\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxg9ss_5j.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007348924 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.07 tests/s, 272.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split(\"\")\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join(\"\").to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpnmxq4cos\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnmxq4cos.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008261533 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.04 tests/s, 242.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index < n_array.length - 1\n      if num < n_array[index + 1]\n        n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp3sho_bbd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3sho_bbd.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006513226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.53 tests/s, 307.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && num < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmps6ytyngk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmps6ytyngk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006141887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n162.82 tests/s, 325.63 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > n.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp_gez7d9v\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_gez7d9v.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006350727 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.46 tests/s, 314.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # split the number into an array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  if i < 0\n    return -1\n  end\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpp57evgj6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpp57evgj6.rb:37:in `test_rearrange_bigger'\n     34:   def test_rearrange_bigger\n     35:     candidate = method(:rearrange_bigger)\n     36:     assert_equal(21, candidate.call(12))\n  => 37:     assert_equal(false, candidate.call(10))\n     38:     assert_equal(120, candidate.call(102))\n     39:   end\n     40: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008301645 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.46 tests/s, 240.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp3u3ce31c\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3u3ce31c.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009249487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.11 tests/s, 216.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  return -1 if n == n.sort.reverse\n  (n.size - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      (n.size - 1).downto(i + 1) do |j|\n        if n[j] > n[i]\n          n[i], n[j] = n[j], n[i]\n          n[i + 1..-1] = n[i + 1..-1].sort\n          return n.join.to_i\n        end\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpnklobjh2\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnklobjh2.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007252877 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.88 tests/s, 275.75 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122932,
      "stdout": "Loaded suite /tmp/tmp30qv8jpl\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp30qv8jpl.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006059798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n165.02 tests/s, 330.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp01purtb6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp01purtb6.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00825085 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.20 tests/s, 242.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |digit, index|\n    if index == n_array.length - 1\n      return -1\n    elsif digit < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join.to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp22xvjghk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp22xvjghk.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008616019 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.06 tests/s, 232.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if n_array[i + 1] && n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpecy2i7zc\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpecy2i7zc.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006809211 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.86 tests/s, 293.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |digit, i| digit < digits[i + 1] }[1]\n  # find the smallest digit to the right of the digit that is bigger than it\n  swap_index = digits[index + 1..-1].each_with_index.find { |digit, i| digit > digits[index] }[1] + index + 1\n  # swap the two digits\n  digits[index], digits[swap_index] = digits[swap_index], digits[index]\n  # reverse the digits to the right of the swapped digit\n  digits[index + 1..-1] = digits[index + 1..-1].reverse\n  # convert to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpu2y1vk2v\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmpu2y1vk2v.rb:6:in `<'\n/tmp/tmpu2y1vk2v.rb:6:in `block in rearrange_bigger'\n/tmp/tmpu2y1vk2v.rb:6:in `each'\n/tmp/tmpu2y1vk2v.rb:6:in `each_with_index'\n/tmp/tmpu2y1vk2v.rb:6:in `each'\n/tmp/tmpu2y1vk2v.rb:6:in `find'\n/tmp/tmpu2y1vk2v.rb:6:in `rearrange_bigger'\n/tmp/tmpu2y1vk2v.rb:21:in `call'\n/tmp/tmpu2y1vk2v.rb:21:in `test_rearrange_bigger'\n     18:   def test_rearrange_bigger\n     19:     candidate = method(:rearrange_bigger)\n     20:     assert_equal(21, candidate.call(12))\n  => 21:     assert_equal(false, candidate.call(10))\n     22:     assert_equal(120, candidate.call(102))\n     23:   end\n     24: end\n===============================================================================\n\nFinished in 0.001361522 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n734.47 tests/s, 734.47 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if n_arr[index + 1] && n_arr[index + 1].to_i > num.to_i\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpph55ekwm\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpph55ekwm.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.0077516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.01 tests/s, 258.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the one to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i == -1\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp5rh6p9g2\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp5rh6p9g2.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007472173 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.83 tests/s, 267.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  # select the permutations that are bigger than the original number\n  # return the smallest of those permutations\n  # if there are no permutations that are bigger than the original number, return -1\n  digits = n.to_s.split('')\n  permutations = digits.permutation.to_a\n  bigger_permutations = permutations.select { |permutation| permutation.join.to_i > n }\n  bigger_permutations.empty? ? -1 : bigger_permutations.min.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpbsayxr8c\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpbsayxr8c.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009973359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.27 tests/s, 200.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, index|\n    if n[index + 1] && n[index + 1].to_i > num.to_i\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpo3s2m45q\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpo3s2m45q.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007783822 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.47 tests/s, 256.94 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to the right of the pivot\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmputcnwk1l\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmputcnwk1l.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007892694 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.70 tests/s, 253.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.chars.map(&:to_i)\n  i = n.length - 1\n  while i > 0 && n[i - 1] >= n[i]\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n.length - 1\n  while n[j] <= n[i - 1]\n    j -= 1\n  end\n  n[i - 1], n[j] = n[j], n[i - 1]\n  n[i..-1] = n[i..-1].reverse\n  n.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp573czsmd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp573czsmd.rb:22:in `test_rearrange_bigger'\n     19:   def test_rearrange_bigger\n     20:     candidate = method(:rearrange_bigger)\n     21:     assert_equal(21, candidate.call(12))\n  => 22:     assert_equal(false, candidate.call(10))\n     23:     assert_equal(120, candidate.call(102))\n     24:   end\n     25: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007327407 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.47 tests/s, 272.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif num < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp01purtb6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp01purtb6.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00825085 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.20 tests/s, 242.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if n_array[index + 1] && n_array[index + 1].to_i > num.to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpgq_vaqsz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgq_vaqsz.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008163881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.49 tests/s, 244.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array, sort, join, convert to int\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp_oaijjbk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_oaijjbk.rb:10:in `test_rearrange_bigger'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n  => 10:     assert_equal(21, candidate.call(12))\n     11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006791534 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.24 tests/s, 147.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    if n_array[i+1] && n_array[i+1].to_i > n.to_i\n      n_array[i], n_array[i+1] = n_array[i+1], n_array[i]\n      return n_array.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpuc54xxtz\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpuc54xxtz.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007698639 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.89 tests/s, 259.79 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array, sort in descending order, join\n  n.to_s.split('').sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp6vwk3nz0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6vwk3nz0.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007557054 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.33 tests/s, 264.65 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.permutation.to_a.map { |x| x.join('').to_i }.sort.reverse.each { |x| return x if x > n.join('').to_i }\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpnrldgt3w\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnrldgt3w.rb:12:in `test_rearrange_bigger'\n      9:   def test_rearrange_bigger\n     10:     candidate = method(:rearrange_bigger)\n     11:     assert_equal(21, candidate.call(12))\n  => 12:     assert_equal(false, candidate.call(10))\n     13:     assert_equal(120, candidate.call(102))\n     14:   end\n     15: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008142497 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.81 tests/s, 245.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpesw0i8t3\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpesw0i8t3.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007355956 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.94 tests/s, 271.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif n_array[index] < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkehouknx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkehouknx.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.008009238 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.86 tests/s, 249.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  permutations = n.to_s.split('').permutation.to_a\n  # sort the permutations\n  sorted_permutations = permutations.map { |permutation| permutation.join.to_i }.sort\n  # find the index of the given number in the sorted permutations\n  index = sorted_permutations.index(n)\n  # return the next number in the sorted permutations\n  sorted_permutations[index + 1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpm43udxi1\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpm43udxi1.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.00756612 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.17 tests/s, 264.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num.to_i < n_array[index + 1].to_i\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp504sp5xa\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp504sp5xa.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007416717 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.83 tests/s, 269.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpvg30a_wf\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpvg30a_wf.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006535978 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.00 tests/s, 306.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, i|\n    if i == n_array.length - 1\n      return -1\n    elsif n_array[i + 1].to_i > num.to_i\n      n_array[i], n_array[i + 1] = n_array[i + 1], n_array[i]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpqecdyi9p\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqecdyi9p.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007198213 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n138.92 tests/s, 277.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && n_arr[i+1].to_i > num.to_i\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpr5tgywb8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpr5tgywb8.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006105903 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.78 tests/s, 327.55 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.permutation.to_a.map { |arr| arr.join.to_i }.sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpvaw0ihf8\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpvaw0ihf8.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006711887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.99 tests/s, 297.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0).each do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpedyb8ul4\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpedyb8ul4.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006851951 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.94 tests/s, 291.89 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that can be swapped with a larger digit to its right\n  # swap the digits\n  # sort the digits to the right of the swapped digits\n  # return the new number\n  # if no digit can be swapped, return -1\n  n = n.to_s.split('')\n  i = n.length - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      n[i..-1] = n[i..-1].sort\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp98249_oy\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp98249_oy.rb:25:in `test_rearrange_bigger'\n     22:   def test_rearrange_bigger\n     23:     candidate = method(:rearrange_bigger)\n     24:     assert_equal(21, candidate.call(12))\n  => 25:     assert_equal(false, candidate.call(10))\n     26:     assert_equal(120, candidate.call(102))\n     27:   end\n     28: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007561753 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n132.24 tests/s, 264.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.permutation.to_a.map(&:join).map(&:to_i).sort.reverse.each do |num|\n    return num if num > n\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpq8s2byky\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpq8s2byky.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006835581 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.29 tests/s, 292.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i + 1] && n_arr[i + 1].to_i > num.to_i\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpe2vazbtk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpe2vazbtk.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006292893 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.91 tests/s, 317.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string, split into array, sort, join, convert to int\n  n.to_s.split('').sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpmavw8zxf\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpmavw8zxf.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.00773584 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.27 tests/s, 258.54 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |num, index|\n    if index == n_array.length - 1\n      return -1\n    elsif num < n_array[index + 1]\n      n_array[index], n_array[index + 1] = n_array[index + 1], n_array[index]\n      return n_array.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp2ldyddag\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp2ldyddag.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007962659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.59 tests/s, 251.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to integer\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509940,
      "stdout": "Loaded suite /tmp/tmpng5iublk\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpng5iublk.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.012329912 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.10 tests/s, 81.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Find the first digit that is smaller than the digit to its right\n  # Swap the digits\n  # Sort the digits to the right of the swapped digit\n  # Return the number\n  n_array = n.to_s.split('')\n  i = n_array.length - 1\n  while i > 0\n    if n_array[i] > n_array[i - 1]\n      n_array[i], n_array[i - 1] = n_array[i - 1], n_array[i]\n      n_array[i..-1] = n_array[i..-1].sort\n      return n_array.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmp6log29i_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6log29i_.rb:24:in `test_rearrange_bigger'\n     21:   def test_rearrange_bigger\n     22:     candidate = method(:rearrange_bigger)\n     23:     assert_equal(21, candidate.call(12))\n  => 24:     assert_equal(false, candidate.call(10))\n     25:     assert_equal(120, candidate.call(102))\n     26:   end\n     27: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007934756 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.03 tests/s, 252.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    n_arr.each_with_index do |num2, j|\n      if num2 > num && j > i\n        n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n        return n_arr.join.to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmpf89rf4u9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpf89rf4u9.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006352175 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.43 tests/s, 314.85 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Find the first digit that is smaller than the digit to its right\n  # Find the next biggest digit to the right of the digit found in step 1\n  # Swap the digits found in steps 1 and 2\n  # Sort the digits to the right of the digit found in step 1\n  # Return the number\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      swap_index = i + 1\n      (i + 1...digits.length).each do |j|\n        swap_index = j if digits[j] > digits[i] && digits[j] < digits[swap_index]\n      end\n      digits[i], digits[swap_index] = digits[swap_index], digits[i]\n      digits[i + 1..-1] = digits[i + 1..-1].sort\n      return digits.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpjc4dh4i6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpjc4dh4i6.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007928412 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.13 tests/s, 252.26 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |digit, index|\n    if n[index + 1] && digit < n[index + 1]\n      n[index], n[index + 1] = n[index + 1], n[index]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpdpc63qi5\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpdpc63qi5.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009159192 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.18 tests/s, 218.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif num < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmplrfueae0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplrfueae0.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006668419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.96 tests/s, 299.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of that digit that is bigger than it\n  # swap those digits\n  # sort the digits to the right of the swapped digits\n  # join the digits and return the number\n  digits = n.to_s.split('')\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i < 0\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "Loaded suite /tmp/tmpnrjniyfd\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpnrjniyfd.rb:33:in `test_rearrange_bigger'\n     30:   def test_rearrange_bigger\n     31:     candidate = method(:rearrange_bigger)\n     32:     assert_equal(21, candidate.call(12))\n  => 33:     assert_equal(false, candidate.call(10))\n     34:     assert_equal(120, candidate.call(102))\n     35:   end\n     36: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009584085 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.34 tests/s, 208.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # get the index of the first digit that is smaller than the digit to its right\n  index = digits.each_with_index.find { |digit, i| digit < digits[i + 1] }[1]\n  # get the index of the smallest digit that is bigger than the digit at the index\n  index2 = digits[index + 1..-1].each_with_index.find { |digit, i| digit > digits[index] }[1] + index + 1\n  # swap the digits at the two indexes\n  digits[index], digits[index2] = digits[index2], digits[index]\n  # sort the digits after the index\n  digits[index + 1..-1] = digits[index + 1..-1].sort\n  # join the digits and convert to integer\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmph0qjaq38\nStarted\nE\n===============================================================================\nError: test_rearrange_bigger(TestHumanEval): ArgumentError: comparison of Integer with nil failed\n/tmp/tmph0qjaq38.rb:6:in `<'\n/tmp/tmph0qjaq38.rb:6:in `block in rearrange_bigger'\n/tmp/tmph0qjaq38.rb:6:in `each'\n/tmp/tmph0qjaq38.rb:6:in `each_with_index'\n/tmp/tmph0qjaq38.rb:6:in `each'\n/tmp/tmph0qjaq38.rb:6:in `find'\n/tmp/tmph0qjaq38.rb:6:in `rearrange_bigger'\n/tmp/tmph0qjaq38.rb:21:in `call'\n/tmp/tmph0qjaq38.rb:21:in `test_rearrange_bigger'\n     18:   def test_rearrange_bigger\n     19:     candidate = method(:rearrange_bigger)\n     20:     assert_equal(21, candidate.call(12))\n  => 21:     assert_equal(false, candidate.call(10))\n     22:     assert_equal(120, candidate.call(102))\n     23:   end\n     24: end\n===============================================================================\n\nFinished in 0.001253512 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n797.76 tests/s, 797.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('')\n  # get the length of the digits\n  length = digits.length\n  # get the last index of the digits\n  last_index = length - 1\n  # get the last digit of the number\n  last_digit = digits[last_index].to_i\n  # get the second to last digit of the number\n  second_to_last_digit = digits[last_index - 1].to_i\n  # get the third to last digit of the number\n  third_to_last_digit = digits[last_index - 2].to_i\n  # get the fourth to last digit of the number\n  fourth_to_last_digit = digits[last_index - 3].to_i\n  # get the fifth to last digit of the number\n  fifth_to_last_digit = digits[last_index - 4].to_i\n  # get the sixth to last digit of the number\n  sixth_to_last_digit = digits[last_index - 5].to_i\n  # get the seventh to last digit of the number\n  seventh_to_last_digit = digits[last_index - 6].to_i\n  # get the eighth to last digit of the number\n  eighth_to_last_digit = digits[last_index - 7].to_i\n  # get the ninth to last digit of the number\n  ninth_to_last_digit = digits[last_index - 8].to_i\n  # get the tenth to last digit of the number\n  tenth_to_last_digit = digits[last_index - 9].to_i\n  # get the eleventh to last digit of the number\n  eleventh_to_last_digit = digits[last_index - 10].to_i\n  # get the twelfth to last digit of the number\n  twelfth_to_last_digit = digits[last_index - 11].to_i\n  # get the thirteenth to last digit of the number\n  thirteenth_to_last_digit = digits[last_index - 12].to_i\n  # get the fourteenth to last digit of the number\n  fourteenth_to_last_digit = digits\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmplakd5mjg.rb:38: class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmplakd5mjg.rb:45: syntax error, unexpected end-of-input, expecting `end'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split(\"\")\n  n_array.each_with_index do |num, index|\n    if index == 0\n      next\n    elsif num.to_i > n_array[index - 1].to_i\n      n_array[index - 1], n_array[index] = n_array[index], n_array[index - 1]\n      break\n    end\n  end\n  n_array.join(\"\").to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpfcbrgcg_\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpfcbrgcg_.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007979574 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n125.32 tests/s, 250.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  arr = n.to_s.split('')\n  arr.permutation.to_a.map(&:join).map(&:to_i).sort.select { |num| num > n }.first\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmphkua29zb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphkua29zb.rb:11:in `test_rearrange_bigger'\n      8:   def test_rearrange_bigger\n      9:     candidate = method(:rearrange_bigger)\n     10:     assert_equal(21, candidate.call(12))\n  => 11:     assert_equal(false, candidate.call(10))\n     12:     assert_equal(120, candidate.call(102))\n     13:   end\n     14: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.010011027 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.89 tests/s, 199.78 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit from the right that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step\n  # swap the digits found in the previous two steps\n  # sort the digits to the right of the digit found in the first step in ascending order\n  # return the number\n  digits = n.to_s.chars.map(&:to_i)\n  i = digits.length - 2\n  while i >= 0\n    if digits[i] < digits[i + 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i < 0\n  j = digits.length - 1\n  while j > i\n    if digits[j] > digits[i]\n      break\n    end\n    j -= 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i + 1..-1] = digits[i + 1..-1].sort\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpwaer63o3\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpwaer63o3.rb:33:in `test_rearrange_bigger'\n     30:   def test_rearrange_bigger\n     31:     candidate = method(:rearrange_bigger)\n     32:     assert_equal(21, candidate.call(12))\n  => 33:     assert_equal(false, candidate.call(10))\n     34:     assert_equal(120, candidate.call(102))\n     35:   end\n     36: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007151104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.84 tests/s, 279.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if i < n.length - 1\n      if num < n[i + 1]\n        n[i], n[i + 1] = n[i + 1], n[i]\n        return n.join.to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp0zhqk29k\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp0zhqk29k.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007462639 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.00 tests/s, 268.00 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to string\n  # split into array\n  # sort array\n  # join array\n  # convert to int\n  n.to_s.split('').sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpqsrrl270\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpqsrrl270.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.007628027 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.10 tests/s, 131.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n.to_s.chars.permutation.map(&:join).map(&:to_i).sort.reverse.find { |x| x > n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpra61vsiw\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpra61vsiw.rb:10:in `test_rearrange_bigger'\n      7:   def test_rearrange_bigger\n      8:     candidate = method(:rearrange_bigger)\n      9:     assert_equal(21, candidate.call(12))\n  => 10:     assert_equal(false, candidate.call(10))\n     11:     assert_equal(120, candidate.call(102))\n     12:   end\n     13: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.006892543 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.08 tests/s, 290.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, idx|\n    if idx == n_arr.length - 1\n      return -1\n    elsif num < n_arr[idx + 1]\n      n_arr[idx], n_arr[idx + 1] = n_arr[idx + 1], n_arr[idx]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmpm6ua4k5h\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpm6ua4k5h.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007395357 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n135.22 tests/s, 270.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, return -1\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpbx_r0jog\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpbx_r0jog.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007257765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n137.78 tests/s, 275.57 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_array = n.to_s.split('')\n  n_array.each_with_index do |n, i|\n    n_array.each_with_index do |m, j|\n      if n.to_i > m.to_i && i < j\n        n_array[i], n_array[j] = n_array[j], n_array[i]\n        return n_array.join('').to_i\n      end\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpber1_aas\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpber1_aas.rb:18:in `test_rearrange_bigger'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n  => 18:     assert_equal(21, candidate.call(12))\n     19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.007451994 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.19 tests/s, 134.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # create an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is already the biggest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmprcmi6oz0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmprcmi6oz0.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007425449 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.67 tests/s, 269.34 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    if index == n_arr.length - 1\n      return -1\n    elsif n_arr[index] < n_arr[index + 1]\n      n_arr[index], n_arr[index + 1] = n_arr[index + 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp9uznvbs3\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp9uznvbs3.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00743295 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n134.54 tests/s, 269.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert to array\n  # sort array\n  # join array\n  # convert to integer\n  # return integer\n  n.to_s.chars.sort.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp703962vr\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp703962vr.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006889399 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.15 tests/s, 145.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # return -1 if n.to_s.size == 1\n  # return -1 if n.to_s.chars.sort.join.to_i == n\n  # n.to_s.chars.sort.reverse.join.to_i\n  return -1 if n.to_s.size == 1\n  return -1 if n.to_s.chars.sort.join.to_i == n\n  n.to_s.chars.sort.reverse.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp6jmypzy9\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6jmypzy9.rb:14:in `test_rearrange_bigger'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_rearrange_bigger\n     13:     candidate = method(:rearrange_bigger)\n  => 14:     assert_equal(21, candidate.call(12))\n     15:     assert_equal(false, candidate.call(10))\n     16:     assert_equal(120, candidate.call(102))\n     17:   end\n<21> expected but was\n<-1>\n\ndiff:\n? 21\n? - \n? ? \n===============================================================================\n\nFinished in 0.00732442 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n136.53 tests/s, 136.53 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  perms = n.to_s.split('').permutation.to_a.map(&:join).map(&:to_i)\n  # sort the permutations\n  perms.sort!\n  # find the index of the given number\n  index = perms.index(n)\n  # return the next number\n  perms[index + 1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp6ce0wkxv\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6ce0wkxv.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.007931913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.07 tests/s, 252.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split(\"\")\n  n_arr.permutation.to_a.map {|x| x.join(\"\").to_i}.sort.reverse.each do |x|\n    return x if x > n\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpweylinei\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpweylinei.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<[10, 1]>\n===============================================================================\n\nFinished in 0.007041295 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.02 tests/s, 284.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  digits = n.to_s.split('').map(&:to_i)\n  i = digits.size - 1\n  while i > 0 && digits[i - 1] >= digits[i]\n    i -= 1\n  end\n  return -1 if i <= 0\n  j = digits.size - 1\n  while digits[j] <= digits[i - 1]\n    j -= 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  digits[i..-1] = digits[i..-1].reverse\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1665509939,
      "stdout": "Loaded suite /tmp/tmp3cqev5wu\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp3cqev5wu.rb:23:in `test_rearrange_bigger'\n     20:   def test_rearrange_bigger\n     21:     candidate = method(:rearrange_bigger)\n     22:     assert_equal(21, candidate.call(12))\n  => 23:     assert_equal(false, candidate.call(10))\n     24:     assert_equal(120, candidate.call(102))\n     25:   end\n     26: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00860292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.24 tests/s, 232.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i+1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i < 0\n  # find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the pivot\n  digits[i+1..-1] = digits[i+1..-1].reverse\n  # return the number\n  digits.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmphvxkv3cm\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphvxkv3cm.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007118615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.48 tests/s, 280.95 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_str = n.to_s\n  n_arr = n_str.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmpkks9kvkq\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpkks9kvkq.rb:14:in `test_rearrange_bigger'\n     11:   def test_rearrange_bigger\n     12:     candidate = method(:rearrange_bigger)\n     13:     assert_equal(21, candidate.call(12))\n  => 14:     assert_equal(false, candidate.call(10))\n     15:     assert_equal(120, candidate.call(102))\n     16:   end\n     17: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006697128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.32 tests/s, 298.64 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('').map(&:to_i)\n  return -1 if n.size == 1\n  i = n.size - 1\n  while i > 0\n    if n[i] > n[i - 1]\n      n[i], n[i - 1] = n[i - 1], n[i]\n      return n.join.to_i\n    end\n    i -= 1\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmptdq_9wld\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmptdq_9wld.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007035377 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n142.14 tests/s, 284.28 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the one to its right\n  # find the smallest digit to the right of the one found in the previous step that is bigger than it\n  # swap the two digits\n  # sort the digits to the right of the swapped digits in ascending order\n  # return the new number\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      min_index = i + 1\n      (i + 1).upto(n.length - 1) do |j|\n        min_index = j if n[j] < n[min_index] && n[j] > n[i]\n      end\n      n[i], n[min_index] = n[min_index], n[i]\n      n[i + 1..-1] = n[i + 1..-1].sort\n      return n.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmplur1jv9o\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmplur1jv9o.rb:27:in `test_rearrange_bigger'\n     24:   def test_rearrange_bigger\n     25:     candidate = method(:rearrange_bigger)\n     26:     assert_equal(21, candidate.call(12))\n  => 27:     assert_equal(false, candidate.call(10))\n     28:     assert_equal(120, candidate.call(102))\n     29:   end\n     30: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009558174 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.62 tests/s, 209.24 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  return -1 if n.to_s.size == 1\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, index|\n    next if index == 0\n    if num.to_i > n_arr[index - 1].to_i\n      n_arr[index], n_arr[index - 1] = n_arr[index - 1], n_arr[index]\n      return n_arr.join('').to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpz22ocf12\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpz22ocf12.rb:19:in `test_rearrange_bigger'\n     16:   def test_rearrange_bigger\n     17:     candidate = method(:rearrange_bigger)\n     18:     assert_equal(21, candidate.call(12))\n  => 19:     assert_equal(false, candidate.call(10))\n     20:     assert_equal(120, candidate.call(102))\n     21:   end\n     22: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00635283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n157.41 tests/s, 314.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the digit found in the previous step that is larger than the digit found in the previous step\n  # swap the digits found in the previous two steps\n  # sort the digits to the right of the digit found in the first step in ascending order\n  # join the digits and convert to an integer\n  n.to_s.chars.each_with_index do |digit, index|\n    next if index == n.to_s.length - 1\n    if digit < n.to_s[index + 1]\n      digit_to_swap = n.to_s[index + 1..-1].chars.min\n      index_to_swap = n.to_s[index + 1..-1].chars.index(digit_to_swap)\n      n.to_s[index], n.to_s[index + index_to_swap + 1] = n.to_s[index + index_to_swap + 1], n.to_s[index]\n      n.to_s[index + 1..-1] = n.to_s[index + 1..-1].chars.sort.join\n      return n.to_s.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpgzqzwu0g\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpgzqzwu0g.rb:24:in `test_rearrange_bigger'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_rearrange_bigger\n     23:     candidate = method(:rearrange_bigger)\n  => 24:     assert_equal(21, candidate.call(12))\n     25:     assert_equal(false, candidate.call(10))\n     26:     assert_equal(120, candidate.call(102))\n     27:   end\n<21> expected but was\n<12>\n\ndiff:\n? 121\n===============================================================================\n\nFinished in 0.006684422 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.60 tests/s, 149.60 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the digit to its right\n  # find the smallest digit to the right of the first digit that is larger than the first digit\n  # swap the first digit and the smallest digit\n  # sort the digits to the right of the first digit in ascending order\n  # return the new number\n  n_array = n.to_s.split('')\n  first_digit = nil\n  n_array.each_with_index do |digit, i|\n    if i < n_array.length - 1 && digit < n_array[i + 1]\n      first_digit = i\n      break\n    end\n  end\n  return -1 if first_digit.nil?\n  smallest_digit = nil\n  n_array[first_digit + 1..-1].each_with_index do |digit, i|\n    if smallest_digit.nil? || digit < n_array[smallest_digit]\n      smallest_digit = first_digit + i + 1\n    end\n  end\n  n_array[first_digit], n_array[smallest_digit] = n_array[smallest_digit], n_array[first_digit]\n  n_array[first_digit + 1..-1] = n_array[first_digit + 1..-1].sort\n  n_array.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp250dc903\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp250dc903.rb:32:in `test_rearrange_bigger'\n     29:   def test_rearrange_bigger\n     30:     candidate = method(:rearrange_bigger)\n     31:     assert_equal(21, candidate.call(12))\n  => 32:     assert_equal(false, candidate.call(10))\n     33:     assert_equal(120, candidate.call(102))\n     34:   end\n     35: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.00624672 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.08 tests/s, 320.17 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.sort!\n  n_arr.reverse!\n  n_arr.join('').to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmp4evo4oad\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp4evo4oad.rb:13:in `test_rearrange_bigger'\n     10:   def test_rearrange_bigger\n     11:     candidate = method(:rearrange_bigger)\n     12:     assert_equal(21, candidate.call(12))\n  => 13:     assert_equal(false, candidate.call(10))\n     14:     assert_equal(120, candidate.call(102))\n     15:   end\n     16: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.007050338 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.84 tests/s, 283.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n.to_s.split('').permutation.map(&:join).map(&:to_i).select { |num| num > n }.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp0kfr4632\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp0kfr4632.rb:10:in `test_rearrange_bigger'\n      7:   def test_rearrange_bigger\n      8:     candidate = method(:rearrange_bigger)\n      9:     assert_equal(21, candidate.call(12))\n  => 10:     assert_equal(false, candidate.call(10))\n     11:     assert_equal(120, candidate.call(102))\n     12:   end\n     13: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.006793163 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.21 tests/s, 294.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  n.each_with_index do |num, i|\n    if n[i+1] && n[i+1].to_i > num.to_i\n      n[i], n[i+1] = n[i+1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122930,
      "stdout": "Loaded suite /tmp/tmp_kpek40y\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp_kpek40y.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006428513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.56 tests/s, 311.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if i == n_arr.length - 1\n      return -1\n    elsif n_arr[i] < n_arr[i + 1]\n      n_arr[i], n_arr[i + 1] = n_arr[i + 1], n_arr[i]\n      return n_arr.join('').to_i\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmphvvvl6fj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmphvvvl6fj.rb:18:in `test_rearrange_bigger'\n     15:   def test_rearrange_bigger\n     16:     candidate = method(:rearrange_bigger)\n     17:     assert_equal(21, candidate.call(12))\n  => 18:     assert_equal(false, candidate.call(10))\n     19:     assert_equal(120, candidate.call(102))\n     20:   end\n     21: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006615371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.16 tests/s, 302.33 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get the digits of the number\n  digits = n.to_s.split('').map(&:to_i)\n  # find the first digit that is smaller than the digit to the right of it\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # if no such digit exists, the number is the largest possible\n  return -1 if i == -1\n  # find the smallest digit to the right of the digit found above that is larger than it\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # swap the two digits\n  digits[i], digits[j] = digits[j], digits[i]\n  # reverse the digits to the right of the digit found above\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp6jbap2hj\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp6jbap2hj.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.009755321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n102.51 tests/s, 205.02 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n = n.to_s.split('')\n  (n.length - 2).downto(0) do |i|\n    if n[i] < n[i + 1]\n      n[i], n[i + 1] = n[i + 1], n[i]\n      return n.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122936,
      "stdout": "Loaded suite /tmp/tmpulksdpkb\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpulksdpkb.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.007487017 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.56 tests/s, 267.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  (digits.length - 2).downto(0) do |i|\n    if digits[i] < digits[i + 1]\n      digits[i], digits[i + 1] = digits[i + 1], digits[i]\n      return digits.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122931,
      "stdout": "Loaded suite /tmp/tmp70flrxvn\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp70flrxvn.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006709281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n149.05 tests/s, 298.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  n_arr = n.to_s.split('')\n  n_arr.each_with_index do |num, i|\n    if n_arr[i+1] && num < n_arr[i+1]\n      n_arr[i], n_arr[i+1] = n_arr[i+1], n_arr[i]\n      return n_arr.join.to_i\n    end\n  end\n  -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpznpsiogi\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpznpsiogi.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006097043 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.01 tests/s, 328.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  digits = n.to_s.split('')\n  digits.each_with_index do |digit, index|\n    next_index = index + 1\n    next_digit = digits[next_index]\n    if next_digit && next_digit > digit\n      digits[index] = next_digit\n      digits[next_index] = digit\n      break\n    end\n  end\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpt94il6ke\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpt94il6ke.rb:20:in `test_rearrange_bigger'\n     17:   def test_rearrange_bigger\n     18:     candidate = method(:rearrange_bigger)\n     19:     assert_equal(21, candidate.call(12))\n  => 20:     assert_equal(false, candidate.call(10))\n     21:     assert_equal(120, candidate.call(102))\n     22:   end\n     23: end\n<false> expected but was\n<10>\n===============================================================================\n\nFinished in 0.006299666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.74 tests/s, 317.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # Create an array of digits\n  digits = n.to_s.split('').map(&:to_i)\n  # Find the first digit that is smaller than the digit to its right\n  i = digits.length - 2\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n  # If there is no such digit, return -1\n  return -1 if i < 0\n  # Find the smallest digit to the right of the pivot that is larger than the pivot\n  j = digits.length - 1\n  while j >= 0 && digits[j] <= digits[i]\n    j -= 1\n  end\n  # Swap the pivot with the smallest digit to its right\n  digits[i], digits[j] = digits[j], digits[i]\n  # Reverse the digits to the right of the pivot\n  digits[i + 1..-1] = digits[i + 1..-1].reverse\n  # Return the new number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpdzw7608o\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpdzw7608o.rb:29:in `test_rearrange_bigger'\n     26:   def test_rearrange_bigger\n     27:     candidate = method(:rearrange_bigger)\n     28:     assert_equal(21, candidate.call(12))\n  => 29:     assert_equal(false, candidate.call(10))\n     30:     assert_equal(120, candidate.call(102))\n     31:   end\n     32: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.005774108 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n173.19 tests/s, 346.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # convert number to array of digits\n  digits = n.to_s.split('')\n  # find the first digit that is smaller than the digit to its right\n  # if no such digit exists, return -1\n  i = digits.length - 1\n  while i > 0\n    if digits[i] > digits[i - 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i == 0\n  # find the smallest digit to the right of the pivot that is greater than the pivot\n  # swap the pivot with this digit\n  j = digits.length - 1\n  while j >= i\n    if digits[j] > digits[i - 1]\n      digits[i - 1], digits[j] = digits[j], digits[i - 1]\n      break\n    end\n    j -= 1\n  end\n  # reverse the digits to the right of the pivot\n  digits[i..-1] = digits[i..-1].reverse\n  # return the number\n  digits.join.to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmp1ce0iztx\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmp1ce0iztx.rb:35:in `test_rearrange_bigger'\n     32:   def test_rearrange_bigger\n     33:     candidate = method(:rearrange_bigger)\n     34:     assert_equal(21, candidate.call(12))\n  => 35:     assert_equal(false, candidate.call(10))\n     36:     assert_equal(120, candidate.call(102))\n     37:   end\n     38: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.006096756 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n164.02 tests/s, 328.04 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # get all permutations of the digits\n  permutations = n.to_s.chars.permutation.to_a.map { |arr| arr.join.to_i }\n  # sort the permutations\n  permutations.sort!\n  # find the index of the given number\n  index = permutations.index(n)\n  # return the next number in the array\n  permutations[index + 1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpr462nei0\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpr462nei0.rb:17:in `test_rearrange_bigger'\n     14:   def test_rearrange_bigger\n     15:     candidate = method(:rearrange_bigger)\n     16:     assert_equal(21, candidate.call(12))\n  => 17:     assert_equal(false, candidate.call(10))\n     18:     assert_equal(120, candidate.call(102))\n     19:   end\n     20: end\n<false> expected but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\nFinished in 0.006564153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n152.34 tests/s, 304.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n)\n  # find the first digit that is smaller than the one on its right\n  # find the smallest digit that is bigger than the one on its left\n  # swap the two digits\n  # sort the digits to the right of the swapped digits\n  # return the number\n  n_arr = n.to_s.split(\"\")\n  i = n_arr.length - 1\n  while i > 0\n    if n_arr[i] > n_arr[i - 1]\n      break\n    end\n    i -= 1\n  end\n  return -1 if i == 0\n  j = n_arr.length - 1\n  while j > i\n    if n_arr[j] > n_arr[i - 1]\n      break\n    end\n    j -= 1\n  end\n  n_arr[i - 1], n_arr[j] = n_arr[j], n_arr[i - 1]\n  n_arr[i..-1] = n_arr[i..-1].sort\n  n_arr.join(\"\").to_i\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rearrange_bigger\n    candidate = method(:rearrange_bigger)\n    assert_equal(21, candidate.call(12))\n    assert_equal(false, candidate.call(10))\n    assert_equal(120, candidate.call(102))\n  end\nend\n",
      "timestamp": 1666122938,
      "stdout": "Loaded suite /tmp/tmpxqb_5na6\nStarted\nF\n===============================================================================\nFailure: test_rearrange_bigger(TestHumanEval)\n/tmp/tmpxqb_5na6.rb:33:in `test_rearrange_bigger'\n     30:   def test_rearrange_bigger\n     31:     candidate = method(:rearrange_bigger)\n     32:     assert_equal(21, candidate.call(12))\n  => 33:     assert_equal(false, candidate.call(10))\n     34:     assert_equal(120, candidate.call(102))\n     35:   end\n     36: end\n<false> expected but was\n<-1>\n===============================================================================\n\nFinished in 0.005739847 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n174.22 tests/s, 348.44 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}