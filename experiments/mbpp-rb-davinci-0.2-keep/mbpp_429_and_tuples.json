{
  "name": "mbpp_429_and_tuples",
  "language": "rb",
  "prompt": "# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_and_tuples\n    candidate = method(:and_tuples)\n    assert_equal([0, 0, 2, 1], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))\n    assert_equal([1, 2, 3, 0], candidate.call([1, 2, 3, 4], [5, 6, 7, 8]))\n    assert_equal([0, 9, 10, 0], candidate.call([8, 9, 11, 12], [7, 13, 14, 17]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1 & test_tup2\nend",
    "  test_tup1 & test_tup2\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x & y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).flatten.compact\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend",
    "  test_tup1 & test_tup2\nend",
    "  test_tup1 & test_tup2\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x & y }\nend"
  ]
}