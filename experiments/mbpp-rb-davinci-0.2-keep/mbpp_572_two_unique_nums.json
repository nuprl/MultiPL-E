{
  "name": "mbpp_572_two_unique_nums",
  "language": "rb",
  "prompt": "# Write a python function to remove duplicate numbers from a given number of lists.\ndef two_unique_nums(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_two_unique_nums\n    candidate = method(:two_unique_nums)\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 3, 4, 5]))\n    assert_equal([1, 3, 4, 5], candidate.call([1, 2, 3, 2, 4, 5]))\n    assert_equal([1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.each do |num|\n    if nums.count(num) == 2\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.each do |num|\n    if nums.count(num) == 2\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.each do |num|\n    if nums.count(num) == 1\n      return num\n    end\n  end\nend",
    "  nums.uniq\nend",
    "  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.select { |_, v| v == 1 }.keys\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.each_with_object({}) do |num, hash|\n    hash[num] = true\n  end.keys\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  unique_nums = []\n  nums.each do |num|\n    unique_nums << num unless unique_nums.include?(num)\n  end\n  unique_nums\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.each_with_object([]) do |num, arr|\n    arr << num unless arr.include?(num)\n  end\nend",
    "  nums.uniq\nend",
    "  nums.each do |num|\n    if nums.count(num) > 1\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  unique_nums = []\n  nums.each do |num|\n    if unique_nums.include?(num)\n      unique_nums.delete(num)\n    else\n      unique_nums << num\n    end\n  end\n  unique_nums\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.each do |num|\n    if nums.count(num) == 2\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "    nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }.select { |_, v| v == 1 }.keys\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "    nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.each do |num|\n    if nums.count(num) == 2\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.each do |num|\n    if nums.count(num) == 2\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.uniq.length == 2\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend",
    "  nums.each do |num|\n    if nums.count(num) > 1\n      nums.delete(num)\n    end\n  end\n  nums\nend",
    "  nums.uniq\nend",
    "  nums.uniq\nend"
  ]
}