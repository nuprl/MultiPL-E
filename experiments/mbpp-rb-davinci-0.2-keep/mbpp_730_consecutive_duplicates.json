{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "rb",
  "prompt": "# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_consecutive_duplicates\n    candidate = method(:consecutive_duplicates)\n    assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))\n    assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))\n    assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  new_list = []\n  nums.each do |num|\n    if new_list.last != num\n      new_list << num\n    end\n  end\n  new_list\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend",
    "  nums.chunk { |n| n }.map(&:first)\nend"
  ]
}