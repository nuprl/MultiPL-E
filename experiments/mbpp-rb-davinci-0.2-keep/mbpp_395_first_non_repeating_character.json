{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rb",
  "prompt": "# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_first_non_repeating_character\n    candidate = method(:first_non_repeating_character)\n    assert_equal(nil, candidate.call(\"abcabc\"))\n    assert_equal(\"a\", candidate.call(\"abc\"))\n    assert_equal(\"c\", candidate.call(\"ababc\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "    str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.each_char do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "    str1.each_char do |char|\n        if str1.count(char) == 1\n            return char\n        end\n    end\nend",
    "    str1.each_char do |char|\n        if str1.count(char) == 1\n            return char\n        end\n    end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "\tstr1.each_char do |char|\n\t\tif str1.count(char) == 1\n\t\t\treturn char\n\t\tend\n\tend\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend",
    "  hash = Hash.new(0)\n  str1.each_char do |char|\n    hash[char] += 1\n  end\n  hash.each do |key, value|\n    if value == 1\n      return key\n    end\n  end\nend",
    "  str1.each_char do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "    str1.each_char do |char|\n        if str1.count(char) == 1\n            return char\n        end\n    end\nend",
    "  str1.split('').each do |char|\n    if str1.count(char) == 1\n      return char\n    end\n  end\nend",
    "  str1.split(\"\").each do |char|\n    return char if str1.count(char) == 1\n  end\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.chars.find { |c| str1.count(c) == 1 }\nend",
    "  str1.chars.find { |char| str1.count(char) == 1 }\nend"
  ]
}