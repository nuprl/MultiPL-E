{
  "name": "mbpp_472_check_Consecutive",
  "language": "rb",
  "prompt": "# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_Consecutive\n    candidate = method(:check_Consecutive)\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false, candidate.call([1, 2, 3, 5, 6]))\n    assert_equal(false, candidate.call([1, 2, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1]-l[i] != 1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1] - l[i] == 1\n            return true\n        else\n            return false\n        end\n    end\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1]-l[i]!=1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0..l.length-1\n        if l[i+1] - l[i] != 1\n            return false\n        end\n    end\n    return true\nend",
    "    for i in 0..l.length-1\n        if l[i+1] - l[i] == 1\n            return true\n        else\n            return false\n        end\n    end\nend",
    "    l.sort!\n    for i in 0...l.length-1\n        if l[i+1] != l[i]+1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0...l.length-1\n        if l[i+1]!=l[i]+1\n            return False\n        end\n    end\n    return True\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1]-l[i] != 1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0...l.length-1\n        if l[i+1]-l[i]!=1\n            return False\n        end\n    end\n    return True\nend",
    "    l.sort!\n    l.each_with_index do |ele,i|\n        if i != l.length-1\n            if ele+1 != l[i+1]\n                return false\n            end\n        end\n    end\n    return true\nend\nl = [1,2,3,4,5,6,7,8,9]\nputs check_Consecutive(l)",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1] != l[i]+1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1]-l[i]!=1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0...l.length-1\n        if l[i+1]-l[i]!=1\n            return False\n        end\n    end\n    return True\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1] - l[i] == 1\n            return true\n        else\n            return false\n        end\n    end\nend",
    "    l.sort!\n    for i in 0...l.length-1\n        if l[i+1] - l[i] != 1\n            return False\n        end\n    end\n    return True\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1]-l[i]!=1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0...l.length-1\n        if l[i+1] - l[i] != 1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1] != l[i]+1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i] != l[i+1]-1\n            return false\n        end\n    end\n    return true\nend",
    "    l.sort!\n    for i in 0..l.length-2\n        if l[i+1]-l[i] != 1\n            return false\n        end\n    end\n    return true\nend"
  ]
}