{
  "name": "mbpp_569_sort_sublists",
  "language": "rb",
  "prompt": "# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_sublists\n    candidate = method(:sort_sublists)\n    assert_equal([[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))\n    assert_equal([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]))\n    assert_equal([[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]], candidate.call([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map {|sublist| sublist.sort}\nend",
    "  list1.map {|sublist| sublist.sort}\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.map { |sublist| sublist.sort }\nend",
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend",
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend",
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend",
    "  list1.each do |sublist|\n    sublist.sort!\n  end\nend"
  ]
}