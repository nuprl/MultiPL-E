{
  "name": "mbpp_96_divisor",
  "language": "rb",
  "prompt": "# Write a python function to find the number of divisors of a given integer.\ndef divisor(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_divisor\n    candidate = method(:divisor)\n    assert_equal(4, candidate.call(15))\n    assert_equal(6, candidate.call(12))\n    assert_equal(3, candidate.call(9))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  divisors = []\n  for i in 1..n\n    if n % i == 0\n      divisors << i\n    end\n  end\n  return divisors.length\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n%i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  i = 1\n  count = 0\n  while i <= n\n    if n % i == 0\n      count += 1\n    end\n    i += 1\n  end\n  return count\nend",
    "  divisors = []\n  for i in 1..n\n    if n % i == 0\n      divisors.push(i)\n    end\n  end\n  return divisors\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select {|x| n % x == 0}\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  divisor = 0\n  for i in 1..n\n    if n % i == 0\n      divisor += 1\n    end\n  end\n  return divisor\nend",
    "  count = 0\n  for i in 1..n\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.length\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  puts count\nend",
    "  (1..n).select { |x| n % x == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  i=1\n  count=0\n  while i<=n\n    if n%i==0\n      count=count+1\n    end\n    i=i+1\n  end\n  return count\nend\nputs divisor(10)\nputs divisor(20)\nputs divisor(30)\nputs divisor(40)\nputs divisor(50)\nputs divisor(60)\nputs divisor(70)\nputs divisor(80)\nputs divisor(90)\nputs divisor(100)",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.length\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  divisors = []\n  for i in 1..n\n    divisors << i if n % i == 0\n  end\n  divisors.length\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count=0\n  for i in 1..n\n    if n%i==0\n      count+=1\n    end\n  end\n  return count\nend\nputs divisor(12)",
    "  divisors = []\n  for i in 1..n\n    divisors << i if n % i == 0\n  end\n  divisors.length\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend\nputs divisor(10)",
    "  divisors = []\n  for i in 1..n\n    divisors << i if n % i == 0\n  end\n  divisors.length\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count=0\n  for i in 1..n\n    if n%i==0\n      count+=1\n    end\n  end\n  return count\nend\nputs divisor(10)",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.length\nend",
    "  i = 1\n  count = 0\n  while i <= n\n    if n % i == 0\n      count += 1\n    end\n    i += 1\n  end\n  return count\nend",
    "  count=0\n  for i in 1..n\n    if n%i==0\n      count+=1\n    end\n  end\n  return count\nend\nputs divisor(6)\nputs divisor(10)\nputs divisor(11)\nputs divisor(15)\nputs divisor(20)\nputs divisor(1)\nputs divisor(2)\nputs divisor(3)\nputs divisor(4)\nputs divisor(5)\nputs divisor(7)\nputs divisor(8)\nputs divisor(9)\nputs divisor(12)\nputs divisor(13)\nputs divisor(14)\nputs divisor(16)\nputs divisor(17)\nputs divisor(18)\nputs divisor(19)\nputs divisor(21)\nputs divisor(22)\nputs divisor(23)\nputs divisor(24)\nputs divisor(25)\nputs divisor(26)\nputs divisor(27)\nputs divisor(28)\nputs divisor(29)\nputs divisor(30)\nputs divisor(31)\nputs divisor(32)\nputs divisor(33)\nputs divisor(34)\nputs divisor(35)\nputs divisor(36)\nputs divisor(37)\nputs divisor(38)\nputs divisor(39)\nputs divisor(40)\nputs divisor(41)\nputs divisor(42)\nputs divisor(43)\nputs divisor(44)\nputs divisor(45)\nputs divisor(46)\nputs divisor(47)\nputs divisor(48)\nputs divisor(49)\nputs divisor(50)\nputs divisor(51)\nputs divisor(52)\nputs divisor",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count=0\n  for i in 1..n\n    if n%i==0\n      count+=1\n    end\n  end\n  return count\nend\nputs divisor(12)",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  puts count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  (1..n).each do |i|\n    count += 1 if n % i == 0\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  puts count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  puts count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  divisors = []\n  (1..n).each do |i|\n    divisors << i if n % i == 0\n  end\n  divisors\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  divisors = []\n  (1..n).each do |i|\n    divisors << i if n % i == 0\n  end\n  divisors\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  divisors = []\n  for i in 1..n\n    if n % i == 0\n      divisors << i\n    end\n  end\n  return divisors.length\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  divisors = []\n  for i in 1..n\n    if n % i == 0\n      divisors << i\n    end\n  end\n  return divisors.length\nend",
    "  (1..n).select { |x| n % x == 0 }.length\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n%i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend\nputs divisor(10)",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  count\nend",
    "  divisors = []\n  for i in 1..n\n    if n % i == 0\n      divisors << i\n    end\n  end\n  return divisors.length\nend",
    "  (1..n).select { |i| n % i == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }.count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }.size\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count=0\n  for i in 1..n\n    if n%i==0\n      count+=1\n    end\n  end\n  return count\nend\nputs \"Enter the number:\"\nn=gets.to_i\nputs \"Number of divisors are:\"\nputs divisor(n)",
    "  (1..n).select { |i| n % i == 0 }.count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |x| n % x == 0 }\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 1..n\n    if n % i == 0\n      count += 1\n    end\n  end\n  return count\nend",
    "  (1..n).select { |i| n % i == 0 }\nend"
  ]
}