{
  "name": "mbpp_743_rotate_right",
  "language": "rb",
  "prompt": "# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef rotate_right(list, m)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rotate_right\n    candidate = method(:rotate_right)\n    assert_equal([8, 9, 10, 1, 2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    assert_equal([9, 10, 1, 2, 3, 4, 5, 6, 7, 8], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    assert_equal([6, 7, 8, 9, 10, 1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list.push(list.shift(m))\nend",
    "  list.push(list.shift(m))\nend",
    "  list.push(list.shift(m))\nend",
    "  list.push(list.shift(m))\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  m.times do\n    list.insert(0, list.pop)\n  end\n  list\nend",
    "  list.push(list.shift) until list.first == m\n  list\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  return list if m == 0\n  m = m % list.length\n  list.reverse!\n  list[0..m-1].reverse!\n  list[m..-1].reverse!\n  list\nend",
    "  m = m % list.length\n  list.push(list.shift(m)).flatten\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  return list if list.empty?\n  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.push(list.shift(m))\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  return list\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.push(list.shift) until list.size == m\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\n  list\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  list.push(list.shift) until list.length == m\n  list\nend",
    "  m = m % list.length\n  list.reverse!\n  list[0..m-1].reverse!\n  list[m..list.length-1].reverse!\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list.push(list.shift(m)).flatten\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  return list if m == 0\n  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  m = m % list.length\n  list[-m, m] + list[0...-m]\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.push(list.shift(m))\n  list\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m = m % list.length\n  list.push(list.shift(m)).flatten\nend",
    "  m = m % list.length\n  list.push(list.shift(m)).flatten\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate!(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(m)\nend",
    "  list.each_with_index do |item, index|\n    if index < m\n      list.push(item)\n    end\n  end\n  list.slice!(0, m)\nend",
    "  list.rotate!(m)\n  return list\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m = m % list.length\n  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift) until list.first == m\n  list\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\n  return list\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate!(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  return list if m == 0\n  return list if m == list.length\n  return list.reverse if m == list.length - 1\n  return list.reverse if m == 1",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  list.push(list.shift(m))\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.push(list.shift(m))\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  list.push(list.shift(m))\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.push(list.shift) until m == 0\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  return list if m == 0\n  return list if m == list.length\n  return list if m > list.length\n  list.push(list.shift(m))\n  list.flatten\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  return list if list.empty?\n  m = m % list.size\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.push(list.shift(m))\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(-m)\nend",
    "  # Write your code here\n  return list if list.length == 0\n  m = m % list.length\n  return list if m == 0\n  list.reverse!\n  list[0, m].reverse!\n  list[m, list.length].reverse!\n  list\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  # Write your code here\n  # print list\n  # print m\n  # print list.length\n  # print list.length - m\n  # print list[list.length - m, list.length]\n  # print list[0, list.length - m]\n  # print list[list.length - m, list.length] + list[0, list.length - m]\n  return list[list.length - m, list.length] + list[0, list.length - m]\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0...-m]\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\n  return list\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift(m))\nend",
    "  m.times do\n    list.insert(0, list.pop)\n  end\n  list\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(m)\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  m.times do\n    list.unshift(list.pop)\n  end\n  list\nend",
    "  list.push(list.shift(m))\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  # Write your code here\n  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.rotate(-m)\nend",
    "  m = m % list.length\n  list[-m..-1] + list[0..-m-1]\nend",
    "  list.push(list.shift) until list.first == m\n  list\nend",
    "  list.rotate(-m)\nend",
    "  list.rotate(-m)\nend",
    "  list.push(list.shift) until m == 0\n  list\nend"
  ]
}