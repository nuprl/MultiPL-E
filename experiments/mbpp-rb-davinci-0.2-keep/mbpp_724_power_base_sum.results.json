{
  "name": "mbpp_724_power_base_sum",
  "language": "rb",
  "prompt": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeirv6h63\nStarted\n.\nFinished in 0.000566811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.26 tests/s, 7057.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeirv6h63\nStarted\n.\nFinished in 0.000566811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.26 tests/s, 7057.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeirv6h63\nStarted\n.\nFinished in 0.000566811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.26 tests/s, 7057.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx4kteis3\nStarted\n.\nFinished in 0.000513228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.45 tests/s, 7793.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7362xrm0\nStarted\n.\nFinished in 0.000559321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.88 tests/s, 7151.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5oyi3u0o\nStarted\n.\nFinished in 0.000556388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1797.31 tests/s, 7189.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeirv6h63\nStarted\n.\nFinished in 0.000566811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.26 tests/s, 7057.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(//).map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8ruc8cji\nStarted\n.\nFinished in 0.000532262 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1878.77 tests/s, 7515.10 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqfy724c7\nStarted\n.\nFinished in 0.000413935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.84 tests/s, 9663.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqhrxhjud\nStarted\n.\nFinished in 0.000514866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.25 tests/s, 7769.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5oyi3u0o\nStarted\n.\nFinished in 0.000556388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1797.31 tests/s, 7189.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5oyi3u0o\nStarted\n.\nFinished in 0.000556388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1797.31 tests/s, 7189.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7362xrm0\nStarted\n.\nFinished in 0.000559321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.88 tests/s, 7151.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx4kteis3\nStarted\n.\nFinished in 0.000513228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.45 tests/s, 7793.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqfy724c7\nStarted\n.\nFinished in 0.000413935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.84 tests/s, 9663.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqfy724c7\nStarted\n.\nFinished in 0.000413935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.84 tests/s, 9663.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeirv6h63\nStarted\n.\nFinished in 0.000566811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.26 tests/s, 7057.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4wlts2bi\nStarted\n.\nFinished in 0.000514786 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.55 tests/s, 7770.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsr_gb2j5\nStarted\n.\nFinished in 0.000393492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.35 tests/s, 10165.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqfy724c7\nStarted\n.\nFinished in 0.000413935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.84 tests/s, 9663.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqfy724c7\nStarted\n.\nFinished in 0.000413935 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2415.84 tests/s, 9663.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqhrxhjud\nStarted\n.\nFinished in 0.000514866 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.25 tests/s, 7769.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5oyi3u0o\nStarted\n.\nFinished in 0.000556388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1797.31 tests/s, 7189.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp5oyi3u0o\nStarted\n.\nFinished in 0.000556388 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1797.31 tests/s, 7189.23 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpeirv6h63\nStarted\n.\nFinished in 0.000566811 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1764.26 tests/s, 7057.03 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6ecm4h93\nStarted\n.\nFinished in 0.000513133 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.81 tests/s, 7795.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4wlts2bi\nStarted\n.\nFinished in 0.000514786 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.55 tests/s, 7770.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split(\"\").map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7362xrm0\nStarted\n.\nFinished in 0.000559321 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.88 tests/s, 7151.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  sum = 0\n  (base ** power).to_s.each_char { |c| sum += c.to_i }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphgody6t0\nStarted\n.\nFinished in 0.000425134 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2352.20 tests/s, 9408.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp31x1y6yj\nStarted\n.\nFinished in 0.000529797 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.52 tests/s, 7550.06 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpk91v19_x\nStarted\n.\nFinished in 0.00055954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1787.18 tests/s, 7148.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base**power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx4kteis3\nStarted\n.\nFinished in 0.000513228 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.45 tests/s, 7793.81 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power)\n  (base ** power).to_s.split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_power_base_sum\n    candidate = method(:power_base_sum)\n    assert_equal(115, candidate.call(2, 100))\n    assert_equal(37, candidate.call(8, 10))\n    assert_equal(62, candidate.call(8, 15))\n    assert_equal(9, candidate.call(3, 3))\n  end\nend\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpp80ptc1i\nStarted\n.\nFinished in 0.000433809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2305.16 tests/s, 9220.65 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}