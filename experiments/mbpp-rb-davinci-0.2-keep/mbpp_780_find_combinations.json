{
  "name": "mbpp_780_find_combinations",
  "language": "rb",
  "prompt": "# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_combinations(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_combinations\n    candidate = method(:find_combinations)\n    assert_equal([[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]], candidate.call([[2, 4], [6, 7], [5, 1], [6, 10]]))\n    assert_equal([[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]], candidate.call([[3, 5], [7, 8], [6, 2], [7, 11]]))\n    assert_equal([[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]], candidate.call([[4, 6], [8, 9], [7, 3], [8, 12]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  result = []\n  test_list.each do |i|\n    test_list.each do |j|\n      result << [i, j] if i + j == 10\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list.each_with_index do |tuple2, index2|\n      next if index == index2\n      result << [tuple, tuple2]\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list[index+1..-1].each do |tuple2|\n      result << [tuple, tuple2] if tuple.sum == tuple2.sum\n    end\n  end\n  result\nend",
    "  # sort the list\n  test_list.sort!\n  # initialize an empty list to store the combinations\n  combinations = []\n  # loop through the list\n  test_list.each do |tuple|\n    # get the sum of the tuple\n    sum = tuple.reduce(:+)\n    # loop through the list again\n    test_list.each do |tuple2|\n      # get the sum of the tuple\n      sum2 = tuple2.reduce(:+)\n      # if the sum of the first tuple is equal to the sum of the second tuple\n      if sum == sum2\n        # add the tuple to the combinations list\n        combinations << [tuple, tuple2]\n      end\n    end\n  end\n  # return the combinations list\n  combinations\nend",
    "  result = []\n  test_list.each do |tuple|\n    result.push(tuple)\n    test_list.each do |tuple2|\n      result.push(tuple + tuple2)\n    end\n  end\n  result.uniq\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list.each_with_index do |tuple2, index2|\n      if index != index2\n        result << [tuple, tuple2]\n      end\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list.each_with_index do |tuple2, index2|\n      next if index == index2\n      result << [tuple, tuple2]\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list[index+1..-1].each do |tuple2|\n      result << [tuple, tuple2] if tuple.sum == tuple2.sum\n    end\n  end\n  result\nend",
    "  # print test_list\n  # print test_list.length\n  # print test_list[0]\n  # print test_list[0].length\n  # print test_list[0][0]\n  # print test_list[0][1]\n  # print test_list[1]\n  # print test_list[1].length\n  # print test_list[1][0]\n  # print test_list[1][1]\n  # print test_list[2]\n  # print test_list[2].length\n  # print test_list[2][0]\n  # print test_list[2][1]\n  # print test_list[3]\n  # print test_list[3].length\n  # print test_list[3][0]\n  # print test_list[3][1]\n  # print test_list[4]\n  # print test_list[4].length\n  # print test_list[4][0]\n  # print test_list[4][1]\n  # print test_list[5]\n  # print test_list[5].length\n  # print test_list[5][0]\n  # print test_list[5][1]\n  # print test_list[6]\n  # print test_list[6].length\n  # print test_list[6][0]\n  # print test_list[6][1]\n  # print test_list[7]\n  # print test_list[7].length\n  # print test_list[7][0]\n  # print test_list[7][1]\n  # print test_list[8]\n  # print test_list[8].length\n  # print test_list[8][0]\n  # print test_list[8][1]\n  # print test_list[9]\n  # print test_list[9].length\n  # print test_list[9][0]\n  # print test_list[9][1]\n  # print test_list[10]\n  # print test_list[10].length\n  # print test_list[10][0]\n  # print test_list[10][1]\n",
    "  result = []\n  test_list.each do |tuple|\n    result << tuple if tuple.inject(:+) == 0\n  end\n  result\nend",
    "  result = []\n  test_list.each do |tuple|\n    test_list.each do |tuple2|\n      result << tuple + tuple2 if tuple != tuple2\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list[index+1..-1].each do |tuple2|\n      result << [tuple, tuple2] if tuple.sum == tuple2.sum\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |x, i|\n    test_list.each_with_index do |y, j|\n      result << [x, y] if x + y == 10 && i != j\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each do |tuple|\n    test_list.each do |tuple2|\n      if tuple != tuple2\n        result << [tuple, tuple2]\n      end\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each_with_index do |tuple, index|\n    test_list.each_with_index do |tuple2, index2|\n      next if index == index2\n      result << [tuple, tuple2]\n    end\n  end\n  result\nend",
    "  # sort the list\n  test_list.sort!\n  # initialize an empty hash\n  hash = Hash.new\n  # iterate over the list\n  test_list.each do |tuple|\n    # if the sum of the tuple is not in the hash, add it\n    if !hash.has_key?(tuple.sum)\n      hash[tuple.sum] = [tuple]\n    # if the sum of the tuple is in the hash, append the tuple to the list of tuples\n    else\n      hash[tuple.sum] << tuple\n    end\n  end\n  # return the hash\n  hash\nend",
    "  result = []\n  test_list.each do |tuple|\n    test_list.each do |tuple2|\n      if tuple[1] + tuple2[1] == tuple[0]\n        result << [tuple, tuple2]\n      end\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each do |tuple|\n    result << tuple\n    test_list.each do |tuple2|\n      next if tuple == tuple2\n      result << [tuple, tuple2]\n    end\n  end\n  result\nend",
    "  result = []\n  test_list.each do |tuple|\n    result << tuple\n    test_list.each do |tuple2|\n      result << [tuple, tuple2]\n    end\n  end\n  result\nend",
    "  # sort the list\n  test_list.sort!\n  # initialize a hash to store the results\n  result = Hash.new\n  # iterate through the list\n  test_list.each do |tuple|\n    # get the sum of the tuple\n    sum = tuple.reduce(:+)\n    # if the sum is already in the hash, add the tuple to the list of tuples\n    if result.has_key?(sum)\n      result[sum] << tuple\n    # if the sum is not in the hash, add the sum as a key and the tuple as the value\n    else\n      result[sum] = [tuple]\n    end\n  end\n  # return the hash\n  result\nend"
  ]
}