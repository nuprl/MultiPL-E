{
  "name": "mbpp_753_min_k",
  "language": "rb",
  "prompt": "# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef min_k(test_list, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_k\n    candidate = method(:min_k)\n    assert_equal([[\"Akash\", 2], [\"Akshat\", 4]], candidate.call([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2))\n    assert_equal([[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]], candidate.call([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3))\n    assert_equal([[\"Ayesha\", 9]], candidate.call([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0...k]\nend",
    "  test_list.sort_by { |x| x[1] }.first(k)\nend",
    "  test_list.sort_by { |x, y| y }.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |x, y| y }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by{|x| x[1]}.take(k)\nend",
    "  test_list.sort_by{|x,y| y}[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }.take(k)\nend",
    "  test_list.sort_by {|x, y| y}.take(k)\nend",
    "  test_list.sort_by(&:first)[0..k-1]\nend",
    "  test_list.sort_by! { |tuple| tuple[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by{|x| x[1]}.take(k)\nend",
    "  test_list.sort_by {|x,y| y}.take(k)\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0...k]\nend",
    "  test_list.sort[0..k-1]\nend",
    "  test_list.sort_by{|x,y| y}.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x, y| y }[0..k - 1]\nend",
    "  test_list.sort_by! { |x, y| y }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x, y| y }\n  test_list[0...k]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  # sort the list\n  test_list.sort!\n  # return the first k elements\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |e| e[0] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }.first(k)\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  test_list.sort_by{|x,y| y}.take(k)\nend",
    "  test_list.sort_by! { |t| t[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by {|x| x[0]}.take(k)\nend",
    "  test_list.sort_by{|x,y| y}.take(k)\nend",
    "  test_list.sort_by { |x| x[0] }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |t| t[1] }[0..k-1]\nend",
    "  test_list.sort_by {|a,b| b}.take(k)\nend",
    "  test_list.sort_by { |t| t[1] }[0...k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |t| t[1] }[0...k]\nend",
    "  test_list.sort_by { |t| t[1] }[0..k-1]\nend",
    "  test_list.sort_by(&:first).first(k)\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  test_list.sort_by{|x,y| y}.take(k)\nend",
    "  test_list.sort_by { |tuple| tuple[1] }.take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |t| t[0] }[0..k-1]\nend",
    "  test_list.sort_by(&:first).take(k)\nend",
    "  test_list.sort_by { |x| x[1] }.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |tuple| tuple[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort! { |a, b| a[1] <=> b[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x, y| y }[0..k - 1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }.take(k)\nend",
    "  test_list.sort_by { |x, y| y }[0..k - 1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  # sort the list\n  test_list.sort!\n  # return the first k elements\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "    # sort the list\n    test_list.sort!\n    # return the first k elements\n    return test_list[0...k]\nend",
    "  test_list.sort_by { |x| x[0] }[0...k]\nend",
    "  test_list.sort_by! {|x| x[0]}\n  test_list[0..k-1]\nend",
    "  # sort the list\n  sorted_list = test_list.sort\n  # slice the list to the kth element\n  sorted_list.slice(0, k)\nend",
    "  test_list.sort_by { |x| x[0] }[0...k]\nend",
    "  test_list.sort_by! { |x| x[0] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by{|x| x[1]}.take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by!{|x| x[1]}\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0...k]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |tuple| tuple[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by! {|x,y| y}\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[0] }.first(k)\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort_by { |tuple| tuple[1] }.take(k)\nend",
    "    test_list.sort_by! {|x,y| y}\n    test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by { |t| t[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[0] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x, y| y }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0...k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[0] }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by{|x,y| y}.first(k)\nend",
    "  test_list.sort_by { |t| t[0] }[0..k-1]\nend",
    "  test_list.sort_by { |t| t[1] }.take(k)\nend",
    "  test_list.sort_by { |tuple| tuple[1] }.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by! {|x, y| y}\n  test_list[0...k]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by!{|x| x[1]}\n  test_list[0...k]\nend",
    "  test_list.sort_by{|x| x[0]}[0...k]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by {|x| x[0]}.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by { |x, y| y }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |t| t[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[0] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0...k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x, y| y }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }.first(k)\nend",
    "  test_list.sort_by! { |a, b| b }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:first)[0...k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "    test_list.sort_by! { |x| x[1] }\n    test_list[0...k]\nend",
    "  test_list.sort_by { |x, y| y }[0..k-1]\nend",
    "  test_list.sort_by(&:first).take(k)\nend",
    "  test_list.sort_by { |x| x[1] }.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[0] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by { |t| t[1] }[0..k-1]\nend",
    "  # sort the list\n  sorted_list = test_list.sort_by { |tuple| tuple[1] }\n  # return the first k elements\n  sorted_list[0..k-1]\nend",
    "  test_list.sort_by! { |tuple| tuple[0] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x, y| y }.first(k)\nend",
    "  test_list.sort_by { |t| t[0] }[0..k-1]\nend",
    "  test_list.sort_by { |a, b| b }.take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by { |e| e[1] }.take(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }.first(k)\nend",
    "  test_list.sort_by! { |a, b| b }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:last)[0...k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  # sort the list\n  sorted_list = test_list.sort\n  # return the first k elements\n  sorted_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0...k]\nend",
    "  test_list.sort_by! { |tuple| tuple[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort!\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  test_list.sort_by! { |x, y| y }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }.take(k)\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0, k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  # sort the list\n  test_list.sort!\n  # return the first k elements\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[1] }[0...k]\nend",
    "  test_list.sort_by(&:first).take(k)\nend",
    "  test_list.sort_by!{|x,y| y}\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by { |x| x[0] }[0..k-1]\nend",
    "  test_list.sort_by{|x,y| y}.slice(0,k)\nend",
    "  test_list.sort_by! { |tuple| tuple[0] }\n  test_list[0...k]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[0] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by { |tuple| tuple[1] }.take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0...k]\nend",
    "  test_list.sort_by! {|x, y| y}\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:first).take(k)\nend",
    "  test_list.sort_by(&:last).take(k)\nend",
    "  test_list.sort_by { |x| x[1] }[0..k-1]\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  # sort the list\n  sorted_list = test_list.sort_by { |tuple| tuple[1] }\n  # return the first k elements\n  sorted_list[0..k-1]\nend",
    "  test_list.sort_by! { |x| x[1] }\n  test_list[0..k-1]\nend",
    "  test_list.sort_by(&:first).take(k)\nend",
    "  test_list.sort_by{|x| x[1]}.take(k)\nend",
    "  test_list.sort_by { |tuple| tuple[1] }[0..k-1]\nend",
    "  test_list.sort_by(&:last).first(k)\nend",
    "  test_list.sort_by{|x| x[1]}.first(k)\nend",
    "    # sort the list\n    test_list.sort!\n    # return the first k elements\n    return test_list[0..k-1]\nend"
  ]
}