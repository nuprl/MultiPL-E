{
  "name": "mbpp_769_Diff",
  "language": "rb",
  "prompt": "# Write a python function to get the difference between two lists.\ndef Diff(li1, li2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Diff\n    candidate = method(:Diff)\n    assert_equal([10, 20, 30, 15], candidate.call([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))\n    assert_equal([2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5], [6, 7, 1]))\n    assert_equal([2, 3, 6, 7], candidate.call([1, 2, 3], [6, 7, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            next\n        else\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if li1.include?(i)\n            next\n        else\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1, 2, 3, 4, 5]\nli2 = [5, 6, 7, 8, 9]\nprint(Diff(li1, li2))",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1, 2, 3, 4, 5]\nli2 = [5, 6, 7, 8, 9]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "  li3 = li1 - li2\n  return li3\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1, 2, 3, 4, 5]\nli2 = [5, 6, 7, 8, 9]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))",
    "    return (list(set(li1) - set(li2)))\nli1 = [1,2,3,4,5]\nli2 = [5,6,7,8,9]\nprint(Diff(li1, li2))",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1, 2, 3, 4, 5]\nli2 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(Diff(li1, li2))",
    "  li_dif = []\n  li1.each do |i|\n    if !li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  li2.each do |i|\n    if !li1.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,2,3,4,5,6,7]\nli2 = [5,6,7,8,9,10]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,2,3,4,5]\nli2 = [1,2,3,4,5,6,7,8,9]\nprint(Diff(li1, li2))",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,2,3,4,5]\nli2 = [1,2,3,4,5,6,7,8]\nprint(Diff(li1, li2))",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    return (list(set(li1) - set(li2)))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))\nli1 = [1, 2, 3, 4]\nli2 = [1, 2]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "  li3 = []\n  li1.each do |i|\n    if !li2.include?(i)\n      li3.push(i)\n    end\n  end\n  li2.each do |i|\n    if !li1.include?(i)\n      li3.push(i)\n    end\n  end\n  return li3\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1, 2, 3, 4]\nli2 = [1, 2]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "  li3 = li1 - li2\n  return li3\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "  li1 - li2\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,2,3,4,5,6,7]\nli2 = [1,2,3,4,5,6,7,8,9]\nprint(Diff(li1, li2))",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    return (list(set(li1) - set(li2)))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1, 2, 3, 4, 5]\nli2 = [5, 6, 7, 8, 9]\nprint(Diff(li1, li2))",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))\nli1 = [1,2,3,4,5]\nli2 = [1,2,3,4,5]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,2,3,4,5]\nli2 = [1,2,3,4,5,6,7,8,9]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = []\n    li1.each do |i|\n        if !li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    li2.each do |i|\n        if !li1.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "    return (list(set(li1) - set(li2)))",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend",
    "  li_dif = []\n  li1.each do |i|\n    if !li2.include?(i)\n      li_dif.push(i)\n    end\n  end\n  return li_dif\nend",
    "  li3 = li1 - li2\n  return li3\nend",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nprint(Diff(li1, li2))",
    "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif",
    "  li3 = li1 - li2\n  return li3\nend",
    "    li_dif = []\n    li1.each do |i|\n        if li2.include?(i)\n            li_dif.push(i)\n        end\n    end\n    return li_dif\nend"
  ]
}