{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_num_decagonal\n    candidate = method(:is_num_decagonal)\n    assert_equal(27, candidate.call(3))\n    assert_equal(175, candidate.call(7))\n    assert_equal(370, candidate.call(10))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal_number = (3 * n * n - n) / 2\n  nth_decagonal_number == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 1\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  n = n.to_f\n  return (Math.sqrt(1 + 40 * n) + 1) % 10 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal % 10 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_i == nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  return false if n < 0\n  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  # n = (3*n**2 - n)/2\n  # (1 + sqrt(1 + 24*n)) % 6 == 0\n  (1 + Math.sqrt(1 + 24*n)) % 6 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = 3 * n**2 - n\n  # n = 3 * n**2 - n - 2 * n\n  # n = 3 * n**2 - 3 * n\n  # n = n * (3 * n - 3)\n  # n = n * (3 * n - 3) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**2 - 3 * n) / 2\n  # n = (3 * n**",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)\n  # n = 3*n**2 - n\n  # n = 3*n**2 - n - 2*n\n  # n = n**2 - n - 2*n\n  # n = n**2 - 3*n\n  # n = n(n - 3)\n  # n = 0\n  # n = 3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3\n  # n = -3",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # 3n^2 - n - 2n = 0\n  # 3n^2 - 3n = 0\n  # n(3n - 3) = 0\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n  # n = 0, n = 1\n ",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal % 10 == 0\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal\nend",
    "  n = n.to_f\n  return false if n <= 0\n  return true if (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\n  false\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  (Math.sqrt(4 * n + 1) + 1) % 4 == 0\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return true if n == 10\n  return false if n % 10 != 0\n  return true if n % 100 == 10\n  return false if n % 1000 != 100\n  return true if n % 10000 == 1000\n  return false if n % 100000 != 10000\n  return true if n % 1000000 == 100000\n  return false if n % 10000000 != 1000000\n  return true if n % 100000000 == 10000000\n  return false if n % 1000000000 != 100000000\n  return true if n % 10000000000 == 1000000000\n  return false if n % 100000000000 != 10000000000\n  return true if n % 1000000000000 == 100000000000\n  return false if n % 10000000000000 != 1000000000000\n  return true if n % 100000000000000 == 10000000000000\n  return false if n % 1000000000000000 != 100000000000000\n  return true if n % 10000000000000000 == 1000000000000000\n  return false if n % 100000000000000000 != 10000000000000000\n  return true if n % 1000000000000000000 == 100000000000000000\n  return false if n % 10000000000000000000 != 1000000000000000000\n  return true if n % 100000000000000000000 == 10000000000000000000\n  return false if n % 1000000000000000000000 != 100000000000000000000\n  return true if n % 10000000000000000000000 == 1000000000000000000000\n  return false if n % 100000000000000000000000 != 10000000000000000000000\n  return true if n % 1000000000000000000000000 == 100000000000000000000000\n  return false if n % 10000000000000000000000000 != 1000000000000000000000000\n  return true if n % 100000000000000000000000000 == 10000000000000000000000000\n  return false if n % 1000000000000000000000000000 != 100000000000000000000000000\n  return true if n % 10000000000000000000000000000 == 1000000000000000000000000000\n  return false if n % 100000000000000000000000000000 != 10000000000000000000000000000\n  return true if n % 1000000000000000000000000000000 == 100000000000000000000000000000\n  return false if n % 10000000000000000000000000000000 != 1000000000000000000000000000000\n  return true if n % 100000000000000000000000000000000 == 10000000000000000000000000000000\n  return false if n % 1000000000000000000000000000000000 != 100000000000000000000000000000000\n  return true if n % 10000000000000000000000000000000000 == 1000000000000000000000000000000000\n  return false if n % 100000000000000000000000000000000000 != 10000000000000000000000000000000000\n  return true if n % 1000000000000000000000000000000000000 ==",
    "  # n = (3*x^2 - x)/2\n  # 3*x^2 - x - 2*n = 0\n  # x = (1 + sqrt(1 + 12*n))/3\n  # x is an integer\n  # 1 + 12*n = (3*x + 1)^2\n  # 1 + 12*n = 9*x^2 + 6*x + 1\n  # 12*n = 9*x^2 + 6*x\n  # 4*n = 3*x^2 + 2*x\n  # 4*n + 1 = (3*x + 1)^2\n  # sqrt(4*n + 1) = 3*x + 1\n  # x = (sqrt(4*n + 1) - 1)/3\n  # x is an integer\n  # 4*n + 1 is a perfect square\n  # n = (x^2 - x)/4\n  # x^2 - x - 4*n = 0\n  # x = (1 + sqrt(1 + 16*n))/2\n  # x is an integer\n  # 1 + 16*n = (2*x + 1)^2\n  # 1 + 16*n = 4*x^2 + 4*x + 1\n  # 16*n = 4*x^2 + 4*x\n  # 4*n = x^2 + x\n  # 4*n + 1 = (x + 1)^2\n  # sqrt(4*n + 1) = x + 1\n  # x = sqrt(4*n + 1) - 1\n  # x is an integer\n  # 4*n + 1 is a perfect square\n  # n = (x^2 - x)/4\n  # x^2 - x - 4*n = 0\n  # x = (1 + sqrt(1 + 16*n))/2\n  # x is an integer\n  # 1 + 16*n = (2*x + 1)^2\n  # 1 + 16*n = 4*x^2 + 4*x + 1\n  # 16*n = 4*x^2 + 4*x\n  # 4*n = x^2 + x\n  # 4*n",
    "  return true if (Math.sqrt(4*n+1) + 1) % 4 == 0\n  false\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # a = 3\n  # b = -1\n  # c = -2n\n  # (3 + sqrt(9 - 4(-1)(-2n)))/2\n  # (3 + sqrt(9 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 + sqrt(1 + 8n))/2\n  # (3 +",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3*n**2 - n)/2\n  nth_decagonal\nend",
    "  return false if n <= 0\n  return true if n == 1\n  return false if n % 10 != 0",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal(n) == n\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  return nth_decagonal_number\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.split(\"\").map(&:to_i).inject(:+) == n\nend",
    "  # n = (3x^2 - x) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3*n*n - n)/2\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n == 1\n  return true if n == 2\n  return false if n == 3\n  return true if n == 4\n  return false if n == 5\n  return true if n == 6\n  return false if n == 7\n  return true if n == 8\n  return false if n == 9\n  return true if n == 10\n  return false if n == 11\n  return true if n == 12\n  return false if n == 13\n  return true if n == 14\n  return false if n == 15\n  return true if n == 16\n  return false if n == 17\n  return true if n == 18\n  return false if n == 19\n  return true if n == 20\n  return false if n == 21\n  return true if n == 22\n  return false if n == 23\n  return true if n == 24\n  return false if n == 25\n  return true if n == 26\n  return false if n == 27\n  return true if n == 28\n  return false if n == 29\n  return true if n == 30\n  return false if n == 31\n  return true if n == 32\n  return false if n == 33\n  return true if n == 34\n  return false if n == 35\n  return true if n == 36\n  return false if n == 37\n  return true if n == 38\n  return false if n == 39\n  return true if n == 40\n  return false if n == 41\n  return true if n == 42\n  return false if n == 43\n  return true if n == 44\n  return false if n == 45\n  return true if n == 46\n  return false if n == 47\n  return true if n == 48\n  return false if n == 49\n  return true if n == 50\n  return false if n == 51\n  return true if n == 52\n  return false if n == 53\n  return true if n == 54\n  return false if n == 55\n  return true if n == 56\n  return false if n == 57\n  return true if n == 58\n  return false if n == 59\n  return true if n == 60\n  return false if n == 61\n  return true if n == 62",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  # n = (3x^2 - x) / 2\n  # x = (1 + sqrt(1 + 12n)) / 6\n  x = (1 + Math.sqrt(1 + 12 * n)) / 6\n  x == x.to_i\nend",
    "  return false if n < 0\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.length == n.to_s.length\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  return nth_decagonal_number\nend",
    "  return true if n == 1\n  return false if n < 1\n  return true if (Math.sqrt(1 + 4 * 2 * n) - 1) % 4 == 0\n  false\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 1\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root == root.to_i\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  # (3n^2 - n) / 2\n  (3 * n**2 - n) % 2 == 0\nend",
    "  # n = (3 * x^2 - x) / 2\n  # x = (sqrt(24n + 1) + 1) / 6\n  x = (Math.sqrt(24 * n + 1) + 1) / 6\n  x.to_i == x\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  if nth_decagonal % 10 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  # n = (3*n^2 - n)/2\n  # 3n^2 - n - 2n = 0\n  # 3n^2 - 3n = 0\n  # n(3n - 3) = 0\n  # n = 0 or n = 3\n  # n = 0 is not a decagonal number\n  # n = 3 is a decagonal number\n  # n = 3 is the first decagonal number\n  # n = 3 + 10k\n  # n = 3 + 10k\n  # n = 3 + 10(k - 1)\n  # n = 3 + 10(k - 2)\n  # n = 3 + 10(k - 3)\n  # n = 3 + 10(k - 4)\n  # n = 3 + 10(k - 5)\n  # n = 3 + 10(k - 6)\n  # n = 3 + 10(k - 7)\n  # n = 3 + 10(k - 8)\n  # n = 3 + 10(k - 9)\n  # n = 3 + 10(k - 10)\n  # n = 3 + 10(k - 11)\n  # n = 3 + 10(k - 12)\n  # n = 3 + 10(k - 13)\n  # n = 3 + 10(k - 14)\n  # n = 3 + 10(k - 15)\n  # n = 3 + 10(k - 16)\n  # n = 3 + 10(k - 17)\n  # n = 3 + 10(k - 18)\n  # n = 3 + 10(k - 19)\n  # n = 3 + 10(k - 20)\n  # n = 3 + 10(k - 21)\n  # n = 3 + 10(k - 22)\n  # n = 3 + 10(k - 23)\n  # n = 3 + 10(k - 24)\n  # n = 3 + 10(k - 25)\n  # n = 3 + 10(k - 26)\n  # n = 3 + 10(k - 27)\n  # n = 3 + 10(k - 28)\n  # n = 3 + 10(k - 29)\n  # n = 3 + 10(k - 30)\n  # n = 3",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - 3n + 2n - n^2 = 0\n  # 4n^2 - 4n = 0\n  # n(4n - 4) = 0\n  # n = 0 or n = 4\n  # n = 0 is not a decagonal number\n  # n = 4 is a decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n  # n = 4 is the first decagonal number\n",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal_number = (3 * n * n - n) / 2\n  nth_decagonal_number.to_s.length == n.to_s.length\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  num = (Math.sqrt(4 * n + 1) + 1) / 2\n  num == num.to_i\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s == n.to_s\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - 3n + 2n - n^2 = 0\n  # 4n^2 - 3n - 2 = 0\n  # n = (3 +/- sqrt(9 - 16 * -2)) / 8\n  # n = (3 +/- sqrt(25)) / 8\n  # n = (3 +/- 5) / 8\n  # n = 8 / 8 = 1\n  # n = -2 / 8 = -1/4\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n  # n = 1\n  # n = (3 * 1^2 - 1) / 2\n  # n = (3 * 1 - 1) / 2\n  # n = (3 - 1) / 2\n  # n = 2 / 2\n",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n^2 - n) / 2\n  # n = (3 * n^2 - n - 2 * k) / 2\n  # 3 * n^2 - n - 2 * k = 0\n  # n^2 - (1/3) * n - (2/3) * k = 0\n  # n = (1/3) +- sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  # n = (1/3) + sqrt((1/9) + (4/3) * k)\n  #",
    "  # a = 3, b = -1, c = -2n\n  # n = (-b +- sqrt(b^2 - 4ac)) / 2a\n  # n = (-(-1) +- sqrt((-1)^2 - 4*3*(-2n))) / 2*3\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n = (1 +- sqrt(1 + 24n)) / 6\n  # n",
    "  n = n.to_f\n  return (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal.to_s.split('').last(2).join.to_i == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.chars.map(&:to_i).inject(:+) == n\nend",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - 3n + 2n - n = 0\n  # n(n - 3) + 2(n - 1) = 0\n  # n = 3, n = 2\n  # n = 3 is the only solution\n  n == 3\nend",
    "  return false if n < 0\n  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_s.split('').last == '0'\nend",
    "  return true if (Math.sqrt(1 + 4 * 2 * n) - 1) % 4 == 0\n  false\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  nth_decagonal = ((Math.sqrt(1 + 4 * 2 * n) - 1) / 2).to_i\n  return nth_decagonal if nth_decagonal * (3 * nth_decagonal - 1) / 2 == n\n  false\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  num = (Math.sqrt(4 * n + 1) + 1) / 2\n  num.to_i == num\nend",
    "  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal == n\nend",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal % 10 == 0\nend",
    "  # n = (3x^2 - x) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x is an integer if (1 + sqrt(1 + 24n)) % 6 == 0\n  return (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  nth_decagonal_number.to_s.split('').map(&:to_i).inject(:+) == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3x^2 - x) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6 is a positive integer\n  # (1 + sqrt(1 + 24n)) % 6 == 0\n  # (1 + sqrt(1 + 24n)) % 6 == 0\n  # sqrt(1 + 24n) % 6 == 5\n  # 1 + 24n % 6 == 25\n  # 24n % 6 == 24\n  # n % 6 == 1\n  n % 6 == 1\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 4 * 2 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_i == nth_decagonal\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  return nth_decagonal_number\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3*n**2 - n)/2\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal % 1 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 10 != 0\n  return true if n % 100 == 10\n  return false if n % 1000 != 100\n  return true if n % 10000 == 1000\n  return false if n % 100000 != 10000\n  return true if n % 1000000 == 100000\n  return false if n % 10000000 != 1000000\n  return true if n % 100000000 == 10000000\n  return false if n % 1000000000 != 100000000\n  return true if n % 10000000000 == 1000000000\n  return false if n % 100000000000 != 10000000000\n  return true if n % 1000000000000 == 100000000000\n  return false if n % 10000000000000 != 1000000000000\n  return true if n % 100000000000000 == 10000000000000\n  return false if n % 1000000000000000 != 100000000000000\n  return true if n % 10000000000000000 == 1000000000000000\n  return false if n % 100000000000000000 != 10000000000000000\n  return true if n % 1000000000000000000 == 100000000000000000\n  return false if n % 10000000000000000000 != 1000000000000000000\n  return true if n % 100000000000000000000 == 10000000000000000000\n  return false if n % 1000000000000000000000 != 100000000000000000000\n  return true if n % 10000000000000000000000 == 1000000000000000000000\n  return false if n % 100000000000000000000000 != 10000000000000000000000\n  return true if n % 1000000000000000000000000 == 100000000000000000000000\n  return false if n % 10000000000000000000000000 != 1000000000000000000000000\n  return true if n % 100000000000000000000000000 == 10000000000000000000000000\n  return false if n % 1000000000000000000000000000 != 100000000000000000000000000\n  return true if n % 10000000000000000000000000000 == 1000000000000000000000000000\n  return false if n % 100000000000000000000000000000 != 10000000000000000000000000000\n  return true if n % 1000000000000000000000000000000 == 100000000000000000000000000000\n  return false if n % 10000000000000000000000000000000 != 1000000000000000000000000000000\n  return true if n % 100000000000000000000000000000000 == 10000000000000000000000000000000\n  return false if n % 1000000000000000000000000000000000 != 100000000000000000000000000000000\n  return true if n % 10000000000000000000000000000000000 == 1000000000000000000000000000000000\n  return false if n % 100000000000000000000000000000000000 != 10000000000000000000000000000000000\n  return true if n % 1000000000000000000000000000000000000 == 100000000000000000000000000000000000\n  return",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return false if n % 100 != 0\n  return false if n % 1000 != 0\n  return false if n % 10000 != 0\n  return false if n % 100000 != 0\n  return false if n % 1000000 != 0\n  return false if n % 10000000 != 0\n  return false if n % 100000000 != 0\n  return false if n % 1000000000 != 0\n  return false if n % 10000000000 != 0\n  return false if n % 100000000000 != 0\n  return false if n % 1000000000000 != 0\n  return false if n % 10000000000000 != 0\n  return false if n % 100000000000000 != 0\n  return false if n % 1000000000000000 != 0\n  return false if n % 10000000000000000 != 0\n  return false if n % 100000000000000000 != 0\n  return false if n % 1000000000000000000 != 0\n  return false if n % 10000000000000000000 != 0\n  return false if n % 100000000000000000000 != 0\n  return false if n % 1000000000000000000000 != 0\n  return false if n % 10000000000000000000000 != 0\n  return false if n % 100000000000000000000000 != 0\n  return false if n % 1000000000000000000000000 != 0\n  return false if n % 10000000000000000000000000 != 0\n  return false if n % 100000000000000000000000000 != 0\n  return false if n % 1000000000000000000000000000 != 0\n  return false if n % 10000000000000000000000000000 != 0\n  return false if n % 100000000000000000000000000000 != 0\n  return false if n % 1000000000000000000000000000000 != 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return false if n % 100000000000000000000000000000000 != 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return false if n % 10000000000000000000000000000000000 != 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return false if n % 1000000000000000000000000000000000000 != 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return false if n % 100000000000000000000000000000000000000 != 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return false if n % 10000000000000000000000000000000000000000 != 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  (Math.sqrt(1 + 4 * 2 * n) + 1) % 4 == 0\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  return nth_decagonal_number\nend",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3*n^2 - n)/2\n  # n = (3*n^2 - n - 2*k)/2\n  # 3*n^2 - n - 2*k = 0\n  # n^2 - (1/3)n - (2/3)k = 0\n  # n = (1/3) +- sqrt((1/3)^2 - 4*(2/3)k)\n  # n = (1/3) +- sqrt(1/9 - (4/3)k)\n  # n = (1/3) +- sqrt(1/9 - (4/3)k)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k/3)\n  # n = (1/3) +- sqrt(1/9 - 4k",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  return false if n < 1\n  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal == n\nend",
    "  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  return nth_decagonal\nend",
    "  return false if n < 1\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root == root.to_i\nend",
    "  # n = (3*n**2 - n)/2\n  # n = (3*n**2 - n)\n  # n = 3*n**2 - n\n  # n = 3*n**2 - n - 2*n\n  # n = 3*n**2 - 3*n\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*(3*n - 3)\n  # n = n*",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  # n = (3 * n^2 - n) / 2\n  # 3n^2 - n - 2n = 0\n  # n(3n - 1) = 2\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n  # n = 2 / (3n - 1)\n ",
    "  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  nth_decagonal_number = (3 * n**2 - n) / 2\n  return nth_decagonal_number\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2"
  ]
}