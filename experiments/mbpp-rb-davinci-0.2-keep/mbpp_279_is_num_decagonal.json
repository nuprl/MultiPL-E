{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_num_decagonal\n    candidate = method(:is_num_decagonal)\n    assert_equal(27, candidate.call(3))\n    assert_equal(175, candidate.call(7))\n    assert_equal(370, candidate.call(10))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal == n\nend",
    "  nth_decagonal_number = (3 * n * n - n) / 2\n  nth_decagonal_number == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  return false if n < 1\n  root = (Math.sqrt(4 * n + 1) + 1) / 2\n  root.to_i == root\nend",
    "  n = n.to_f\n  return (Math.sqrt(1 + 40 * n) + 1) % 10 == 0\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal_number(n) == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  return nth_decagonal\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  nth_decagonal\nend",
    "  nth_decagonal = (3 * n * n - n) / 2\n  nth_decagonal % 10 == 0\nend",
    "  nth_decagonal = (3 * n**2 - n) / 2\n  nth_decagonal.to_i == nth_decagonal\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 10 != 0\n  return true if n % 100 == 0\n  return false if n % 1000 != 0\n  return true if n % 10000 == 0\n  return false if n % 100000 != 0\n  return true if n % 1000000 == 0\n  return false if n % 10000000 != 0\n  return true if n % 100000000 == 0\n  return false if n % 1000000000 != 0\n  return true if n % 10000000000 == 0\n  return false if n % 100000000000 != 0\n  return true if n % 1000000000000 == 0\n  return false if n % 10000000000000 != 0\n  return true if n % 100000000000000 == 0\n  return false if n % 1000000000000000 != 0\n  return true if n % 10000000000000000 == 0\n  return false if n % 100000000000000000 != 0\n  return true if n % 1000000000000000000 == 0\n  return false if n % 10000000000000000000 != 0\n  return true if n % 100000000000000000000 == 0\n  return false if n % 1000000000000000000000 != 0\n  return true if n % 10000000000000000000000 == 0\n  return false if n % 100000000000000000000000 != 0\n  return true if n % 1000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000 != 0\n  return true if n % 1000000000000000000000000000000000000 == 0\n  return false if n % 10000000000000000000000000000000000000 != 0\n  return true if n % 100000000000000000000000000000000000000 == 0\n  return false if n % 1000000000000000000000000000000000000000 != 0\n  return true if n % 10000000000000000000000000000000000000000 == 0\n  return false if n % 100000000000000000000000000000000000000000 != 0\n  return",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x) / 2",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_decagonal = 0\n  i = 1\n  while nth_decagonal < n\n    nth_decagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_decagonal == n\nend",
    "  nth_decagonal = n * (3 * n - 2)\n  return nth_decagonal\nend"
  ]
}