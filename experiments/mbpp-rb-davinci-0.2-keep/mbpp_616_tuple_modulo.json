{
  "name": "mbpp_616_tuple_modulo",
  "language": "rb",
  "prompt": "# Write a function which takes two tuples of the same length and performs the element wise modulo.\ndef tuple_modulo(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tuple_modulo\n    candidate = method(:tuple_modulo)\n    assert_equal([0, 4, 5, 1], candidate.call([10, 4, 5, 6], [5, 6, 7, 5]))\n    assert_equal([5, 5, 6, 1], candidate.call([11, 5, 6, 7], [6, 7, 8, 6]))\n    assert_equal([5, 6, 7, 1], candidate.call([12, 6, 7, 8], [7, 8, 9, 7]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  result = []\n  test_tup1.each_with_index do |num, index|\n    result << num % test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x % y }\nend"
  ]
}