{
  "name": "mbpp_397_median_numbers",
  "language": "rb",
  "prompt": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  else\n    if a < c\n      a\n    elsif b < c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ikpgj1g\nStarted\n.\nFinished in 0.000613671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1629.54 tests/s, 4888.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    return a\n  elsif a < b && a > c\n    return a\n  elsif b > a && b < c\n    return b\n  elsif b < a && b > c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1oxxeqk7\nStarted\n.\nFinished in 0.000531716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.70 tests/s, 5642.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if (a - b).abs > (b - c).abs\n    b\n  elsif (a - b).abs < (b - c).abs\n    a\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "Loaded suite /tmp/tmpagvknvf9\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmpagvknvf9.rb:17:in `test_median_numbers'\n     14:     candidate = method(:median_numbers)\n     15:     assert_equal(55.0, candidate.call(25, 55, 65))\n     16:     assert_equal(20.0, candidate.call(20, 10, 30))\n  => 17:     assert_equal(45.0, candidate.call(15, 45, 75))\n     18:   end\n     19: end\n<45.0> expected but was\n<75>\n\ndiff:\n? 45.0\n? 7   \n? ? --\n===============================================================================\n\nFinished in 0.008135835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n122.91 tests/s, 368.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b && a < c\n    if b < c\n      b\n    else\n      c\n    end\n  elsif b < a && b < c\n    if a < c\n      a\n    else\n      c\n    end\n  else\n    if a < b\n      a\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpunt5i9_n\nStarted\n.\nFinished in 0.000523624 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1909.77 tests/s, 5729.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    a\n  elsif b > a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3q05q1gn\nStarted\n.\nFinished in 0.000516323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.77 tests/s, 5810.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  # TODO: return the median of a, b and c\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmhnya73b\nStarted\n.\nFinished in 0.00113294 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n882.66 tests/s, 2647.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    a\n  elsif b > a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3q05q1gn\nStarted\n.\nFinished in 0.000516323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1936.77 tests/s, 5810.32 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    a\n  elsif a < b && a > c\n    a\n  elsif b > a && b < c\n    b\n  elsif b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2kintfmm\nStarted\n.\nFinished in 0.000426429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2345.06 tests/s, 7035.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    return a\n  elsif a > c && a < b\n    return a\n  elsif b > a && b < c\n    return b\n  elsif b > c && b < a\n    return b\n  elsif c > a && c < b\n    return c\n  elsif c > b && c < a\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz_6qvy_u\nStarted\n.\nFinished in 0.000540765 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1849.23 tests/s, 5547.70 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    return a\n  elsif b > a && b < c || b < a && b > c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0x6ti6e\nStarted\n.\nFinished in 0.000565419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1768.60 tests/s, 5305.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a > c\n    if b > c\n      b\n    else\n      c\n    end\n  elsif b > a && b > c\n    if a > c\n      a\n    else\n      c\n    end\n  elsif c > a && c > b\n    if a > b\n      a\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0v8x6ysy\nStarted\n.\nFinished in 0.000425257 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.52 tests/s, 7054.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a > c\n    if b > c\n      return b\n    else\n      return c\n    end\n  elsif b > a && b > c\n    if a > c\n      return a\n    else\n      return c\n    end\n  else\n    if a > b\n      return a\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvgb8mqru\nStarted\n.\nFinished in 0.000416281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2402.22 tests/s, 7206.67 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if (a - b).abs > (b - c).abs\n    a, b = b, a\n  end\n  if (b - a).abs > (b - c).abs\n    b, c = c, b\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "Loaded suite /tmp/tmp_yb63145\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmp_yb63145.rb:15:in `test_median_numbers'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median_numbers\n     14:     candidate = method(:median_numbers)\n  => 15:     assert_equal(55.0, candidate.call(25, 55, 65))\n     16:     assert_equal(20.0, candidate.call(20, 10, 30))\n     17:     assert_equal(45.0, candidate.call(15, 45, 75))\n     18:   end\n<55.0> expected but was\n<25>\n\ndiff:\n? 255.0\n===============================================================================\n\nFinished in 0.006597975 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n151.56 tests/s, 151.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  elsif a < c\n    return a\n  elsif b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "Loaded suite /tmp/tmpmlv8tsu2\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmpmlv8tsu2.rb:23:in `test_median_numbers'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_median_numbers\n     22:     candidate = method(:median_numbers)\n  => 23:     assert_equal(55.0, candidate.call(25, 55, 65))\n     24:     assert_equal(20.0, candidate.call(20, 10, 30))\n     25:     assert_equal(45.0, candidate.call(15, 45, 75))\n     26:   end\n<55.0> expected but was\n<25>\n\ndiff:\n? 255.0\n===============================================================================\n\nFinished in 0.006806445 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n146.92 tests/s, 146.92 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    return a\n  elsif a < b && a > c\n    return a\n  elsif b > a && b < c\n    return b\n  elsif b < a && b > c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1oxxeqk7\nStarted\n.\nFinished in 0.000531716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.70 tests/s, 5642.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  else\n    if a < c\n      a\n    elsif b < c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ikpgj1g\nStarted\n.\nFinished in 0.000613671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1629.54 tests/s, 4888.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b && b < c\n    return b\n  elsif b < a && a < c\n    return a\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxrzstomf\nStarted\n.\nFinished in 0.000556232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1797.81 tests/s, 5393.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6098yjmv\nStarted\n.\nFinished in 0.000820617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1218.60 tests/s, 3655.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if (a - b).abs > (b - c).abs && (a - b).abs > (a - c).abs\n    a\n  elsif (b - a).abs > (b - c).abs && (b - a).abs > (a - c).abs\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "Loaded suite /tmp/tmpx89isw3n\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmpx89isw3n.rb:15:in `test_median_numbers'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median_numbers\n     14:     candidate = method(:median_numbers)\n  => 15:     assert_equal(55.0, candidate.call(25, 55, 65))\n     16:     assert_equal(20.0, candidate.call(20, 10, 30))\n     17:     assert_equal(45.0, candidate.call(15, 45, 75))\n     18:   end\n<55.0> expected but was\n<65>\n\ndiff:\n? 655.0\n===============================================================================\n\nFinished in 0.00649652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.93 tests/s, 153.93 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  elsif a < c\n    a\n  elsif b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "Loaded suite /tmp/tmpercq4d0_\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmpercq4d0_.rb:23:in `test_median_numbers'\n     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_median_numbers\n     22:     candidate = method(:median_numbers)\n  => 23:     assert_equal(55.0, candidate.call(25, 55, 65))\n     24:     assert_equal(20.0, candidate.call(20, 10, 30))\n     25:     assert_equal(45.0, candidate.call(15, 45, 75))\n     26:   end\n<55.0> expected but was\n<25>\n\ndiff:\n? 255.0\n===============================================================================\n\nFinished in 0.007798647 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n128.23 tests/s, 128.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if c > a\n      return a\n    elsif c > b\n      return c\n    else\n      return b\n    end\n  else\n    if c > b\n      return b\n    elsif c > a\n      return c\n    else\n      return a\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx261ed58\nStarted\n.\nFinished in 0.000393479 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.43 tests/s, 7624.30 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if (a - b).abs < (b - c).abs\n    b\n  elsif (b - c).abs < (a - b).abs\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "Loaded suite /tmp/tmp42isnvxa\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmp42isnvxa.rb:16:in `test_median_numbers'\n     13:   def test_median_numbers\n     14:     candidate = method(:median_numbers)\n     15:     assert_equal(55.0, candidate.call(25, 55, 65))\n  => 16:     assert_equal(20.0, candidate.call(20, 10, 30))\n     17:     assert_equal(45.0, candidate.call(15, 45, 75))\n     18:   end\n     19: end\n<20.0> expected but was\n<10>\n\ndiff:\n? 20.0\n? 1   \n? ? --\n===============================================================================\n\nFinished in 0.006533668 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.05 tests/s, 306.11 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    else\n      if b > c\n        return c\n      else\n        return b\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4ok82vo_\nStarted\n.\nFinished in 0.000596431 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1676.64 tests/s, 5029.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    a\n  elsif a > c && a < b\n    a\n  elsif b > a && b < c\n    b\n  elsif b > c && b < a\n    b\n  elsif c > a && c < b\n    c\n  elsif c > b && c < a\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4db7mrsh\nStarted\n.\nFinished in 0.00053366 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1873.85 tests/s, 5621.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    return a\n  elsif a < b && a > c\n    return a\n  elsif b > a && b < c\n    return b\n  elsif b < a && b > c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1oxxeqk7\nStarted\n.\nFinished in 0.000531716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.70 tests/s, 5642.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b\n    if b < c\n      return b\n    elsif a < c\n      return c\n    else\n      return a\n    end\n  else\n    if a < c\n      return a\n    elsif b < c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpht2hgbgs\nStarted\n.\nFinished in 0.000395452 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2528.75 tests/s, 7586.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  else\n    if a < c\n      a\n    elsif b < c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ikpgj1g\nStarted\n.\nFinished in 0.000613671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1629.54 tests/s, 4888.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6098yjmv\nStarted\n.\nFinished in 0.000820617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1218.60 tests/s, 3655.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    return a\n  elsif a < b && a > c\n    return a\n  elsif b > a && b < c\n    return b\n  elsif b < a && b > c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1oxxeqk7\nStarted\n.\nFinished in 0.000531716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1880.70 tests/s, 5642.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a <= b && b <= c\n    return b\n  elsif b <= a && a <= c\n    return a\n  elsif a <= c && c <= b\n    return c\n  elsif c <= a && a <= b\n    return a\n  elsif b <= c && c <= a\n    return c\n  elsif c <= b && b <= a\n    return b\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphtiauuyj\nStarted\n.\nFinished in 0.000383829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2605.33 tests/s, 7815.98 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  # TODO: return the median of a, b and c\n  if a > b && a > c\n    if b > c\n      return b\n    else\n      return c\n    end\n  elsif b > a && b > c\n    if a > c\n      return a\n    else\n      return c\n    end\n  else\n    if a > b\n      return a\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplchzprxj\nStarted\n.\nFinished in 0.000549362 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1820.29 tests/s, 5460.88 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if (a - b).abs < (b - c).abs\n    b\n  elsif (a - b).abs > (b - c).abs\n    c\n  else\n    a\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "Loaded suite /tmp/tmp9a5ioule\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmp9a5ioule.rb:15:in `test_median_numbers'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median_numbers\n     14:     candidate = method(:median_numbers)\n  => 15:     assert_equal(55.0, candidate.call(25, 55, 65))\n     16:     assert_equal(20.0, candidate.call(20, 10, 30))\n     17:     assert_equal(45.0, candidate.call(15, 45, 75))\n     18:   end\n<55.0> expected but was\n<65>\n\ndiff:\n? 655.0\n===============================================================================\n\nFinished in 0.008326483 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.10 tests/s, 120.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    a\n  elsif a < b && a > c\n    a\n  elsif b > a && b < c\n    b\n  elsif b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2kintfmm\nStarted\n.\nFinished in 0.000426429 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2345.06 tests/s, 7035.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if (a - b).abs < (b - c).abs\n    b\n  elsif (a - b).abs > (b - c).abs\n    c\n  else\n    a\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "Loaded suite /tmp/tmp9a5ioule\nStarted\nF\n===============================================================================\nFailure: test_median_numbers(TestHumanEval)\n/tmp/tmp9a5ioule.rb:15:in `test_median_numbers'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_median_numbers\n     14:     candidate = method(:median_numbers)\n  => 15:     assert_equal(55.0, candidate.call(25, 55, 65))\n     16:     assert_equal(20.0, candidate.call(20, 10, 30))\n     17:     assert_equal(45.0, candidate.call(15, 45, 75))\n     18:   end\n<55.0> expected but was\n<65>\n\ndiff:\n? 655.0\n===============================================================================\n\nFinished in 0.008326483 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n120.10 tests/s, 120.10 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  else\n    if a < c\n      a\n    elsif b < c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ikpgj1g\nStarted\n.\nFinished in 0.000613671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1629.54 tests/s, 4888.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      b\n    elsif a > c\n      c\n    else\n      a\n    end\n  else\n    if a > c\n      a\n    elsif b > c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw0zj198e\nStarted\n.\nFinished in 0.000526106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1900.76 tests/s, 5702.27 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a < b\n    if b < c\n      b\n    elsif a < c\n      c\n    else\n      a\n    end\n  else\n    if a < c\n      a\n    elsif b < c\n      c\n    else\n      b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3ikpgj1g\nStarted\n.\nFinished in 0.000613671 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1629.54 tests/s, 4888.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    return a\n  elsif b > a && b < c || b < a && b > c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpr0x6ti6e\nStarted\n.\nFinished in 0.000565419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1768.60 tests/s, 5305.80 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c || a < b && a > c\n    a\n  elsif b > a && b < c || b < a && b > c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpj0z63q6c\nStarted\n.\nFinished in 0.000389194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2569.41 tests/s, 7708.24 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b && a < c\n    a\n  elsif b > a && b < c\n    b\n  elsif c > a && c < b\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp77pqtlx6\nStarted\n.\nFinished in 0.000399796 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.28 tests/s, 7503.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if b > c\n      return b\n    elsif a > c\n      return c\n    else\n      return a\n    end\n  else\n    if a > c\n      return a\n    elsif b > c\n      return c\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2m18kp8t\nStarted\n.\nFinished in 0.000387917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2577.87 tests/s, 7733.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    a, b = b, a\n  end\n  if b > c\n    b, c = c, b\n  end\n  if a > b\n    a, b = b, a\n  end\n  b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4t8fw2e1\nStarted\n.\nFinished in 0.00051548 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1939.94 tests/s, 5819.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      a\n    elsif b > c\n      b\n    else\n      c\n    end\n  else\n    if a > c\n      a\n    elsif b < c\n      b\n    else\n      c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2ruh6zup\nStarted\n.\nFinished in 0.000389276 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2568.87 tests/s, 7706.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a < c\n      return a\n    elsif b > c\n      return b\n    else\n      return c\n    end\n  else\n    if a > c\n      return a\n    elsif b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbjepb2pv\nStarted\n.\nFinished in 0.001079802 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n926.10 tests/s, 2778.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of three numbers.\ndef median_numbers(a, b, c)\n  if a > b\n    if a > c\n      if b > c\n        return b\n      else\n        return c\n      end\n    else\n      return a\n    end\n  else\n    if b > c\n      if a > c\n        return a\n      else\n        return c\n      end\n    else\n      return b\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median_numbers\n    candidate = method(:median_numbers)\n    assert_equal(55.0, candidate.call(25, 55, 65))\n    assert_equal(20.0, candidate.call(20, 10, 30))\n    assert_equal(45.0, candidate.call(15, 45, 75))\n  end\nend\n",
      "timestamp": 1665509793,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpidhyh3xz\nStarted\n.\nFinished in 0.000506768 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.29 tests/s, 5919.87 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}