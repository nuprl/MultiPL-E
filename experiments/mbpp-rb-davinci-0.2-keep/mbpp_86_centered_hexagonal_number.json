{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "rb",
  "prompt": "# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_centered_hexagonal_number\n    candidate = method(:centered_hexagonal_number)\n    assert_equal(271, candidate.call(10))\n    assert_equal(7, candidate.call(2))\n    assert_equal(217, candidate.call(9))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2*n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  (n * (2 * n - 1))\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend",
    "  n * (2 * n - 1)\nend"
  ]
}