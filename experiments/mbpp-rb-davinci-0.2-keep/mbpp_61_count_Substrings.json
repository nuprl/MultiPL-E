{
  "name": "mbpp_61_count_Substrings",
  "language": "rb",
  "prompt": "# Write a python function to count the number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_Substrings\n    candidate = method(:count_Substrings)\n    assert_equal(6, candidate.call(\"112112\"))\n    assert_equal(6, candidate.call(\"111\"))\n    assert_equal(12, candidate.call(\"1101112\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      sum = 0\n      s[i..j-1].each_char do |c|\n        sum += c.to_i\n      end\n      if sum == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "\tcount = 0\n\tfor i in 0..s.length-1\n\t\tfor j in i..s.length-1\n\t\t\tsum = 0\n\t\t\tfor k in i..j\n\t\t\t\tsum += s[k].to_i\n\t\t\tend\n\t\t\tif sum == (j-i+1)\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if sum_of_digits(s[i..j]) == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].chars.map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j-1].length == s[i..j-1].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split(\"\").map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    s.each_char.with_index do |char, index|\n        sum = 0\n        (index..s.length-1).each do |i|\n            sum += s[i].to_i\n            if sum == (i-index+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(0, :+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "\tcount = 0\n\tfor i in 0..s.length-1\n\t\tfor j in i..s.length-1\n\t\t\tsum = 0\n\t\t\tfor k in i..j\n\t\t\t\tsum += s[k].to_i\n\t\t\tend\n\t\t\tif sum == j-i+1\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "\tcount = 0\n\tfor i in 0..s.length\n\t\tfor j in i+1..s.length\n\t\t\tsum = 0\n\t\t\tfor k in i..j\n\t\t\t\tsum += s[k].to_i\n\t\t\tend\n\t\t\tif sum == (j-i+1)\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    count=0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum=0\n            for k in i..j\n                sum+=s[k].to_i\n            end\n            if sum==(j-i+1)\n                count+=1\n            end\n        end\n    end\n    return count\nend\nputs count_Substrings(\"123\")\nputs count_Substrings(\"1234\")\nputs count_Substrings(\"12345\")\nputs count_Substrings(\"1234567\")\nputs count_Substrings(\"123456789\")\nputs count_Substrings(\"1234567890\")\nputs count_Substrings(\"12345678901\")\nputs count_Substrings(\"123456789012\")\nputs count_Substrings(\"1234567890123\")\nputs count_Substrings(\"12345678901234\")\nputs count_Substrings(\"123456789012345\")\nputs count_Substrings(\"1234567890123456\")\nputs count_Substrings(\"12345678901234567\")\nputs count_Substrings(\"123456789012345678\")\nputs count_Substrings(\"1234567890123456789\")\nputs count_Substrings(\"12345678901234567890\")\nputs count_Substrings(\"123456789012345678901\")\nputs count_Substrings(\"1234567890123456789012\")\nputs count_Substrings(\"12345678901234567890123\")\nputs count_Substrings(\"123456789012345678901234\")\nputs count_Substrings(\"1234567890123456789012345\")\nputs count_Substrings(\"12345678901234567890123456\")\nputs count_Substrings(\"123456789012345678901234567\")\nputs count_Substrings(\"1234567890123456789012345678\")\nputs count_Substrings(\"12345678901234567890123456789\")\nputs count_Substrings",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length\n        for j in i..s.length\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    (index...s.length).each do |i|\n      count += 1 if s[index..i].split(\"\").map(&:to_i).inject(:+) == s[index..i].length\n    end\n  end\n  count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum = sum + s[k].to_i\n      end\n      if sum == (j-i+1)\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum = sum + s[k].to_i\n            end\n            if sum == (j-i+1)\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in (0..s.length)\n        for j in (i..s.length)\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum = sum + s[k].to_i\n            end\n            if sum == (j-i+1)\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    # Write your code here\n    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j-1].length == s[i..j-1].chars.map(&:to_i).inject(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            count += 1 if sum == (j-i+1)\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            sum = 0\n            for k in i..j-1\n                sum += s[k].to_i\n            end\n            if sum == j-i\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            sum = 0\n            for k in i..j-1\n                sum += s[k].to_i\n            end\n            if sum == j-i\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0...s.length\n        for j in i...s.length\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if sum_of_digits(s[i..j]) == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      sum = 0\n      for k in i..j-1\n        sum += s[k].to_i\n      end\n      if sum == j-i\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    (index...s.length).each do |i|\n      count += 1 if s[index..i].split('').map(&:to_i).reduce(:+) == s[index..i].length\n    end\n  end\n  count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum = sum + s[k].to_i\n      end\n      if sum == (j-i+1)\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "\tcount = 0\n\tfor i in 0..s.length-1\n\t\tfor j in i..s.length-1\n\t\t\tif s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend\nputs count_Substrings(\"abcabc\")\nputs count_Substrings(\"abccba\")\nputs count_Substrings(\"abccbaabccba\")\nputs count_Substrings(\"123abccba123\")\nputs count_Substrings(\"123abccba1\")\nputs count_Substrings(\"123abccba\")\nputs count_Substrings(\"123abcabc\")\nputs count_Substrings(\"123\")\nputs count_Substrings(\"abc\")\nputs count_Substrings(\"abbc\")",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "",
    "\tcount = 0\n\tfor i in 0..s.length-1\n\t\tfor j in i..s.length-1\n\t\t\tsum = 0\n\t\t\tfor k in i..j\n\t\t\t\tsum += s[k].to_i\n\t\t\tend\n\t\t\tif sum == j-i+1\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  s.each_char.with_index do |char, index|\n    (index..s.length).each do |i|\n      if s[index..i].length == s[index..i].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum = sum + s[k].to_i\n            end\n            if sum == (j-i+1)\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length\n        for j in i+1..s.length\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  (0...s.length).each do |i|\n    (i...s.length).each do |j|\n      if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n        count += 1\n      end\n    end\n  end\n  count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "\tcount = 0\n\tfor i in 0..s.length\n\t\tfor j in i..s.length\n\t\t\tif sum_of_digits(s[i..j]) == (j-i+1)\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      sum = 0\n      for k in i..j-1\n        sum += s[k].to_i\n      end\n      if sum == j-i\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum = sum + s[k].to_i\n            end\n            if sum == (j-i+1)\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0...s.length\n        for j in i...s.length\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length\n        for j in i+1..s.length\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum = sum + s[k].to_i\n            end\n            if sum == (j-i+1)\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).inject(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    s.each_char.with_index do |char, index|\n        if s[index..-1].length > 1\n            s[index..-1].each_char.with_index do |char2, index2|\n                if (index + index2 + 1) == s[index..index + index2 + 1].split('').map(&:to_i).sum\n                    count += 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if (s[i..j].length == s[i..j].split('').map(&:to_i).inject(:+))\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in (1..s.length)\n        for j in (0..s.length-i)\n            sum = 0\n            for k in (j..j+i-1)\n                sum += s[k].to_i\n            end\n            if sum == i\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in (0..s.length)\n        for j in (i..s.length)\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i..s.length-1).each do |j|\n      sum = 0\n      (i..j).each do |k|\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in (0..s.length)\n        for j in (i..s.length)\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j-1].length == s[i..j-1].chars.map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if s[i..j-1].length == s[i..j-1].split(\"\").map(&:to_i).inject(:+)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  (0..s.length).each do |i|\n    (i..s.length).each do |j|\n      count += 1 if s[i...j].length == s[i...j].split('').map(&:to_i).inject(:+)\n    end\n  end\n  count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if sum_of_digits(s[i..j]) == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if (s[i..j].sum == s[i..j].length)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..(s.length-1)\n        for j in i..(s.length-1)\n            if s[i..j].length == s[i..j].split('').map(&:to_i).reduce(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      sum = 0\n      for k in i..j-1\n        sum += s[k].to_i\n      end\n      if sum == j-i\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            sum = 0\n            for k in i..j-1\n                sum += s[k].to_i\n            end\n            if sum == j-i\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend\nputs count_Substrings(\"1234\")\nputs count_Substrings(\"12243660\")\nputs count_Substrings(\"123456789\")\nputs count_Substrings(\"1234567891011\")",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend\nputs count_Substrings(\"1234\")\nputs count_Substrings(\"12243660\")\nputs count_Substrings(\"123456789\")\nputs count_Substrings(\"1212243660\")\nputs count_Substrings(\"1234567891011121314151617181920212223\")\nputs count_Substrings(\"1234567891011121314151617181920\")\nputs count_Substrings(\"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i+1..s.length\n            if s[i..j-1].length == s[i..j-1].split('').map(&:to_i).sum\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1 do\n        for j in i..s.length-1 do\n            sum = 0\n            for k in i..j do\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1 do\n    for j in i..s.length-1 do\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i+1..s.length\n      if sum_of_digits(s[i..j-1]) == s[i..j-1].length\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      count += 1 if sum == (j-i+1)\n    end\n  end\n  return count\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    (i+1..s.length).each do |j|\n      if (s[i..j-1].split(\"\").map(&:to_i).inject(:+) == s[i..j-1].length)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      if sum_of_digits(s[i..j]) == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if s[i..j].length == s[i..j].split(\"\").map(&:to_i).inject(:+)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend\nputs count_Substrings(\"123\")\nputs count_Substrings(\"1234\")\nputs count_Substrings(\"12345\")\nputs count_Substrings(\"123456789\")",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum = sum + s[k].to_i\n            end\n            if sum == j-i+1\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nputs count_Substrings(\"1234\")\nputs count_Substrings(\"213678\")\nputs count_Substrings(\"1289\")",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == j-i+1\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == j-i+1\n        count += 1\n      end\n    end\n  end\n  return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            sum = 0\n            for k in i..j\n                sum += s[k].to_i\n            end\n            if sum == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..s.length-1\n        for j in i..s.length-1\n            if sum_of_digits(s[i..j]) == (j-i+1)\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    for j in i..s.length-1\n      sum = 0\n      for k in i..j\n        sum += s[k].to_i\n      end\n      if sum == (j-i+1)\n        count += 1\n      end\n    end\n  end\n  return count\nend"
  ]
}