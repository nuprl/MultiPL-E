{
  "name": "mbpp_777_find_sum",
  "language": "rb",
  "prompt": "# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_sum\n    candidate = method(:find_sum)\n    assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))\n    assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))\n    assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend",
    "  arr.uniq.inject(:+)\nend",
    "  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend",
    "  arr.uniq.inject(0) { |sum, x| sum + x }\nend",
    "  sum = 0\n  arr.each do |a|\n    if arr.count(a) == 1\n      sum += a\n    end\n  end\n  sum\nend",
    "  arr.uniq.sum\nend",
    "  arr.uniq.sum\nend",
    "  arr.uniq.inject(0) {|sum, x| sum + x}\nend",
    "  arr.uniq.reduce(:+)\nend",
    "  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend",
    "  arr.uniq.sum\nend",
    "  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend",
    "  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend",
    "  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend",
    "  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  sum\nend",
    "  sum = 0\n  arr.each do |i|\n    if arr.count(i) == 1\n      sum += i\n    end\n  end\n  puts sum\nend",
    "  sum = 0\n  arr.each do |num|\n    if arr.count(num) == 1\n      sum += num\n    end\n  end\n  sum\nend",
    "  arr.uniq.sum\nend",
    "  arr.uniq.sum\nend",
    "  sum = 0\n  arr.each do |i|\n    sum += i if arr.count(i) == 1\n  end\n  sum\nend"
  ]
}