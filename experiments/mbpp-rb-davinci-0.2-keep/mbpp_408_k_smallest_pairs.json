{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rb",
  "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  nums1.map { |n1| nums2.map { |n2| [n1, n2] } }.flatten(1).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  queue = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      queue << [num1, num2]\n    end\n  end\n  queue.sort_by! { |pair| pair.first + pair.last }\n  queue.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by! {|pair| pair.sum}\n  result[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  # sort the two arrays\n  nums1.sort!\n  nums2.sort!\n  # create a new array to store the pairs\n  pairs = []\n  # iterate through the first array\n  nums1.each do |num1|\n    # iterate through the second array\n    nums2.each do |num2|\n      # push the pairs into the new array\n      pairs << [num1, num2]\n    end\n  end\n  # sort the pairs array\n  pairs.sort!\n  # return the first k pairs\n  pairs[0..k-1]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  heap = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      heap << [num1 + num2, num1, num2]\n    end\n  end\n  heap.sort!\n  heap[0...k].map { |pair| pair[1..2] }\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by! { |pair| pair.sum }\n  # pairs[0...k]",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  # return [] if k == 0\n  # return nums1.map { |n| [n, nums2[0]] } if nums2.size == 1\n  # return nums2.map { |n| [nums1[0], n] } if nums1.size == 1",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  queue = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      queue << [num1, num2]\n    end\n  end\n  queue.sort_by! { |pair| pair.sum }\n  queue[0...k]\nend",
    "  # nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\n  nums1.product(nums2).sort_by(&:sum).take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by! { |pair| pair.sum }\n  # pairs[0...k]",
    "  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while i < nums1.length && j < nums2.length && result.length < k\n    result << [nums1[i], nums2[j]]\n    if i == nums1.length - 1\n      j += 1\n    elsif j == nums2.length - 1\n      i += 1\n    elsif nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1]\n      i += 1\n    else\n      j += 1\n    end\n  end\n  result\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair.sum }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  heap = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      heap << [n1 + n2, [n1, n2]]\n    end\n  end\n  heap.sort_by!(&:first)\n  heap.take(k).map(&:last)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  return nums1.map { |n| [n, nums2[0]] } if k >= nums1.length\n  return nums1.zip(nums2).take(k) if k >= nums1.length * nums2.length\n  nums1.map { |n| [n, nums2[0]] } + nums1.map { |n| [n, nums2[1]] }\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.first + pair.last }\n  result.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair.inject(:+) }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).map { |pair| pair.sum }.sort.first(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.first + pair.last }\n  res.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.first + pair.last }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair.first + pair.last }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  # nums1 = [1, 7, 11]\n  # nums2 = [2, 4, 6]\n  # k = 3\n  # output = [[1, 2], [1, 4], [1, 6]]",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }[0...k]\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |num1|\n  #   nums2.each do |num2|\n  #     pairs << [num1, num2]\n  #   end\n  # end\n  #\n  # pairs.sort_by! { |pair| pair.sum }\n  # pairs[0...k]",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair.first + pair.last }.take(k)\nend",
    "  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  # nums1 = [1, 7, 11]\n  # nums2 = [2, 4, 6]\n  # k = 3\n  # return [[1,2],[1,4],[1,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]]\n  # return [[1,2],[1",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair.inject(:+) }.take(k)\nend",
    "  # nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\n  nums1.product(nums2).map { |a, b| a + b }.sort.take(k)\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num|\n    nums2.each do |num2|\n      result << [num, num2]\n    end\n  end\n  result.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by { |pair| pair.reduce(:+) }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.inject(:+) }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  nums1.sort!\n  nums2.sort!\n  result = []\n  i = 0\n  j = 0\n  while i < nums1.length && j < nums2.length && k > 0\n    if nums1[i] < nums2[j]\n      result << [nums1[i], nums2[j]]\n      i += 1\n    else\n      result << [nums1[i], nums2[j]]\n      j += 1\n    end\n    k -= 1\n  end\n  result\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.reduce(:+) }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs.take(k)\nend",
    "  res = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      res << [n1, n2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs.take(k)\nend",
    "  # return [] if nums1.empty? || nums2.empty?\n  #\n  # pairs = []\n  # nums1.each do |n1|\n  #   nums2.each do |n2|\n  #     pairs << [n1, n2]\n  #   end\n  # end\n  #\n  # pairs.sort_by { |pair| pair.sum }.take(k)",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }.take(k)\nend",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.first + pair.last }\n  pairs.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.first + pair.last }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  queue = PriorityQueue.new\n  nums1.each do |num1|\n    nums2.each do |num2|\n      queue.push([num1, num2], num1 + num2)\n    end\n  end\n  queue.pop(k).map(&:first)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair[0] + pair[1] }\n  result[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  res = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      res << [num1, num2]\n    end\n  end\n  res.sort_by! { |pair| pair[0] + pair[1] }\n  res[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).map { |pair| pair.sum }.sort.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend"
  ]
}