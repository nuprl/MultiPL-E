{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rb",
  "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_k_smallest_pairs\n    candidate = method(:k_smallest_pairs)\n    assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))\n    assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))\n    assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  k = [k, nums1.size * nums2.size].min\n  nums1.map { |n1| nums2.map { |n2| [n1, n2] } }.flatten(1).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by! { |pair| pair.sum }\n  result[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end",
    "  nums1.product(nums2).sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  queue = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      queue << [num1, num2]\n    end\n  end\n  queue.sort_by! { |pair| pair.first + pair.last }\n  queue.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair[0] + pair[1] }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair[0] + pair[1] }.take(k)\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by! { |pair| pair.sum }\n  pairs[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  pairs = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      pairs << [n1, n2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |n1|\n    nums2.each do |n2|\n      result << [n1, n2]\n    end\n  end\n  result.sort_by! {|pair| pair.sum}\n  result[0...k]\nend",
    "  nums1.product(nums2).sort_by { |a, b| a + b }.take(k)\nend",
    "  # sort the two arrays\n  nums1.sort!\n  nums2.sort!\n  # create a new array to store the pairs\n  pairs = []\n  # iterate through the first array\n  nums1.each do |num1|\n    # iterate through the second array\n    nums2.each do |num2|\n      # push the pairs into the new array\n      pairs << [num1, num2]\n    end\n  end\n  # sort the pairs array\n  pairs.sort!\n  # return the first k pairs\n  pairs[0..k-1]\nend",
    "  return [] if nums1.empty? || nums2.empty?\n  result = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      result << [num1, num2]\n    end\n  end\n  result.sort_by { |pair| pair.sum }[0...k]\nend",
    "  pairs = []\n  nums1.each do |num1|\n    nums2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n  pairs.sort_by { |pair| pair.sum }.take(k)\nend"
  ]
}