{
  "name": "mbpp_799_left_rotate",
  "language": "rb",
  "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n, d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_left_rotate\n    candidate = method(:left_rotate)\n    assert_equal(64, candidate.call(16, 2))\n    assert_equal(40, candidate.call(10, 2))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(792, candidate.call(99, 3))\n    assert_equal(8, candidate.call(1, 3))\n    assert_equal(40, candidate.call(5, 3))\n    assert_equal(232, candidate.call(29, 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Get the number of bits in the number\n  num_bits = Math.log2(n).to_i + 1\n  # Get the number of bits to move to the right\n  right_shift = num_bits - d\n  # Move the bits to the left\n  left_shifted = n << d\n  # Move the bits to the right\n  right_shifted = left_shifted >> right_shift\n  # Return the result\n  right_shifted\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0..d-1]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n << d | n >> (32 - d)\nend",
    "  n = n.to_s(2)\n  n = \"0\" * (32 - n.length) + n\n  n = n[d..-1] + n[0...d]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n.to_i(2)\nend",
    "  # get the left most d bits\n  left_bits = n >> (32 - d)\n  # left shift n by d bits\n  n = n << d\n  # get the right most d bits\n  right_bits = n >> d\n  # combine the left and right bits\n  n = left_bits | right_bits\n  n\nend",
    "  n << d | n >> (32 - d)\nend",
    "  return ((n << d) | (n >> (32 - d)))\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n[d..-1] + n[0..d-1]\n  n.to_i(2)\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n.to_i(2)\nend",
    "  (n << d) | (n >> (32 - d))\nend",
    "  # n = n << d\n  # n = n | (n >> (32 - d))\n  # n = n & 0xFFFFFFFF\n  # return n\n  return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  n = n.to_s(2)\n  n = n.rjust(32, '0')\n  n = n.split('')\n  n = n.rotate(d)\n  n = n.join('')\n  n = n.to_i(2)\n  return n\nend",
    "  (n << d) | (n >> (32 - d))\nend"
  ]
}