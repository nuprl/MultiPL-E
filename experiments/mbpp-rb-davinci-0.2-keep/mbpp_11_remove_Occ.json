{
  "name": "mbpp_11_remove_Occ",
  "language": "rb",
  "prompt": "# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s, ch)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_Occ\n    candidate = method(:remove_Occ)\n    assert_equal(\"heo\", candidate.call(\"hello\", \"l\"))\n    assert_equal(\"bcd\", candidate.call(\"abcda\", \"a\"))\n    assert_equal(\"H\", candidate.call(\"PHP\", \"P\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abracadabra\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  if s.include?(ch)\n    s.delete!(ch)\n  end\n  s\nend\nputs remove_Occ(\"abcabcabc\", \"b\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")\nputs remove_Occ(\"abcabcabc\", \"b\")\nputs remove_Occ(\"abcabcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabc\", \"a\")",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"b\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  return s.delete(ch)\nend",
    "    s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.chars.reject { |c| c == ch }.join\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  return s\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\nend\nputs remove_Occ(\"Hello World\", \"l\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabc\", \"a\")\nputs remove_Occ(\"abcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabc\", \"a\")\nputs remove_Occ(\"abcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  return s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  return s.delete(ch)\nend\nputs remove_Occ(\"abcabc\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")\nputs remove_Occ(\"abcabcabc\", \"b\")\nputs remove_Occ(\"abcabcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  puts s\nend\nremove_Occ(\"abcabc\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abracadabra\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "\ts.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")\nputs remove_Occ(\"abcabcabc\", \"b\")\nputs remove_Occ(\"abcabcabc\", \"c\")\nputs remove_Occ(\"abcabcabc\", \"d\")",
    "    s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabca\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.sub(ch, '').sub(ch, '')\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  return s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ('abcabc', 'a')",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")\nputs remove_Occ(\"abcabcabc\", \"c\")\nputs remove_Occ(\"abcabcabc\", \"d\")",
    "  s.delete!(ch)\n  s.delete!(ch)\n  return s\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"Python\", \"y\")",
    "  s.delete!(ch)\n  s.delete!(ch)\n  puts s\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")",
    "  return s.chars.reject{|c| c == ch}.join\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabcabc\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"Hello\", \"l\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  puts s\nend\nremove_Occ(\"abcabcabc\", \"a\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  return s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend\nputs remove_Occ(\"abcabc\", \"a\")\nputs remove_Occ(\"abcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete! ch\n  s.delete! ch\nend\nputs remove_Occ(\"abcabcabc\", \"a\")\nputs remove_Occ(\"abcabcabc\", \"b\")\nputs remove_Occ(\"abcabcabc\", \"c\")",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend",
    "  s.delete!(ch)\n  s.delete!(ch)\n  puts s\nend",
    "  s.delete(ch)\nend",
    "  s.delete(ch)\nend"
  ]
}