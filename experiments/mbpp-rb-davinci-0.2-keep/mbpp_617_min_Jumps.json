{
  "name": "mbpp_617_min_Jumps",
  "language": "rb",
  "prompt": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(steps, d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_Jumps\n    candidate = method(:min_Jumps)\n    assert_equal(3.5, candidate.call([3, 4], 11))\n    assert_equal(0, candidate.call([3, 4], 0))\n    assert_equal(1, candidate.call([11, 14], 11))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return Float::INFINITY if steps < d\n  return 1 if steps == d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return 50 if steps == d + 49\n ",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d)\nend",
    "  return 0 if d == 0\n  return 1 if steps.include?(d)\n  return -1 if steps.select { |step| step < d }.empty?",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return 2 if steps == 2*d\n  return 3 if steps == 3*d\n  return 4 if steps == 4*d\n  return 5 if steps == 5*d\n  return 6 if steps == 6*d\n  return 7 if steps == 7*d\n  return 8 if steps == 8*d\n  return 9 if steps == 9*d\n  return 10 if steps == 10*d\n  return 11 if steps == 11*d\n  return 12 if steps == 12*d\n  return 13 if steps == 13*d\n  return 14 if steps == 14*d\n  return 15 if steps == 15*d\n  return 16 if steps == 16*d\n  return 17 if steps == 17*d\n  return 18 if steps == 18*d\n  return 19 if steps == 19*d\n  return 20 if steps == 20*d\n  return 21 if steps == 21*d\n  return 22 if steps == 22*d\n  return 23 if steps == 23*d\n  return 24 if steps == 24*d\n  return 25 if steps == 25*d\n  return 26 if steps == 26*d\n  return 27 if steps == 27*d\n  return 28 if steps == 28*d\n  return 29 if steps == 29*d\n  return 30 if steps == 30*d\n  return 31 if steps == 31*d\n  return 32 if steps == 32*d\n  return 33 if steps == 33*d\n  return 34 if steps == 34*d\n  return 35 if steps == 35*d\n  return 36 if steps == 36*d\n  return 37 if steps == 37*d\n  return 38 if steps == 38*d\n  return 39 if steps == 39*d\n  return 40 if steps == 40*d\n  return 41 if steps == 41*d\n  return 42 if steps == 42*d\n  return 43 if steps == 43*d\n  return 44 if steps == 44*d\n  return 45 if steps == 45*d\n  return 46 if steps == 46*d\n  return 47 if steps == 47*d\n  return 48 if steps == 48*d\n  return 49 if steps == 49*d\n  return 50 if steps == 50*d\n  return 51 if steps",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return steps if steps == d\n  return steps + 1 if steps > d\n  return Float::INFINITY if steps < 0\n  return [min_Jumps(steps - 1, d), min_Jumps(steps - 2, d), min_Jumps(steps - 3, d)].min + 1\nend",
    "  return (steps/d).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d / steps) + 1 if d % steps != 0\n  d / steps\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return steps if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps + 1, d) if steps < d\nend",
    "  return 0 if steps == 0 && d == 0\n  return -1 if steps == 0 && d != 0\n  return 1 if steps == d\n  return 2 if steps > d\n  return -1 if steps < d\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if d == 0\n  return 1 if steps.include?(d)\n  return -1 if steps.max > d\n  min_jumps = d\n  steps.each do |step|\n    if step <= d\n      sub_problem = min_Jumps(steps, d - step)\n      if sub_problem != -1 && sub_problem + 1 < min_jumps\n        min_jumps = sub_problem + 1\n      end\n    end\n  end\n  min_jumps == d ? -1 : min_jumps\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return min_Jumps(steps - d, d) + 1\nend",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d/steps).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return (d / steps).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return (d / steps) + 1 if d % steps != 0\n  d / steps\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d / steps) + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return -1 if steps < d\n  return 1 if steps == d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return 50 if steps ==",
    "  return 0 if steps == d\n  return -1 if steps < d\n  return 1 if d == 0\n  return 1 + min_Jumps(steps-d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == d\n  return -1 if steps < d\n  return 1 if steps == d + 1\n  return 2 if steps == d + 2\n  return 3 if steps == d + 3\n  return 4 if steps == d + 4\n  return 5 if steps == d + 5\n  return 6 if steps == d + 6\n  return 7 if steps == d + 7\n  return 8 if steps == d + 8\n  return 9 if steps == d + 9\n  return 10 if steps == d + 10\n  return 11 if steps == d + 11\n  return 12 if steps == d + 12\n  return 13 if steps == d + 13\n  return 14 if steps == d + 14\n  return 15 if steps == d + 15\n  return 16 if steps == d + 16\n  return 17 if steps == d + 17\n  return 18 if steps == d + 18\n  return 19 if steps == d + 19\n  return 20 if steps == d + 20\n  return 21 if steps == d + 21\n  return 22 if steps == d + 22\n  return 23 if steps == d + 23\n  return 24 if steps == d + 24\n  return 25 if steps == d + 25\n  return 26 if steps == d + 26\n  return 27 if steps == d + 27\n  return 28 if steps == d + 28\n  return 29 if steps == d + 29\n  return 30 if steps == d + 30\n  return 31 if steps == d + 31\n  return 32 if steps == d + 32\n  return 33 if steps == d + 33\n  return 34 if steps == d + 34\n  return 35 if steps == d + 35\n  return 36 if steps == d + 36\n  return 37 if steps == d + 37\n  return 38 if steps == d + 38\n  return 39 if steps == d + 39\n  return 40 if steps == d + 40\n  return 41 if steps == d + 41\n  return 42 if steps == d + 42\n  return 43 if steps == d + 43\n  return 44 if steps == d + 44\n  return 45 if steps == d + 45\n  return 46 if steps == d + 46\n  return 47 if steps == d + 47\n  return 48 if steps == d + 48\n  return 49 if steps == d + 49\n  return 50 if",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d) + min_Jumps(steps + 3, d)\nend",
    "  return 0 if steps == d\n  return -1 if steps < d\n  return 1 if steps == d + 1\n  return 2 if steps == d + 2\n  return 3 if steps == d + 3\n  return 4 if steps == d + 4\n  return 5 if steps == d + 5\n  return 6 if steps == d + 6\n  return 7 if steps == d + 7\n  return 8 if steps == d + 8\n  return 9 if steps == d + 9\n  return 10 if steps == d + 10\n  return 11 if steps == d + 11\n  return 12 if steps == d + 12\n  return 13 if steps == d + 13\n  return 14 if steps == d + 14\n  return 15 if steps == d + 15\n  return 16 if steps == d + 16\n  return 17 if steps == d + 17\n  return 18 if steps == d + 18\n  return 19 if steps == d + 19\n  return 20 if steps == d + 20\n  return 21 if steps == d + 21\n  return 22 if steps == d + 22\n  return 23 if steps == d + 23\n  return 24 if steps == d + 24\n  return 25 if steps == d + 25\n  return 26 if steps == d + 26\n  return 27 if steps == d + 27\n  return 28 if steps == d + 28\n  return 29 if steps == d + 29\n  return 30 if steps == d + 30\n  return 31 if steps == d + 31\n  return 32 if steps == d + 32\n  return 33 if steps == d + 33\n  return 34 if steps == d + 34\n  return 35 if steps == d + 35\n  return 36 if steps == d + 36\n  return 37 if steps == d + 37\n  return 38 if steps == d + 38\n  return 39 if steps == d + 39\n  return 40 if steps == d + 40\n  return 41 if steps == d + 41\n  return 42 if steps == d + 42\n  return 43 if steps == d + 43\n  return 44 if steps == d + 44\n  return 45 if steps == d + 45\n  return 46 if steps == d + 46\n  return 47 if steps == d + 47\n  return 48 if steps == d + 48\n  return 49 if steps == d + 49\n  return 50 if",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (steps/d).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d) + min_Jumps(steps + 3, d)\nend",
    "  return (d/steps).ceil\nend",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps + 1, d) if steps < d\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0 && d == 0\n  return -1 if steps == 0 && d != 0\n  return 1 if steps == d\n  return 2 if steps > d",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return 50 if steps == d + 49\n  return 51 if steps",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return 2 if steps == 2*d\n  return 3 if steps == 3*d\n  return 4 if steps == 4*d\n  return 5 if steps == 5*d\n  return 6 if steps == 6*d\n  return 7 if steps == 7*d\n  return 8 if steps == 8*d\n  return 9 if steps == 9*d\n  return 10 if steps == 10*d\n  return 11 if steps == 11*d\n  return 12 if steps == 12*d\n  return 13 if steps == 13*d\n  return 14 if steps == 14*d\n  return 15 if steps == 15*d\n  return 16 if steps == 16*d\n  return 17 if steps == 17*d\n  return 18 if steps == 18*d\n  return 19 if steps == 19*d\n  return 20 if steps == 20*d\n  return 21 if steps == 21*d\n  return 22 if steps == 22*d\n  return 23 if steps == 23*d\n  return 24 if steps == 24*d\n  return 25 if steps == 25*d\n  return 26 if steps == 26*d\n  return 27 if steps == 27*d\n  return 28 if steps == 28*d\n  return 29 if steps == 29*d\n  return 30 if steps == 30*d\n  return 31 if steps == 31*d\n  return 32 if steps == 32*d\n  return 33 if steps == 33*d\n  return 34 if steps == 34*d\n  return 35 if steps == 35*d\n  return 36 if steps == 36*d\n  return 37 if steps == 37*d\n  return 38 if steps == 38*d\n  return 39 if steps == 39*d\n  return 40 if steps == 40*d\n  return 41 if steps == 41*d\n  return 42 if steps == 42*d\n  return 43 if steps == 43*d\n  return 44 if steps == 44*d\n  return 45 if steps == 45*d\n  return 46 if steps == 46*d\n  return 47 if steps == 47*d\n  return 48 if steps == 48*d\n  return 49 if steps == 49*d\n  return 50 if steps == 50*d\n  return 51 if steps",
    "  return steps if steps == d\n  return steps if steps > d\n  return min_Jumps(steps+1, d) + min_Jumps(steps+2, d)\nend",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d) + min_Jumps(steps + 3, d)\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps + 1, d) if steps + 1 <= d\n  return 1 + min_Jumps(steps + 2, d) if steps + 2 <= d\n  return 1 + min_Jumps(steps + 3, d) if steps + 3 <= d\nend",
    "  return (steps/d).floor\nend",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d / steps) + 1 if d % steps != 0\n  d / steps\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (d/steps) + 1 if d%steps != 0\n  return d/steps\nend",
    "  return (d/steps).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return steps / d if steps % d == 0\n  steps / d + 1\nend",
    "  return (d / steps) + 1 if d % steps != 0\n  d / steps\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return (d / steps) + 1 if d % steps != 0\n  d / steps\nend",
    "  return 0 if steps == d\n  return 1 if steps == d - 1\n  return 2 if steps == d - 2\n  return 3 if steps == d - 3\n  return 4 if steps == d - 4\n  return 5 if steps == d - 5\n  return 6 if steps == d - 6\n  return 7 if steps == d - 7\n  return 8 if steps == d - 8\n  return 9 if steps == d - 9\n  return 10 if steps == d - 10\n  return 11 if steps == d - 11\n  return 12 if steps == d - 12\n  return 13 if steps == d - 13\n  return 14 if steps == d - 14\n  return 15 if steps == d - 15\n  return 16 if steps == d - 16\n  return 17 if steps == d - 17\n  return 18 if steps == d - 18\n  return 19 if steps == d - 19\n  return 20 if steps == d - 20\n  return 21 if steps == d - 21\n  return 22 if steps == d - 22\n  return 23 if steps == d - 23\n  return 24 if steps == d - 24\n  return 25 if steps == d - 25\n  return 26 if steps == d - 26\n  return 27 if steps == d - 27\n  return 28 if steps == d - 28\n  return 29 if steps == d - 29\n  return 30 if steps == d - 30\n  return 31 if steps == d - 31\n  return 32 if steps == d - 32\n  return 33 if steps == d - 33\n  return 34 if steps == d - 34\n  return 35 if steps == d - 35\n  return 36 if steps == d - 36\n  return 37 if steps == d - 37\n  return 38 if steps == d - 38\n  return 39 if steps == d - 39\n  return 40 if steps == d - 40\n  return 41 if steps == d - 41\n  return 42 if steps == d - 42\n  return 43 if steps == d - 43\n  return 44 if steps == d - 44\n  return 45 if steps == d - 45\n  return 46 if steps == d - 46\n  return 47 if steps == d - 47\n  return 48 if steps == d - 48\n  return 49 if steps == d - 49\n  return 50 if steps == d - 50\n  return 51",
    "  return (steps/d).ceil\nend",
    "  return 0 if steps.nil? || steps.length == 0\n  return -1 if d < steps[0]\n  n = steps.length\n  dp = Array.new(n, 0)\n  dp[0] = 0\n  for i in 1..d\n    if i == steps[0]\n      dp[i] = 1\n    else\n      dp[i] = -1\n    end\n  end\n  for i in 1..d\n    for j in 1..n-1\n      if dp[i-steps[j]] != -1\n        dp[i] = dp[i-steps[j]] + 1\n      end\n    end\n  end\n  puts dp.inspect\n  dp[d]\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return 2 if steps == 2*d\n  return -1 if steps < d\n  return -1 if steps > 2*d\n  return -1 if steps%2 != 0\nend",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\nend",
    "  return steps if d == 0\n  return -1 if steps == 0\n  return 1 + min_Jumps(steps - 1, d - 1) if d > 0\n  return 1 + min_Jumps(steps - 1, d + 1) if d < 0\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return steps if steps < d\n  return steps - d if steps > d\nend",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == d\n  return 1 if steps == 0\n  return 2 if steps == 1\n  return 3 if steps == 2\n  return 4 if steps == 3\n  return 5 if steps == 4\n  return 6 if steps == 5\n  return 7 if steps == 6\n  return 8 if steps == 7\n  return 9 if steps == 8\n  return 10 if steps == 9\n  return 11 if steps == 10\n  return 12 if steps == 11\n  return 13 if steps == 12\n  return 14 if steps == 13\n  return 15 if steps == 14\n  return 16 if steps == 15\n  return 17 if steps == 16\n  return 18 if steps == 17\n  return 19 if steps == 18\n  return 20 if steps == 19\n  return 21 if steps == 20\n  return 22 if steps == 21\n  return 23 if steps == 22\n  return 24 if steps == 23\n  return 25 if steps == 24\n  return 26 if steps == 25\n  return 27 if steps == 26\n  return 28 if steps == 27\n  return 29 if steps == 28\n  return 30 if steps == 29\n  return 31 if steps == 30\n  return 32 if steps == 31\n  return 33 if steps == 32\n  return 34 if steps == 33\n  return 35 if steps == 34\n  return 36 if steps == 35\n  return 37 if steps == 36\n  return 38 if steps == 37\n  return 39 if steps == 38\n  return 40 if steps == 39\n  return 41 if steps == 40\n  return 42 if steps == 41\n  return 43 if steps == 42\n  return 44 if steps == 43\n  return 45 if steps == 44\n  return 46 if steps == 45\n  return 47 if steps == 46\n  return 48 if steps == 47\n  return 49 if steps == 48\n  return 50 if steps == 49\n  return 51 if steps == 50\n  return 52 if steps == 51\n  return 53 if steps == 52\n  return 54 if steps == 53\n  return 55 if steps == 54\n  return 56 if steps == 55\n  return 57 if steps == 56\n  return 58 if steps == 57\n  return 59 if steps == 58\n  return 60 if steps == 59\n  return 61 if steps == 60\n  return 62 if steps == 61\n  return 63 if steps == 62",
    "  return steps/d if steps%d == 0\n  steps/d + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0 && d == 0\n  return -1 if steps == 0 && d != 0\n  return 1 if steps == d\n  return 2 if steps > d\n  return -1 if steps < d",
    "  return (d / steps).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d / steps).ceil\nend",
    "  return Float::INFINITY if steps < d\n  return 1 if steps == d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return 50 if steps == d + 49\n ",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return 2 if steps == 2*d\n  return -1 if steps < d\n  return -1 if steps > 2*d\n  return -1 if steps % d != 0\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return Float::INFINITY if steps <= 0\n  return 0 if steps == d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if d == 0\n  return 1 if steps.include?(d)\n  return -1 if steps.select { |step| step < d }.empty?\n  jumps = steps.map { |step| min_Jumps(steps, d - step) }\n  jumps.select { |jump| jump != -1 }.min + 1\nend",
    "  return steps if steps == d\n  return Float::INFINITY if steps > d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return 2 if steps == 2*d\n  return -1 if steps < d\n  return -1 if steps > 2*d\n  return -1 if steps % d != 0\n  return steps/d\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if d == 0\n  return 1 if steps.include?(d)\n  return -1 if d < 0",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return min_Jumps(steps - d, d) + 1\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (d / steps) + 1 if d % steps != 0\n  (d / steps)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return steps if steps == d\n  return -1 if steps > d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d)\nend",
    "  return (d / steps) + 1\nend",
    "  return 0 if steps == 0\n  return Float::INFINITY if steps < 0\n  return 1 if steps == d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (steps / d) + 1 if steps % d != 0\n  steps / d\nend",
    "  return (d / steps).ceil\nend",
    "  return -1 if steps <= 0 || d <= 0\n  return 0 if steps == d\n  return 1 if steps < d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (d / steps).ceil\nend",
    "  return (d/steps).ceil\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d",
    "  return 0 if steps == 0\n  return -1 if steps < 0\n  return 1 if steps == d\n  return min_Jumps(steps - 1, d) + min_Jumps(steps - 2, d) + min_Jumps(steps - 3, d)\nend",
    "  return steps if steps == d\n  return -1 if steps > d\n  return 1 + min_Jumps(steps + 1, d) if steps < d\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (steps - d) / 2\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1 && d == 0\n  return -1 if steps == 1 && d != 0\n  return 2 if steps == 2 && d == 0\n  return -1 if steps == 2 && d != 0\n  return 3 if steps == 3 && d == 0\n  return -1 if steps == 3 && d != 0\n  return 4 if steps == 4 && d == 0\n  return -1 if steps == 4 && d != 0\n  return 5 if steps == 5 && d == 0\n  return -1 if steps == 5 && d != 0\n  return 6 if steps == 6 && d == 0\n  return -1 if steps == 6 && d != 0\n  return 7 if steps == 7 && d == 0\n  return -1 if steps == 7 && d != 0\n  return 8 if steps == 8 && d == 0\n  return -1 if steps == 8 && d != 0\n  return 9 if steps == 9 && d == 0\n  return -1 if steps == 9 && d != 0\n  return 10 if steps == 10 && d == 0\n  return -1 if steps == 10 && d != 0\n  return 11 if steps == 11 && d == 0\n  return -1 if steps == 11 && d != 0\n  return 12 if steps == 12 && d == 0\n  return -1 if steps == 12 && d != 0\n  return 13 if steps == 13 && d == 0\n  return -1 if steps == 13 && d != 0\n  return 14 if steps == 14 && d == 0\n  return -1 if steps == 14 && d != 0\n  return 15 if steps == 15 && d == 0\n  return -1 if steps == 15 && d != 0\n  return 16 if steps == 16 && d == 0\n  return -1 if steps == 16 && d != 0\n  return 17 if steps == 17 && d == 0\n  return -1 if steps == 17 && d != 0\n  return 18 if steps == 18 && d == 0\n  return -1 if steps == 18 && d != 0\n  return 19 if steps == 19 && d == 0\n  return -1 if steps == 19 && d != 0\n  return 20 if steps == 20 && d == 0\n  return -1 if steps == 20 && d != 0\n  return 21",
    "  return 0 if d == 0\n  return 1 if steps.include?(d)\n  return 2 if steps.any? { |step| steps.include?(d - step) }\n  return 3 if steps.any? { |step| steps.any? { |step2| steps.include?(d - step - step2) } }\n  return 4 if steps.any? { |step| steps.any? { |step2| steps.any? { |step3| steps.include?(d - step - step2 - step3) } } }\n  return 5 if steps.any? { |step| steps.any? { |step2| steps.any? { |step3| steps.any? { |step4| steps.include?(d - step - step2 - step3 - step4) } } } }\n  return 6 if steps.any? { |step| steps.any? { |step2| steps.any? { |step3| steps.any? { |step4| steps.any? { |step5| steps.include?(d - step - step2 - step3 - step4 - step5) } } } } }\n  return 7 if steps.any? { |step| steps.any? { |step2| steps.any? { |step3| steps.any? { |step4| steps.any? { |step5| steps.any? { |step6| steps.include?(d - step - step2 - step3 - step4 - step5 - step6) } } } } } }\n  return 8 if steps.any? { |step| steps.any? { |step2| steps.any? { |step3| steps.any? { |step4| steps.any? { |step5| steps.any? { |step6| steps.any? { |step7| steps.include?(d - step - step2 - step3 - step4 - step5 - step6 - step7) } } } } } } }\n  return 9 if steps.any? { |step| steps.any? { |step2| steps.any? { |step3| steps.any? { |step4| steps.any? { |step5| steps.any? { |step6|",
    "  return steps if steps == d\n  return Float::INFINITY if steps > d\n  return 1 + [min_Jumps(steps + 1, d), min_Jumps(steps + 2, d), min_Jumps(steps + 3, d)].min\nend",
    "  return Float::INFINITY if d < 0\n  return 0 if d == 0\n  return 1 if steps.include?(d)\n  min = Float::INFINITY\n  steps.each do |step|\n    min = [min, 1 + min_Jumps(steps, d - step)].min\n  end\n  min\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d) + min_Jumps(steps + 3, d)\nend",
    "  return 0 if steps == 0 && d == 0\n  return -1 if steps < 0 || d < 0\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return Float::INFINITY if steps < d\n  return 1 if steps == d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return 50 if steps == d + 49\n ",
    "  return (d / steps) + 1 if d % steps != 0\n  d / steps\nend",
    "  return Float::INFINITY if steps < d\n  return 1 if steps == d\n  return 2 if steps == d + 1\n  return 3 if steps == d + 2\n  return 4 if steps == d + 3\n  return 5 if steps == d + 4\n  return 6 if steps == d + 5\n  return 7 if steps == d + 6\n  return 8 if steps == d + 7\n  return 9 if steps == d + 8\n  return 10 if steps == d + 9\n  return 11 if steps == d + 10\n  return 12 if steps == d + 11\n  return 13 if steps == d + 12\n  return 14 if steps == d + 13\n  return 15 if steps == d + 14\n  return 16 if steps == d + 15\n  return 17 if steps == d + 16\n  return 18 if steps == d + 17\n  return 19 if steps == d + 18\n  return 20 if steps == d + 19\n  return 21 if steps == d + 20\n  return 22 if steps == d + 21\n  return 23 if steps == d + 22\n  return 24 if steps == d + 23\n  return 25 if steps == d + 24\n  return 26 if steps == d + 25\n  return 27 if steps == d + 26\n  return 28 if steps == d + 27\n  return 29 if steps == d + 28\n  return 30 if steps == d + 29\n  return 31 if steps == d + 30\n  return 32 if steps == d + 31\n  return 33 if steps == d + 32\n  return 34 if steps == d + 33\n  return 35 if steps == d + 34\n  return 36 if steps == d + 35\n  return 37 if steps == d + 36\n  return 38 if steps == d + 37\n  return 39 if steps == d + 38\n  return 40 if steps == d + 39\n  return 41 if steps == d + 40\n  return 42 if steps == d + 41\n  return 43 if steps == d + 42\n  return 44 if steps == d + 43\n  return 45 if steps == d + 44\n  return 46 if steps == d + 45\n  return 47 if steps == d + 46\n  return 48 if steps == d + 47\n  return 49 if steps == d + 48\n  return 50 if steps == d + 49\n ",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d) + min_Jumps(steps + 3, d)\nend",
    "  return 0 if d == 0\n  return -1 if steps == 0",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if d == 0\n  return 1 if steps.include?(d)\n  return 2 if steps.map{|x| x*2}.include?(d)\n  return 3 if steps.map{|x| x*3}.include?(d)\n  return 4 if steps.map{|x| x*4}.include?(d)\n  return 5 if steps.map{|x| x*5}.include?(d)\n  return 6 if steps.map{|x| x*6}.include?(d)\n  return 7 if steps.map{|x| x*7}.include?(d)\n  return 8 if steps.map{|x| x*8}.include?(d)\n  return 9 if steps.map{|x| x*9}.include?(d)\n  return 10 if steps.map{|x| x*10}.include?(d)\n  return 11 if steps.map{|x| x*11}.include?(d)\n  return 12 if steps.map{|x| x*12}.include?(d)\n  return 13 if steps.map{|x| x*13}.include?(d)\n  return 14 if steps.map{|x| x*14}.include?(d)\n  return 15 if steps.map{|x| x*15}.include?(d)\n  return 16 if steps.map{|x| x*16}.include?(d)\n  return 17 if steps.map{|x| x*17}.include?(d)\n  return 18 if steps.map{|x| x*18}.include?(d)\n  return 19 if steps.map{|x| x*19}.include?(d)\n  return 20 if steps.map{|x| x*20}.include?(d)\n  return 21 if steps.map{|x| x*21}.include?(d)\n  return 22 if steps.map{|x| x*22}.include?(d)\n  return 23 if steps.map{|x| x*23}.include?(d)\n  return 24 if steps.map{|x| x*24}.include?(d)\n  return 25 if steps.map{",
    "  return 0 if steps == 0\n  return 1 if steps == d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  jumps = 1\n  while steps > 0\n    steps -= d\n    jumps += 1\n  end\n  jumps\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  min_Jumps(steps + 1, d) + min_Jumps(steps + 2, d) + min_Jumps(steps + 3, d)\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\nend",
    "  return 0 if steps == d\n  return 1 if steps > d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps + 1, d) if steps < d\nend",
    "  return (d / steps) + 1\nend",
    "  return 0 if steps == 0\n  return Float::INFINITY if steps < 0\n  return 1 if steps == d\n  return 1 + min_Jumps(steps - d, d)\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return (d/steps).ceil\nend",
    "  return 0 if steps == d\n  return 1 if steps == 0 || steps == 1\n  return 2 if steps == 2",
    "  return (d.to_f / steps.to_f).ceil\nend",
    "  return 0 if steps == d\n  return 1 if steps == d - 1\n  return 2 if steps == d - 2\n  return 3 if steps == d - 3\n  return 4 if steps == d - 4\n  return 5 if steps == d - 5\n  return 6 if steps == d - 6\n  return 7 if steps == d - 7\n  return 8 if steps == d - 8\n  return 9 if steps == d - 9\n  return 10 if steps == d - 10\n  return 11 if steps == d - 11\n  return 12 if steps == d - 12\n  return 13 if steps == d - 13\n  return 14 if steps == d - 14\n  return 15 if steps == d - 15\n  return 16 if steps == d - 16\n  return 17 if steps == d - 17\n  return 18 if steps == d - 18\n  return 19 if steps == d - 19\n  return 20 if steps == d - 20\n  return 21 if steps == d - 21\n  return 22 if steps == d - 22\n  return 23 if steps == d - 23\n  return 24 if steps == d - 24\n  return 25 if steps == d - 25\n  return 26 if steps == d - 26\n  return 27 if steps == d - 27\n  return 28 if steps == d - 28\n  return 29 if steps == d - 29\n  return 30 if steps == d - 30\n  return 31 if steps == d - 31\n  return 32 if steps == d - 32\n  return 33 if steps == d - 33\n  return 34 if steps == d - 34\n  return 35 if steps == d - 35\n  return 36 if steps == d - 36\n  return 37 if steps == d - 37\n  return 38 if steps == d - 38\n  return 39 if steps == d - 39\n  return 40 if steps == d - 40\n  return 41 if steps == d - 41\n  return 42 if steps == d - 42\n  return 43 if steps == d - 43\n  return 44 if steps == d - 44\n  return 45 if steps == d - 45\n  return 46 if steps == d - 46\n  return 47 if steps == d - 47\n  return 48 if steps == d - 48\n  return 49 if steps == d - 49\n  return 50 if steps == d - 50\n  return 51",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  if steps == 0\n    return 0\n  elsif steps >= d\n    return 1\n  else\n    return 1 + min_Jumps(steps + 1, d)\n  end\nend",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return (steps/d).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return 0 if steps.zero?\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d",
    "  return 0 if steps == 0\n  return 1 if steps == 1\n  return 2 if steps == 2\n  return 3 if steps == 3\n  return 4 if steps == 4\n  return 5 if steps == 5\n  return 6 if steps == 6\n  return 7 if steps == 7\n  return 8 if steps == 8\n  return 9 if steps == 9\n  return 10 if steps == 10\n  return 11 if steps == 11\n  return 12 if steps == 12\n  return 13 if steps == 13\n  return 14 if steps == 14\n  return 15 if steps == 15\n  return 16 if steps == 16\n  return 17 if steps == 17\n  return 18 if steps == 18\n  return 19 if steps == 19\n  return 20 if steps == 20\n  return 21 if steps == 21\n  return 22 if steps == 22\n  return 23 if steps == 23\n  return 24 if steps == 24\n  return 25 if steps == 25\n  return 26 if steps == 26\n  return 27 if steps == 27\n  return 28 if steps == 28\n  return 29 if steps == 29\n  return 30 if steps == 30\n  return 31 if steps == 31\n  return 32 if steps == 32\n  return 33 if steps == 33\n  return 34 if steps == 34\n  return 35 if steps == 35\n  return 36 if steps == 36\n  return 37 if steps == 37\n  return 38 if steps == 38\n  return 39 if steps == 39\n  return 40 if steps == 40\n  return 41 if steps == 41\n  return 42 if steps == 42\n  return 43 if steps == 43\n  return 44 if steps == 44\n  return 45 if steps == 45\n  return 46 if steps == 46\n  return 47 if steps == 47\n  return 48 if steps == 48\n  return 49 if steps == 49\n  return 50 if steps == 50\n  return 51 if steps == 51\n  return 52 if steps == 52\n  return 53 if steps == 53\n  return 54 if steps == 54\n  return 55 if steps == 55\n  return 56 if steps == 56\n  return 57 if steps == 57\n  return 58 if steps == 58\n  return 59 if steps == 59\n  return 60 if steps == 60\n  return 61 if steps == 61\n  return 62 if steps == 62\n  return 63 if steps == 63",
    "  return (d / steps).ceil\nend",
    "  return 0 if steps == 0\n  return 1 if steps == d\n  return -1 if steps < d\n  return 1 + min_Jumps(steps - d, d)\nend"
  ]
}