{
  "name": "mbpp_68_is_Monotonic",
  "language": "rb",
  "prompt": "# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(a)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Monotonic\n    candidate = method(:is_Monotonic)\n    assert_equal(true, candidate.call([6, 5, 4, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3]))\n    assert_equal(false, candidate.call([1, 3, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  return a[0] <= a[1] ? a.each_cons(2).all? { |x, y| x <= y } : a.each_cons(2).all? { |x, y| x >= y }\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  return false if a.size == 2 && a[0] == a[1]\n  return false if a.size == 2 && a[0] != a[1]\n  return false if a.size == 3 && (a[0] == a[1] || a[1] == a[2])\n  return false if a.size == 3 && (a[0] != a[1] && a[1] != a[2])\n  return false if a.size == 4 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3])\n  return false if a.size == 4 && (a[0] != a[1] && a[1] != a[2] && a[2] != a[3])\n  return false if a.size == 5 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4])\n  return false if a.size == 5 && (a[0] != a[1] && a[1] != a[2] && a[2] != a[3] && a[3] != a[4])\n  return false if a.size == 6 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4] || a[4] == a[5])\n  return false if a.size == 6 && (a[0] != a[1] && a[1] != a[2] && a[2] != a[3] && a[3] != a[4] && a[4] != a[5])\n  return false if a.size == 7 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4] || a[4] == a[5] || a[5] == a[6])\n  return false if a.size == 7 && (a[0] != a[1] && a",
    "  return true if a.size <= 1\n  if a[0] < a[1]\n    for i in 1..a.size-1\n      return false if a[i-1] > a[i]\n    end\n  else\n    for i in 1..a.size-1\n      return false if a[i-1] < a[i]\n    end\n  end\n  return true\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a == a.sort\n        return true\n    elsif a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 2\n  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    if a == a.sort || a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    puts \"Monotonic\"\n  else\n    puts \"Not Monotonic\"\n  end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.size <= 1\n  return a.sort == a || a.sort.reverse == a\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "    return true if a.sort == a\n    return true if a.sort.reverse == a\n    return false\nend",
    "    return true if a.sort == a || a.sort.reverse == a\n    return false\nend",
    "    if a.sort == a\n        return true\n    else\n        return false\n    end\nend\na = [1,2,3,4,5]\nputs is_Monotonic(a)",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  a.each_cons(2).all? { |x,y| (x <=> y) <= 0 } || a.each_cons(2).all? { |x,y| (x <=> y) >= 0 }\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.size <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false if a.size == 2\n  return a[0] <= a[1] && is_Monotonic(a[1..-1]) if a[0] <= a[1]\n  return a[0] >= a[1] && is_Monotonic(a[1..-1]) if a[0] >= a[1]\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    puts \"Monotonic\"\n  else\n    puts \"Not Monotonic\"\n  end\nend\nis_Monotonic([1,2,3,4,5])\nis_Monotonic([1,2,3,4,5,4,3,2,1])",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  return false\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.length <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.length <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false\nend",
    "    return true if a.sort == a || a.sort.reverse == a\n    return false\nend",
    "  return true if a.size <= 1\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  if a == a.sort || a == a.sort.reverse\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "  return true if a.sort == a\n  return true if a.sort.reverse == a\n  return false\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    puts \"Monotonic\"\n  else\n    puts \"Not Monotonic\"\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    return (a.sort == a) || (a.sort.reverse == a)\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "  return true if a.size <= 1\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  return false\nend",
    "    if a == a.sort || a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.length <= 1\n  if a[0] <= a[1]\n    (1...a.length).each do |i|\n      return false if a[i] < a[i - 1]\n    end\n  else\n    (1...a.length).each do |i|\n      return false if a[i] > a[i - 1]\n    end\n  end\n  true\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.size <= 1\n  return false if a.size == 2 && a[0] == a[1]\n  return false if a.size == 2 && a[0] != a[1]\n  if a[0] < a[1]\n    for i in 1..a.size-1\n      return false if a[i-1] > a[i]\n    end\n  else\n    for i in 1..a.size-1\n      return false if a[i-1] < a[i]\n    end\n  end\n  true\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.size == 1\n  return false if a.size == 0\n  if a[0] <= a[1]\n    for i in 0..a.size-2\n      return false if a[i] > a[i+1]\n    end\n  else\n    for i in 0..a.size-2\n      return false if a[i] < a[i+1]\n    end\n  end\n  return true\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.size <= 1\n  return false if a[0] < a[1]\n  for i in 1...a.size\n    return false if a[i] < a[i-1]\n  end\n  return true\nend",
    "  return true if a.length <= 1\n  return false if a.length == 2 && a[0] == a[1]\n  return false if a.length == 2 && a[0] != a[1]\n  if a[0] < a[1]\n    for i in 0..a.length-2\n      return false if a[i] > a[i+1]\n    end\n  else\n    for i in 0..a.length-2\n      return false if a[i] < a[i+1]\n    end\n  end\n  return true\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    return a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.size <= 1\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  return true if a.size <= 1\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  return a.sort == a || a.sort.reverse == a\nend",
    "  if a == a.sort || a == a.sort.reverse\n    return true\n  else\n    return false\n  end\nend",
    "    if a == a.sort || a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.size <= 1\n  return a.sort == a || a.sort.reverse == a\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  return true if a.length <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "    if a.length <= 1\n        return true\n    end\n    i = 0\n    while i < a.length - 1\n        if a[i] > a[i+1]\n            return false\n        end\n        i += 1\n    end\n    return true\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.length <= 1\n  i = 0\n  while i < a.length - 1\n    if a[i] <= a[i + 1]\n      i += 1\n    else\n      return false\n    end\n  end\n  true\nend",
    "  if a.sort == a\n    return \"Monotonic\"\n  else\n    return \"Not Monotonic\"\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    if a.sort == a\n        puts \"Monotonic\"\n    else\n        puts \"Not Monotonic\"\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "\tif a.sort == a\n\t\tputs \"Monotonic\"\n\telse\n\t\tputs \"Not Monotonic\"\n\tend\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  if a[0] < a[1]\n    (1...a.size).each do |i|\n      return false if a[i] < a[i - 1]\n    end\n  else\n    (1...a.size).each do |i|\n      return false if a[i] > a[i - 1]\n    end\n  end\n  true\nend",
    "    return true if a.sort == a || a.sort.reverse == a\n    false\nend",
    "  return true if a.size <= 1\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  return false\nend",
    "  return true if a.length <= 1\n  return false if a[0] < a[1]\n  return false if a[0] > a[1]\n  for i in 1..a.length-2\n    return false if a[i] < a[i+1]\n    return false if a[i] > a[i+1]\n  end\n  return true\nend",
    "  return true if a.sort == a\n  return true if a.sort.reverse == a\n  return false\nend\nputs is_Monotonic([1,2,3,4,5])\nputs is_Monotonic([5,4,3,2,1])\nputs is_Monotonic([1,2,3,4,5,6,7,8,9])\nputs is_Monotonic([9,8,7,6,5,4,3,2,1])\nputs is_Monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nputs is_Monotonic([15,14,13,12,11,10,9,8,7,6,5,4,3,2,1])\nputs is_Monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nputs is_Monotonic([20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1])\nputs is_Monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\nputs is_Monotonic([30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1])\nputs is_Monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35",
    "  a.sort == a || a.sort.reverse == a\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.length == 1\n        return true\n    end\n    i = 0\n    while i < a.length - 1\n        if a[i] > a[i + 1]\n            return false\n        end\n        i += 1\n    end\n    return true\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.length <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "\treturn true if a.length <= 1\n\treturn false if a[0] < a[1]\n\tfor i in 1...a.length\n\t\treturn false if a[i-1] < a[i]\n\tend\n\treturn true\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.size <= 1\n  return a.each_cons(2).all? { |x, y| (x <=> y) <= 0 } || a.each_cons(2).all? { |x, y| (x <=> y) >= 0 }\nend",
    "  if a.sort == a\n    puts \"Monotonic\"\n  else\n    puts \"Not Monotonic\"\n  end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "    if(a.length==1)\n        return true\n    end\n    i=0\n    while(i<a.length-1)\n        if(a[i]>a[i+1])\n            return false\n        end\n        i+=1\n    end\n    return true\nend",
    "  return true if a.length <= 1\n  return a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.size <= 1\n  return a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    puts \"Array is Monotonic\"\n  else\n    puts \"Array is not Monotonic\"\n  end\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  if a == a.sort || a == a.sort.reverse\n    return true\n  else\n    return false\n  end\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "    if a.sort == a || a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "    return true if a.sort == a || a.sort.reverse == a\n    false\nend",
    "  return true if a.size <= 1\n  return false if a.size == 2 && a[0] == a[1]\n  return true if a.size == 2 && a[0] != a[1]\n  return false if a[0] == a[1] && a[1] == a[2]\n  return true if a[0] != a[1] && a[1] != a[2]\n  return false if a[0] == a[1] && a[1] != a[2]\n  return false if a[0] != a[1] && a[1] == a[2]\n  return true if a[0] < a[1] && a[1] < a[2]\n  return true if a[0] > a[1] && a[1] > a[2]\nend",
    "  return true if a.length <= 1\n  if a[0] <= a[1]\n    (0..a.length-2).each do |i|\n      return false if a[i] > a[i+1]\n    end\n  else\n    (0..a.length-2).each do |i|\n      return false if a[i] < a[i+1]\n    end\n  end\n  return true\nend",
    "    if a == a.sort || a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "    if a.sort == a\n        return true\n    else\n        return false\n    end\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  return false\nend",
    "  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  return false\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.length <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  return false\nend",
    "  return true if a.size <= 1\n  return false if a[0] < a[1]\n  return false if a[0] > a[1]\n  for i in 1..a.size-1\n    return false if a[i-1] != a[i]\n  end\n  return true\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return a.sort == a || a.sort.reverse == a\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "  return true if a.size <= 1\n  return a[0] <= a[1] ? is_Monotonic(a[1..-1]) : false\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  a.sort == a || a.sort.reverse == a\nend",
    "  if a == a.sort || a == a.sort.reverse\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.length <= 1\n  return true if a.sort == a\n  return true if a.sort.reverse == a\n  false\nend",
    "    if a.length == 1\n        return true\n    end\n    if a[0] < a[1]\n        for i in 1..a.length-1\n            if a[i] < a[i-1]\n                return false\n            end\n        end\n    else\n        for i in 1..a.length-1\n            if a[i] > a[i-1]\n                return false\n            end\n        end\n    end\n    return true\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  return true if a[0] <= a[1] && is_Monotonic(a[1..-1])\n  return true if a[0] >= a[1] && is_Monotonic(a[1..-1])\n  false\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a == a.sort || a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  return true if a.size == 1\n  a.each_with_index do |x, i|\n    return false if a[i] != a[i+1] && a[i] != a[i-1]\n  end\n  true\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend"
  ]
}