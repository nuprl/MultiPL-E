{
  "name": "mbpp_68_is_Monotonic",
  "language": "rb",
  "prompt": "# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(a)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Monotonic\n    candidate = method(:is_Monotonic)\n    assert_equal(true, candidate.call([6, 5, 4, 4]))\n    assert_equal(true, candidate.call([1, 2, 2, 3]))\n    assert_equal(false, candidate.call([1, 3, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  return a[0] <= a[1] ? a.each_cons(2).all? { |x, y| x <= y } : a.each_cons(2).all? { |x, y| x >= y }\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 1\n  return false if a.size == 2 && a[0] == a[1]\n  return false if a.size == 2 && a[0] != a[1]\n  return false if a.size == 3 && (a[0] == a[1] || a[1] == a[2])\n  return false if a.size == 3 && (a[0] != a[1] && a[1] != a[2])\n  return false if a.size == 4 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3])\n  return false if a.size == 4 && (a[0] != a[1] && a[1] != a[2] && a[2] != a[3])\n  return false if a.size == 5 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4])\n  return false if a.size == 5 && (a[0] != a[1] && a[1] != a[2] && a[2] != a[3] && a[3] != a[4])\n  return false if a.size == 6 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4] || a[4] == a[5])\n  return false if a.size == 6 && (a[0] != a[1] && a[1] != a[2] && a[2] != a[3] && a[3] != a[4] && a[4] != a[5])\n  return false if a.size == 7 && (a[0] == a[1] || a[1] == a[2] || a[2] == a[3] || a[3] == a[4] || a[4] == a[5] || a[5] == a[6])\n  return false if a.size == 7 && (a[0] != a[1] && a",
    "  return true if a.size <= 1\n  if a[0] < a[1]\n    for i in 1..a.size-1\n      return false if a[i-1] > a[i]\n    end\n  else\n    for i in 1..a.size-1\n      return false if a[i-1] < a[i]\n    end\n  end\n  return true\nend",
    "  a.each_cons(2).all? { |x, y| x <= y } || a.each_cons(2).all? { |x, y| x >= y }\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a == a.sort\n        return true\n    elsif a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  elsif a.sort.reverse == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.size <= 2\n  return true if a.sort == a || a.sort.reverse == a\n  false\nend",
    "    if a == a.sort || a == a.sort.reverse\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    puts \"Monotonic\"\n  else\n    puts \"Not Monotonic\"\n  end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "    if a.sort == a\n        return true\n    elsif a.sort.reverse == a\n        return true\n    else\n        return false\n    end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  if a.sort == a\n    return true\n  else\n    return false\n  end\nend",
    "  return true if a.sort == a || a.sort.reverse == a\n  false\nend"
  ]
}