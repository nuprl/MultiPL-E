{
  "name": "mbpp_728_sum_list",
  "language": "rb",
  "prompt": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1, lst2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_list\n    candidate = method(:sum_list)\n    assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))\n    assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))\n    assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  lst1.zip(lst2).map { |a, b| a + b }\nend",
    "  sum = []\n  lst1.each_with_index do |num, index|\n    sum << num + lst2[index]\n  end\n  sum\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |a, b| a + b }\nend",
    "  lst1.zip(lst2).map { |a, b| a + b }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  sum = []\n  lst1.each_with_index do |num, i|\n    sum << num + lst2[i]\n  end\n  sum\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |a, b| a + b }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  sum_lst = []\n  lst1.each_with_index do |num, i|\n    sum_lst << num + lst2[i]\n  end\n  sum_lst\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend",
    "  sum = []\n  lst1.each_with_index do |x, i|\n    sum << x + lst2[i]\n  end\n  sum\nend",
    "  lst1.zip(lst2).map { |x, y| x + y }\nend"
  ]
}