{
  "name": "mbpp_262_split_two_parts",
  "language": "rb",
  "prompt": "# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef split_two_parts(list1, l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_two_parts\n    candidate = method(:split_two_parts)\n    assert_equal([[1, 1, 2], [3, 4, 4, 5, 1]], candidate.call([1, 1, 2, 3, 4, 4, 5, 1], 3))\n    assert_equal([[\"a\", \"b\"], [\"c\", \"d\"]], candidate.call([\"a\", \"b\", \"c\", \"d\"], 2))\n    assert_equal([[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]], candidate.call([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.each_slice(l).to_a\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  return list1[0..l-1], list1[l..list1.length]\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  list1.partition.with_index { |_, i| i < l }\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  list1.each_slice(l).to_a\nend",
    "  [list1[0...l], list1[l..-1]]\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  return list1[0..l-1], list1[l..list1.length]\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  return list1[0..l-1], list1[l..-1]\nend",
    "  return list1[0..l-1], list1[l..list1.length-1]\nend",
    "  return list1[0...l], list1[l..-1]\nend",
    "  list1[0..l-1], list1[l..-1]\nend",
    "  list1.partition.with_index { |_, i| i < l }\nend",
    "  list1.each_slice(l).to_a\nend",
    "  list1.each_slice(l).to_a\nend",
    "  list1.each_slice(l).to_a\nend"
  ]
}