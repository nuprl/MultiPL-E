{
  "name": "mbpp_619_move_num",
  "language": "rb",
  "prompt": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  num_arr = []\n  str_arr = []\n  test_str.split('').each do |char|\n    if char.to_i.to_s == char\n      num_arr << char\n    else\n      str_arr << char\n    end\n  end\n  str_arr.join + num_arr.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpudu4c_oe\nStarted\n.\nFinished in 0.000413821 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2416.50 tests/s, 7249.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpq1bbcj0t\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpq1bbcj0t.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010136303 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.66 tests/s, 98.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/\\d/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmplsoh2oqg\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmplsoh2oqg.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.00841585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.82 tests/s, 118.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.scan(/[a-zA-Z]+|\\d+/).map{|x| x[/\\d+/] ? x.to_i : x}.sort_by{|x| x.is_a?(Integer) ? 1 : 0}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3rrhigl1\nStarted\n.\nFinished in 0.000475819 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.64 tests/s, 6304.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  # write your code here\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join(' ') + test_str.gsub(/[0-9]/, ' ').split.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpi4ee5fu0\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpi4ee5fu0.rb:10:in `test_move_num'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_num\n      9:     candidate = method(:move_num)\n  => 10:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     11:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     12:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     13:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1 143 55 3000I love you three thousand\">\n\ndiff:\n? 1 143 55 3000I love you three thousand1143553000\n===============================================================================\n\nFinished in 0.009601261 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.15 tests/s, 104.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  # code goes here\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpxuo_9zj5\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpxuo_9zj5.rb:10:in `test_move_num'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_num\n      9:     candidate = method(:move_num)\n  => 10:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     11:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     12:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     13:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009654455 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n103.58 tests/s, 103.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/i, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpnwszi_yy\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpnwszi_yy.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.019056506 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n52.48 tests/s, 52.48 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '').concat(test_str.gsub(/[a-zA-Z]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpifb_ao_r\nStarted\n.\nFinished in 0.000825424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1211.50 tests/s, 3634.50 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.chars.partition { |x| x =~ /[a-z]/ }.flatten.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmp3xtmpirf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp3xtmpirf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"loveyouthreethousandI1143553000\">\n\ndiff:\n? IloveyouthreethousandI1143553000\n===============================================================================\n\nFinished in 0.010863602 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n92.05 tests/s, 92.05 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.chars.partition { |c| c =~ /[a-z]/ }.flatten.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpcohqbqvm\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpcohqbqvm.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"loveyouthreethousandI1143553000\">\n\ndiff:\n? IloveyouthreethousandI1143553000\n===============================================================================\n\nFinished in 0.011315361 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.38 tests/s, 88.38 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, ' ').squeeze(' ') + test_str.gsub(/[0-9]/, ' ').squeeze(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpwyb9wvqw\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwyb9wvqw.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1 143 55 3000 I love you three thousand\">\n\ndiff:\n? I1 143 55 3000 I love you three thousand1143553000\n===============================================================================\n\nFinished in 0.009549441 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.72 tests/s, 104.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  nums = test_str.scan(/\\d+/)\n  letters = test_str.scan(/\\D+/)\n  letters.join + nums.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2hes20z6\nStarted\n.\nFinished in 0.000439542 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2275.10 tests/s, 6825.29 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]+/, '') + test_str.gsub(/[0-9]+/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpodjyfmmf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpodjyfmmf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.015634616 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n63.96 tests/s, 63.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpts4nfz5n\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpts4nfz5n.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010398845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.16 tests/s, 96.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  num_arr = []\n  str_arr = []\n  test_str.split('').each do |x|\n    if x =~ /\\d/\n      num_arr << x\n    else\n      str_arr << x\n    end\n  end\n  str_arr.join + num_arr.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpou6fpqmd\nStarted\n.\nFinished in 0.000526655 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1898.78 tests/s, 5696.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.scan(/\\D/).join + test_str.scan(/\\d/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_iy4z5a_\nStarted\n.\nFinished in 0.000474549 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2107.26 tests/s, 6321.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpq1bbcj0t\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpq1bbcj0t.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010136303 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.66 tests/s, 98.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-z]/i, '') + test_str.gsub(/[a-z]/i, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmposom4vp2\nStarted\n.\nFinished in 0.000498608 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2005.58 tests/s, 6016.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpts4nfz5n\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpts4nfz5n.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010398845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.16 tests/s, 96.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpnnecuv8f\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpnnecuv8f.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009997201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.03 tests/s, 100.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  nums = []\n  test_str.each_char do |char|\n    if char =~ /\\d/\n      nums << char\n    end\n  end\n  test_str.delete!(\"0-9\")\n  test_str << nums.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphhh4ub_e\nStarted\n.\nFinished in 0.000453749 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2203.86 tests/s, 6611.58 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/\\d/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpzve6s_2e\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzve6s_2e.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009539751 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n104.82 tests/s, 104.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.split('').sort_by { |x| x.match(/\\d/) ? 0 : 1 }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmp4bauo60y\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp4bauo60y.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009083525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.09 tests/s, 110.09 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpnnecuv8f\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpnnecuv8f.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009997201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.03 tests/s, 100.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]+/, '') + test_str.gsub(/[0-9]+/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpodjyfmmf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpodjyfmmf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.015634616 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n63.96 tests/s, 63.96 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^0-9]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp4wi6czzl\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp4wi6czzl.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011338887 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n88.19 tests/s, 88.19 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/\\d/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpsbw9i_f4\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpsbw9i_f4.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.016587251 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n60.29 tests/s, 60.29 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.gsub(/\\D+/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpgfuo9f3o\nStarted\n.\nFinished in 0.000452526 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2209.82 tests/s, 6629.45 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.scan(/[a-zA-Z]+/).join + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsix6epfp\nStarted\n.\nFinished in 0.00047243 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.72 tests/s, 6350.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpts4nfz5n\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpts4nfz5n.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010398845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.16 tests/s, 96.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpnnecuv8f\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpnnecuv8f.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009997201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.03 tests/s, 100.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpnnecuv8f\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpnnecuv8f.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009997201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.03 tests/s, 100.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  return test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmp36cikj1o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp36cikj1o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.012255992 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n81.59 tests/s, 81.59 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/i, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpnnecuv8f\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpnnecuv8f.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009997201 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.03 tests/s, 100.03 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  # split the string into an array\n  # iterate through the array\n  # if the element is a number, move it to the end of the array\n  # join the array back into a string\n  test_arr = test_str.split('')\n  test_arr.each_with_index do |char, index|\n    if char.to_i.to_s == char\n      test_arr.delete_at(index)\n      test_arr.push(char)\n    end\n  end\n  test_arr.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpqlugmnf4\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpqlugmnf4.rb:20:in `test_move_num'\n     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_move_num\n     19:     candidate = method(:move_num)\n  => 20:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     21:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     22:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     23:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"Ilove4you5three00thousand150313\">\n\ndiff:\n? Ilove4you5three00thousand1503143553000\n===============================================================================\n\nFinished in 0.010260946 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.46 tests/s, 97.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpq1bbcj0t\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpq1bbcj0t.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010136303 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.66 tests/s, 98.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.split('').sort_by {|x| x.match(/\\d/) ? 0 : 1}.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpqxx0qdjs\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpqxx0qdjs.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008627293 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.91 tests/s, 115.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').split('').join + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmp3lekqut2\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp3lekqut2.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.009856025 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.46 tests/s, 101.46 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/\\d+/, '') + test_str.scan(/\\d+/).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6a2z4zxs\nStarted\n.\nFinished in 0.000390637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2559.92 tests/s, 7679.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpzq93h8ef\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpzq93h8ef.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.011017488 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n90.76 tests/s, 90.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[^a-zA-Z]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "Loaded suite /tmp/tmpui0j2mk6\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpui0j2mk6.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008872316 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.71 tests/s, 112.71 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  num = test_str.scan(/\\d+/)\n  alpha = test_str.scan(/[a-zA-Z]+/)\n  alpha.join + num.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpas_n5aj1\nStarted\n.\nFinished in 0.000434899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2299.38 tests/s, 6898.15 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpjejoybak\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpjejoybak.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.008380867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n119.32 tests/s, 119.32 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  num_arr = []\n  test_str.each_char do |char|\n    if char.to_i.to_s == char\n      num_arr << char\n    end\n  end\n  test_str.delete!('0123456789')\n  test_str << num_arr.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo38wrbcm\nStarted\n.\nFinished in 0.000453654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2204.32 tests/s, 6612.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpts4nfz5n\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpts4nfz5n.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010398845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.16 tests/s, 96.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[^0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6fst59ek\nStarted\n.\nFinished in 0.000471748 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2119.78 tests/s, 6359.33 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, ' ').split.join + test_str.gsub(/[0-9]/, ' ').split.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpq1bbcj0t\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpq1bbcj0t.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010136303 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.66 tests/s, 98.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.delete('^0-9').concat(test_str.delete('0-9'))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122851,
      "stdout": "Loaded suite /tmp/tmpowaii1t4\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpowaii1t4.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.00945554 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n105.76 tests/s, 105.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpts4nfz5n\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpts4nfz5n.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010398845 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.16 tests/s, 96.16 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '').concat(test_str.gsub(/[0-9]/, ''))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpo1e0deoo\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpo1e0deoo.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010143829 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.58 tests/s, 98.58 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.chars.partition { |x| x =~ /[a-zA-Z]/ }.flatten.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6nqjv74h\nStarted\n.\nFinished in 0.000483809 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2066.93 tests/s, 6200.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/\\d/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmplsoh2oqg\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmplsoh2oqg.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.00841585 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.82 tests/s, 118.82 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[^a-zA-Z]/, '') + test_str.gsub(/[a-zA-Z]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmptgxmp17v\nStarted\n.\nFinished in 0.000430779 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2321.38 tests/s, 6964.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, \"\").concat(test_str.gsub(/[0-9]/, \"\"))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmpwiztqgrf\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmpwiztqgrf.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.01016391 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.39 tests/s, 98.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-zA-Z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmprb9le01o\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmprb9le01o.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"1143553000Iloveyouthreethousand\">\n\ndiff:\n? 1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010001199 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.99 tests/s, 99.99 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str)\n  test_str.gsub(/[a-z]/, '') + test_str.gsub(/[0-9]/, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_num\n    candidate = method(:move_num)\n    assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n    assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n    assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n  end\nend\n",
      "timestamp": 1665510052,
      "stdout": "Loaded suite /tmp/tmp7x8_fqmi\nStarted\nF\n===============================================================================\nFailure: test_move_num(TestHumanEval)\n/tmp/tmp7x8_fqmi.rb:9:in `test_move_num'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_move_num\n      8:     candidate = method(:move_num)\n  =>  9:     assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))\n     10:     assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))\n     11:     assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))\n     12:   end\n<\"Iloveyouthreethousand1143553000\"> expected but was\n<\"I1143553000Iloveyouthreethousand\">\n\ndiff:\n? I1143553000Iloveyouthreethousand1143553000\n===============================================================================\n\nFinished in 0.010149989 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n98.52 tests/s, 98.52 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}