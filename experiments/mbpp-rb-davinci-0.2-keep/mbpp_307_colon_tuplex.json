{
  "name": "mbpp_307_colon_tuplex",
  "language": "rb",
  "prompt": "# Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex, m, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_307_colon_tuplex.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_colon_tuplex\n    candidate = method(:colon_tuplex)\n    assert_equal([\"HELLO\", 5, [50], true], candidate.call([\"HELLO\", 5, [], true], 2, 50))\n    assert_equal([\"HELLO\", 5, [100], true], candidate.call([\"HELLO\", 5, [], true], 2, 100))\n    assert_equal([\"HELLO\", 5, [500], true], candidate.call([\"HELLO\", 5, [], true], 2, 500))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend",
    "  tuplex[m..n]\nend"
  ]
}