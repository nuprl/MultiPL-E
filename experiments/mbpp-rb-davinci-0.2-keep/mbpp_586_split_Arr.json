{
  "name": "mbpp_586_split_Arr",
  "language": "rb",
  "prompt": "# Write a python function to split a list at the nth eelment and add the first part to the end.\ndef split_Arr(l, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_Arr\n    candidate = method(:split_Arr)\n    assert_equal([5, 6, 52, 36, 12, 10], candidate.call([12, 10, 5, 6, 52, 36], 2))\n    assert_equal([2, 3, 4, 1], candidate.call([1, 2, 3, 4], 1))\n    assert_equal([3, 4, 5, 6, 7, 0, 1, 2], candidate.call([0, 1, 2, 3, 4, 5, 6, 7], 3))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  l.rotate!(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate!(n)\nend",
    "  l.rotate!(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate!(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate!(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate!(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend",
    "  l.rotate(n)\nend"
  ]
}