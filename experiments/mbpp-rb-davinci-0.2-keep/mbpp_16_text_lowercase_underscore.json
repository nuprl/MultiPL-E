{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "rb",
  "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_lowercase_underscore\n    candidate = method(:text_lowercase_underscore)\n    assert_equal(true, candidate.call(\"aab_cbbbc\"))\n    assert_equal(false, candidate.call(\"aab_Abbbc\"))\n    assert_equal(false, candidate.call(\"Aaab_abbbc\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match?(/^[a-z_]+$/)\nend",
    "  text.match(/^[a-z]+_[a-z]+$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/[a-z]+_[a-z]+/) ? true : false\nend",
    "  text.match(/^[a-z]+_[a-z]+$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z_]+$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z_]+$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z]+_[a-z]+$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend",
    "  if text.match(/[a-z]+_[a-z]+/)\n    return true\n  else\n    return false\n  end\nend",
    "  text.match(/^[a-z]+(_[a-z]+)*$/) ? true : false\nend"
  ]
}