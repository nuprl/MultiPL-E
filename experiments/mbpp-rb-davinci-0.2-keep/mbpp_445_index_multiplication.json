{
  "name": "mbpp_445_index_multiplication",
  "language": "rb",
  "prompt": "# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_index_multiplication\n    candidate = method(:index_multiplication)\n    assert_equal([[6, 21], [12, 45], [2, 9], [7, 30]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[14, 32], [20, 60], [6, 20], [16, 44]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[24, 45], [30, 77], [12, 33], [27, 60]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map {|x,y| x*y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map {|a, b| a * b}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  if test_tup1.length == test_tup2.length\n    result = []\n    test_tup1.each_with_index do |value, index|\n      result << value * test_tup2[index]\n    end\n    result\n  else\n    puts \"Tuples length are not equal\"\n  end\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value * test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value * test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x * y }\nend",
    "  result = []\n  test_tup1.each_with_index do |value, index|\n    result << value * test_tup2[index]\n  end\n  result\nend",
    "    res = []\n    for i in 0...test_tup1.length\n        res << test_tup1[i] * test_tup2[i]\n    end\n    return res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 * test_tup2[index]\n  end\n  result\nend"
  ]
}