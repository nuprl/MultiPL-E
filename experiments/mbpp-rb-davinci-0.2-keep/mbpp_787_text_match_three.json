{
  "name": "mbpp_787_text_match_three",
  "language": "rb",
  "prompt": "# Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_text_match_three\n    candidate = method(:text_match_three)\n    assert_equal(false, candidate.call(\"ac\"))\n    assert_equal(false, candidate.call(\"dc\"))\n    assert_equal(true, candidate.call(\"abbbba\"))\n    assert_equal(true, candidate.call(\"caacabbbba\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.match(/ab{3}/) ? true : false\nend",
    "  text.match(/b{3}/) ? true : false\nend",
    "  text.scan(/ab{3}/)\nend",
    "  if /b{3}/.match(text)\n    puts \"Matched\"\n  else\n    puts \"No match\"\n  end\nend",
    "  if /ab{3}/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  if /ab{3}/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/ab{3}/) ? \"Matched\" : \"Not matched\"\nend",
    "  if text.match(/ab{3}/)\n    puts \"Match\"\n  else\n    puts \"No match\"\n  end\nend",
    "  if /b{3}/.match(text)\n    puts \"Matched\"\n  else\n    puts \"No match\"\n  end\nend",
    "  if text.match(/ab{3}/)\n    puts \"Matched\"\n  else\n    puts \"No match\"\n  end\nend",
    "  text.match(/ab{3}/) ? \"#{text} matches\" : \"#{text} does not match\"\nend",
    "  if /a...b/.match(text)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.scan(/ab{3}/)\nend",
    "  if text.match(/ab{3}/)\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend",
    "  text.match(/b{3}/) ? true : false\nend",
    "  /ab{3}/.match(text)\nend",
    "  if text.match(/ab{3}/)\n    puts \"Matched\"\n  else\n    puts \"No match\"\n  end\nend",
    "  if /b{3}/.match(text)\n    puts \"Matched\"\n  else\n    puts \"No match\"\n  end\nend",
    "  text.scan(/ab{3}/)\nend",
    "  if text =~ /ab{3}/\n    puts \"We have a match!\"\n  else\n    puts \"No match here.\"\n  end\nend"
  ]
}