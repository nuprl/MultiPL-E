{
  "name": "mbpp_132_tup_string",
  "language": "rb",
  "prompt": "# Write a function to convert a tuple to a string.\ndef tup_string(tup1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_tup_string\n    candidate = method(:tup_string)\n    assert_equal(\"exercises\", candidate.call([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]))\n    assert_equal(\"python\", candidate.call([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]))\n    assert_equal(\"program\", candidate.call([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  tup1.join(\" \")\nend",
    "  tup1.join\nend",
    "  tup1.join(\"\")\nend",
    "  tup1.join(\"\")\nend",
    "  tup1.join(\"\")\nend",
    "  tup1.join('')\nend",
    "  tup1.join\nend",
    "  tup1.join\nend",
    "  tup1.join('')\nend",
    "  tup1.join(\" \")\nend",
    "  tup1.join(\" \")\nend",
    "  tup1.each do |x|\n    print x\n  end\nend\ntup_string(tup1)\nputs",
    "  tup1.join(\" \")\nend",
    "  tup1.join(\"\")\nend",
    "  tup1.join\nend",
    "  tup1.join(\" \")\nend",
    "  tup1.join\nend",
    "  tup1.join\nend",
    "  tup1.join(\" \")\nend",
    "  tup1.join\nend"
  ]
}