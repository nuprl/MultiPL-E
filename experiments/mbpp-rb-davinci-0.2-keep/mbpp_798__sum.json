{
  "name": "mbpp_798__sum",
  "language": "rb",
  "prompt": "# Write a python function to find the sum of an array.\ndef _sum(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test__sum\n    candidate = method(:_sum)\n    assert_equal(6, candidate.call([1, 2, 3]))\n    assert_equal(50, candidate.call([15, 12, 13, 10]))\n    assert_equal(3, candidate.call([0, 1, 2]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.inject(0) { |sum, x| sum + x }\nend",
    "  arr.inject(0, :+)\nend",
    "  sum = 0\n  arr.each { |i| sum += i }\n  sum\nend",
    "  arr.inject(0, :+)\nend",
    "  arr.inject(0) { |sum, x| sum + x }\nend",
    "  sum = 0\n  arr.each { |i| sum += i }\n  sum\nend",
    "  arr.inject(0, :+)\nend",
    "  sum = 0\n  arr.each { |i| sum += i }\n  sum\nend",
    "  arr.inject(0, :+)\nend",
    "  arr.inject(0, :+)\nend",
    "  arr.inject(0, :+)\nend",
    "  arr.inject(0, :+)\nend",
    "  # Write your code here\n  sum = 0\n  arr.each do |i|\n    sum += i\n  end\n  return sum\nend",
    "  sum = 0\n  arr.each { |x| sum += x }\n  sum\nend",
    "  arr.inject(0) { |sum, x| sum + x }\nend",
    "  arr.inject(0, :+)\nend",
    "  # Write your logic here\n  sum = 0\n  arr.each do |i|\n    sum += i\n  end\n  return sum\nend",
    "  sum = 0\n  arr.each do |num|\n    sum += num\n  end\n  sum\nend",
    "  arr.inject(0, :+)\nend",
    "  arr.inject(0, :+)\nend"
  ]
}