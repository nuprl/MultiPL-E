{
  "name": "mbpp_398_sum_of_digits",
  "language": "rb",
  "prompt": "# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_of_digits\n    candidate = method(:sum_of_digits)\n    assert_equal(14, candidate.call([10, 2, 56]))\n    assert_equal(19, candidate.call([[10, 20, 4, 5, \"b\", 70, \"a\"]]))\n    assert_equal(19, candidate.call([10, 20, -4, 5, -70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  nums.map { |num| num.digits.sum }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.chars.map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.chars.map(&:to_i).sum }\nend",
    "  nums.map { |n| n.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.digits.sum }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.split('').map(&:to_i).reduce(:+) }\nend",
    "  nums.map { |num| num.to_s.chars.map(&:to_i).reduce(:+) }\nend"
  ]
}