{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rb",
  "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_max_run_uppercase\n    candidate = method(:max_run_uppercase)\n    assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))\n    assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))\n    assert_equal(4, candidate.call(\"GooGLEFluTTER\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend",
    "  count = 0\n  max_count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n    else\n      count = 0\n    end\n    max_count = count if count > max_count\n  end\n  max_count\nend",
    "  test_str.chars.chunk { |c| c.upcase == c }.max_by { |k, v| v.size }.last.size\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.match(/[A-Z]/)\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.split('').each do |c|\n    if c == c.upcase\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend",
    "  max_count = 0\n  count = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      count += 1\n      max_count = count if count > max_count\n    else\n      count = 0\n    end\n  end\n  max_count\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.chars.each do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      current_run = 0\n    end\n    max_run = current_run if current_run > max_run\n  end\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n    else\n      max_run = current_run if current_run > max_run\n      current_run = 0\n    end\n  end\n  max_run = current_run if current_run > max_run\n  max_run\nend",
    "  max_run = 0\n  current_run = 0\n  test_str.each_char do |char|\n    if char.upcase == char\n      current_run += 1\n      max_run = current_run if current_run > max_run\n    else\n      current_run = 0\n    end\n  end\n  max_run\nend"
  ]
}