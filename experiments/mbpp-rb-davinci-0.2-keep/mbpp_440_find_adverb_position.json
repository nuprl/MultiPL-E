{
  "name": "mbpp_440_find_adverb_position",
  "language": "rb",
  "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_adverb_position\n    candidate = method(:find_adverb_position)\n    assert_equal([0, 7, \"clearly\"], candidate.call(\"clearly!! we can see the sky\"))\n    assert_equal([0, 9, \"seriously\"], candidate.call(\"seriously!! there are many roses\"))\n    assert_equal([0, 13, \"unfortunately\"], candidate.call(\"unfortunately!! sita is going to home\"))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} at position #{index}\"\n  end\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?('ly') }\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index { |adverb, index| puts \"#{adverb} is in position #{index}\" }\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index}.\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  words = text.split\n  adverbs = []\n  words.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return [word, index]\n    end\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverb_positions = []\n  adverbs.each do |adverb|\n    adverb_positions << text.index(adverb)\n  end\n  adverb_positions\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b(\\w+ly)\\b/)\n  adverbs.each do |adverb|\n    puts \"#{adverb[0]} is at position #{text.index(adverb[0])}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return index\n    end\n  end\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  # TODO: return an array of [adverb, position]\n  adverb_position = []\n  adverb_position << text.scan(/\\b\\w+ly\\b/)\n  adverb_position << text.scan(/\\b\\w+ly\\b/).map {|word| text.index(word)}\n  adverb_position.flatten\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/).each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.split.each_with_index.select{|word, index| word.end_with?(\"ly\")}.to_h\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      adverb_position.push(index)\n    end\n  end\n  adverb_position\nend",
    "  adverb_position = []\n  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    adverb_position << text.index(adverb)\n  end\n  adverb_position\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << [word, index]\n    end\n  end\n  adverb_position\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  positions = []\n  adverbs.each do |adverb|\n    positions << text.index(adverb)\n  end\n  return adverbs, positions\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is an adverb and it is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/).each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} at position #{index}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index.map{|adverb, index| [adverb, index]}\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?('ly') }\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and it's position is #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is: #{adverb} and its position is: #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverb_positions = []\n  adverbs.each do |adverb|\n    adverb_positions << text.index(adverb)\n  end\n  adverb_positions\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  adverb_position = Hash.new\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position[word] = index\n    end\n  end\n  adverb_position\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |word, index|\n    puts \"#{word} is at position #{index}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |word| text.index(word) }\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }.map { |word, index| [word, index] }\nend",
    "  adverb_position = []\n  adverbs = text.split(\" \").select {|word| word.end_with?(\"ly\")}\n  adverbs.each do |adverb|\n    adverb_position << text.index(adverb)\n  end\n  adverb_position\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word =~ /\\w+ly/\n  end\n  adverbs\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?('ly') }\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is located at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs_positions = []\n  adverbs.each do |adverb|\n    adverbs_positions << text.index(adverb)\n  end\n  adverbs_positions\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{index}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return [word, index]\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  positions = text.enum_for(:scan, /\\b\\w+ly\\b/).map { Regexp.last_match.begin(0) }\n  return adverbs, positions\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    adverb_positions << index if word.end_with?('ly')\n  end\n  adverb_positions\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{index + 1}. #{adverb}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.split.select { |word| word.end_with?(\"ly\") }\n  adverbs.map { |adverb| text.index(adverb) }\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?('ly')\n  end\n  adverb_position\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}.\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }.map { |word, index| [word, index] }\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.match(/\\w+ly/)\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index+1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} found at position #{index}\"\n  end\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << [word, index]\n    end\n  end\n  adverb_position\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  puts \"Adverbs: #{adverbs}\"\n  adverb_positions = text.enum_for(:scan, /\\w+ly/).map { Regexp.last_match.begin(0) }\n  puts \"Adverb positions: #{adverb_positions}\"\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |word| text.index(word) }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"#{word} is an adverb and it is at position #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?('ly') }\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      puts \"The adverb is: #{word} and the position is: #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"#{word} is an adverb and it is at position #{index}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and it's position is #{text.index(adverb)}\"\n  end\nend",
    "  # TODO: return an array of [adverb, position]\n  adverb_position = []\n  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    adverb_position << [adverb, text.index(adverb)]\n  end\n  adverb_position\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts adverb + \" \" + text.index(adverb).to_s\n  end\nend",
    "  text.split.each_with_index.select { |word, index| word.end_with?(\"ly\") }\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"The adverb #{adverb} is at position #{index + 1}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} Position: #{text.index(adverb)}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{index}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  adverb_position = text.index(/\\w+ly/)\n  adverb = text[adverb_position..-1].match(/\\w+ly/).to_s\n  puts \"The adverb is #{adverb} and it is at position #{adverb_position}\"\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The first adverb is #{word} and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it's position is #{index+1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{index + 1}. #{adverb}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is an adverb\"\n    puts \"It is located at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b[a-zA-Z]+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return word, index\n    end\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is found at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"The adverb #{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |word, index|\n    puts \"#{word} is at position #{index}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and it's position is #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  # TODO: Implement this function\n  # The difficult part of this exercise is to identify the adverbs.\n  # Have a look at the txt file. Can you differentiate adverbs from other words?\n  # Tips: Is it always at the end of a sentence?\n  #       Is it always before a comma?\n  #       Return the next word if it's \"not\"\n  #       Consider also double-word adverbs, e.g. 'right now'\n  #       Do you need to check uppercase versions, too? 'Right' and 'right'?\n  #       Remove the periods for words like 'Mr.'\n  #       In case you don't find any adverb, return 'No adverb found'\n  # Hint: You can use the methods from the String class, e.g. 'some string'.method\n  #       Have a look at http://ruby-doc.org/core-2.2.0/String.html\n  #       In Ruby, you can add new methods to existing classes like String.\n  #       This is a very powerful concept, you can add your own methods\n  #       to help you out.\n  #       An example is given below, a method that returns the length of a string.\n  #       The method is added to the String class and can be called like this:\n  #       'some string'.length\n  #       You can also define your own classes to get a better structure for your\n  #       code.\n  #       Have a look at http://ruby-doc.org/core-2.2.0/String.html#method-i-length\n  #       In Ruby, you can access characters in a string like an array, e.g.\n  #       'some string'[2] => 'm'\n  #       Have a look at http://ruby-doc.org/core-2.2.0/String.html#method-i-5B-5D\n  #       You can iterate over strings like this:\n  #       'some string'.each_char { |c| puts c }\n  #       Have a look at http://ruby-doc.org/core-2.2.0/String.html#method-i-each_char\n  #       To check if a",
    "  text.scan(/\\w+ly/)\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    adverb_position << index if word.end_with?(\"ly\")\n  end\n  adverb_position\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} Position: #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{index}\"\n  end\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  adverbs.each do |adverb|\n    puts \"The adverb is #{adverb} and its position is #{text.index(adverb)}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      puts \"The adverb is #{word} and it is at position #{index}\"\n    end\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverbs << [word, index]\n    end\n  end\n  adverbs\nend",
    "  adverb_positions = []\n  text.split.each_with_index do |word, index|\n    adverb_positions << index if word.end_with?('ly')\n  end\n  adverb_positions\nend",
    "  adverb_position = []\n  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      adverb_position << index\n    end\n  end\n  adverb_position\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return \"The adverb is #{word} and it is at position #{index + 1}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).map { |adverb| text.index(adverb) }\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"Adverb: #{adverb} at index: #{index}\"\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} is at position #{index}\"\n  end\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      puts \"The adverb is #{word} and its position is #{index}\"\n    end\n  end\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index { |word, index| puts \"#{word} is at position #{index}\" }\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\w+ly/)\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  adverbs = text.scan(/\\b\\w+ly\\b/)\n  positions = text.enum_for(:scan, /\\b\\w+ly\\b/).map { Regexp.last_match.begin(0) }\n  puts \"Adverbs: #{adverbs}\"\n  puts \"Positions: #{positions}\"\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?(\"ly\")\n  end\n  adverbs\nend",
    "  text.scan(/\\b\\w+ly\\b/)\nend",
    "  text.scan(/\\b\\w+ly\\b/).each_with_index do |adverb, index|\n    puts \"#{adverb} found at position #{index}\"\n  end\nend",
    "  text.split.each_with_index do |word, index|\n    if word.end_with?('ly')\n      return \"The adverb is #{word} and its position is #{index + 1}\"\n    end\n  end\nend",
    "  adverbs = text.scan(/\\w+ly/)\n  adverbs.each do |adverb|\n    puts \"#{adverb} is at position #{text.index(adverb)}\"\n  end\nend",
    "  adverbs = []\n  text.split.each_with_index do |word, index|\n    adverbs << [word, index] if word.end_with?('ly')\n  end\n  adverbs\nend"
  ]
}