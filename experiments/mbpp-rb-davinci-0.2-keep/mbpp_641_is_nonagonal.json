{
  "name": "mbpp_641_is_nonagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nonagonal\n    candidate = method(:is_nonagonal)\n    assert_equal(325, candidate.call(10))\n    assert_equal(750, candidate.call(15))\n    assert_equal(1089, candidate.call(18))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  n = n.to_f\n  if (Math.sqrt(1 + 8 * n) + 1) % 2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 1\n  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root == nth_root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 4 == 3\n  return true if n == 5\n  return false if n % 8 == 5\n  return true if n == 7\n  return false if n % 16 == 7\n  return true if n == 9\n  return false if n % 32 == 9\n  return true if n == 11\n  return false if n % 64 == 11\n  return true if n == 13\n  return false if n % 128 == 13\n  return true if n == 15\n  return false if n % 256 == 15\n  return true if n == 17\n  return false if n % 512 == 17\n  return true if n == 19\n  return false if n % 1024 == 19\n  return true if n == 21\n  return false if n % 2048 == 21\n  return true if n == 23\n  return false if n % 4096 == 23\n  return true if n == 25\n  return false if n % 8192 == 25\n  return true if n == 27\n  return false if n % 16384 == 27\n  return true if n == 29\n  return false if n % 32768 == 29\n  return true if n == 31\n  return false if n % 65536 == 31\n  return true if n == 33\n  return false if n % 131072 == 33\n  return true if n == 35\n  return false if n % 262144 == 35\n  return true if n == 37\n  return false if n % 524288 == 37\n  return true if n == 39\n  return false if n % 1048576 == 39\n  return true if n == 41\n  return false if n % 2097152 == 41\n  return true if n == 43\n  return false if n % 4194304 == 43\n  return true if n == 45\n  return false if n % 8388608 == 45\n  return true if n == 47\n  return false if n % 16777216 == 47\n  return true if n == 49\n  return false if n % 33554432 == 49\n  return true if n == 51\n  return false if n % 67108864 == 51\n  return true if n == 53\n ",
    "  n = n.to_f\n  if (Math.sqrt(1 + 8 * n) + 1) % 2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  return false if n < 1\n  i = 1\n  while true\n    return true if i * (3 * i - 1) / 2 == n\n    return false if i * (3 * i - 1) / 2 > n\n    i += 1\n  end\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  n = (Math.sqrt(8*n + 1) - 1)/2\n  n == n.to_i\nend",
    "  # n = (3 * n**2 - n) / 2\n  # (1 + sqrt(1 + 24 * n)) / 6\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) % 1 == 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8*n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 1\n  nth_nonagonal += 1 until (nth_nonagonal * (3 * nth_nonagonal - 1)) / 2 == n\n  nth_nonagonal\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 4 == 3\n  return true if n == 7\n  return false if n % 8 == 7\n  return true if n == 15\n  return false if n % 16 == 15\n  return true if n == 31\n  return false if n % 32 == 31\n  return true if n == 63\n  return false if n % 64 == 63\n  return true if n == 127\n  return false if n % 128 == 127\n  return true if n == 255\n  return false if n % 256 == 255\n  return true if n == 511\n  return false if n % 512 == 511\n  return true if n == 1023\n  return false if n % 1024 == 1023\n  return true if n == 2047\n  return false if n % 2048 == 2047\n  return true if n == 4095\n  return false if n % 4096 == 4095\n  return true if n == 8191\n  return false if n % 8192 == 8191\n  return true if n == 16383\n  return false if n % 16384 == 16383\n  return true if n == 32767\n  return false if n % 32768 == 32767\n  return true if n == 65535\n  return false if n % 65536 == 65535\n  return true if n == 131071\n  return false if n % 131072 == 131071\n  return true if n == 262143\n  return false if n % 262144 == 262143\n  return true if n == 524287\n  return false if n % 524288 == 524287\n  return true if n == 1048575\n  return false if n % 1048576 == 1048575\n  return true if n == 2097151\n  return false if n % 2097152 == 2097151\n  return true if n == 4194303\n  return false if n % 4194304 == 4194303\n  return true if n == 8388607\n  return false if n % 8388608 == 8388607\n  return true if n == 16777215\n  return false if n % 16777216 == 16777215\n  return true",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1) * (i + 2)) / 6\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 1\n  nth_nonagonal_index = 1\n  while nth_nonagonal_index < n\n    nth_nonagonal += 1\n    nth_nonagonal_index += nth_nonagonal\n  end\n  nth_nonagonal_index == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = (Math.sqrt(1 + 8 * n) - 1) / 2\n  n.to_i == n\nend",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth == n\nend",
    "  n = n * 2\n  if Math.sqrt(n) % 1 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * x^2 - x) / 2\n  # x = (1 + sqrt(1 + 24n)) / 6\n  x = (1 + Math.sqrt(1 + 24 * n)) / 6\n  x == x.to_i\nend",
    "  x = Math.sqrt(1 + 8 * n)\n  x == x.to_i\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  nth_nonagonal += 1\n  nth_nonagonal += 2\n  nth_nonagonal += 3\n  nth_nonagonal += 4\n  nth_nonagonal += 5\n  nth_nonagonal += 6\n  nth_nonagonal += 7\n  nth_nonagonal += 8\n  nth_nonagonal += 9\n  nth_nonagonal += 10\n  nth_nonagonal += 11\n  nth_nonagonal += 12\n  nth_nonagonal += 13\n  nth_nonagonal += 14\n  nth_nonagonal += 15\n  nth_nonagonal += 16\n  nth_nonagonal += 17\n  nth_nonagonal += 18\n  nth_nonagonal += 19\n  nth_nonagonal += 20\n  nth_nonagonal += 21\n  nth_nonagonal += 22\n  nth_nonagonal += 23\n  nth_nonagonal += 24\n  nth_nonagonal += 25\n  nth_nonagonal += 26\n  nth_nonagonal += 27\n  nth_nonagonal += 28\n  nth_nonagonal += 29\n  nth_nonagonal += 30\n  nth_nonagonal += 31\n  nth_nonagonal += 32\n  nth_nonagonal += 33\n  nth_nonagonal += 34\n  nth_nonagonal += 35\n  nth_nonagonal += 36\n  nth_nonagonal += 37\n  nth_nonagonal += 38\n  nth_nonagonal += 39\n  nth_nonagonal += 40\n  nth_nonagonal += 41\n  nth_nonagonal += 42\n  nth_nonagonal += 43\n  nth_nonagonal += 44\n  nth_nonagonal += 45\n  nth_nonagonal += 46\n  nth_nonagonal += 47\n  nth_nonagonal += 48\n  nth_nonagonal += 49\n  nth_nonagonal += 50\n  nth_nonagonal += 51\n  nth_nonagonal += 52\n  nth_nonagonal += 53\n  nth_nonagonal += 54\n  nth_nonagonal += 55\n  nth_nonagonal +=",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = 1/2 * (3*n - 2)\n  # n = 3*n - 2\n  # n = 2*n - 1\n  # n = n - 1/2\n  # n = n - 1\n  # n = n\n  # n = n + 1\n  # n = n + 1/2\n  # n = n + 1/3\n  # n = n + 1/4\n  # n = n + 1/5\n  # n = n + 1/6\n  # n = n + 1/7\n  # n = n + 1/8\n  # n = n + 1/9\n  # n = n + 1/10\n  # n = n + 1/11\n  # n = n + 1/12\n  # n = n + 1/13\n  # n = n + 1/14\n  # n = n + 1/15\n  # n = n + 1/16\n  # n = n + 1/17\n  # n = n + 1/18\n  # n = n + 1/19\n  # n = n + 1/20\n  # n = n + 1/21\n  # n = n + 1/22\n  # n = n + 1/23\n  # n = n + 1/24\n  # n = n + 1/25\n  # n = n + 1/26\n  # n = n + 1/27\n  # n = n + 1/28\n  # n = n + 1/29\n  # n = n + 1/30\n  # n = n + 1/31\n  # n = n + 1/32\n  # n = n + 1/33\n  # n = n + 1/34\n  # n = n + 1/35\n  # n = n + 1/36\n  # n = n + 1/37\n  # n = n + 1/38\n  # n = n + 1/39\n  # n = n + 1/40\n  # n = n + 1/41\n  # n = n + 1/42\n  # n = n + 1/43\n  # n = n + 1/44\n  # n = n + 1/45\n  # n",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) + 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2\n  # n = (3 * x**2 - x) / 2",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  return false if n < 1\n  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root % 1 == 0\nend",
    "  nth_nonagonal = (1..n).inject(:+)\n  nth_nonagonal\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  nth_nonagonal = 0\n  nth_nonagonal += 1\n  nth_nonagonal += 2\n  nth_nonagonal += 3\n  nth_nonagonal += 4\n  nth_nonagonal += 5\n  nth_nonagonal += 6\n  nth_nonagonal += 7\n  nth_nonagonal += 8\n  nth_nonagonal += 9\n  nth_nonagonal += 10\n  nth_nonagonal += 11\n  nth_nonagonal += 12\n  nth_nonagonal += 13\n  nth_nonagonal += 14\n  nth_nonagonal += 15\n  nth_nonagonal += 16\n  nth_nonagonal += 17\n  nth_nonagonal += 18\n  nth_nonagonal += 19\n  nth_nonagonal += 20\n  nth_nonagonal += 21\n  nth_nonagonal += 22\n  nth_nonagonal += 23\n  nth_nonagonal += 24\n  nth_nonagonal += 25\n  nth_nonagonal += 26\n  nth_nonagonal += 27\n  nth_nonagonal += 28\n  nth_nonagonal += 29\n  nth_nonagonal += 30\n  nth_nonagonal += 31\n  nth_nonagonal += 32\n  nth_nonagonal += 33\n  nth_nonagonal += 34\n  nth_nonagonal += 35\n  nth_nonagonal += 36\n  nth_nonagonal += 37\n  nth_nonagonal += 38\n  nth_nonagonal += 39\n  nth_nonagonal += 40\n  nth_nonagonal += 41\n  nth_nonagonal += 42\n  nth_nonagonal += 43\n  nth_nonagonal += 44\n  nth_nonagonal += 45\n  nth_nonagonal += 46\n  nth_nonagonal += 47\n  nth_nonagonal += 48\n  nth_nonagonal += 49\n  nth_nonagonal += 50\n  nth_nonagonal += 51\n  nth_nonagonal += 52\n  nth_nonagonal += 53\n  nth_nonagonal += 54\n  nth_nonagonal += 55\n  nth_nonagonal +=",
    "  nth_nonagonal = (3 * n * n - n) / 2\n  nth_nonagonal\nend",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - n - 2n / 3 = 0\n  # n^2 - 3n - 2n / 3 = 0\n  # n^2 - 5n / 3 = 0\n  # n^2 - 5n + 9n^2 / 9 = 0\n  # 9n^2 - 5n + 9n^2 / 9 = 0\n  # 9n^2 - 5n + 9n^2 = 0\n  # 18n^2 - 5n = 0\n  # 18n^2 = 5n\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n / 18\n  # n = 5n",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  i = 1\n  while n > 0\n    n -= i\n    i += 1\n  end\n  n == 0\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  n = n.to_f\n  (-1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  n = n.to_f\n  return (1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) - 1) % 2 == 0\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/2\n  # n = (3*n^2 - 3*n + 1)/",
    "  i = 1\n  while n > 0\n    n -= i\n    i += 1\n  end\n  n == 0\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  return false if n < 1\n  return true if n == 1\n  return true if n == 2\n  return true if n == 3\n  return true if n == 4\n  return true if n == 5\n  return true if n == 6\n  return true if n == 7\n  return true if n == 8\n  return true if n == 9\n  return true if n == 10\n  return true if n == 11\n  return true if n == 12\n  return true if n == 13\n  return true if n == 14\n  return true if n == 15\n  return true if n == 16\n  return true if n == 17\n  return true if n == 18\n  return true if n == 19\n  return true if n == 20\n  return true if n == 21\n  return true if n == 22\n  return true if n == 23\n  return true if n == 24\n  return true if n == 25\n  return true if n == 26\n  return true if n == 27\n  return true if n == 28\n  return true if n == 29\n  return true if n == 30\n  return true if n == 31\n  return true if n == 32\n  return true if n == 33\n  return true if n == 34\n  return true if n == 35\n  return true if n == 36\n  return true if n == 37\n  return true if n == 38\n  return true if n == 39\n  return true if n == 40\n  return true if n == 41\n  return true if n == 42\n  return true if n == 43\n  return true if n == 44\n  return true if n == 45\n  return true if n == 46\n  return true if n == 47\n  return true if n == 48\n  return true if n == 49\n  return true if n == 50\n  return true if n == 51\n  return true if n == 52\n  return true if n == 53\n  return true if n == 54\n  return true if n == 55\n  return true if n == 56\n  return true if n == 57\n  return true if n == 58\n  return true if n == 59\n  return true if n == 60\n  return true if n == 61\n  return true if n == 62\n  return true if n == 63",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  nth_root = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_root.to_i == nth_root\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  n = Math.sqrt(8*n + 1)\n  n == n.to_i\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = Math.sqrt(8*n + 1)\n  n.to_i == n\nend",
    "  nth_nonagonal = 0\n  nth_nonagonal += 1\n  nth_nonagonal += 2\n  nth_nonagonal += 3\n  nth_nonagonal += 4\n  nth_nonagonal += 5\n  nth_nonagonal += 6\n  nth_nonagonal += 7\n  nth_nonagonal += 8\n  nth_nonagonal += 9\n  nth_nonagonal += 10\n  nth_nonagonal += 11\n  nth_nonagonal += 12\n  nth_nonagonal += 13\n  nth_nonagonal += 14\n  nth_nonagonal += 15\n  nth_nonagonal += 16\n  nth_nonagonal += 17\n  nth_nonagonal += 18\n  nth_nonagonal += 19\n  nth_nonagonal += 20\n  nth_nonagonal += 21\n  nth_nonagonal += 22\n  nth_nonagonal += 23\n  nth_nonagonal += 24\n  nth_nonagonal += 25\n  nth_nonagonal += 26\n  nth_nonagonal += 27\n  nth_nonagonal += 28\n  nth_nonagonal += 29\n  nth_nonagonal += 30\n  nth_nonagonal += 31\n  nth_nonagonal += 32\n  nth_nonagonal += 33\n  nth_nonagonal += 34\n  nth_nonagonal += 35\n  nth_nonagonal += 36\n  nth_nonagonal += 37\n  nth_nonagonal += 38\n  nth_nonagonal += 39\n  nth_nonagonal += 40\n  nth_nonagonal += 41\n  nth_nonagonal += 42\n  nth_nonagonal += 43\n  nth_nonagonal += 44\n  nth_nonagonal += 45\n  nth_nonagonal += 46\n  nth_nonagonal += 47\n  nth_nonagonal += 48\n  nth_nonagonal += 49\n  nth_nonagonal += 50\n  nth_nonagonal += 51\n  nth_nonagonal += 52\n  nth_nonagonal += 53\n  nth_nonagonal += 54\n  nth_nonagonal += 55\n  nth_nonagonal +=",
    "  # (1 + sqrt(1 + 8n)) / 2\n  (1 + Math.sqrt(1 + 8 * n)) / 2\nend",
    "  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 - 3*n + 1) / 2\n  # n = (3*n^2 -",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  if (Math.sqrt(1 + 8 * n) + 1) % 2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_nonagonal = 0\n  nth_nonagonal += 1\n  nth_nonagonal += 2\n  nth_nonagonal += 3\n  nth_nonagonal += 4\n  nth_nonagonal += 5\n  nth_nonagonal += 6\n  nth_nonagonal += 7\n  nth_nonagonal += 8\n  nth_nonagonal += 9\n  nth_nonagonal += 10\n  nth_nonagonal += 11\n  nth_nonagonal += 12\n  nth_nonagonal += 13\n  nth_nonagonal += 14\n  nth_nonagonal += 15\n  nth_nonagonal += 16\n  nth_nonagonal += 17\n  nth_nonagonal += 18\n  nth_nonagonal += 19\n  nth_nonagonal += 20\n  nth_nonagonal += 21\n  nth_nonagonal += 22\n  nth_nonagonal += 23\n  nth_nonagonal += 24\n  nth_nonagonal += 25\n  nth_nonagonal += 26\n  nth_nonagonal += 27\n  nth_nonagonal += 28\n  nth_nonagonal += 29\n  nth_nonagonal += 30\n  nth_nonagonal += 31\n  nth_nonagonal += 32\n  nth_nonagonal += 33\n  nth_nonagonal += 34\n  nth_nonagonal += 35\n  nth_nonagonal += 36\n  nth_nonagonal += 37\n  nth_nonagonal += 38\n  nth_nonagonal += 39\n  nth_nonagonal += 40\n  nth_nonagonal += 41\n  nth_nonagonal += 42\n  nth_nonagonal += 43\n  nth_nonagonal += 44\n  nth_nonagonal += 45\n  nth_nonagonal += 46\n  nth_nonagonal += 47\n  nth_nonagonal += 48\n  nth_nonagonal += 49\n  nth_nonagonal += 50\n  nth_nonagonal += 51\n  nth_nonagonal += 52\n  nth_nonagonal += 53\n  nth_nonagonal += 54\n  nth_nonagonal += 55\n  nth_nonagonal +=",
    "  nth_nonagonal = (3 * n**2 - 3 * n + 1) / 2\n  nth_nonagonal\nend",
    "  # n = (3 * x^2 - x) / 2\n  # 2n = 3x^2 - x\n  # 2n + 1/4 = 3x^2\n  # (2n + 1/4)^(1/2) = x\n  # x = (2n + 1/4)^(1/2)\n  # x = (2n + 0.25)**(1/2)\n  # x = (2n + 0.25)**0.5\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x = Math.sqrt(2n + 0.25)\n  # x =",
    "  nth_nonagonal = (3 * n**2 - 3 * n + 1)\n  return nth_nonagonal\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  return false if n < 1\n  root = (Math.sqrt(1 + 8 * n) - 1) / 2\n  root == root.to_i\nend",
    "  n = n.to_f\n  (-1 + Math.sqrt(1 + 8 * n)) / 2 % 1 == 0\nend",
    "  n = (Math.sqrt(1 + 8 * n) - 1) / 2\n  n == n.to_i\nend",
    "  i = 1\n  while n > 0\n    n -= i\n    i += 1\n  end\n  n == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i + 1) * (i + 2)) / 6\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  counter = 1\n  while nth_nonagonal < n\n    nth_nonagonal += counter\n    counter += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  # n = (3 * n^2 - n) / 2\n  # n^2 - n - 2n = 0\n  # n^2 - 3n = 0\n  # n(n - 3) = 0\n  # n = 0 or n = 3\n  # n = 3k + 1\n  # n = 3k + 2\n  # n = 3k + 3\n  # n = 3k + 4\n  # n = 3k + 5\n  # n = 3k + 6\n  # n = 3k + 7\n  # n = 3k + 8\n  # n = 3k + 9\n  # n = 3k + 10\n  # n = 3k + 11\n  # n = 3k + 12\n  # n = 3k + 13\n  # n = 3k + 14\n  # n = 3k + 15\n  # n = 3k + 16\n  # n = 3k + 17\n  # n = 3k + 18\n  # n = 3k + 19\n  # n = 3k + 20\n  # n = 3k + 21\n  # n = 3k + 22\n  # n = 3k + 23\n  # n = 3k + 24\n  # n = 3k + 25\n  # n = 3k + 26\n  # n = 3k + 27\n  # n = 3k + 28\n  # n = 3k + 29\n  # n = 3k + 30\n  # n = 3k + 31\n  # n = 3k + 32\n  # n = 3k + 33\n  # n = 3k + 34\n  # n = 3k + 35\n  # n = 3k + 36\n  # n = 3k + 37\n  # n = 3k + 38\n  # n = 3k + 39\n  # n = 3k + 40\n  # n = 3k + 41\n  # n = 3k + 42\n  # n = 3k + 43\n  # n = 3k + 44\n  # n = 3k + 45\n  # n = 3k + 46\n  # n = 3k + 47\n  # n = 3k + 48\n  # n = 3k + 49\n  # n = 3k + 50\n",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = 1/2 * (3 +- sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/2 * (3 + sqrt(9 + 8*n))\n  # n = 1/",
    "  return true if n == 1\n  return false if n < 1\n  n == (3 * n - 2)\nend",
    "  (Math.sqrt(1 + 8 * n) - 1) % 2 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * x^2) - x\n  # n = 3x^2 - x\n  # 0 = 3x^2 - x - n\n  # 0 = x^2 - (1/3)x - (n/3)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3) + (1/36)\n  # 0 = (x - (1/6))^2 - (n/3)",
    "  x = Math.sqrt(1 + 8 * n)\n  x == x.to_i\nend",
    "  i = 1\n  while true\n    if n == i * (3 * i - 1) / 2\n      return true\n    elsif n < i * (3 * i - 1) / 2\n      return false\n    end\n    i += 1\n  end\nend",
    "  # n = (3 * x^2 - x) / 2\n  # n = (3 * x^2 - x - 2n) / 2\n  # 3x^2 - x - 2n = 0\n  # x = (1 +- sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1 + 24n)) / 6\n  # x = (1 - sqrt(1 + 24n)) / 6\n  # x = (1 + sqrt(1",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 -",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = (i * (i * 3 - 1)) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  i = 1\n  while true\n    return i if n == i * (3 * i - 1) / 2\n    i += 1\n  end\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root % 1 == 0 && nth_root % 2 == 1\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = 1/2 * (3 +- sqrt(9 + 8 * x))\n  # n = 1/2 * (3 + sqrt(9 + 8 * x))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/2 * (3 + sqrt(8 * x + 1))\n  # n = 1/",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  # if n is nonagonal, then n = (3*x^2 - x)/2 for some x\n  # so n = (3*x^2 - x)/2\n  # so 2n = 3x^2 - x\n  # so 2n + 1/4 = 3x^2\n  # so (2n + 1/4)^(1/2) = x\n  # so x = (2n + 1/4)^(1/2)\n  # so x is an integer\n  # so (2n + 1/4)^(1/2) is an integer\n  # so (2n + 1/4)^(1/2)^2 is an integer\n  # so 2n + 1/4 is an integer\n  # so 2n + 1 is a multiple of 4\n  # so 2n is a multiple of 4\n  # so n is a multiple of 2\n  # so n is even\n  # so n is nonagonal iff n is even\n  n.even?\nend",
    "  # n = (3*a^2 - a)/2\n  # n = (3*a^2 - a - 2*b)/2\n  # 3*a^2 - a - 2*b = 2*n\n  # 3*a^2 - a - 2*b - 2*n = 0\n  # a = (1 +- sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n  # a = (1 + sqrt(1 + 24*n))/6\n  # a = (1 - sqrt(1 + 24*n))/6\n ",
    "  i = 1\n  while n > 0\n    n -= i\n    i += 1\n  end\n  n == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3*n**2 - 3*n + 1)/2\n  # n = (3*n**2 - 3*n + 2)/2\n  # n = (3*n**2 - 3*n + 3)/2\n  # n = (3*n**2 - 3*n + 4)/2\n  # n = (3*n**2 - 3*n + 5)/2\n  # n = (3*n**2 - 3*n + 6)/2\n  # n = (3*n**2 - 3*n + 7)/2\n  # n = (3*n**2 - 3*n + 8)/2\n  # n = (3*n**2 - 3*n + 9)/2\n  # n = (3*n**2 - 3*n + 10)/2\n  # n = (3*n**2 - 3*n + 11)/2\n  # n = (3*n**2 - 3*n + 12)/2\n  # n = (3*n**2 - 3*n + 13)/2\n  # n = (3*n**2 - 3*n + 14)/2\n  # n = (3*n**2 - 3*n + 15)/2\n  # n = (3*n**2 - 3*n + 16)/2\n  # n = (3*n**2 - 3*n + 17)/2\n  # n = (3*n**2 - 3*n + 18)/2\n  # n = (3*n**2 - 3*n + 19)/2\n  # n = (3*n**2 - 3*n + 20)/2\n  # n = (3*n**2 - 3*n + 21)/2\n  # n = (3*n**2 - 3*n + 22)/2\n  # n = (3*n**2 - 3*n + 23)/2\n  # n = (3*n**2 - 3*n + 24)/2\n  # n = (3*n**2 - 3*n + 25)/2\n  # n = (3*n**2 - 3*n + 26)/2\n  # n = (3*n**2 - 3*n + 27)/",
    "  if (Math.sqrt(1 + 8 * n) % 1) == 0.5\n    return true\n  else\n    return false\n  end\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  return nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  return false if n < 0\n  n = n.to_f\n  return true if (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\n  false\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2\n  # n = (3 * n**2 - n) / 2",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = (3 * n * n - n) / 2\n  nth_nonagonal\nend",
    "  (1 + Math.sqrt(1 + 8 * n)) % 2 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  i = 1\n  while true\n    return true if n == i * (3 * i - 1) / 2\n    return false if n < i * (3 * i - 1) / 2\n    i += 1\n  end\nend",
    "  nth_nonagonal = (3 * n * n - n) / 2\n  return nth_nonagonal\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth == n\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root == nth_root.to_i\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal = i * (3 * i - 1) / 2\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  # n = (3 * x^2 - x) / 2\n  # x = (1 + sqrt(1 + 12n)) / 6\n  x = (1 + Math.sqrt(1 + 12 * n)) / 6\n  x == x.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  nth_nonagonal = 0\n  nth_nonagonal += 1\n  nth_nonagonal += 2\n  nth_nonagonal += 3\n  nth_nonagonal += 4\n  nth_nonagonal += 5\n  nth_nonagonal += 6\n  nth_nonagonal += 7\n  nth_nonagonal += 8\n  nth_nonagonal += 9\n  nth_nonagonal += 10\n  nth_nonagonal += 11\n  nth_nonagonal += 12\n  nth_nonagonal += 13\n  nth_nonagonal += 14\n  nth_nonagonal += 15\n  nth_nonagonal += 16\n  nth_nonagonal += 17\n  nth_nonagonal += 18\n  nth_nonagonal += 19\n  nth_nonagonal += 20\n  nth_nonagonal += 21\n  nth_nonagonal += 22\n  nth_nonagonal += 23\n  nth_nonagonal += 24\n  nth_nonagonal += 25\n  nth_nonagonal += 26\n  nth_nonagonal += 27\n  nth_nonagonal += 28\n  nth_nonagonal += 29\n  nth_nonagonal += 30\n  nth_nonagonal += 31\n  nth_nonagonal += 32\n  nth_nonagonal += 33\n  nth_nonagonal += 34\n  nth_nonagonal += 35\n  nth_nonagonal += 36\n  nth_nonagonal += 37\n  nth_nonagonal += 38\n  nth_nonagonal += 39\n  nth_nonagonal += 40\n  nth_nonagonal += 41\n  nth_nonagonal += 42\n  nth_nonagonal += 43\n  nth_nonagonal += 44\n  nth_nonagonal += 45\n  nth_nonagonal += 46\n  nth_nonagonal += 47\n  nth_nonagonal += 48\n  nth_nonagonal += 49\n  nth_nonagonal += 50\n  nth_nonagonal += 51\n  nth_nonagonal += 52\n  nth_nonagonal += 53\n  nth_nonagonal += 54\n  nth_nonagonal += 55\n  nth_nonagonal +=",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = (1..n).inject(:+)\n  nth_nonagonal\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root.floor == nth_root\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  nth_nonagonal = (3 * n**2 - 3 * n + 1) / 2\n  if nth_nonagonal == n\n    return true\n  else\n    return false\n  end\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  # if n is nonagonal, then n = (3*n^2 - n)/2\n  # so we need to solve for n in the quadratic equation\n  # 3*n^2 - n - 2*n = 0\n  # n = (1 + sqrt(1 + 12*2))/6\n  # n = (1 + sqrt(25))/6\n  # n = (1 + 5)/6\n  # n = 6/6\n  # n = 1\n  # so n = 1 is the first nonagonal number\n  # so we need to check if n is an integer\n  # if n is an integer, then n is a nonagonal number\n  # otherwise, n is not a nonagonal number\n  # so we need to check if n is an integer\n  # we can check if n is an integer by checking if n is equal to n.to_i\n  # if n is equal to n.to_i, then n is an integer\n  # otherwise, n is not an integer\n  # so we need to check if n is equal to n.to_i\n  # we can check if n is equal to n.to_i by using the == method\n  # if n == n.to_i, then n is an integer\n  # otherwise, n is not an integer\n  # so we need to check if n == n.to_i\n  # we can check if n == n.to_i by using the == method\n  # if n == n.to_i, then n is an integer\n  # otherwise, n is not an integer\n  # so we need to check if n == n.to_i\n  # we can check if n == n.to_i by using the == method\n  # if n == n.to_i, then n is an integer\n  # otherwise, n is not an integer\n  # so we need to check if n == n.to_i\n  # we can check if n == n.to_i by using the == method\n  # if n == n.to_i, then n is an integer\n  # otherwise, n is not an integer\n  # so we need to check if n == n.to_i\n  # we can check if n == n.to",
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 - 3 * n + 1) / 2\n  # n = (3 * n^2 -",
    "  return false if n < 1\n  (Math.sqrt(1 + 8 * n) - 1) % 2 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root == nth_root.to_i\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return true if (Math.sqrt(1 + 8 * n) + 1) % 4 == 0\n  false\nend",
    "  return false if n < 0\n  return true if n == 0\n  return false if n % 2 == 0\n  return true if n % 2 == 1\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 2 == 0\n  return true if n == 5\n  return false if n % 2 == 0\n  return true if n == 7\n  return false if n % 2 == 0\n  return true if n == 9\n  return false if n % 2 == 0\n  return true if n == 11\n  return false if n % 2 == 0\n  return true if n == 13\n  return false if n % 2 == 0\n  return true if n == 15\n  return false if n % 2 == 0\n  return true if n == 17\n  return false if n % 2 == 0\n  return true if n == 19\n  return false if n % 2 == 0\n  return true if n == 21\n  return false if n % 2 == 0\n  return true if n == 23\n  return false if n % 2 == 0\n  return true if n == 25\n  return false if n % 2 == 0\n  return true if n == 27\n  return false if n % 2 == 0\n  return true if n == 29\n  return false if n % 2 == 0\n  return true if n == 31\n  return false if n % 2 == 0\n  return true if n == 33\n  return false if n % 2 == 0\n  return true if n == 35\n  return false if n % 2 == 0\n  return true if n == 37\n  return false if n % 2 == 0\n  return true if n == 39\n  return false if n % 2 == 0\n  return true if n == 41\n  return false if n % 2 == 0\n  return true if n == 43\n  return false if n % 2 == 0\n  return true if n == 45\n  return false if n % 2 == 0\n  return true if n == 47\n  return false if n % 2 == 0\n  return true if n == 49\n  return false if n % 2 == 0\n  return true if n == 51\n  return false if n % 2 == 0\n  return true if n == 53\n  return false if n % 2 == 0\n  return true if n == 55\n  return false if n % 2 == 0",
    "  (1 + Math.sqrt(1 + 8 * n)) % 2 == 0\nend",
    "  n = n.to_f\n  return (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  # n = (3 * n * n - n) / 2\n  # (1 + Math.sqrt(1 + 24 * n)) / 6\n  # (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\n  (1 + Math.sqrt(1 + 24 * n)) % 6 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  # n = (3 * x^2 - x) / 2\n  # x = (1 + sqrt(1 + 24n)) / 6\n  x = (1 + Math.sqrt(1 + 24 * n)) / 6\n  x == x.to_i\nend",
    "  i = 1\n  while (i * (3 * i - 1) / 2) < n\n    i += 1\n  end\n  (i * (3 * i - 1) / 2) == n\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend"
  ]
}