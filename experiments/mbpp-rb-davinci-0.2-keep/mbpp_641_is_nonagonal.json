{
  "name": "mbpp_641_is_nonagonal",
  "language": "rb",
  "prompt": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nonagonal\n    candidate = method(:is_nonagonal)\n    assert_equal(325, candidate.call(10))\n    assert_equal(750, candidate.call(15))\n    assert_equal(1089, candidate.call(18))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2\n  # n = (3 * n * n - n) / 2",
    "  nth = 0\n  i = 1\n  while nth < n\n    nth += i\n    i += 1\n  end\n  nth == n\nend",
    "  # n = (3 * n**2 - 3 * n + 1) / 2\n  # n = (3 * n**2 - 3 * n + 2) / 2\n  # n = (3 * n**2 - 3 * n + 3) / 2\n  # n = (3 * n**2 - 3 * n + 4) / 2\n  # n = (3 * n**2 - 3 * n + 5) / 2\n  # n = (3 * n**2 - 3 * n + 6) / 2\n  # n = (3 * n**2 - 3 * n + 7) / 2\n  # n = (3 * n**2 - 3 * n + 8) / 2\n  # n = (3 * n**2 - 3 * n + 9) / 2\n  # n = (3 * n**2 - 3 * n + 10) / 2\n  # n = (3 * n**2 - 3 * n + 11) / 2\n  # n = (3 * n**2 - 3 * n + 12) / 2\n  # n = (3 * n**2 - 3 * n + 13) / 2\n  # n = (3 * n**2 - 3 * n + 14) / 2\n  # n = (3 * n**2 - 3 * n + 15) / 2\n  # n = (3 * n**2 - 3 * n + 16) / 2\n  # n = (3 * n**2 - 3 * n + 17) / 2\n  # n = (3 * n**2 - 3 * n + 18) / 2\n  # n = (3 * n**2 - 3 * n + 19) / 2\n  # n = (3 * n**2 - 3 * n + 20) / 2\n  # n = (3 * n**2 - 3 * n + 21) / 2\n  # n = (3 * n**2 - 3 * n + 22) / 2\n  # n = (3 * n**2 - 3 * n + 23) / 2\n  # n = (3 * n**2 - 3 * n + 24) / 2\n  # n = (3 * n**2 - 3 * n + 25) / 2\n  # n = (3 * n**2 -",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  nth_nonagonal = 0\n  i = 1\n  while nth_nonagonal < n\n    nth_nonagonal += i\n    i += 1\n  end\n  nth_nonagonal == n\nend",
    "  n = n.to_f\n  (Math.sqrt(1 + 8 * n) + 1) / 2 % 1 == 0\nend",
    "  n = n.to_f\n  if (Math.sqrt(1 + 8 * n) + 1) % 2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return false if n < 1\n  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root == nth_root.to_i\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) + 1) / 2) % 1 == 0\nend",
    "  return false if n < 1\n  return true if n == 1\n  return false if n % 2 == 0\n  return true if n == 3\n  return false if n % 4 == 3\n  return true if n == 5\n  return false if n % 8 == 5\n  return true if n == 7\n  return false if n % 16 == 7\n  return true if n == 9\n  return false if n % 32 == 9\n  return true if n == 11\n  return false if n % 64 == 11\n  return true if n == 13\n  return false if n % 128 == 13\n  return true if n == 15\n  return false if n % 256 == 15\n  return true if n == 17\n  return false if n % 512 == 17\n  return true if n == 19\n  return false if n % 1024 == 19\n  return true if n == 21\n  return false if n % 2048 == 21\n  return true if n == 23\n  return false if n % 4096 == 23\n  return true if n == 25\n  return false if n % 8192 == 25\n  return true if n == 27\n  return false if n % 16384 == 27\n  return true if n == 29\n  return false if n % 32768 == 29\n  return true if n == 31\n  return false if n % 65536 == 31\n  return true if n == 33\n  return false if n % 131072 == 33\n  return true if n == 35\n  return false if n % 262144 == 35\n  return true if n == 37\n  return false if n % 524288 == 37\n  return true if n == 39\n  return false if n % 1048576 == 39\n  return true if n == 41\n  return false if n % 2097152 == 41\n  return true if n == 43\n  return false if n % 4194304 == 43\n  return true if n == 45\n  return false if n % 8388608 == 45\n  return true if n == 47\n  return false if n % 16777216 == 47\n  return true if n == 49\n  return false if n % 33554432 == 49\n  return true if n == 51\n  return false if n % 67108864 == 51\n  return true if n == 53\n ",
    "  n = n.to_f\n  if (Math.sqrt(1 + 8 * n) + 1) % 2 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  nth = 1\n  while nth * (3 * nth - 1) / 2 < n\n    nth += 1\n  end\n  nth * (3 * nth - 1) / 2 == n\nend",
    "  nth_nonagonal = (Math.sqrt(1 + 8 * n) - 1) / 2\n  nth_nonagonal == nth_nonagonal.to_i\nend",
    "  nth_root = Math.sqrt(1 + 8 * n)\n  nth_root % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  n = n.to_f\n  return ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  return false if n < 1\n  i = 1\n  while true\n    return true if i * (3 * i - 1) / 2 == n\n    return false if i * (3 * i - 1) / 2 > n\n    i += 1\n  end\nend",
    "  n = n.to_f\n  ((Math.sqrt(1 + 8 * n) - 1) / 2) % 1 == 0\nend",
    "  n = (Math.sqrt(8*n + 1) - 1)/2\n  n == n.to_i\nend",
    "  # n = (3 * n**2 - n) / 2\n  # (1 + sqrt(1 + 24 * n)) / 6\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) % 1 == 0\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) % 1 == 0 && sqrt(1 + 24 * n) % 2 == 1\n  # (1 + sqrt(1 + 24 * n)) % 6 == 0 && sqrt(1 + 24 * n) % 2 == 1 && sqrt(1 + 24 * n) > 0 && sqrt(1 + 24 * n) % 1 == 0 && sqrt"
  ]
}