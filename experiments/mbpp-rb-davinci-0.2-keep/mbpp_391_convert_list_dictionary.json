{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "rb",
  "prompt": "# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_convert_list_dictionary\n    candidate = method(:convert_list_dictionary)\n    assert_equal([{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}], candidate.call([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))\n    assert_equal([{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}], candidate.call([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]))\n    assert_equal([{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}], candidate.call([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  l1.zip(l2, l3).to_h\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  return {l1[0] => l1[1], l2[0] => l2[1], l3[0] => l3[1]}\nend",
    "  return Hash[l1.zip(l2.zip(l3))]\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = {l2[0] => l3[0], l2[1] => l3[1], l2[2] => l3[2]}\n  dict[l1[1]] = {l2[0] => l3[3], l2[1] => l3[4], l2[2] => l3[5]}\n  dict[l1[2]] = {l2[0] => l3[6], l2[1] => l3[7], l2[2] => l3[8]}\n  dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  for i in 0..l1.length-1\n    dict[l1[i]] = [l2[i], l3[i]]\n  end\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  return {l1[0] => l1[1], l2[0] => l2[1], l3[0] => l3[1]}\nend",
    "  return {l1[0] => l1[1], l2[0] => l2[1], l3[0] => l3[1]}\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend",
    "  dict = {}\n  dict[l1[0]] = l1[1]\n  dict[l2[0]] = l2[1]\n  dict[l3[0]] = l3[1]\n  return dict\nend"
  ]
}