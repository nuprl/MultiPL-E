{
  "name": "mbpp_401_add_nested_tuples",
  "language": "rb",
  "prompt": "# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_nested_tuples\n    candidate = method(:add_nested_tuples)\n    assert_equal([[7, 10], [7, 14], [3, 10], [8, 13]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))\n    assert_equal([[9, 12], [9, 16], [5, 12], [10, 15]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))\n    assert_equal([[11, 14], [11, 18], [7, 14], [12, 17]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result_tup = []\n  test_tup1.each_with_index do |tup, index|\n    result_tup << tup + test_tup2[index]\n  end\n  result_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res.push(tup.zip(test_tup2[index]).map { |x, y| x + y })\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << (tup + test_tup2[index])\n  end\n  result\nend",
    "  res = []\n  for i in 0...test_tup1.length\n    res << test_tup1[i] + test_tup2[i]\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result_tup = []\n  test_tup1.each_with_index do |tup, index|\n    result_tup.push(tup + test_tup2[index])\n  end\n  result_tup\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "    test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  for i in 0...test_tup1.size\n    result << test_tup1[i] + test_tup2[i]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "    result = []\n    for i in 0...test_tup1.length\n        result << test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tuple, index|\n    result << tuple.zip(test_tup2[index]).map { |tuple| tuple.sum }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result.push(tup1 + test_tup2[index])\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup.push(tup + test_tup2[index])\n  end\n  return res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res_tup\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup << tup + test_tup2[index]\n  end\n  res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map {|x, y| x + y}\n  end\n  res\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res.push(tup + test_tup2[index])\n  end\n  res\nend",
    "  result = []\n  for i in 0...test_tup1.length\n    result << test_tup1[i] + test_tup2[i]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << (tup + test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup.push(tup + test_tup2[index])\n  end\n  res_tup\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "    test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "    test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup + test_tup2[index]\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "    result = []\n    for i in 0...test_tup1.length\n        result << test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup + test_tup2[index]\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.zip(test_tup2) do |tup1, tup2|\n    result.push(tup1.zip(tup2).map { |x, y| x + y })\n  end\n  result\nend",
    "    res = []\n    for i in 0...test_tup1.length\n        res << test_tup1[i] + test_tup2[i]\n    end\n    return res\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  result = []\n  for i in 0...test_tup1.size\n    result << test_tup1[i] + test_tup2[i]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, i|\n    res << tup.zip(test_tup2[i]).map { |x, y| x + y }\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "    res = []\n    for i in 0..test_tup1.length-1\n        res.push(test_tup1[i]+test_tup2[i])\n    end\n    return res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |tup1, tup2| tup1 + tup2 }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup.push(tup + test_tup2[index])\n  end\n  return res_tup\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup + test_tup2[index]\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << (tup + test_tup2[index])\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res_tup = []\n  for i in 0...test_tup1.size\n    res_tup << test_tup1[i].zip(test_tup2[i]).map { |x, y| x + y }\n  end\n  res_tup\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map {|x, y| x + y}\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |tup1, tup2| tup1 + tup2 }\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup + test_tup2[index]\n  end\n  res\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map{|x,y| x + y}\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map{|x, y| x + y}\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map{|x, y| x + y}\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |tup| tup.reduce(:+) }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup.push(tup + test_tup2[index])\n  end\n  res_tup\nend",
    "  result_tup = []\n  test_tup1.each_with_index do |tup, index|\n    result_tup << tup + test_tup2[index]\n  end\n  result_tup\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "\tres = []\n\tfor i in 0...test_tup1.length\n\t\tres.push(test_tup1[i] + test_tup2[i])\n\tend\n\treturn res\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup.push(tup + test_tup2[index])\n  end\n  res_tup\nend",
    "    result = []\n    for i in 0..test_tup1.length-1\n        result.push(test_tup1[i] + test_tup2[i])\n    end\n    return result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup.push(tup + test_tup2[index])\n  end\n  res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res_tup = []\n  for i in 0...test_tup1.length\n    res_tup << test_tup1[i] + test_tup2[i]\n  end\n  res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x| x.sum }\n  end\n  result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup << (tup + test_tup2[index])\n  end\n  res_tup\nend",
    "  # write your code here\n  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res.push(tup + test_tup2[index])\n  end\n  res\nend",
    "  result = []\n  for i in 0...test_tup1.length\n    result << test_tup1[i] + test_tup2[i]\n  end\n  result\nend",
    "  res = []\n  for i in 0...test_tup1.size\n    res << test_tup1[i] + test_tup2[i]\n  end\n  res\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result_tup = []\n  for i in 0...test_tup1.length\n    result_tup.push(test_tup1[i].zip(test_tup2[i]).map{|x, y| x + y})\n  end\n  return result_tup\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "    res_tup = []\n    for i in 0...test_tup1.length\n        res_tup.push(test_tup1[i] + test_tup2[i])\n    end\n    return res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup + test_tup2[index]\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1 + test_tup2[index]\n  end\n  result\nend",
    "    result = []\n    for i in 0..test_tup1.length-1\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "  result = []\n  test_tup1.each_with_index do |tup1, index|\n    result << tup1.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  result\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result.push(tup + test_tup2[index])\n  end\n  result\nend",
    "    test_tup1.zip(test_tup2).map{|x,y| x+y}\nend",
    "  result = []\n  test_tup1.each_with_index do |tup, index|\n    result << tup + test_tup2[index]\n  end\n  result\nend",
    "  result_tup = []\n  test_tup1.each_with_index do |tup, index|\n    result_tup.push(tup + test_tup2[index])\n  end\n  result_tup\nend",
    "\t# write your code here\n\tresult = []\n\ttest_tup1.each_with_index do |tup, index|\n\t\tresult << tup.zip(test_tup2[index]).map{|x, y| x + y}\n\tend\n\tresult\nend",
    "  result = []\n  for i in 0...test_tup1.length\n    result << test_tup1[i].zip(test_tup2[i]).map {|x, y| x + y}\n  end\n  result\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend",
    "  result_tup = []\n  test_tup1.each_with_index do |tup, index|\n    result_tup << tup.zip(test_tup2[index]).map { |tup| tup.reduce(:+) }\n  end\n  result_tup\nend",
    "  res = []\n  test_tup1.each_with_index do |tup, index|\n    res << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res\nend",
    "  result = []\n  for i in 0...test_tup1.size\n    result << test_tup1[i] + test_tup2[i]\n  end\n  result\nend",
    "  res_tup = []\n  test_tup1.each_with_index do |tup, index|\n    res_tup << tup.zip(test_tup2[index]).map { |x, y| x + y }\n  end\n  res_tup\nend",
    "  test_tup1.zip(test_tup2).map { |x, y| x + y }\nend"
  ]
}