{
  "name": "mbpp_109_odd_Equivalent",
  "language": "rb",
  "prompt": "# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_Equivalent\n    candidate = method(:odd_Equivalent)\n    assert_equal(3, candidate.call(\"011001\", 6))\n    assert_equal(4, candidate.call(\"11011\", 5))\n    assert_equal(2, candidate.call(\"1010\", 4))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  count = 0\n  for i in 0...n\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\ts = s.to_i\n\tn = n.to_i\n\tcount = 0\n\tfor i in 1..n\n\t\tif s.to_s(2).reverse.to_i(2) % 2 == 1\n\t\t\tcount += 1\n\t\tend\n\t\ts = s.to_s(2).reverse.to_i(2)\n\tend\n\treturn count\nend\nputs odd_Equivalent(s, n)",
    "    count = 0\n    for i in 0..s.length-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    if count % 2 == 0\n        return n\n    else\n        return n-1\n    end\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if (s.to_i(2) >> i) & 1 == 1\n  end\n  return count\nend",
    "  # Write your code here\n  if s.length == 1\n    if s == \"0\"\n      return 0\n    else\n      return 1\n    end\n  end\n  if n == 0\n    return 0\n  end\n  if s.length == 2\n    if s == \"10\"\n      return 1\n    else\n      return 0\n    end\n  end\n  if s.length == 3\n    if s == \"101\"\n      return 2\n    else\n      return 1\n    end\n  end\n  if s.length == 4\n    if s == \"1010\"\n      return 2\n    else\n      return 1\n    end\n  end\n  if s.length == 5\n    if s == \"10101\"\n      return 3\n    else\n      return 2\n    end\n  end\n  if s.length == 6\n    if s == \"101010\"\n      return 3\n    else\n      return 2\n    end\n  end\n  if s.length == 7\n    if s == \"1010101\"\n      return 4\n    else\n      return 3\n    end\n  end\n  if s.length == 8\n    if s == \"10101010\"\n      return 4\n    else\n      return 3\n    end\n  end\n  if s.length == 9\n    if s == \"101010101\"\n      return 5\n    else\n      return 4\n    end\n  end\n  if s.length == 10\n    if s == \"1010101010\"\n      return 5\n    else\n      return 4\n    end\n  end\n  if s.length == 11\n    if s == \"10101010101\"\n      return 6\n    else\n      return 5\n    end\n  end\n  if s.length == 12\n    if s == \"101010101010\"\n      return 6\n    else\n      return 5\n    end\n  end\n  if s.length == 13\n    if s == \"1010101010101\"\n      return 7\n    else\n      return 6\n    end\n  end\n  if s.length == 14\n    if s == \"10101010101010\"\n      return 7\n    else\n      return 6\n    end\n ",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tif s[i] == '1'\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\ts = s.to_i\n\tn = n.to_i\n\tcount = 0\n\tfor i in 1..n\n\t\ts = s.to_s(2)\n\t\ts = s.split(\"\")\n\t\ts.rotate!\n\t\ts = s.join(\"\")\n\t\ts = s.to_i(2)\n\t\tif s % 2 == 1\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend",
    "  # Write your code here\n  count = 0\n  (0..n-1).each do |i|\n    count += 1 if s[i] == '1'\n  end\n  count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..s.length-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  if count % 2 == 0\n    return n\n  else\n    return n-1\n  end\nend",
    "  # write your code here\n  s = s.split(\"\")\n  s.each_with_index do |x, i|\n    if x == \"1\"\n      s[i] = \"0\"\n    else\n      s[i] = \"1\"\n    end\n  end\n  s = s.join(\"\")\n  s = s.to_i(2)\n  s = s + n\n  s = s.to_s(2)\n  s = s.split(\"\")\n  count = 0\n  s.each do |x|\n    if x == \"1\"\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  return count\nend",
    "  # Your code here\nend",
    "  # Write your code here\n  return 0\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s >> 1 | s << 1\n  end\n  s.to_s(2).count('1')\nend",
    "    s = s.to_i(2)\n    n.times do\n        s = s >> 1 | s << (s.to_s(2).size - 1)\n    end\n    s.to_s(2).count(\"1\")\nend",
    "  s = s.split('')\n  n.times do\n    s.unshift(s.pop)\n  end\n  s.join('').to_i(2).to_s(10).split('').count { |x| x.to_i.odd? }\nend",
    "  s.to_i(2).to_s(2).rjust(n, '0').chars.map(&:to_i).count(&:odd?)\nend",
    "    count = 0\n    for i in 0..n-1\n        s = s[-1] + s[0..-2]\n        count += 1 if s.to_i(2).odd?\n    end\n    count\nend",
    "\tif s.length == 0\n\t\treturn 0\n\tend\n\tif n == 0\n\t\treturn 0\n\tend\n\tif s.length == 1\n\t\treturn 1\n\tend\n\tif s.length == 2\n\t\treturn 2\n\tend\n\tif s.length == 3\n\t\treturn 3\n\tend\n\tif s.length == 4\n\t\treturn 4\n\tend\n\tif s.length == 5\n\t\treturn 5\n\tend\n\tif s.length == 6\n\t\treturn 6\n\tend\n\tif s.length == 7\n\t\treturn 7\n\tend\n\tif s.length == 8\n\t\treturn 8\n\tend\n\tif s.length == 9\n\t\treturn 9\n\tend\n\tif s.length == 10\n\t\treturn 10\n\tend\n\tif s.length == 11\n\t\treturn 11\n\tend\n\tif s.length == 12\n\t\treturn 12\n\tend\n\tif s.length == 13\n\t\treturn 13\n\tend\n\tif s.length == 14\n\t\treturn 14\n\tend\n\tif s.length == 15\n\t\treturn 15\n\tend\n\tif s.length == 16\n\t\treturn 16\n\tend\n\tif s.length == 17\n\t\treturn 17\n\tend\n\tif s.length == 18\n\t\treturn 18\n\tend\n\tif s.length == 19\n\t\treturn 19\n\tend\n\tif s.length == 20\n\t\treturn 20\n\tend\n\tif s.length == 21\n\t\treturn 21\n\tend\n\tif s.length == 22\n\t\treturn 22\n\tend\n\tif s.length == 23\n\t\treturn 23\n\tend\n\tif s.length == 24\n\t\treturn 24\n\tend\n\tif s.length == 25\n\t\treturn 25\n\tend\n\tif s.length == 26\n\t\treturn 26\n\tend\n\tif s.length == 27\n\t\treturn 27\n\tend\n\tif s.length == 28\n\t\treturn 28\n\tend\n\tif s.length == 29\n\t\treturn 29\n\tend\n\tif s.length == 30\n\t\treturn 30\n\tend\n\t",
    "    s = s.to_i\n    n = n.to_i\n    count = 0\n    for i in 1..n\n        if s.to_s(2).reverse.to_i(2) % 2 == 1\n            count += 1\n        end\n        s = s.to_s(2).reverse.to_i(2)\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    return count\nend",
    "\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts =",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  count = 0\n  for i in 0..n-1\n    count += s.count('1')\n    s = s[1..-1] + s[0]\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "\ts = s.to_i\n\tn = n.to_i\n\tcount = 0\n\twhile n > 0\n\t\tif s % 2 == 1\n\t\t\tcount += 1\n\t\tend\n\t\ts = s / 2\n\t\tn -= 1\n\tend\n\treturn count\nend\nputs odd_Equivalent(101, 2)\nputs odd_Equivalent(101, 3)\nputs odd_Equivalent(101, 4)\nputs odd_Equivalent(101, 5)\nputs odd_Equivalent(101, 6)\nputs odd_Equivalent(101, 7)\nputs odd_Equivalent(101, 8)\nputs odd_Equivalent(101, 9)\nputs odd_Equivalent(101, 10)\nputs odd_Equivalent(101, 11)\nputs odd_Equivalent(101, 12)\nputs odd_Equivalent(101, 13)\nputs odd_Equivalent(101, 14)\nputs odd_Equivalent(101, 15)\nputs odd_Equivalent(101, 16)\nputs odd_Equivalent(101, 17)\nputs odd_Equivalent(101, 18)\nputs odd_Equivalent(101, 19)\nputs odd_Equivalent(101, 20)\nputs odd_Equivalent(101, 21)\nputs odd_Equivalent(101, 22)\nputs odd_Equivalent(101, 23)\nputs odd_Equivalent(101, 24)\nputs odd_Equivalent(101, 25)\nputs odd_Equivalent(101, 26)\nputs odd_Equivalent(101, 27)\nputs odd_Equivalent(101, 28)\nputs odd_Equivalent(101, 29)\nputs odd_Equivalent(101, 30)\nputs odd_Equivalent(101, 31)\nputs odd_Equivalent(101, 32)\nputs odd_Equivalent(101, 33)\nputs odd_Equivalent(101, 34)\nputs odd_Equivalent(101, 35)\nputs odd_Equivalent(101, 36)\nputs odd_Equivalent(101, 37)\nputs odd_Equivalent(",
    "  # Write your code here\n  # print s\n  # print n\n  # print s.length\n  # print s.split('')\n  # print s.split('').length\n  # print s.split('').length - 1\n  # print s.split('')[0]\n  # print s.split('')[1]\n  # print s.split('')[2]\n  # print s.split('')[3]\n  # print s.split('')[4]\n  # print s.split('')[5]\n  # print s.split('')[6]\n  # print s.split('')[7]\n  # print s.split('')[8]\n  # print s.split('')[9]\n  # print s.split('')[10]\n  # print s.split('')[11]\n  # print s.split('')[12]\n  # print s.split('')[13]\n  # print s.split('')[14]\n  # print s.split('')[15]\n  # print s.split('')[16]\n  # print s.split('')[17]\n  # print s.split('')[18]\n  # print s.split('')[19]\n  # print s.split('')[20]\n  # print s.split('')[21]\n  # print s.split('')[22]\n  # print s.split('')[23]\n  # print s.split('')[24]\n  # print s.split('')[25]\n  # print s.split('')[26]\n  # print s.split('')[27]\n  # print s.split('')[28]\n  # print s.split('')[29]\n  # print s.split('')[30]\n  # print s.split('')[31]\n  # print s.split('')[32]\n  # print s.split('')[33]\n  # print s.split('')[34]\n  # print s.split('')[35]\n  # print s.split('')[36]\n  # print s.split('')[",
    "  # Write your code here\n  #print s,n\n  s = s.to_i(2)\n  #print s\n  for i in 0..n-1\n    s = s^(s>>1)\n  end\n  #print s\n  s = s.to_s(2)\n  #print s\n  count = 0\n  for i in 0..s.length-1\n    if s[i] == \"1\"\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  s = s.split(\"\")\n  s.each_with_index do |e,i|\n    if e == \"1\"\n      s[i] = \"0\"\n    else\n      s[i] = \"1\"\n    end\n  end\n  s = s.join(\"\")\n  s = s.to_i(2)\n  s = s + n\n  s = s.to_s(2)\n  s = s.split(\"\")\n  count = 0\n  s.each do |e|\n    if e == \"1\"\n      count += 1\n    end\n  end\n  return count\nend",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tif s[i] == '1'\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count % 2 == 0\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "  s = s.to_i(2)\n  n.times { s = (s << 1) | (s >> 1) }\n  s.to_s(2).count('1')\nend",
    "  # write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s >> 1\n    s = s | (s & 1) << (s.to_s(2).length - 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  return 0 if s.length == 0\n  return 1 if s.length == 1\n  return 1 if s.length == 2 && s[0] == s[1]\n  return 2 if s.length == 2 && s[0] != s[1]\n  return 0 if n == 0\n  return s.length if n == 1\n  return s.length - 1 if n == 2\n  return s.length - 2 if n == 3\n  return s.length - 3 if n == 4\n  return s.length - 4 if n == 5\n  return s.length - 5 if n == 6\n  return s.length - 6 if n == 7\n  return s.length - 7 if n == 8\n  return s.length - 8 if n == 9\n  return s.length - 9 if n == 10\n  return s.length - 10 if n == 11\n  return s.length - 11 if n == 12\n  return s.length - 12 if n == 13\n  return s.length - 13 if n == 14\n  return s.length - 14 if n == 15\n  return s.length - 15 if n == 16\n  return s.length - 16 if n == 17\n  return s.length - 17 if n == 18\n  return s.length - 18 if n == 19\n  return s.length - 19 if n == 20\n  return s.length - 20 if n == 21\n  return s.length - 21 if n == 22\n  return s.length - 22 if n == 23\n  return s.length - 23 if n == 24\n  return s.length - 24 if n == 25\n  return s.length - 25 if n == 26\n  return s.length - 26 if n == 27\n  return s.length - 27 if n == 28\n  return s.length - 28 if n == 29\n  return s.length - 29 if n == 30\n  return s.length - 30 if n == 31\n  return s.length - 31 if n == 32\n  return s.length - 32 if n == 33\n  return s.length - 33 if n == 34\n  return s.length - 34 if n == 35\n  return s.length - 35 if n == 36\n  return s.length - 36 if n == 37\n ",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2)\n    s = s[1..-1] + s[0]\n    s = s.to_i(2)\n  end\n  s = s.to_s(2)\n  s.count(\"1\")\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> (s.to_s(2).size - 1))\n  end\n  s.to_s(2).count(\"1\")\nend",
    "    # Write your code here\n    count = 0\n    for i in 0..n-1\n        s = s.split('').rotate.join\n        if s.to_i(2).odd?\n            count += 1\n        end\n    end\n    return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  return -1 if s.length > 100\n  return -1 if n < 0\n  return -1 if n > 100\n  return -1 if s.length == 0\n  return -1 if s.length == 1\n  return -1 if s.length == 2\n  return -1 if s.length == 3\n  return -1 if s.length == 4\n  return -1 if s.length == 5\n  return -1 if s.length == 6\n  return -1 if s.length == 7\n  return -1 if s.length == 8\n  return -1 if s.length == 9\n  return -1 if s.length == 10\n  return -1 if s.length == 11\n  return -1 if s.length == 12\n  return -1 if s.length == 13\n  return -1 if s.length == 14\n  return -1 if s.length == 15\n  return -1 if s.length == 16\n  return -1 if s.length == 17\n  return -1 if s.length == 18\n  return -1 if s.length == 19\n  return -1 if s.length == 20\n  return -1 if s.length == 21\n  return -1 if s.length == 22\n  return -1 if s.length == 23\n  return -1 if s.length == 24\n  return -1 if s.length == 25\n  return -1 if s.length == 26\n  return -1 if s.length == 27\n  return -1 if s.length == 28\n  return -1 if s.length == 29\n  return -1 if s.length == 30\n  return -1 if s.length == 31\n  return -1 if s.length == 32\n  return -1 if s.length == 33\n  return -1 if s.length == 34\n  return -1 if s.length == 35\n  return -1 if s.length == 36\n  return -1 if s.length == 37\n  return -1 if s.length == 38\n  return -1 if s.length == 39\n  return -1 if s.length == 40\n  return -1 if s.length == 41\n  return -1 if s.length == 42\n  return",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> (s.to_s(2).length - 1))\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  s = s.split(\"\")\n  n.times do\n    s.unshift(s.pop)\n  end\n  s.count{|x| x == \"1\"}\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s >> 1 | s << 1\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "    count = 0\n    for i in 1..n\n        if i.to_s(2).count('1').odd?\n            count += 1\n        end\n    end\n    return count\nend",
    "  count = 0\n  (0..n).each do |i|\n    count += 1 if s.to_i(2).to_s(10).to_i.odd?\n    s = s[-1] + s[0..-2]\n  end\n  count\nend",
    "  count = 0\n  for i in 0..n-1\n    count += 1 if s[i].to_i.odd?\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tif s[i] == '1'\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count % 2 == 0\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  if count % 2 == 0\n    return 1\n  else\n    return 0\n  end\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  count = 0\n  (0..n).each do |i|\n    count += 1 if s[i].to_i.odd?\n  end\n  count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s >> 1 | s << 1\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  count = 0\n  (0..s.length-1).each do |i|\n    count += 1 if s[i] == '1'\n  end\n  n % 2 == 0 ? count : s.length - count\nend",
    "  return 0 if n == 0\n  return s.count('1') if n == 1\n  return s.count('0') if n == 2\n  return s.count('1') if n % 4 == 3\n  return s.count('0') if n % 4 == 0\n  return s.count('1') if n % 4 == 1\n  return s.count('0') if n % 4 == 2\nend",
    "  # Write your code here\n  return 0\nend",
    "  #\nend",
    "  count = 0\n  s.to_i(2).to_s(2).rjust(n, '0').split('').each do |x|\n    count += 1 if x == '1'\n  end\n  count\nend",
    "\t# Write your code here\n\tcount = 0\n\tfor i in 0..n-1\n\t\ts = s[-1] + s[0..-2]\n\t\tcount += 1 if s.to_i(2).odd?\n\tend\n\tcount\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  count\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == \"1\"\n      count += 1\n    end\n  end\n  return count\nend",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tif s[i] == '1'\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend",
    "    s = s.to_i\n    n = n.to_i\n    a = []\n    while n > 0\n        a.push(s%2)\n        s = s/2\n        n = n-1\n    end\n    a = a.reverse\n    a = a.join\n    a = a.to_i\n    a = a.to_s(2)\n    count = 0\n    for i in 0..a.length-1\n        if a[i] == \"1\"\n            count = count+1\n        end\n    end\n    return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "    s = s.to_i(2)\n    n.times do\n        s = (s >> 1) ^ s\n    end\n    s.to_s(2).count('1')\nend",
    "    count = 0\n    for i in 0..n-1\n        s = s[-1] + s[0..-2]\n        count += 1 if s.to_i(2).odd?\n    end\n    count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2).reverse.to_i(2)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s >> 1 | s << 1\n  end\n  s.to_s(2).count('1')\nend",
    "  #\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2).reverse.to_i(2)\n    s += 1\n  end\n  s.to_s(2).count('1')\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # write your code here\n  return 0\nend",
    "  s = s.to_i\n  n = n.to_i\n  count = 0\n  for i in 1..n\n    if (s & 1) == 1\n      count += 1\n    end\n    s = s >> 1\n  end\n  return count\nend",
    "  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "    # Write your code here\n    s = s.to_i(2)\n    n.times do\n        s = (s >> 1) ^ s\n    end\n    s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2)\n    s = s[1..-1] + s[0]\n    s = s.to_i(2)\n  end\n  s = s.to_s(2)\n  s.count(\"1\")\nend",
    "  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "  # Write your code here\n  s = s.split(\"\")\n  s.map!{|x| x.to_i}\n  n.times do\n    s.unshift(s.pop)\n  end\n  s.count{|x| x == 1}\nend",
    "",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    s = s.split(\"\")\n    s.unshift(s.pop)\n    s = s.join(\"\")\n    if s.to_i(2).odd?\n      count += 1\n    end\n  end\n  return count\nend",
    "\ts = s.to_i(2)\n\tn.times do\n\t\ts = s.to_s(2).reverse.to_i(2)\n\tend\n\ts.to_s(2).count('1')\nend",
    "  # write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1) & 1\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  return 0\nend",
    "  return 0 if n == 0\n  return 1 if n == 1\n  return s.length if n == 2\n  return s.length - 1 if n == 3\n  return s.length + 1 if n == 4\n  return s.length - 2 if n == 5\n  return s.length + 2 if n == 6\n  return s.length - 3 if n == 7\n  return s.length + 3 if n == 8\n  return s.length - 4 if n == 9\n  return s.length + 4 if n == 10\n  return s.length - 5 if n == 11\n  return s.length + 5 if n == 12\n  return s.length - 6 if n == 13\n  return s.length + 6 if n == 14\n  return s.length - 7 if n == 15\n  return s.length + 7 if n == 16\n  return s.length - 8 if n == 17\n  return s.length + 8 if n == 18\n  return s.length - 9 if n == 19\n  return s.length + 9 if n == 20\n  return s.length - 10 if n == 21\n  return s.length + 10 if n == 22\n  return s.length - 11 if n == 23\n  return s.length + 11 if n == 24\n  return s.length - 12 if n == 25\n  return s.length + 12 if n == 26\n  return s.length - 13 if n == 27\n  return s.length + 13 if n == 28\n  return s.length - 14 if n == 29\n  return s.length + 14 if n == 30\n  return s.length - 15 if n == 31\n  return s.length + 15 if n == 32\n  return s.length - 16 if n == 33\n  return s.length + 16 if n == 34\n  return s.length - 17 if n == 35\n  return s.length + 17 if n == 36\n  return s.length - 18 if n == 37\n  return s.length + 18 if n == 38\n  return s.length - 19 if n == 39\n  return s.length + 19 if n == 40\n  return s.length - 20 if n == 41\n  return s.length + 20 if n == 42\n  return s.length",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tcount += 1 if s[i] == \"1\"\n\tend\n\treturn count\nend",
    " \n    # convert string to integer\n    num = s.to_i(2)\n \n    # rotate the number n times\n    n.times do\n        num = (num << 1) | (num >> (s.length - 1))\n    end\n \n    # convert rotated number to binary string\n    bin = num.to_s(2)\n \n    # count the number of 1's in the binary string\n    bin.count('1')\nend\n ",
    "  # Write your code here\n  return 0\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  count = 0\n  (0..s.length-1).each do |i|\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  if count % 2 == 0\n    return n\n  else\n    return n-1\n  end\nend",
    "  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == \"1\"\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\ts = s.to_i(2)\n\tn.times do\n\t\ts = (s >> 1) ^ s\n\tend\n\ts.to_s(2).count('1')\nend",
    "    s = s.to_i\n    n = n.to_i\n    count = 0\n    while n > 0\n        if s % 2 == 1\n            count += 1\n        end\n        s = s / 2\n        n -= 1\n    end\n    return count\nend\nputs odd_Equivalent('1011', 2)\nputs odd_Equivalent('1011', 3)\nputs odd_Equivalent('1011', 4)\nputs odd_Equivalent('1011', 5)",
    "  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> (s.to_s(2).length - 1))\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2).reverse.to_i(2)\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  if s.length == 1\n    if s.to_i == 1\n      return n\n    else\n      return 0\n    end\n  end\n  if n == 0\n    return 0\n  end\n  if s.length == 2\n    if s.to_i == 11\n      return n\n    elsif s.to_i == 10\n      return 0\n    else\n      return n\n    end\n  end\n  if s.length == 3\n    if s.to_i == 111\n      return n\n    elsif s.to_i == 110\n      return n\n    elsif s.to_i == 101\n      return n\n    elsif s.to_i == 100\n      return 0\n    else\n      return n\n    end\n  end\n  if s.length == 4\n    if s.to_i == 1111\n      return n\n    elsif s.to_i == 1110\n      return n\n    elsif s.to_i == 1101\n      return n\n    elsif s.to_i == 1100\n      return 0\n    elsif s.to_i == 1011\n      return n\n    elsif s.to_i == 1010\n      return 0\n    elsif s.to_i == 1001\n      return n\n    elsif s.to_i == 1000\n      return 0\n    else\n      return n\n    end\n  end\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1) & 1\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> (s.to_s(2).length - 1))\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  return 0\nend",
    "  # Write your code here\n  return 0\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == \"1\"\n            count += 1\n        end\n    end\n    return count\nend",
    "  # write your code here\n  return 0\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n\n    count += 1 if s.to_i(2).to_s(10).to_i.odd?\n  end\n  return count\nend",
    "  n.times do\n    s = s[-1] + s[0..-2]\n    s = s.to_i(2)\n    s = s.to_s(2)\n  end\n  s.count(\"1\")\nend",
    "  # write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i].to_i.odd?\n  end\n  count\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    return count\nend",
    "    count = 0\n    for i in 0..n-1\n        count += 1 if s[i] == '1'\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # write your code here\n  count = 0\n  for i in 0..s.length-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  if count % 2 == 0\n    return count\n  else\n    return count - 1\n  end\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tcount += 1 if s[i] == '1'\n\tend\n\tcount\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> (s.to_s(2).length - 1))\n  end\n  s.to_s(2).count('1')\nend",
    "    # Write your code here\n    count = 0\n    for i in 0..n-1\n        s = s[-1] + s[0..-2]\n        count += 1 if s.to_i(2).odd?\n    end\n    count\nend",
    "    count = 0\n    for i in 0..n-1\n        s = s[-1] + s[0..-2]\n        if s.to_i(2).odd?\n            count += 1\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # write your code here\n  return 0\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\ts = s.to_i\n\tn = n.to_i\n\tcount = 0\n\tfor i in 1..n\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts =",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s >> 1\n    s = s | (s & 1) << (s.to_s(2).length - 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "  # write your code here\n  s.to_i(2).to_s(2).rjust(n, '0').split('').count { |x| x == '1' }\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> (s.to_s(2).length - 1))\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2)\n    s = s[1..-1] + s[0]\n    s = s.to_i(2)\n  end\n  s = s.to_s(2)\n  s.count(\"1\")\nend",
    "    count = 0\n    for i in 0..s.length-1\n        if s[i] == '1'\n            count += 1\n        end\n    end\n    if count % 2 == 0\n        return n\n    else\n        return n-1\n    end\nend",
    "    count = 0\n    for i in 0..n-1\n        if s[i] == \"1\"\n            count += 1\n        end\n    end\n    return count\nend",
    "  count = 0\n  for i in 0..n\n    if i.to_s(2).count(\"1\").odd?\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2).reverse.to_i(2)\n    s = s + 1\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s >> 1 | s << 1\n  end\n  s.to_s(2).count('1')\nend",
    "\t# Write your code here\n\ts = s.to_i\n\tn = n.to_i\n\tcount = 0\n\t(1..n).each do |i|\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.to_i(2)\n\t\ts = s.to_s(2)\n\t\ts = s.reverse\n\t\ts = s.",
    "  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2).reverse.to_i(2)\n  end\n  s.to_s(2).count('1')\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  s = s.to_i(2)\n  n.times do\n    s = s >> 1\n    s = s | (s & 1) << (s.to_s(2).length - 1)\n  end\n  s.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  s = s.split(\"\")\n  n.times do\n    s.unshift(s.pop)\n  end\n  s.map{|x| x.to_i}.count{|x| x.odd?}\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == \"1\"\n      count += 1\n    end\n  end\n  return count\nend",
    "\tcount = 0\n\tfor i in 0..n-1\n\t\tif s[i] == \"1\"\n\t\t\tcount += 1\n\t\tend\n\tend\n\treturn count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i\n  n = n.to_i\n  count = 0\n  for i in 1..n\n    if s.to_s(2).reverse.to_i(2) % 2 == 1\n      count += 1\n    end\n    s = s.to_s(2).reverse.to_i(2)\n  end\n  return count\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s >> 1) ^ s\n  end\n  s.to_s(2).count('1')\nend",
    "  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  return count\nend",
    "  # Write your code here\n  return 0\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    if s[i] == '1'\n      count += 1\n    end\n  end\n  if count % 2 == 0\n    return 1\n  else\n    return 0\n  end\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    count += 1 if s[i] == '1'\n  end\n  return count\nend",
    "  # write your code here\n  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "\t# Write your code here\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i(2)\n\ts = s.to_s(2)\n\ts = s.reverse\n\ts = s.to_i",
    "  s = s.to_i(2)\n  n.times do\n    s = s.to_s(2).reverse.to_i(2)\n    s = s.to_s(2).reverse.to_i(2)\n  end\n  s.to_s(2).count('1')\nend",
    "  s = s.to_i(2)\n  n.times do\n    s = (s << 1) | (s >> 1)\n  end\n  s.to_s(2).count('1')\nend",
    "\ts = s.to_i(2)\n\tn.times do\n\t\ts = (s << 1) | (s >> 1)\n\tend\n\ts.to_s(2).count(\"1\")\nend",
    "  # Write your code here\n  count = 0\n  for i in 0..n-1\n    s = s[-1] + s[0..-2]\n    count += 1 if s.to_i(2).odd?\n  end\n  count\nend",
    "  # Write your code here\n  return 0\nend",
    "    count = 0\n    for i in 0..n-1\n        s = s[-1] + s[0..-2]\n        count += 1 if s.to_i(2).odd?\n    end\n    count\nend",
    "  # Write your code here\n  s = s.split(\"\")\n  for i in 1..n\n    s.unshift(s.pop)\n  end\n  s.join(\"\").to_i(2).to_s(10).to_i.odd? ? 1 : 0\nend",
    "  # Write your code here\n  s = s.split(\"\")\n  for i in 0..n-1\n    s.unshift(s.pop)\n  end\n  count = 0\n  for i in 0..s.length-1\n    if s[i] == \"1\"\n      count += 1\n    end\n  end\n  return count\nend"
  ]
}