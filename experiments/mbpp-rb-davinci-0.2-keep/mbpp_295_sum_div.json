{
  "name": "mbpp_295_sum_div",
  "language": "rb",
  "prompt": "# Write a function to return the sum of all divisors of a number.\ndef sum_div(number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_div\n    candidate = method(:sum_div)\n    assert_equal(7, candidate.call(8))\n    assert_equal(16, candidate.call(12))\n    assert_equal(1, candidate.call(7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    if number % num == 0\n      divisors << num\n    end\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |n| number % n == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |n|\n    divisors << n if number % n == 0\n  end\n  divisors.sum\nend",
    "  sum = 0\n  (1..number).each do |div|\n    sum += div if number % div == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |n|\n    sum += n if number % n == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    if number % num == 0\n      divisors << num\n    end\n  end\n  divisors.inject(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |n| number % n == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |x|\n    divisors << x if number % x == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  # Your code here\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  # Your code here\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |divisor|\n    divisors << divisor if number % divisor == 0\n  end\n  divisors.inject(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |n| number % n == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |n|\n    divisors << n if number % n == 0\n  end\n  divisors.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |i|\n    divisors << i if number % i == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |divisor|\n    sum += divisor if number % divisor == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    if number % num == 0\n      divisors << num\n    end\n  end\n  divisors.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  for i in 1..number\n    if number % i == 0\n      sum += i\n    end\n  end\n  return sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |n|\n    sum += n if number % n == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |n|\n    divisors << n if number % n == 0\n  end\n  divisors.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |i|\n    sum += i if number % i == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |div|\n    sum += div if number % div == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |div|\n    if number % div == 0\n      sum += div\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each { |num| sum += num if number % num == 0 }\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |i|\n    if number % i == 0\n      divisors << i\n    end\n  end\n  divisors.inject(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |x|\n    if number % x == 0\n      sum += x\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  (1..number).select { |n| number % n == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |divisor|\n    divisors << divisor if number % divisor == 0\n  end\n  divisors.inject(:+)\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  (1..number).select { |num| number % num == 0 }.reduce(:+)\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend",
    "\tsum = 0\n\t(1..number).each do |num|\n\t\tsum += num if number % num == 0\n\tend\n\tsum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n  sum\nend",
    "  sum = 0\n  (1..number).each do |num|\n    if number % num == 0\n      sum += num\n    end\n  end\n  sum\nend",
    "  divisors = []\n  (1..number).each do |num|\n    divisors << num if number % num == 0\n  end\n  divisors.inject(:+)\nend"
  ]
}