{
  "name": "mbpp_282_sub_list",
  "language": "rb",
  "prompt": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "Loaded suite /tmp/tmp2fgw827_\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp2fgw827_.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006982384 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.22 tests/s, 143.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmrduh1y6\nStarted\n.\nFinished in 0.000387365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2581.54 tests/s, 7744.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: return a new list which contains the subtraction of the elements of nums1 and nums2\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy3e15_7g\nStarted\n.\nFinished in 0.000356649 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2803.88 tests/s, 8411.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmrduh1y6\nStarted\n.\nFinished in 0.000387365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2581.54 tests/s, 7744.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps6aok2v4\nStarted\n.\nFinished in 0.000578414 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1728.87 tests/s, 5186.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmp3ahviav7\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp3ahviav7.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009227477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.37 tests/s, 108.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphvzykt6m\nStarted\n.\nFinished in 0.000959077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1042.67 tests/s, 3128.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "Loaded suite /tmp/tmp2fgw827_\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp2fgw827_.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006982384 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.22 tests/s, 143.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n    result = []\n    nums1.each_with_index do |num, i|\n        result << num - nums2[i]\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp762l8p89\nStarted\n.\nFinished in 0.000454756 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2198.98 tests/s, 6596.94 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphvzykt6m\nStarted\n.\nFinished in 0.000959077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1042.67 tests/s, 3128.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd8syzqvs\nStarted\n.\nFinished in 0.000776064 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1288.55 tests/s, 3865.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0wug8xup\nStarted\n.\nFinished in 0.000456688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2189.68 tests/s, 6569.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphvzykt6m\nStarted\n.\nFinished in 0.000959077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1042.67 tests/s, 3128.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_kw74ekw\nStarted\n.\nFinished in 0.000868118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1151.92 tests/s, 3455.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmp3ahviav7\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp3ahviav7.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009227477 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.37 tests/s, 108.37 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement this method\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpae726kzc\nStarted\n.\nFinished in 0.000858009 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1165.49 tests/s, 3496.47 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnnky1ww6\nStarted\n.\nFinished in 0.000786068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1272.15 tests/s, 3816.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpa8kas9yv\nStarted\n.\nFinished in 0.000793906 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1259.59 tests/s, 3778.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |n1, n2| n1 - n2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp121gxs5c\nStarted\n.\nFinished in 0.000531339 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1882.04 tests/s, 5646.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnnky1ww6\nStarted\n.\nFinished in 0.000786068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1272.15 tests/s, 3816.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me!\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpu8tad7ho\nStarted\n.\nFinished in 0.000827013 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1209.17 tests/s, 3627.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmp0fy14tjr\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp0fy14tjr.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00758954 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n131.76 tests/s, 131.76 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here.\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmp7iim4mjk\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp7iim4mjk.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006853466 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.91 tests/s, 145.91 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7dv731q\nStarted\n.\nFinished in 0.000809996 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1234.57 tests/s, 3703.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # your code here\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7pc1byk\nStarted\n.\nFinished in 0.00053309 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1875.86 tests/s, 5627.57 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "Loaded suite /tmp/tmp2fgw827_\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp2fgw827_.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006982384 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.22 tests/s, 143.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnnky1ww6\nStarted\n.\nFinished in 0.000786068 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1272.15 tests/s, 3816.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpd8syzqvs\nStarted\n.\nFinished in 0.000776064 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1288.55 tests/s, 3865.66 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmrduh1y6\nStarted\n.\nFinished in 0.000387365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2581.54 tests/s, 7744.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_kw74ekw\nStarted\n.\nFinished in 0.000868118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1151.92 tests/s, 3455.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Write your code here\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpmrduh1y6\nStarted\n.\nFinished in 0.000387365 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2581.54 tests/s, 7744.63 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpxo4wskr5\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpxo4wskr5.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007502024 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.30 tests/s, 133.30 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpo_37zmor\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpo_37zmor.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.011535039 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n86.69 tests/s, 86.69 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphvzykt6m\nStarted\n.\nFinished in 0.000959077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1042.67 tests/s, 3128.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement this method\n  nums1.zip(nums2).map {|x, y| x - y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxvudbyc7\nStarted\n.\nFinished in 0.000528615 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1891.74 tests/s, 5675.21 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_kw74ekw\nStarted\n.\nFinished in 0.000868118 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1151.92 tests/s, 3455.75 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  result = []\n  nums1.each_with_index do |num, i|\n    result << num - nums2[i]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphvzykt6m\nStarted\n.\nFinished in 0.000959077 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1042.67 tests/s, 3128.01 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpufzx0h0m\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpufzx0h0m.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00859385 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n116.36 tests/s, 116.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement\n  result = []\n  nums1.each_with_index do |num, index|\n    result << num - nums2[index]\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmplkfxi7il\nStarted\n.\nFinished in 0.000716591 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1395.50 tests/s, 4186.49 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "Loaded suite /tmp/tmpz2jsucqb\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmpz2jsucqb.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007478257 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n133.72 tests/s, 133.72 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |a, b| a - b }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp4bc8a9je\nStarted\n.\nFinished in 0.000338053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2958.12 tests/s, 8874.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.map.with_index { |num, i| num - nums2[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpz7dv731q\nStarted\n.\nFinished in 0.000809996 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1234.57 tests/s, 3703.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO: Implement me!\n  nums1.zip(nums2).map{|x,y| x-y}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1666123402,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfh8jxbhj\nStarted\n.\nFinished in 0.000530237 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1885.95 tests/s, 5657.85 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  nums1.zip(nums2).map { |x, y| x - y }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn_7brl7d\nStarted\n.\nFinished in 0.000365463 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2736.26 tests/s, 8208.77 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to subtract two lists element-wise.\ndef sub_list(nums1, nums2)\n  # TODO\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sub_list\n    candidate = method(:sub_list)\n    assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n    assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n    assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n  end\nend\n",
      "timestamp": 1665510372,
      "stdout": "Loaded suite /tmp/tmp2fgw827_\nStarted\nF\n===============================================================================\nFailure: test_sub_list(TestHumanEval)\n/tmp/tmp2fgw827_.rb:9:in `test_sub_list'\n      6: class TestHumanEval < Test::Unit::TestCase\n      7:   def test_sub_list\n      8:     candidate = method(:sub_list)\n  =>  9:     assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))\n     10:     assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))\n     11:     assert_equal([40, 50], candidate.call([90, 120], [50, 70]))\n     12:   end\n<[-3, -3, -3]> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006982384 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n143.22 tests/s, 143.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}