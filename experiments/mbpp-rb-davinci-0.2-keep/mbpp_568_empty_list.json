{
  "name": "mbpp_568_empty_list",
  "language": "rb",
  "prompt": "# Write a function to create a list of N empty dictionaries.\ndef empty_list(length)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_empty_list\n    candidate = method(:empty_list)\n    assert_equal([{}, {}, {}, {}, {}], candidate.call(5))\n    assert_equal([{}, {}, {}, {}, {}, {}], candidate.call(6))\n    assert_equal([{}, {}, {}, {}, {}, {}, {}], candidate.call(7))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend",
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend",
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  empty_list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  empty_list\nend",
    "  empty_list = []\n  length.times do\n    empty_list.push({})\n  end\n  return empty_list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  empty_list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  empty_list\nend",
    "  Array.new(length) { Hash.new }\nend",
    "  Array.new(length) { Hash.new }\nend",
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend",
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  empty_list\nend",
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  return empty_list\nend",
    "  empty_list = []\n  length.times do\n    empty_list << {}\n  end\n  empty_list\nend",
    "  Array.new(length) { Hash.new }\nend",
    "  Array.new(length) { Hash.new }\nend",
    "  Array.new(length, {})\nend",
    "  list = []\n  length.times do\n    list << {}\n  end\n  list\nend"
  ]
}