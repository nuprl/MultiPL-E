{
  "name": "mbpp_413_extract_nth_element",
  "language": "rb",
  "prompt": "# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_extract_nth_element\n    candidate = method(:extract_nth_element)\n    assert_equal([\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0))\n    assert_equal([99, 96, 94, 98], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2))\n    assert_equal([98, 97, 91, 94], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |e| e[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |e| e[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map{|x| x[n]}\nend",
    "  list1.map { |e| e[n] }\nend",
    "  list1.map { |e| e[n] }\nend",
    "  list1.map {|x| x[n]}\nend",
    "  list1.map { |i| i[n] }\nend",
    "  list1.map { |e| e[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |x| x[n] }\nend",
    "  list1.map { |e| e[n] }\nend"
  ]
}