{
  "name": "mbpp_65_recursive_list_sum",
  "language": "rb",
  "prompt": "# Write a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_recursive_list_sum\n    candidate = method(:recursive_list_sum)\n    assert_equal(21, candidate.call([1, 2, [3, 4], [5, 6]]))\n    assert_equal(106, candidate.call([7, 10, [15, 14], [19, 41]]))\n    assert_equal(210, candidate.call([10, 20, [30, 40], [50, 60]]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  # Your code here\nend",
    "  return 0 if data_list.empty?\n  return data_list.first if data_list.size == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  return data_list.first if data_list.size == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  if data_list.length == 1\n    data_list[0]\n  else\n    data_list[0] + recursive_list_sum(data_list[1..-1])\n  end\nend",
    "  if data_list.length == 1\n    return data_list[0]\n  else\n    return data_list[0] + recursive_list_sum(data_list[1..-1])\n  end\nend",
    "  return 0 if data_list.empty?\n  return data_list.first if data_list.size == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  return data_list.first if data_list.size == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  if data_list.empty?\n    return 0\n  end",
    "  return data_list.first if data_list.length == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  if data_list.length == 1\n    return data_list[0]\n  else\n    return data_list[0] + recursive_list_sum(data_list[1..-1])\n  end\nend",
    "  if data_list.empty?\n    return 0\n  else\n    data_list.first + recursive_list_sum(data_list.drop(1))\n  end\nend",
    "  return 0 if data_list.empty?\n  if data_list.first.is_a?(Array)\n    recursive_list_sum(data_list.first) + recursive_list_sum(data_list[1..-1])\n  else\n    data_list.first + recursive_list_sum(data_list[1..-1])\n  end\nend",
    "  if data_list.empty?\n    return 0\n  elsif data_list.first.is_a?(Array)\n    return recursive_list_sum(data_list.first) + recursive_list_sum(data_list[1..-1])\n  else\n    return data_list.first + recursive_list_sum(data_list[1..-1])\n  end\nend",
    "  return 0 if data_list.empty?\n  return data_list.first if data_list.length == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  return 0 if data_list.empty?\n  return data_list.first if data_list.size == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  return 0 if data_list.empty?\n  return data_list.first if data_list.size == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend",
    "  return 0 if data_list.empty?\n  data_list.flatten.reduce(:+)\nend",
    "  if data_list.length == 1\n    data_list[0]\n  else\n    data_list[0] + recursive_list_sum(data_list[1..-1])\n  end\nend",
    "  return 0 if data_list.empty?\n  data_list.flatten.reduce(:+)\nend",
    "  return data_list.first if data_list.length == 1\n  data_list.first + recursive_list_sum(data_list[1..-1])\nend"
  ]
}