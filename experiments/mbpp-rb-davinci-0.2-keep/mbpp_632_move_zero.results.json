{
  "name": "mbpp_632_move_zero",
  "language": "rb",
  "prompt": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    num_list.delete(0)\n    num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpx2oeoxa7\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpx2oeoxa7.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009050875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.49 tests/s, 110.49 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n\tcount = 0\n\tnum_list.each do |num|\n\t\tif num != 0\n\t\t\tnum_list[count] = num\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < num_list.length\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1zw6t6q5\nStarted\n.\nFinished in 0.000405044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2468.87 tests/s, 7406.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwcnrezz6\nStarted\n.\nFinished in 0.000448661 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2228.85 tests/s, 6686.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    #Remove zeroes from the list\n    num_list.delete(0)\n    #Add zeroes to the end of the list\n    num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpa_3qbq1x\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpa_3qbq1x.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00907944 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.14 tests/s, 110.14 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpst0k4na8\nStarted\n.\nFinished in 0.000447085 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2236.71 tests/s, 6710.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n      num_list.delete(num)\n    end\n  end\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpkplm_5mo\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpkplm_5mo.rb:16:in `test_move_zero'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_move_zero\n     15:     candidate = method(:move_zero)\n  => 16:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     17:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     18:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     19:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009010789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.98 tests/s, 110.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n\t# Write your logic here\n\tcount = 0\n\tfor i in 0..num_list.length-1\n\t\tif num_list[i] != 0\n\t\t\tnum_list[count] = num_list[i]\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < num_list.length\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7p1bhfyl\nStarted\n.\nFinished in 0.000809637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1235.12 tests/s, 3705.36 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # start writing your code here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpzqyem6yu\nStarted\n.\nFinished in 0.000686419 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1456.84 tests/s, 4370.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95nh39va\nStarted\n.\nFinished in 0.000396153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2524.28 tests/s, 7572.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |i|\n    if i != 0\n      num_list[count] = i\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfzzbf3z0\nStarted\n.\nFinished in 0.000410607 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2435.42 tests/s, 7306.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  for i in 0...num_list.length\n    if num_list[i] == 0\n      zero_count += 1\n    end\n  end\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[i - zero_count] = num_list[i]\n    end\n  end\n  for i in (num_list.length - zero_count)...num_list.length\n    num_list[i] = 0\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp566oy2po\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp566oy2po.rb:24:in `test_move_zero'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_move_zero\n     23:     candidate = method(:move_zero)\n  => 24:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     25:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     26:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     27:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[2, 0, 1, 4, 0, 0]>\n\ndiff:\n? [2, 0, 1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009829242 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.74 tests/s, 101.74 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each_with_index do |num, index|\n    if num == 0\n      zero_count += 1\n      num_list.delete_at(index)\n    end\n  end\n  zero_count.times { num_list.push(0) }\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp6kl6_w3p\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp6kl6_w3p.rb:18:in `test_move_zero'\n     15:   def test_move_zero\n     16:     candidate = method(:move_zero)\n     17:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 18:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     19:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     20:   end\n     21: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.012494794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n80.03 tests/s, 160.07 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            zero_list.push(i)\n        else\n            non_zero_list.push(i)\n        end\n    end\n    non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpuntpd8an\nStarted\n.\nFinished in 0.00046913 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2131.61 tests/s, 6394.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  for i in num_list\n    if i == 0\n      zero_list.push(i)\n    else\n      non_zero_list.push(i)\n    end\n  end\n  return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmphxb4xs33\nStarted\n.\nFinished in 0.000467125 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2140.75 tests/s, 6422.26 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo1uq437u\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 3227.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    zero_list = []\n    non_zero_list = []\n    num_list.each do |num|\n        if num == 0\n            zero_list.push(num)\n        else\n            non_zero_list.push(num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpagnhakt5\nStarted\n.\nFinished in 0.000420497 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2378.14 tests/s, 7134.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpx4yg8t8u\nStarted\n.\nFinished in 0.000484659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2063.31 tests/s, 6189.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # remove all zeros from the list\n  num_list.delete(0)\n  # add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpjyxzz2ne\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpjyxzz2ne.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.020136908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n49.66 tests/s, 49.66 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95nh39va\nStarted\n.\nFinished in 0.000396153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2524.28 tests/s, 7572.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_jnhk33q\nStarted\n.\nFinished in 0.000473634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2111.33 tests/s, 6334.00 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1vpg1pyh\nStarted\n.\nFinished in 0.000471849 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2119.32 tests/s, 6357.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.push(zero_list)\n  num_list.flatten!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq8vq64kn\nStarted\n.\nFinished in 0.000513527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1947.32 tests/s, 5841.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    #start writing your code here\n    count = 0\n    num_list.each do |i|\n        if i != 0\n            num_list[count] = i\n            count += 1\n        end\n    end\n    while count < num_list.length\n        num_list[count] = 0\n        count += 1\n    end\n    return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpbvrstrqo\nStarted\n.\nFinished in 0.00043194 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2315.14 tests/s, 6945.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdwcz1zkj\nStarted\n.\nFinished in 0.000414665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2411.59 tests/s, 7234.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95nh39va\nStarted\n.\nFinished in 0.000396153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2524.28 tests/s, 7572.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpma2r320n\nStarted\n.\nFinished in 0.000639304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1564.20 tests/s, 4692.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwcnrezz6\nStarted\n.\nFinished in 0.000448661 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2228.85 tests/s, 6686.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove all zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmphu9q6_vy\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmphu9q6_vy.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010263835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.43 tests/s, 97.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.push(zero_list)\n  non_zero_list.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnjsb12an\nStarted\n.\nFinished in 0.000463604 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2157.01 tests/s, 6471.04 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp98zp76w3\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp98zp76w3.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010465101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.56 tests/s, 95.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove all zeros from the list\n  num_list.delete(0)\n  # Append zeros to the end of the list\n  num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmptgal0f1s\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmptgal0f1s.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010237853 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.68 tests/s, 97.68 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp98zp76w3\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp98zp76w3.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010465101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.56 tests/s, 95.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      num_list.push(0)\n    end\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp56yo7i6k\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp56yo7i6k.rb:16:in `test_move_zero'\n     13:   def test_move_zero\n     14:     candidate = method(:move_zero)\n     15:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 16:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     17:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     18:   end\n     19: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.014469059 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.11 tests/s, 138.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.push(zero_list)\n  num_list.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmps45cxvw8\nStarted\n.\nFinished in 0.000476781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.40 tests/s, 6292.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    # Remove zeros from the list\n    num_list.delete(0)\n    # Add zeros to the end of the list\n    num_list.fill(0, num_list.length...num_list.length + num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmps5_lkjw2\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmps5_lkjw2.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010409928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.06 tests/s, 96.06 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  #start writing your code here\n  count = 0\n  num_list.each do |i|\n    if i != 0\n      num_list[count] = i\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvolod6ba\nStarted\n.\nFinished in 0.000481371 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2077.40 tests/s, 6232.20 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2kwkqk9g\nStarted\n.\nFinished in 0.000430606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.31 tests/s, 6966.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num == 0\n      count += 1\n    end\n  end\n  num_list.delete(0)\n  count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp6m9b52i5\nStarted\n.\nFinished in 0.000503051 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1987.87 tests/s, 5963.61 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95nh39va\nStarted\n.\nFinished in 0.000396153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2524.28 tests/s, 7572.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    #Remove zeros from the list\n    num_list.delete(0)\n    #Add zeros to the end of the list\n    num_list.fill(0, num_list.length...num_list.length+2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpdkm5zpwx\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpdkm5zpwx.rb:13:in `test_move_zero'\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n     12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n     16: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 4, 5, 0, 0]>\n\ndiff:\n? [2, 3, 2, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013398985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.63 tests/s, 149.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    else\n      non_zero_list << num\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7ctn9vdw\nStarted\n.\nFinished in 0.000444641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2249.01 tests/s, 6747.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    else\n      non_zero_list << num\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7ctn9vdw\nStarted\n.\nFinished in 0.000444641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2249.01 tests/s, 6747.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    else\n      non_zero_list << num\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvjmwluyo\nStarted\n.\nFinished in 0.000535415 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1867.71 tests/s, 5603.13 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwcnrezz6\nStarted\n.\nFinished in 0.000448661 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2228.85 tests/s, 6686.56 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2kwkqk9g\nStarted\n.\nFinished in 0.000430606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.31 tests/s, 6966.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo1uq437u\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 3227.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # num_list.delete(0)\n  # num_list.push(0)\n  # num_list\n  num_list.reject! { |num| num == 0 }\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpspko7lk5\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpspko7lk5.rb:13:in `test_move_zero'\n     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_move_zero\n     12:     candidate = method(:move_zero)\n  => 13:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     14:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     15:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     16:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.014004137 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n71.41 tests/s, 71.41 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo1uq437u\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 3227.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zeros = 0\n  num_list.each do |num|\n    if num == 0\n      zeros += 1\n    end\n  end\n  num_list.delete(0)\n  zeros.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpsnisias7\nStarted\n.\nFinished in 0.000457629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2185.18 tests/s, 6555.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeroes from the list\n  num_list.delete(0)\n  # Add zeroes to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpjhmda3c2\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpjhmda3c2.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010476157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.45 tests/s, 95.45 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    # Write your logic here\n    count = 0\n    for i in 0..num_list.length-1\n        if num_list[i] != 0\n            num_list[count] = num_list[i]\n            count += 1\n        end\n    end\n    while count < num_list.length\n        num_list[count] = 0\n        count += 1\n    end\n    return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpfngcco5v\nStarted\n.\nFinished in 0.000503528 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1985.99 tests/s, 5957.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpqwjkx9g5\nStarted\n.\nFinished in 0.000472518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.32 tests/s, 6348.96 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpb_zht_du\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpb_zht_du.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010263499 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.43 tests/s, 97.43 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    #Remove zeros\n    num_list.delete(0)\n    #Add zeros\n    num_list.fill(0, num_list.length...num_list.length+2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmplnc182qc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmplnc182qc.rb:13:in `test_move_zero'\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n     12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n     16: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 4, 5, 0, 0]>\n\ndiff:\n? [2, 3, 2, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.011427988 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n87.50 tests/s, 175.01 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmph421yxo3\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmph421yxo3.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009878081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.23 tests/s, 101.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp98zp76w3\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp98zp76w3.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010465101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.56 tests/s, 95.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp98zp76w3\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp98zp76w3.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010465101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n95.56 tests/s, 95.56 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    # Remove zeros from the list\n    num_list.delete(0)\n    # Add zeros to the end of the list\n    num_list.fill(0, num_list.length, num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpockt1jwj\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpockt1jwj.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009984714 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n100.15 tests/s, 100.15 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpma2r320n\nStarted\n.\nFinished in 0.000639304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1564.20 tests/s, 4692.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpae_9_x1x\nStarted\n.\nFinished in 0.000463617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.95 tests/s, 6470.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpma2r320n\nStarted\n.\nFinished in 0.000639304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1564.20 tests/s, 4692.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpma2r320n\nStarted\n.\nFinished in 0.000639304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1564.20 tests/s, 4692.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2kwkqk9g\nStarted\n.\nFinished in 0.000430606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.31 tests/s, 6966.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpdn6qxzdd\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpdn6qxzdd.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010402044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n96.13 tests/s, 96.13 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp95nh39va\nStarted\n.\nFinished in 0.000396153 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2524.28 tests/s, 7572.83 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count=0\n  for i in 0..num_list.length-1\n    if num_list[i]!=0\n      num_list[count]=num_list[i]\n      count+=1\n    end\n  end\n  while count<num_list.length\n    num_list[count]=0\n    count+=1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp28jliqwq\nStarted\n.\nFinished in 0.000481353 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2077.48 tests/s, 6232.43 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpt7_oopob\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpt7_oopob.rb:11:in `test_move_zero'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_move_zero\n     10:     candidate = method(:move_zero)\n  => 11:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     12:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     13:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     14:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.01026719 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n97.40 tests/s, 97.40 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n\tcount = 0\n\tnum_list.each do |num|\n\t\tif num != 0\n\t\t\tnum_list[count] = num\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < num_list.length\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1zw6t6q5\nStarted\n.\nFinished in 0.000405044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2468.87 tests/s, 7406.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list << num\n    else\n      non_zero_list << num\n    end\n  end\n  non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp7ctn9vdw\nStarted\n.\nFinished in 0.000444641 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2249.01 tests/s, 6747.02 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove all zeros from the list\n  num_list.delete(0)\n  # Add them back to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpxkki6l4s\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpxkki6l4s.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009889002 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n101.12 tests/s, 101.12 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpdwcz1zkj\nStarted\n.\nFinished in 0.000414665 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2411.59 tests/s, 7234.76 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo1uq437u\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 3227.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            zero_list.push(i)\n        else\n            non_zero_list.push(i)\n        end\n    end\n    return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp3z4fjyap\nStarted\n.\nFinished in 0.000467892 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2137.25 tests/s, 6411.74 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n\tcount = 0\n\tfor i in 0..num_list.length-1\n\t\tif num_list[i] != 0\n\t\t\tnum_list[count] = num_list[i]\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < num_list.length\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend\nprint move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4])\nprint \"\\n\"\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "[1, 2, 10, 4, 1, 56, 2, 1, 3, 56, 4, 0, 0, 0, 0, 0]\nLoaded suite /tmp/tmpvihrydfi\nStarted\n.\nFinished in 0.000527376 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1896.18 tests/s, 5688.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0...num_list.length\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpo1uq437u\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 3227.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n      num_list.delete(num)\n    end\n  end\n  num_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmpkplm_5mo\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpkplm_5mo.rb:16:in `test_move_zero'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_move_zero\n     15:     candidate = method(:move_zero)\n  => 16:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     17:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     18:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     19:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.009010789 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n110.98 tests/s, 110.98 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  i=0\n  while i<num_list.length\n    if num_list[i]==0\n      num_list.delete_at(i)\n      num_list.push(0)\n    else\n      i+=1\n    end\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123888,
      "stdout": "Loaded suite /tmp/tmpf6_hqt57\nStarted",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    #Remove zeros from the list\n    num_list.delete(0)\n    #Add zeros to the end of the list\n    num_list.fill(0, num_list.length...num_list.length+2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpdkm5zpwx\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpdkm5zpwx.rb:13:in `test_move_zero'\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n     12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n     16: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 4, 5, 0, 0]>\n\ndiff:\n? [2, 3, 2, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.013398985 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n74.63 tests/s, 149.27 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n\tcount = 0\n\tnum_list.each do |num|\n\t\tif num != 0\n\t\t\tnum_list[count] = num\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < num_list.length\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp1zw6t6q5\nStarted\n.\nFinished in 0.000405044 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2468.87 tests/s, 7406.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    zero_list = []\n    non_zero_list = []\n    num_list.each do |num|\n        if num == 0\n            zero_list.push(num)\n        else\n            non_zero_list.push(num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpagnhakt5\nStarted\n.\nFinished in 0.000420497 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2378.14 tests/s, 7134.41 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num == 0\n      count += 1\n    end\n  end\n  num_list.delete(0)\n  count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp53ozn858\nStarted\n.\nFinished in 0.000401269 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2492.09 tests/s, 7476.28 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpts3uakx6\nStarted\n.\nFinished in 0.000399813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2501.17 tests/s, 7503.51 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    count = 0\n    num_list.each do |num|\n        if num != 0\n            num_list[count] = num\n            count += 1\n        end\n    end\n    while count < num_list.length\n        num_list[count] = 0\n        count += 1\n    end\n    return num_list\nend\nnum_list = [0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]\nprint move_zero(num_list)\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "[1, 2, 10, 4, 1, 56, 2, 1, 3, 56, 4, 0, 0, 0, 0, 0]Loaded suite /tmp/tmpcs52pl82\nStarted\n.\nFinished in 0.000384577 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2600.26 tests/s, 7800.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    #Remove zeros\n    num_list.delete(0)\n    #Add zeros\n    num_list.fill(0, num_list.length...num_list.length + num_list.count(0))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmppl62h6ni\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmppl62h6ni.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.008801413 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n113.62 tests/s, 113.62 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove the zeros from the list\n  num_list.delete(0)\n  # Append the zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpbglug4nc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpbglug4nc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.008899639 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.36 tests/s, 112.36 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n    # Write your logic here\n    count = 0\n    num_list.each do |num|\n        if num != 0\n            num_list[count] = num\n            count += 1\n        end\n    end\n    while count < num_list.length\n        num_list[count] = 0\n        count += 1\n    end\n    return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpen_t31ow\nStarted\n.\nFinished in 0.000418187 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2391.27 tests/s, 7173.82 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwepol9n5\nStarted\n.\nFinished in 0.000568736 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1758.29 tests/s, 5274.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.push(zero_list)\n  num_list.flatten!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq8vq64kn\nStarted\n.\nFinished in 0.000513527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1947.32 tests/s, 5841.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp2kwkqk9g\nStarted\n.\nFinished in 0.000430606 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2322.31 tests/s, 6966.93 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      num_list.push(0)\n    end\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp56yo7i6k\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp56yo7i6k.rb:16:in `test_move_zero'\n     13:   def test_move_zero\n     14:     candidate = method(:move_zero)\n     15:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 16:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     17:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     18:   end\n     19: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.014469059 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.11 tests/s, 138.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    end\n  end\n  num_list.delete(0)\n  num_list.push(zero_list)\n  num_list.flatten!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpq8vq64kn\nStarted\n.\nFinished in 0.000513527 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1947.32 tests/s, 5841.95 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8iwmaqtv\nStarted\n.\nFinished in 0.000393454 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2541.59 tests/s, 7624.78 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpyl5x7988\nStarted\n.\nFinished in 0.000475806 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2101.70 tests/s, 6305.09 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # write your code here\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |i|\n    if i == 0\n      zero_list.push(i)\n    else\n      non_zero_list.push(i)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0urjs956\nStarted\n.\nFinished in 0.000361509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2766.18 tests/s, 8298.55 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.each_with_index do |num, index|\n    if num == 0\n      num_list.delete_at(index)\n      num_list.push(0)\n    end\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmp56yo7i6k\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp56yo7i6k.rb:16:in `test_move_zero'\n     13:   def test_move_zero\n     14:     candidate = method(:move_zero)\n     15:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n  => 16:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     17:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     18:   end\n     19: end\n<[2, 3, 2, 4, 5, 0, 0, 0, 0]> expected but was\n<[2, 3, 2, 0, 4, 5, 0, 0, 0]>\n\ndiff:\n? [2, 3, 2, 0, 4, 5, 0, 0, 0, 0]\n===============================================================================\n\nFinished in 0.014469059 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.11 tests/s, 138.23 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjk9hy3nd\nStarted\n.\nFinished in 0.000422246 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2368.29 tests/s, 7104.86 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  num_list.delete(0)\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "Loaded suite /tmp/tmpz2etv8t6\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmpz2etv8t6.rb:10:in `test_move_zero'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_move_zero\n      9:     candidate = method(:move_zero)\n  => 10:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     11:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     12:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     13:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.010708322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.39 tests/s, 93.39 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  zero_count = 0\n  num_list.each do |num|\n    if num == 0\n      zero_count += 1\n    end\n  end\n  num_list.delete(0)\n  zero_count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn71qm89k\nStarted\n.\nFinished in 0.000479709 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2084.60 tests/s, 6253.79 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Remove zeros from the list\n  num_list.delete(0)\n  # Add zeros to the end of the list\n  num_list.push(0)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "Loaded suite /tmp/tmp4czwf6sc\nStarted\nF\n===============================================================================\nFailure: test_move_zero(TestHumanEval)\n/tmp/tmp4czwf6sc.rb:12:in `test_move_zero'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_move_zero\n     11:     candidate = method(:move_zero)\n  => 12:     assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n     13:     assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n     14:     assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n     15:   end\n<[1, 2, 3, 4, 0, 0]> expected but was\n<[1, 2, 3, 4, 0]>\n\ndiff:\n? [1, 2, 3, 4, 0, 0]\n===============================================================================\n\nFinished in 0.00915556 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n109.22 tests/s, 109.22 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  zero_list = []\n  non_zero_list = []\n  num_list.each do |num|\n    if num == 0\n      zero_list.push(num)\n    else\n      non_zero_list.push(num)\n    end\n  end\n  non_zero_list.concat(zero_list)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpma2r320n\nStarted\n.\nFinished in 0.000639304 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1564.20 tests/s, 4692.60 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num != 0\n      num_list[count] = num\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpf3_kvre2\nStarted\n.\nFinished in 0.000409292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2443.24 tests/s, 7329.73 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  for i in 0..num_list.length-1\n    if num_list[i] != 0\n      num_list[count] = num_list[i]\n      count += 1\n    end\n  end\n  while count < num_list.length\n    num_list[count] = 0\n    count += 1\n  end\n  return num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpn8_luaul\nStarted\n.\nFinished in 0.000528899 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1890.72 tests/s, 5672.16 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list)\n  # Write your logic here\n  count = 0\n  num_list.each do |num|\n    if num == 0\n      count += 1\n    end\n  end\n  num_list.delete(0)\n  count.times do\n    num_list.push(0)\n  end\n  num_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_move_zero\n    candidate = method(:move_zero)\n    assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))\n    assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))\n    assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))\n  end\nend\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp0lvhh70n\nStarted\n.\nFinished in 0.000396028 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2525.07 tests/s, 7575.22 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}