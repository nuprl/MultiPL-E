{
  "name": "mbpp_77_is_Diff",
  "language": "rb",
  "prompt": "# Write a python function to find whether a number is divisible by 11.\ndef is_Diff(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_Diff\n    candidate = method(:is_Diff)\n    assert_equal(false, candidate.call(12345))\n    assert_equal(true, candidate.call(1212112))\n    assert_equal(false, candidate.call(1212))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  return n%11==0\nend\nputs is_Diff(11)\nputs is_Diff(12)",
    "  n = n.to_s.split('')\n  sum = 0\n  for i in 0..n.length-1\n    if i%2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum%11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n%11==0\n    return true\n  else\n    return false\n  end\nend",
    "  return n % 11 == 0\nend\nputs is_Diff(121)\nputs is_Diff(123)",
    "  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n.odd?\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n /= 10\n  end\n  return true if (odd_count - even_count).abs % 11 == 0\n  false\nend",
    "  if n%11==0\n    return true\n  else\n    return false\n  end\nend\nputs is_Diff(121)",
    "  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while(n != 0)\n    if(n & 1 == 1)\n      odd_count += 1\n    else\n      even_count += 1\n    end\n    n = n >> 1\n  end\n  return is_Diff(odd_count - even_count)\nend",
    "  return true if n == 0\n  n = n.abs\n  odd_dig, even_dig = 0, 0\n  while n > 0\n    odd_dig += n % 10\n    n /= 10\n    even_dig += n % 10\n    n /= 10\n  end\n  is_Diff(odd_dig - even_dig)\nend",
    "  n = n.to_s\n  if n.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.length-1\n    if i % 2 == 0\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  n = n.to_s\n  sum1 = 0\n  sum2 = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum1 += n[i].to_i\n    else\n      sum2 += n[i].to_i\n    end\n  end\n  return (sum1-sum2).abs%11 == 0\nend\nputs is_Diff(1234)\nputs is_Diff(1233)\nputs is_Diff(12345)\nputs is_Diff(123456)",
    "  n = n.to_s.split('')\n  sum = 0\n  for i in 0..n.length-1\n    if i.even?\n      sum += n[i].to_i\n    else\n      sum -= n[i].to_i\n    end\n  end\n  sum % 11 == 0\nend",
    "  n = n.to_s.split('')\n  n = n.map(&:to_i)\n  sum1 = 0\n  sum2 = 0\n  for i in 0...n.length\n    if i.even?\n      sum1 += n[i]\n    else\n      sum2 += n[i]\n    end\n  end\n  if (sum1 - sum2) % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "    if n % 11 == 0\n        puts \"The number is divisible by 11\"\n    else\n        puts \"The number is not divisible by 11\"\n    end\nend",
    "  n = n.to_s\n  n1 = n[0..n.length/2-1]\n  n2 = n[n.length/2..-1]\n  n1 = n1.split('')\n  n2 = n2.split('')\n  n1 = n1.map(&:to_i)\n  n2 = n2.map(&:to_i)\n  sum1 = n1.inject(0, :+)\n  sum2 = n2.inject(0, :+)\n  if (sum1 - sum2).abs % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n%11==0\n    puts \"The number is divisible by 11\"\n  else\n    puts \"The number is not divisible by 11\"\n  end\nend\nis_Diff(11)",
    "  if n.to_s.length == 1\n    return false\n  end\n  sum = 0\n  for i in 0..n.to_s.length-1\n    if i % 2 == 0\n      sum += n.to_s[i].to_i\n    else\n      sum -= n.to_s[i].to_i\n    end\n  end\n  if sum % 11 == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if n%11==0\n    return true\n  else\n    return false\n  end\nend\nputs is_Diff(55)\nputs is_Diff(66)",
    "  return true if n == 0\n  odd_count = 0\n  even_count = 0\n  while n != 0\n    if n % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n    n = n / 10\n  end\n  return true if (odd_count - even_count) % 11 == 0\n  return false\nend",
    "  sum1 = 0\n  sum2 = 0\n  while n > 0\n    sum1 += n % 10\n    n /= 10\n    sum2 += n % 10\n    n /= 10\n  end\n  return (sum1 - sum2).abs % 11 == 0\nend",
    "  n = n.to_s\n  n1 = n[0..(n.length/2 - 1)]\n  n2 = n[(n.length/2)..-1]\n  n1 = n1.split('').map(&:to_i).sum\n  n2 = n2.split('').map(&:to_i).sum\n  n1 - n2\nend"
  ]
}