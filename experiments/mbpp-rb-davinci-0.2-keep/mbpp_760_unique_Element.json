{
  "name": "mbpp_760_unique_Element",
  "language": "rb",
  "prompt": "# Write a python function to check whether a list of numbers contains only one distinct element or not.\ndef unique_Element(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_Element\n    candidate = method(:unique_Element)\n    assert_equal(true, candidate.call([1, 1, 1]))\n    assert_equal(false, candidate.call([1, 2, 1, 2]))\n    assert_equal(false, candidate.call([1, 2, 3, 4, 5]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.uniq.length == 1\nend",
    "    if arr.length == arr.uniq.length\n        return true\n    else\n        return false\n    end\nend",
    "  arr.uniq.length == 1 ? true : false\nend",
    "  arr.uniq.length == 1\nend",
    "    arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  if arr.length == arr.uniq.length\n    return true\n  else\n    return false\n  end\nend",
    "  if arr.uniq.length == 1\n    return true\n  else\n    return false\n  end\nend",
    "    if arr.length == arr.uniq.length\n        return true\n    else\n        return false\n    end\nend",
    "  arr.uniq.length == 1\nend",
    "    if arr.length == arr.uniq.length\n        return true\n    else\n        return false\n    end\nend",
    "  if arr.length == arr.uniq.length\n    return true\n  else\n    return false\n  end\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend",
    "  arr.uniq.length == 1\nend"
  ]
}