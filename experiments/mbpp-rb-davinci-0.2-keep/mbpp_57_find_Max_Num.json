{
  "name": "mbpp_57_find_Max_Num",
  "language": "rb",
  "prompt": "# Write a python function to find the largest number that can be formed with the given list of digits.\ndef find_Max_Num(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_Max_Num\n    candidate = method(:find_Max_Num)\n    assert_equal(321, candidate.call([1, 2, 3]))\n    assert_equal(6541, candidate.call([4, 5, 6, 1]))\n    assert_equal(9321, candidate.call([1, 2, 3, 9]))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  arr.sort!\n  arr.reverse!\n  arr.join.to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  arr.join.to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  return arr.join(\"\")\nend",
    "  arr.sort!.reverse!\n  arr.join.to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  arr.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  arr.join.to_i\nend",
    "  arr.sort! {|x,y| y <=> x}\n  arr.join('').to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  arr.join(\"\").to_i\nend",
    "  arr.sort.reverse.join('').to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  return arr.join(\"\").to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort.reverse.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  arr.join.to_i\nend",
    "  arr.sort!\n  arr.reverse!\n  arr.join.to_i\nend",
    "  arr.sort! { |a, b| b <=> a }\n  arr.join(\"\").to_i\nend"
  ]
}