{
  "name": "mbpp_227_min_of_three",
  "language": "rb",
  "prompt": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  min = a\n  if b < min\n    min = b\n  end\n  if c < min\n    min = c\n  end\n  return min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvyue0q3n\nStarted\n.\nFinished in 0.000594071 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1683.30 tests/s, 5049.90 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  return a if a < b && a < c\n  return b if b < a && b < c\n  return c if c < a && c < b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpg9yqqadn\nStarted\n.\nFinished in 0.000532957 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1876.32 tests/s, 5628.97 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    puts \"The minimum number is #{a}\"\n  elsif b < a && b < c\n    puts \"The minimum number is #{b}\"\n  else\n    puts \"The minimum number is #{c}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "Loaded suite /tmp/tmpl0tloul7\nStarted\nThe minimum number is 0\nF\n===============================================================================\nFailure: test_min_of_three(TestHumanEval)\n/tmp/tmpl0tloul7.rb:15:in `test_min_of_three'\n     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_min_of_three\n     14:     candidate = method(:min_of_three)\n  => 15:     assert_equal(0, candidate.call(10, 20, 0))\n     16:     assert_equal(15, candidate.call(19, 15, 18))\n     17:     assert_equal(-30, candidate.call(-10, -20, -30))\n     18:   end\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008020903 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.67 tests/s, 124.67 assertions/s\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b and a < c\n    return a\n  elsif b < a and b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpwyb_uzrl\nStarted\n.\nFinished in 0.000565804 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1767.40 tests/s, 5302.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  return a if a < b && a < c\n  return b if b < a && b < c\n  return c\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp_njnn2qm\nStarted\n.\nFinished in 0.000491842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2033.17 tests/s, 6099.52 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  elsif c < a && c < b\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp80gvmq1w\nStarted\n.\nFinished in 0.000491042 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2036.49 tests/s, 6109.46 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a <= b && a <= c\n    a\n  elsif b <= a && b <= c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmp8ckvrru6\nStarted\n.\nFinished in 0.000521095 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1919.04 tests/s, 5757.11 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  min = a\n  if b < min\n    min = b\n  end\n  if c < min\n    min = c\n  end\n  min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpxge5jxrd\nStarted\n.\nFinished in 0.000372699 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2683.13 tests/s, 8049.39 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  min = a\n  min = b if b < min\n  min = c if c < min\n  min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpy19zcr84\nStarted\n.\nFinished in 0.000627652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1593.24 tests/s, 4779.72 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b\n    if a < c\n      return a\n    else\n      return c\n    end\n  else\n    if b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcvx5pmu7\nStarted\n.\nFinished in 0.000362617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2757.73 tests/s, 8273.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpm8nr87r1\nStarted\n.\nFinished in 0.000492914 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2028.75 tests/s, 6086.25 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b\n    if a < c\n      return a\n    else\n      return c\n    end\n  else\n    if b < c\n      return b\n    else\n      return c\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpcvx5pmu7\nStarted\n.\nFinished in 0.000362617 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2757.73 tests/s, 8273.19 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    a\n  elsif b < a && b < c\n    b\n  else\n    c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpvuh18373\nStarted\n.\nFinished in 0.000749032 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1335.06 tests/s, 4005.17 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a <= b && a <= c\n    return a\n  elsif b <= a && b <= c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpviy9vk0l\nStarted\n.\nFinished in 0.000480036 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2083.18 tests/s, 6249.53 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find minimum of three numbers.\ndef min_of_three(a, b, c)\n  if a < b && a < c\n    return a\n  elsif b < a && b < c\n    return b\n  else\n    return c\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_min_of_three\n    candidate = method(:min_of_three)\n    assert_equal(0, candidate.call(10, 20, 0))\n    assert_equal(15, candidate.call(19, 15, 18))\n    assert_equal(-30, candidate.call(-10, -20, -30))\n  end\nend\n",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpup_yuwae\nStarted\n.\nFinished in 0.000620688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1611.12 tests/s, 4833.35 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}