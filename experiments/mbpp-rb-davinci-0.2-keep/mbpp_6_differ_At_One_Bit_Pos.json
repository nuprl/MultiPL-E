{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "rb",
  "prompt": "# Write a python function to check whether the two numbers differ at one bit position only or not.\ndef differ_At_One_Bit_Pos(a, b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_differ_At_One_Bit_Pos\n    candidate = method(:differ_At_One_Bit_Pos)\n    assert_equal(true, candidate.call(13, 9))\n    assert_equal(false, candidate.call(15, 8))\n    assert_equal(false, candidate.call(2, 4))\n    assert_equal(true, candidate.call(2, 3))\n    assert_equal(true, candidate.call(5, 1))\n    assert_equal(true, candidate.call(1, 5))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "  if a < 0 || b < 0\n    return false\n  end\n  if a == b\n    return false\n  end\n  if a > b\n    temp = a\n    a = b\n    b = temp\n  end\n  if b - a == 1\n    return true\n  end\n  return false\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  if a == b\n    return false\n  end\n  c = a ^ b\n  if c & (c - 1) == 0\n    return true\n  end\n  return false\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0...a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) & (a ^ b - 1) == 0\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    if (a ^ b).to_s(2).count('1') == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  return c & (c - 1) == 0\nend",
    "  c = a ^ b\n  return c & (c - 1) == 0\nend",
    "  return (a ^ b) & (a ^ b - 1) == 0\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if ((a ^ b) == 1)\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length > b.to_s(2).length\n    b = b.to_s(2).rjust(a.to_s(2).length, '0').to_i(2)\n  elsif a.to_s(2).length < b.to_s(2).length\n    a = a.to_s(2).rjust(b.to_s(2).length, '0').to_i(2)\n  end\n  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    c = a ^ b\n    c.to_s(2).count(\"1\") == 1\n  else\n    false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  puts \"Enter the two numbers\"\n  a = gets.chomp.to_i\n  b = gets.chomp.to_i\n  c = a ^ b\n  if c == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  if a == b\n    return false\n  end\n  c = a ^ b\n  if c & (c - 1) == 0\n    return true\n  end\n  return false\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  x = a ^ b\n  if x & (x - 1) == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  return c == 0\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    puts \"Yes\"\n  else\n    puts \"No\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length-1\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).chars.sort == b.to_s(2).chars.sort\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c == 0\n    return false\n  else\n    while c > 0\n      if c & 1 == 1\n        return true\n      end\n      c = c >> 1\n    end\n  end\n  return false\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  return (a ^ b) & (a ^ b - 1) == 0\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0...a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  return true if (a ^ b) == 1\n  return false\nend",
    "  c = a ^ b\n  count = 0\n  while c != 0\n    count += 1\n    c = c & (c - 1)\n  end\n  count == 1\nend",
    "    if (a ^ b) == 1\n        return true\n    else\n        return false\n    end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  return c & (c - 1) == 0\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  if a.to_s(2).length > b.to_s(2).length\n    b = b.to_s(2).rjust(a.to_s(2).length, '0')\n  else\n    a = a.to_s(2).rjust(b.to_s(2).length, '0')\n  end\n  count = 0\n  for i in 0..a.length-1\n    if a[i] != b[i]\n      count += 1\n    end\n  end\n  if count == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  return (a ^ b) && ((a ^ b) & ((a ^ b) - 1)) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  if a.to_s(2).reverse.chars.zip(b.to_s(2).reverse.chars).map { |x, y| x != y }.count(true) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  return (a ^ b) == 1\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length-1\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  else\n    puts \"False\"\n  end\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c != 0\n    count += 1\n    c = c & (c - 1)\n  end\n  count == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if a.to_s(2).reverse.chars.zip(b.to_s(2).reverse.chars).map{|x,y| x == y}.count(false) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  return (a ^ b) == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"true\"\n  else\n    puts \"false\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c = c >> 1\n  end\n  count == 1\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  if c & (c - 1) == 0\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  count = 0\n  while a > 0 || b > 0\n    if a % 2 != b % 2\n      count += 1\n    end\n    a = a / 2\n    b = b / 2\n  end\n  if count == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'Yes'\n  else\n    puts 'No'\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  if a == b\n    return false\n  end\n  c = a ^ b\n  if c & (c - 1) == 0\n    return true\n  end\n  return false\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    return (a ^ b).to_s(2).count('1') == 1\n  end\n  return false\nend",
    "  if a.to_s(2).length > b.to_s(2).length\n    b = b.to_s(2).rjust(a.to_s(2).length, '0')\n  else\n    a = a.to_s(2).rjust(b.to_s(2).length, '0')\n  end\n  count = 0\n  for i in 0..a.length\n    if a[i] != b[i]\n      count += 1\n    end\n  end\n  if count == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length > b.to_s(2).length\n    b = b.to_s(2).rjust(a.to_s(2).length, '0')\n  else\n    a = a.to_s(2).rjust(b.to_s(2).length, '0')\n  end\n  count = 0\n  for i in 0..a.length-1\n    if a[i] != b[i]\n      count += 1\n    end\n  end\n  if count == 1\n    return true\n  else\n    return false\n  end\nend",
    "\treturn (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  if (a ^ b).to_s(2).count(\"1\") == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  x = a ^ b\n  if x & (x - 1) == 0\n    puts \"The two numbers differ at one bit position only\"\n  else\n    puts \"The two numbers differ at more than one bit position\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  if a.to_s(2).length > b.to_s(2).length\n    b = b.to_s(2).rjust(a.to_s(2).length, '0')\n  elsif a.to_s(2).length < b.to_s(2).length\n    a = a.to_s(2).rjust(b.to_s(2).length, '0')\n  end\n  count = 0\n  for i in 0..a.length\n    if a[i] != b[i]\n      count += 1\n    end\n  end\n  if count == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  return (a ^ b).to_s(2).count('1') == 1\nend",
    "  return ((a ^ b) & (a ^ b - 1)) == 0\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0...a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  a ^ b == 1\nend",
    "  return (a ^ b) & (a ^ b - 1) == 0\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts 'True'\n  else\n    puts 'False'\n  end\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a ^ b) && !((a ^ b) & ((a ^ b) - 1))\nend",
    "  if (a ^ b) == 1\n    return true\n  else\n    return false\n  end\nend",
    "  return (a^b).to_s(2).count('1') == 1\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  c = c & (c - 1)\n  if c == 0\n    return true\n  else\n    return false\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    return true\n  else\n    return false\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length-1\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      return true\n    else\n      return false\n    end\n  else\n    return false\n  end\nend",
    "  return (a ^ b) == 1\nend",
    "  if a == b\n    puts \"Both the numbers are equal\"\n  else\n    c = a ^ b\n    if c.to_s(2).count(\"1\") == 1\n      puts \"Both the numbers differ at one bit position only\"\n    else\n      puts \"Both the numbers differ at more than one bit position\"\n    end\n  end\nend",
    "  if a.to_s(2).length == b.to_s(2).length\n    count = 0\n    for i in 0..a.to_s(2).length\n      if a.to_s(2)[i] != b.to_s(2)[i]\n        count += 1\n      end\n    end\n    if count == 1\n      puts \"True\"\n    else\n      puts \"False\"\n    end\n  else\n    puts \"False\"\n  end\nend",
    "  if a == b\n    return false\n  end\n  c = a ^ b\n  if c & (c - 1) == 0\n    return true\n  end\n  return false\nend",
    "  if (a ^ b) == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  if c.to_s(2).count('1') == 1\n    puts \"True\"\n  else\n    puts \"False\"\n  end\nend",
    "  c = a ^ b\n  c & (c - 1) == 0\nend",
    "  c = a ^ b\n  count = 0\n  while c > 0\n    count += 1 if c & 1 == 1\n    c >>= 1\n  end\n  count == 1 ? true : false\nend"
  ]
}