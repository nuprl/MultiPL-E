{
  "name": "mbpp_606_radian_degree",
  "language": "rb",
  "prompt": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "verbatim",
  "tests": "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
  "stop_tokens": [
    "\nclass",
    "\ndef",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * (Math::PI / 180)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1666123135,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmprb5qvffh\nStarted\n.\nFinished in 0.000631855 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1582.64 tests/s, 4747.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree.to_f * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpw4xlsrr8\nStarted\n.\nFinished in 0.000532867 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1876.64 tests/s, 5629.92 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  return degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpjqacybg6\nStarted\n.\nFinished in 0.000693583 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1441.79 tests/s, 4325.37 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to convert degrees to radians.\ndef radian_degree(degree)\n  degree * Math::PI / 180\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_radian_degree\n    candidate = method(:radian_degree)\n    assert_equal(1.5707963267948966, candidate.call(90))\n    assert_equal(1.0471975511965976, candidate.call(60))\n    assert_equal(2.0943951023931953, candidate.call(120))\n  end\nend\n",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "Loaded suite /tmp/tmpnhwzfy6f\nStarted\n.\nFinished in 0.00062532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1599.18 tests/s, 4797.54 assertions/s\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}