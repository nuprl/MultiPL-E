name: HumanEval_114_minSubArraySum
language: go_test.go
prompt: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
  // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
  \ int {\n"
tests: "func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
  \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
  \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
  \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
  \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
  \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
  \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n   \
  \  { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     {\
  \ actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
  \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
