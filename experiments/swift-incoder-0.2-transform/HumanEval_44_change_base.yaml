name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\n///\
  \ >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n\
  /// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x:\
  \ Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ["    let baseString = String(base)\n    let baseInt = Int(baseString)\n\
    \    let x = Int(x)\n    let result = Int(x) / baseInt\n    return String(result)",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)\n    let baseFloat = Float(baseString)\n  \
    \  let baseInt = Int(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat\
    \ = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n\
    \    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let\
    \ baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt\
    \ = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat\
    \ = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n\
    \    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let\
    \ baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt\
    \ = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat\
    \ = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n\
    \    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let\
    \ baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt\
    \ = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat", "    let baseNum\
    \ = base\n    let basePower = Int(log10(Double(x)))\n    let basePowerInt = Int(basePower)\n\
    \    let basePowerIntMinusOne = basePowerInt - Int(1)\n    var baseString = \"\
    \"\n    var baseStringInt = 0\n    var baseStringIntMinusOne = 0\n    var baseStringIntMinusOneString\
    \ = \"\"\n    var baseStringIntMinusOneStringInt = 0\n    var baseStringIntMinusOneStringIntMinusOne\
    \ = 0\n    var baseStringIntMinusOneStringIntMinusOneString = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringInt\
    \ = 0\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOne = 0\n \
    \   var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneString = \"\"\n\
    \    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringInt = 0\n\
    \    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOne\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneString\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringInt\
    \ = 0\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOne\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneString\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringInt\
    \ = 0\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneString\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneString\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneString\
    \ = \"\"\n    var baseStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMinusOneStringIntMin",
  "    let bases = String((0..base).map { _ in \"0\"}) + String((0..base).map { _\
    \ in \"1\"}) + String((0..base).map { _ in \"2\"}) + String((0..base).map { _\
    \ in \"3\"}) + String((0..base).map { _ in \"4\"}) + String((0..base).map { _\
    \ in \"5\"}) + String((0..base).map { _ in \"6\"}) + String((0..base).map { _\
    \ in \"7\"}) + String((0..base).map { _ in \"8\"}) + String((0..base).map { _\
    \ in \"9\"})\n    let baseIndex = bases.index(of: base)!\n    return String(x.toInt().prefix(baseIndex))",
  "    let digits = x.toString(base: base)\n    return digits.reversed()", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.firstIndex(of: base)!\n    let result = String(Int(x)\
    \ / Int(base))\n    return String(Int(result) * Int(base))", "    let baseChar\
    \ = String(base)\n    let baseChars = baseChar.characters\n    let baseCharsCount\
    \ = baseChars.count\n    let baseCharsArray = Array(baseChars)\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = baseCharsArray.count\n    let baseCharsArrayCount = baseCharsArray.count\n\
    \    let baseCharsArrayCount = baseCharsArray.count\n    let baseCharsArrayCount\
    \ = base", "    let baseDigits = baseDigits(base)\n    var result = \"\"\n   \
    \ var remainder = x\n    for digit in baseDigits {\n        if remainder < 0 {\n\
    \            result += \"-\"\n            remainder = -remainder\n        }\n\
    \        result += \"0123456789abcdefghijklmnopqrstuvwxyz\"[digit]\n        remainder\
    \ /= base\n    }\n    return result", "    let bases = [\n        \"0\",\n   \
    \     \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n\
    \        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"a\"\
    ,\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"\
    f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n       \
    \ \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n   \
    \     \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n\
    \        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\"\
    ,\n        \"z\",\n    ]\n    let basesReversed = bases.reversed()\n    let basesReversedCount\
    \ = bases.count\n    let basesReversedCountReversed = basesReversed.count\n  \
    \  let basesReversedCountReversedCount = basesReversed.reversed().count\n    let\
    \ basesReversedCountReversedCountReversed = basesReversed.reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCount = basesReversed.reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCountReversed = basesReversed.reversed().reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCountReversedCountReversed = basesReversed.reversed().reversed().reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCountReversedCountReversedCount\
    \ = basesReversed.reversed().reversed().reversed().reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCountReversedCountReversedCountReversed\
    \ = basesReversed.reversed().reversed().reversed().reversed().reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCountReversedCountReversedCountReversedCountReversed\
    \ = basesReversed.reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCountReversedCountReversedCountReversedCountReversed\
    \ = basesReversed.reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed().reversed().count\n\
    \    let basesReversedCountReversedCountReversedCount", "    var result = \"\"\
    \n    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return String(result)", " \
    \   let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"\
    ]\n    let baseIndex = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n\
    \    if result < 10 {\n        return String(result)\n    } else {\n        return\
    \ String(Int(result), bases[baseIndex])\n    }", "    let bases = [\"\", \"K\"\
    , \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let x = x.toInt()\n    let result = x.toInt()\n    let result = result /\
    \ base\n    let result = result * base\n    let result = result + baseIndex\n\
    \    return String(result)", "    let base10 = \"0123456789ABCDEF\"\n    let base16\
    \ = \"0123456789abcdef\"\n    let base32 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvw", "    let baseDigits =\
    \ baseDigits(base)\n    var result = \"\"\n    for digit in baseDigits {\n   \
    \     result += String(x % base)\n        x = x / base\n    }\n    return result",
  "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2\
    \ = digits_base * base\n    let digits_base3 = digits_base2 * base\n    let digits_base4\
    \ = digits_base3 * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6\
    \ = digits_base5 * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8\
    \ = digits_base7 * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10\
    \ = digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let\
    \ digits_base12 = digits_base11 * base\n    let digits_base13 = digits_base12\
    \ * base\n    let digits_base14 = digits_base13 * base\n    let digits_base15\
    \ = digits_base14 * base\n    let digits_base16 = digits_base15 * base\n    let\
    \ digits_base17 = digits_base16 * base\n    let digits_base18 = digits_base17\
    \ * base\n    let digits_base19 = digits_base18 * base\n    let digits_base20\
    \ = digits_base19 * base\n    let digits_base21 = digits_base20 * base\n    let\
    \ digits_base22 = digits_base21 * base\n    let digits_base23 = digits_base22\
    \ * base\n    let digits_base24 = digits_base23 * base\n    let digits_base25\
    \ = digits_base24 * base\n    let digits_base26 = digits_base25 * base\n    let\
    \ digits_base27 = digits_base26 * base\n    let digits_base28 = digits_base27\
    \ * base\n    let digits_base29 = digits_base28 * base\n    let digits_base30\
    \ = digits_base29 * base\n    let digits_base31 = digits_base30 * base\n    let\
    \ digits_base32 = digits_base31 * base\n    let digits_base33 = digits_base32\
    \ * base\n    let digits_base34 = digits_base33 * base\n    let digits_base35\
    \ = digits_base34 * base\n    let digits_base36 = digits_base35 * base\n    let\
    \ digits_base37 = digits_base36 * base\n    let digits_base38 = digits_base37\
    \ * base\n    let digits_base39 = digits_base38 * base\n    let digits_base40\
    \ = digits_base39 * base\n    let digits_base41 = ", "    var result = \"\"\n\
    \    var digits = \"\"\n    var remainder = 0\n    var baseDigits = \"\"\n   \
    \ var baseRemainder = 0\n    var baseDigitCount = 0\n    var baseRemainderCount\
    \ = 0\n    var baseDigitCount2 = 0\n    var baseRemainderCount2 = 0\n    var baseDigitCount3\
    \ = 0\n    var baseRemainderCount3 = 0\n    var baseDigitCount4 = 0\n    var baseRemainderCount4\
    \ = 0\n    var baseDigitCount5 = 0\n    var baseRemainderCount5 = 0\n    var baseDigitCount6\
    \ = 0\n    var baseRemainderCount6 = 0\n    var baseDigitCount7 = 0\n    var baseRemainderCount7\
    \ = 0\n    var baseDigitCount8 = 0\n    var baseRemainderCount8 = 0\n    var baseDigitCount9\
    \ = 0\n    var baseRemainderCount9 = 0\n    var baseDigitCount10 = 0\n    var\
    \ baseRemainderCount10 = 0\n    var baseDigitCount11 = 0\n    var baseRemainderCount11\
    \ = 0\n    var baseDigitCount12 = 0\n    var baseRemainderCount12 = 0\n    var\
    \ baseDigitCount13 = 0\n    var baseRemainderCount13 = 0\n    var baseDigitCount14\
    \ = 0\n    var baseRemainderCount14 = 0\n    var baseDigitCount15 = 0\n    var\
    \ baseRemainderCount15 = 0\n    var baseDigitCount16 = 0\n    var baseRemainderCount16\
    \ = 0\n    var baseDigitCount17 = 0\n    var baseRemainderCount17 = 0\n    var\
    \ baseDigitCount18 = 0\n    var baseRemainderCount18 = 0\n    var baseDigitCount19\
    \ = 0\n    var baseRemainderCount19 = 0\n    var baseDigitCount20 = 0\n    var\
    \ baseRemainderCount20 = 0\n    var baseDigitCount21 = 0\n    var baseRemainderCount21\
    \ = 0\n    var baseDigitCount22 = 0\n    var baseRemainderCount22 = 0\n    var\
    \ baseDigitCount23 = 0\n    var baseRemainderCount23 = 0\n    var baseDigitCount24\
    \ = 0\n    var baseRemainderCount24 = 0\n    var baseDigitCount25 = 0\n    var\
    \ baseRemainderCount25 = 0\n    var baseDigitCount26 = 0\n    var baseRemainderCount26\
    \ = 0\n    var baseDigitCount27 = 0\n    var baseRemainderCount27 = 0\n    var\
    \ baseDigitCount28 = 0\n    var baseRemainderCount28 = 0\n    var baseDigitCount29\
    \ = 0\n    var baseRemainderCount29 = 0\n    var baseDigitCount30 = 0\n    var\
    \ baseRemainderCount30 = 0\n    var baseDigitCount31 = 0\n    var baseRemainderCount31\
    \ = 0\n    var baseDigitCount32 = 0\n    var baseRemainderCount32 = 0\n    var\
    \ baseDigitCount33 = 0\n    var ", "    let baseString = String(base)\n    let\
    \ baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n    let\
    \ baseFloat = Float(baseString)\n\n    var result = \"\"\n    var remainder =\
    \ Int(x)\n    while remainder > 0 {\n        let remainderInt = Int(remainder)\n\
    \        let remainderDouble = Double(remainder)\n        let remainderFloat =\
    \ Float(remainder)\n        let remainderBase = remainderInt.truncatingRemainder(dividingBy:\
    \ baseInt)\n        let remainderBaseDouble = remainderDouble.truncatingRemainder(dividingBy:\
    \ baseDouble)\n        let remainderBaseFloat = remainderFloat.truncatingRemainder(dividingBy:\
    \ baseFloat)\n        let remainderBaseString = String(remainderBase)\n      \
    \  let remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseInt.description\n        let\
    \ remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseDouble.description\n        let\
    \ remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseFloat.description\n        let\
    \ remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseInt.description\n        let\
    \ remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseString.dropLast()\n        let\
    \ remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseDouble.description\n        let\
    \ remainderBaseInt = Int(remainderBaseString)\n        let remainderBaseDouble\
    \ = Double(remainderBaseString)\n        let remainderBaseFloat = Float(remainderBaseString)\n\
    \n        let remainderBaseString = remainderBaseFloat.description\n        let\
    \ remain", "    let baseString = String(base)\n    let baseInt = Int(baseString)\n\
    \    if baseInt < 10 {\n        return String(x)\n    }\n    var result = \"\"\
    \n    var remainder = Int(x)\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / baseInt, remainder % baseInt\n        result += String(remainder)\n\
    \    }\n    return result", "    let digits = x.toInt()\n    let digits_len =\
    \ digits.count\n    let digits_pow = pow(base, digits_len)\n    var digits_pow2\
    \ = digits_pow\n    var digits_pow3 = digits_pow2\n    var digits_pow4 = digits_pow3\n\
    \    var digits_pow5 = digits_pow4\n    var digits_pow6 = digits_pow5\n    var\
    \ digits_pow7 = digits_pow6\n    var digits_pow8 = digits_pow7\n    var digits_pow9\
    \ = digits_pow8\n    var digits_pow10 = digits_pow9\n    var digits_pow11 = digits_pow10\n\
    \    var digits_pow12 = digits_pow11\n    var digits_pow13 = digits_pow12\n  \
    \  var digits_pow14 = digits_pow13\n    var digits_pow15 = digits_pow14\n    var\
    \ digits_pow16 = digits_pow15\n    var digits_pow17 = digits_pow16\n    var digits_pow18\
    \ = digits_pow17\n    var digits_pow19 = digits_pow18\n    var digits_pow20 =\
    \ digits_pow19\n    var digits_pow21 = digits_pow20\n    var digits_pow22 = digits_pow21\n\
    \    var digits_pow23 = digits_pow22\n    var digits_pow24 = digits_pow23\n  \
    \  var digits_pow25 = digits_pow24\n    var digits_pow26 = digits_pow25\n    var\
    \ digits_pow27 = digits_pow26\n    var digits_pow28 = digits_pow27\n    var digits_pow29\
    \ = digits_pow28\n    var digits_pow30 = digits_pow29\n    var digits_pow31 =\
    \ digits_pow30\n    var digits_pow32 = digits_pow31\n    var digits_pow33 = digits_pow32\n\
    \    var digits_pow34 = digits_pow33\n    var digits_pow35 = digits_pow34\n  \
    \  var digits_pow36 = digits_pow35\n    var digits_pow37 = digits_pow36\n    var\
    \ digits_pow38 = digits_pow37\n    var digits_pow39 = digits_pow38\n    var digits_pow40\
    \ = digits_pow39\n    var digits_pow41 = digits_pow40\n    var digits_pow42 =\
    \ digits_pow41\n    var digits_pow43 = digits_pow42\n    var digits_pow44 = digits_pow43\n\
    \    var digits_pow45 = digits_pow44\n    var digits_pow46 = digits_pow45\n  \
    \  var digits_", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = base\n    while quotient > 0 {\n        remainder, remainder = divmod(remainder,\
    \ base)\n        result = String(quotient) + result\n        quotient = quotient\
    \ / base\n    }\n    if remainder > 0 {\n        result = String(remainder) +\
    \ result\n    }\n    return result", "    let bases = [\"\", \"10\", \"100\",\
    \ \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"\
    1000000000\", \"10000000000\", \"100000000000\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let baseStringLength = baseString.count\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseString", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let digits = x.toInt()\n    let result = digits.toString(radix: base, uppercase:\
    \ false)\n    if base < 10 {\n        return String(result) + String(base)\n \
    \   } else {\n        return result\n    }", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n    }\n    return result", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(x)\n    if baseIndex < 0 {\n \
    \       let negativeBaseIndex = bases.count - baseIndex\n        let negativeBase\
    \ = bases[negativeBaseIndex]\n        return result + negativeBase\n    }\n  \
    \  if baseIndex == 0 {\n        return result\n    }\n    let remainder = x %\
    \ base\n    let quotient = x / base\n    return change_base(remainder, baseIndex\
    \ - 1) + bases[baseIndex - 1] + quotient", "    if base < 2 {\n        return\
    \ \"\"\n    }\n    var result = \"\"\n    var remainder = x % base\n    if remainder\
    \ == 0 {\n        return String(format: \"%0\" + String(base) + \"d\", x)\n  \
    \  }\n    var digits = Int(log10(Double(x)) / log10(Double(base)))\n    for _\
    \ in 0..<digits {\n        result += String(format: \"%0\" + String(base) + \"\
    d\", x)\n        x /= base\n    }\n    result += String(format: \"%0\" + String(base)\
    \ + \"d\", x)\n    return result", "    var result = \"\"\n    var remainder =\
    \ x\n    var quotient = base\n    while quotient > 0 {\n        remainder, remainder\
    \ = remainder % quotient, quotient\n        result = String(remainder) + result\n\
    \    }\n    if quotient > 0 {\n        result = String(quotient) + result\n  \
    \  }\n    return result", "    var result = \"\"\n    var remainder = x\n    var\
    \ quotient = base\n    while quotient > 0 {\n        remainder = remainder % quotient\n\
    \        result = String(quotient) + result\n        quotient = quotient / base\n\
    \    }\n    if remainder > 0 {\n        result = String(remainder) + result\n\
    \    }\n    return result", "    let base10 = 10\n    let base16 = 16\n    let\
    \ base26 = 26\n    let base32 = 32\n    let base36 = 36\n    let base42 = 42\n\
    \    let base48 = 48\n    let base56 = 56\n    let base62 = 62\n    let base68\
    \ = 68\n    let base76 = 76\n    let base84 = 84\n    let base92 = 92\n    let\
    \ base100 = 100\n    \n    if base == 0 {\n        return String(x)\n    }\n \
    \   \n    var result = \"\"\n    \n    if base < base10 {\n        let digits\
    \ = String(x).characters.dropLast()\n        let digitCount = digits.count\n \
    \       \n        if digitCount > 0 {\n            let lastDigit = digits.last!\n\
    \            \n            if lastDigit >= base10 {\n                let lastDigitBase\
    \ = lastDigit - base10\n                \n                if lastDigitBase > 0\
    \ {\n                    let lastDigitBaseBase = lastDigitBase / base\n      \
    \              \n                    if lastDigitBaseBase > 0 {\n            \
    \            let lastDigitBaseBaseBase = lastDigitBaseBase / base\n          \
    \              \n                        let lastDigitBaseBaseBaseBase = lastDigitBaseBaseBase\
    \ / base\n                        \n                        let lastDigitBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBase / base\n                        \n             \
    \           let lastDigitBaseBaseBaseBaseBaseBase = lastDigitBaseBaseBaseBaseBase\
    \ / base\n                        \n                        let lastDigitBaseBaseBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBaseBaseBase / base\n                        \n     \
    \                   let lastDigitBaseBaseBaseBaseBaseBaseBase = lastDigitBaseBaseBaseBaseBaseBaseBase\
    \ / base\n                        \n                        let lastDigitBaseBaseBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBaseBaseBaseBaseBase / base\n                       \
    \ \n                        let lastDigitBaseBaseBaseBaseBaseBaseBaseBase = lastDigitBaseBaseBaseBaseBaseBaseBaseBase\
    \ / base\n                        \n                        let lastDigitBaseBaseBaseBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBaseBaseBaseBaseBaseBase / base\n                   \
    \     \n                        let lastDigitBaseBaseBaseBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBaseBaseBaseBaseBaseBase / base\n                   \
    \     \n                        let lastDigitBaseBaseBaseBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBaseBaseBaseBaseBaseBase / base\n                   \
    \     \n                        let lastDigitBaseBaseBaseBaseBaseBaseBaseBaseBase\
    \ = lastDigitBaseBaseBaseBaseBaseBaseBaseBaseBaseBase / base\n               \
    \         \n                        let lastDigitBaseBaseBaseBaseBaseBaseBaseBaseBase",
  "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2\
    \ = digits.toInt()\n    let digits_base3 = digits.toInt()\n    let digits_base4\
    \ = digits.toInt()\n    let digits_base5 = digits.toInt()\n    let digits_base6\
    \ = digits.toInt()\n    let digits_base7 = digits.toInt()\n    let digits_base8\
    \ = digits.toInt()\n    let digits_base9 = digits.toInt()\n    let digits_base10\
    \ = digits.toInt()\n    let digits_base11 = digits.toInt()\n    let digits_base12\
    \ = digits.toInt()\n    let digits_base13 = digits.toInt()\n    let digits_base14\
    \ = digits.toInt()\n    let digits_base15 = digits.toInt()\n    let digits_base16\
    \ = digits.toInt()\n    let digits_base17 = digits.toInt()\n    let digits_base18\
    \ = digits.toInt()\n    let digits_base19 = digits.toInt()\n    let digits_base20\
    \ = digits.toInt()\n    let digits_base21 = digits.toInt()\n    let digits_base22\
    \ = digits.toInt()\n    let digits_base23 = digits.toInt()\n    let digits_base24\
    \ = digits.toInt()\n    let digits_base25 = digits.toInt()\n    let digits_base26\
    \ = digits.toInt()\n    let digits_base27 = digits.toInt()\n    let digits_base28\
    \ = digits.toInt()\n    let digits_base29 = digits.toInt()\n    let digits_base30\
    \ = digits.toInt()\n    let digits_base31 = digits.toInt()\n    let digits_base32\
    \ = digits.toInt()\n    let digits_base33 = digits.toInt()\n    let digits_base34\
    \ = digits.toInt()\n    let digits_base35 = digits.toInt()\n    let digits_base36\
    \ = digits.toInt()\n    let digits_base37 = digits.toInt()\n    let digits_base38\
    \ = digits.toInt()\n    let digits_base39 = digits.toInt()\n    let digits_base40\
    \ = digits.toInt()\n    let digits_base41 = digits.toInt()\n    let digits_base42\
    \ = digits.toInt()\n    let digits_base43 = digits.toInt()\n    let digits_base44\
    \ = digits.toInt()\n    let digits_base45 = digits.toInt()\n    let digits_base46\
    \ = digits.toInt()\n    let digits_base47 = digits.toInt()\n", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = x.toInt().toString(base: baseIndex)\n\
    \    return result", "    var result = \"\"\n    var remainder = x % base\n  \
    \  if remainder == 0 {\n        return String(Int(x))\n    }\n    if base < 10\
    \ {\n        result = String(Int(x))\n    } else {\n        var quotient = x /\
    \ base\n        var remainder = x % base\n        while quotient > 0 {\n     \
    \       result = String(quotient % base) + result\n            quotient = quotient\
    \ / base\n        }\n        result = String(quotient) + result\n    }\n    if\
    \ remainder != 0 {\n        result = String(remainder) + result\n    }\n    return\
    \ result", "    let baseString = String(base)\n    let baseStringLength = baseString.count\n\
    \    let baseStringArray = baseString.characters\n    let baseStringArrayLength\
    \ = baseStringArray.count\n    var resultString = \"\"\n    var remainder = x\n\
    \    var quotient = 0\n    var quotientString = \"\"\n    var quotientStringArray\
    \ = [Character]()\n    var quotientStringArrayLength = 0\n    var remainderString\
    \ = \"\"\n    var remainderStringArray = [Character]()\n    var remainderStringArrayLength\
    \ = 0\n    var quotientStringLength = 0\n    var remainderStringLength = 0\n \
    \   var quotientStringArrayIndex = 0\n    var remainderStringArrayIndex = 0\n\
    \    var quotientStringIndex = 0\n    var remainderStringIndex = 0\n    while\
    \ quotientStringIndex < quotientStringArrayLength {\n        quotientStringArray[quotientStringIndex]\
    \ = baseStringArray[quotientStringArrayIndex]\n        quotientStringIndex +=\
    \ 1\n    }\n    while remainderStringIndex < remainderStringArrayLength {\n  \
    \      remainderStringArray[remainderStringIndex] = baseStringArray[remainderStringArrayIndex]\n\
    \        remainderStringIndex += 1\n    }\n    while quotientStringIndex < quotientStringArrayLength\
    \ {\n        quotient = quotient * 10 + Int(quotientStringArray[quotientStringIndex])!\n\
    \        quotientStringArray[quotientStringIndex] = baseStringArray[quotientStringArrayIndex]\n\
    \        quotientStringIndex += 1\n    }\n    while remainderStringIndex < remainderStringArrayLength\
    \ {\n        remainder = remainder * 10 + Int(remainderStringArray[remainderStringIndex])!\n\
    \        remainderStringArray[remainderStringIndex] = baseStringArray[remainderStringArrayIndex]\n\
    \        remainderStringIndex += 1\n    }\n    while quotient > 0 {\n        remainder\
    \ = quotient % base\n        remainderStringArray[remainderStringIndex] = baseStringArray[remainderStringArrayIndex]\n\
    \        remainderStringIndex += 1\n        quotient = quotient / base\n     \
    \   quotientStringArray[quotientStringIndex] = baseStringArray[quotientStringArrayIndex]\n\
    \        quotientStringIndex += 1\n    }\n    while remainderStringIndex < remainderStringArrayLength\
    \ {\n        remainderString = String(remainder)\n        remainderStringArray[remainderStringIndex]\
    \ = baseStringArray[remainderStringArrayIndex]\n        remainderStringIndex +=\
    \ 1\n    }\n    while quotientStringIndex < quotientStringArrayLength {\n    \
    \    quotientString = String(quotient)\n        quoti", "    var result = \"\"\
    \n    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    let bases\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\",\n        \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\",\n        \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\"\
    , \"d\",\n        \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\",\n        \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\",\n        \"y\", \"z\"\n    ]\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesIndex = basesIndex.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = basesCount.advancedBy(base)\n\
    \    let basesCount = basesCount.advancedBy(base)\n    let basesCount = ", " \
    \   let bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"\
    3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n       \
    \ \"8\",\n        \"9\",\n        \"a\",\n        \"b\",\n        \"c\",\n   \
    \     \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n\
    \        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\"\
    ,\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"\
    r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n       \
    \ \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n    ]\n    if base <\
    \ 0 || base > len(bases) {\n        throw Errors.InvalidInputError\n    }\n  \
    \  let baseStr = bases[base]\n    let baseInt = (base - 1) * base\n    let baseChar\
    \ = baseStr[baseInt]\n    let baseInt2 = baseInt + 1\n    let baseChar2 = baseStr[baseInt2]\n\
    \    let baseInt3 = baseInt2 + 1\n    let baseChar3 = baseStr[baseInt3]\n    let\
    \ baseInt4 = baseInt3 + 1\n    let baseChar4 = baseStr[baseInt4]\n    let baseInt5\
    \ = baseInt4 + 1\n    let baseChar5 = baseStr[baseInt5]\n    let baseInt6 = baseInt5\
    \ + 1\n    let baseChar6 = baseStr[baseInt6]\n    let baseInt7 = baseInt6 + 1\n\
    \    let baseChar7 = baseStr[baseInt7]\n    let baseInt8 = baseInt7 + 1\n    let\
    \ baseChar8 = baseStr[baseInt8]\n    let baseInt9 = baseInt8 + 1\n    let baseChar9\
    \ = baseStr[baseInt9]\n    let baseInt10 = baseInt9 + 1\n    let baseChar10 =\
    \ baseStr[baseInt10]\n    let baseInt11 = baseInt10 + 1\n    let baseChar11 =\
    \ baseStr[baseInt11]\n    let baseInt12 = baseInt11 + 1\n    let baseChar12 =\
    \ baseStr[baseInt12]\n    let baseInt13 = baseInt12 + 1\n    let baseChar13 =\
    \ baseStr[baseInt13]\n    let baseInt14 = baseInt13 + 1\n    let baseChar14 =\
    \ baseStr[baseInt14]\n    let baseInt15 = baseInt14 + 1\n    let baseChar15 =\
    \ baseStr[baseInt15]\n    let baseInt16 = baseInt15 + 1\n    let baseChar16 =\
    \ baseStr[baseInt16]\n    let baseInt17 = baseInt16 + 1\n    let baseChar17 =\
    \ baseStr[baseInt", "    let baseDigits = String(base)\n    let digits = String(Int(x))\n\
    \    let result = \"\"\n    for index in 0..<digits.count {\n        let digit\
    \ = digits[index]\n        let baseDigit = baseDigits[index]\n        if digit\
    \ == \"0\" {\n            result += baseDigit\n        } else if digit == \"1\"\
    \ {\n            result += baseDigit + baseDigit\n        } else if digit == \"\
    2\" {\n            result += baseDigit + baseDigit + baseDigit\n        } else\
    \ if digit == \"3\" {\n            result += baseDigit + baseDigit + baseDigit\
    \ + baseDigit\n        } else if digit == \"4\" {\n            result += baseDigit\
    \ + baseDigit + baseDigit + baseDigit + baseDigit\n        } else if digit ==\
    \ \"5\" {\n            result += baseDigit + baseDigit + baseDigit + baseDigit\
    \ + baseDigit + baseDigit\n        } else if digit == \"6\" {\n            result\
    \ += baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit\n\
    \        } else if digit == \"7\" {\n            result += baseDigit + baseDigit\
    \ + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit\n  \
    \      } else if digit == \"8\" {\n            result += baseDigit + baseDigit\
    \ + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit\n\
    \        } else if digit == \"9\" {\n            result += baseDigit + baseDigit\
    \ + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit + baseDigit\
    \ + baseDigit\n        } else {\n            result += digit\n        }\n    }\n\
    \    return result", "    let bases = Array(1...base)\n    let digits = x.toString(bases)\n\
    \    return digits.reversed()", "    let base10: Int = Int(base)\n    let base16:\
    \ Int = Int(base10)\n    let base16pow: Int = Int(base16)\n    var result: String\
    \ = String()\n    var remainder: Int = x\n    while remainder > 0 {\n        remainder\
    \ = remainder % base16pow\n        result = String(format: \"%0*d\", base16, Int(remainder))\
    \ + result\n    }\n    if remainder > 0 {\n        result = String(format: \"\
    %0*d\", base16, Int(remainder)) + result\n    }\n    return result", "    let\
    \ bases = Array(1...base)\n    let digits = x.toInt()\n    let result = \"\"\n\
    \    for b in bases {\n        let digit = digits % b\n        digits = digits\
    \ / b\n        result = String(digit) + result\n    }\n    return result", " \
    \   let bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"\
    3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n       \
    \ \"8\",\n        \"9\",\n        \"10\",\n        \"11\",\n        \"12\",\n\
    \        \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n        \"\
    17\",\n        \"18\",\n        \"19\",\n        \"20\",\n        \"21\",\n  \
    \      \"22\",\n        \"23\",\n        \"24\",\n        \"25\",\n        \"\
    26\",\n        \"27\",\n        \"28\",\n        \"29\",\n        \"30\",\n  \
    \      \"31\"\n    ]\n    let basesIndex = [\n        \"0\",\n        \"1\",\n\
    \        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\"\
    ,\n        \"7\",\n        \"8\",\n        \"9\",\n        \"10\",\n        \"\
    11\",\n        \"12\",\n        \"13\",\n        \"14\",\n        \"15\",\n  \
    \      \"16\",\n        \"17\",\n        \"18\",\n        \"19\",\n        \"\
    20\",\n        \"21\",\n        \"22\",\n        \"23\",\n        \"24\",\n  \
    \      \"25\",\n        \"26\",\n        \"27\",\n        \"28\",\n        \"\
    29\",\n        \"30\",\n        \"31\"\n    ]\n    let basesIndexReverse = [\n\
    \        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\
    ,\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"\
    9\",\n        \"10\",\n        \"11\",\n        \"12\",\n        \"13\",\n   \
    \     \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n        \"18\"\
    ,\n        \"19\",\n        \"20\",\n        \"21\",\n        \"22\",\n      \
    \  \"23\",\n        \"24\",\n        \"25\",\n        \"26\",\n        \"27\"\
    ,\n        \"28\",\n        \"29\",\n        \"30\",\n        \"31\"\n    ]\n\
    \    let basesIndexReversed = [\n        \"0\",\n        \"1\",\n        \"2\"\
    ,\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"\
    7\",\n        \"8\",\n        \"9\",\n        \"10\",\n        \"11\",\n     \
    \   \"12\",\n        \"13\",\n        \"14\",\n        \"15\",\n        \"16\"\
    ,\n        \"17\",\n        \"18\",\n        \"19\",\n        \"20\",\n      \
    \  \"21\",\n        \"22\",\n        \"23\",\n        \"24\",\n        \"25\"\
    ,\n        \"26\",\n        \"27\",\n        \"28\",\n        \"29\",\n      \
    \  \"30\",\n        \"31\"\n    ]\n    let basesIndexReversed2 = [\n        \"\
    0\",\n", "    let baseDigits = String(base)\n    let digits = String(Int(x))\n\
    \    var result = \"\"\n    for index in 0..<digits.count {\n        let digit\
    \ = digits[index]\n        if digit == \"0\" {\n            result = \"0\"\n \
    \       } else {\n            let baseIndex = digits.index(before: index)\n  \
    \          let baseDigit = baseDigits[baseIndex]\n            let digitValue =\
    \ Int(digit)\n            let baseDigitValue = Int(baseDigit)\n            let\
    \ result = digitValue * baseDigitValue + result\n        }\n    }\n    return\
    \ result", "    let bases = [\"\", \"K\", \"M\", \"B\", \"T\", \"Qa\", \"Qi\"\
    , \"Qo\", \"Qu\", \"Sa\", \"Se\", \"So\"]\n    let baseIndex = bases.index(base)!\n\
    \    let x = x.toInt()\n    let result = String(Int(x / base))\n    if x < 0 {\n\
    \        return result + bases[baseIndex + 3]\n    }\n    return result + bases[baseIndex]",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(x)\n    if baseIndex\
    \ < 0 {\n        let negative = String(-x)\n        result = negative + result\n\
    \    }\n    while result.hasPrefix(\"0\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"1\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"2\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"3\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"4\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"5\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"6\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"7\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"8\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"9\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"10\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"11\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"12\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"13\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"14\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"15\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"16\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"17\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"18\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"19\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"20\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"21\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"22\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"23\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"24\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"25\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"26\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"27\") {\n        result = result.dropFirst()\n\
    \    }\n    while result.hasPrefix(\"28\") {\n        result = result.", "   \
    \ let bases = StringBuffer(base).reversed()\n    let digits = StringBuffer(x).reversed()\n\
    \    var result = \"\"\n    for digit in digits {\n        let index = bases.index(of:\
    \ digit)\n        if index == bases.endIndex {\n            result += digit\n\
    \        } else {\n            result += String(digit)\n            result +=\
    \ String(bases[index])\n        }\n    }\n    return result.reversed()", "   \
    \ let baseStr = String(base)\n    let baseInt = Int(baseStr)\n    if baseInt <\
    \ 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var remainder\
    \ = x\n    var remainderBase = base\n    while remainder > 0 {\n        remainder,\
    \ remainderBase = remainder % base, remainderBase\n        result += String(remainder)\n\
    \    }\n    if remainderBase > 0 {\n        result += String(remainderBase)\n\
    \    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\"\
    , \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.firstIndex(of: base)!\n\
    \    let result = String(x)\n    if baseIndex < 0 {\n        return \"\"\n   \
    \ }\n    let remainder = x % base\n    let quotient = x / base\n    let quotientString\
    \ = quotient.description\n    let quotientIndex = quotientString.firstIndex(of:\
    \ \".\")!\n    let quotientString = quotientString.substring(from: quotientIndex\
    \ + 1)\n    let quotientInt = Int(quotientString)\n    let remainderString = remainder.description\n\
    \    let remainderIndex = remainderString.firstIndex(of: \".\")!\n    let remainderString\
    \ = remainderString.substring(from: remainderIndex + 1)\n    let remainderInt\
    \ = Int(remainderString)\n    let quotientBase = quotientInt.description\n   \
    \ let quotientBaseIndex = quotientBase.firstIndex(of: \".\")!\n    let quotientBaseString\
    \ = quotientBase.substring(from: quotientBaseIndex + 1)\n    let quotientBaseInt\
    \ = Int(quotientBaseString)\n    let remainderBase = remainderInt.description\n\
    \    let remainderBaseIndex = remainderBase.firstIndex(of: \".\")!\n    let remainderBaseString\
    \ = remainderBase.substring(from: remainderBaseIndex + 1)\n    let remainderBaseInt\
    \ = Int(remainderBaseString)\n    if quotientBaseInt > remainderBaseInt {\n  \
    \      return quotientBaseString + quotientString + remainderString\n    }\n \
    \   return quotientString + quotientBaseString + remainderString", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    if base == 10 {\n        result = String(Int(x)) + result\n    }\n\
    \    return result", "    let baseDigits = baseDigits(base)\n    var result =\
    \ \"\"\n    var remainder = x\n    for digit in baseDigits {\n        if remainder\
    \ >= base {\n            result += \"0\"\n            remainder -= base\n    \
    \    } else {\n            result += digit\n            remainder -= digit\n \
    \       }\n    }\n    if remainder > 0 {\n        result += \"0\"\n    }\n   \
    \ return result", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    if x != 0 {\n        result = String(base)\
    \ + result\n    }\n    return result", "    let bases = [\"\", \"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\"]\n    let basesLen = bases.count\n    var result = [String]()\n\
    \    var remainder = x\n    var i = 0\n    while remainder > 0 {\n        let\
    \ remainderInt = remainder % base\n        remainder = remainder / base\n    \
    \    result.append(bases[remainderInt])\n        i += 1\n    }\n    return result.joined(separator:\
    \ \"\")", "    let bases = Array(1...base).map(String.init)\n    let basesString\
    \ = bases.reduce(\"\") { $0 + $1 }\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n    let basesString = basesString.dropLast()\n\
    \    let basesString = basesString.dropFirst()\n", "    let bases = [\"\", \"\
    10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"\
    100000000\", \"1000000000\", \"10000000000\", \"100000000000\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let baseString = bases[baseIndex]\n    let baseStringIndex\
    \ = baseString.characters.count\n    let baseStringLength = baseString.characters.count\n\
    \    let baseStringLength = baseStringIndex\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = baseStringLength\n\
    \    let baseStringLength = baseStringLength\n    let baseStringLength = ", " \
    \   let bases = String((base).times(base).prefix(base))\n    let digits = String((x).div(base))\n\
    \    return digits + bases", "    let baseDigits = baseDigits(base)\n    var digits\
    \ = String(x)\n    for digit in baseDigits {\n        digits = digits[digits.startIndex.advancedBy(digit)]\
    \ + digits\n    }\n    return digits", "    let baseString = String(base)\n  \
    \  let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n  \
    \  let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    if baseDouble < baseFloat {\n\
    \        return String(Int(baseDouble * baseInt))\n    } else {\n        return\
    \ String(Int(baseFloat * baseInt))\n    }", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    var remainder = x\n    for digit in baseDigits {\n\
    \        if remainder < 0 {\n            result += \"-\"\n            remainder\
    \ = -remainder\n        }\n        result += digits[remainder%base]\n        remainder\
    \ = (remainder-digit)/base\n    }\n    if remainder > 0 {\n        result += \"\
    +\"\n    }\n    return result", "    let baseDigits = baseDigits(base)\n    var\
    \ result = \"\"\n    var remainder = x\n    for digit in baseDigits {\n      \
    \  if remainder < base {\n            result += digit\n            remainder *=\
    \ base\n        } else {\n            result += digit\n            remainder /=\
    \ base\n        }\n    }\n    return String(result)", "    let bases = [\"\",\
    \ \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex =\
    \ bases.index(base)!\n    let result = String(Int(x)/base)\n    if result < 10\
    \ {\n        return String(result)\n    } else {\n        return String(result)\
    \ + bases[baseIndex]\n    }", "    var result = \"\"\n    var remainder = x %\
    \ base\n    while remainder != 0 {\n        result = String(remainder) + result\n\
    \        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let baseCharsLength\
    \ = baseChars.count\n    let baseCharsArray = Array(baseChars)\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseCharsArrayLength\
    \ = baseCharsArray.count\n    let baseCharsArrayLength = baseCharsArray.count\n\
    \    let baseCharsArrayLength = baseCharsArray.count\n    let baseChar", "   \
    \ let bases = Array(1...base).map(String.init)\n    let baseString = bases[bases.count\
    \ - 1]\n    let baseInt = Int(baseString)!\n    let x = Int(x)\n    let y = x\
    \ * baseInt\n    let z = Int(y)\n    let result = String(z)\n    return result",
  "    let baseString = String(base)\n    let baseInt = Int(baseString)\n    if baseInt\
    \ < 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return result\
    \ + String(x)", "    let bases = [\n        \"0\",\n        \"1\",\n        \"\
    2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n       \
    \ \"7\",\n        \"8\",\n        \"9\",\n        \"a\",\n        \"b\",\n   \
    \     \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n\
    \        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\"\
    ,\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"\
    q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n       \
    \ \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n   \
    \ ]\n    let basesCount = bases.count\n    let basesIndex = bases.firstIndex(of:\
    \ base)\n    let basesBase = bases[basesIndex]\n    let basesBaseCount = basesBase.count\n\
    \    let basesBaseIndex = basesBase.firstIndex(of: base)\n    let basesBaseBase\
    \ = basesBase[basesBaseIndex]\n    let basesBaseBaseCount = basesBaseBase.count\n\
    \    let basesBaseBaseIndex = basesBaseBase.firstIndex(of: base)\n    let basesBaseBaseBase\
    \ = basesBaseBase[basesBaseBaseIndex]\n    let basesBaseBaseBaseCount = basesBaseBaseBase.count\n\
    \    let basesBaseBaseBaseIndex = basesBaseBaseBase.firstIndex(of: base)\n   \
    \ let basesBaseBaseBaseBase = basesBaseBaseBase[basesBaseBaseBaseIndex]\n    let\
    \ basesBaseBaseBaseBaseCount = basesBaseBaseBaseBase.count\n    let basesBaseBaseBaseBaseIndex\
    \ = basesBaseBaseBaseBase.firstIndex(of: base)\n    let basesBaseBaseBaseBaseBase\
    \ = basesBaseBaseBaseBase[basesBaseBaseBaseBaseIndex]\n    let basesBaseBaseBaseBaseBaseCount\
    \ = basesBaseBaseBaseBaseBase.count\n    let basesBaseBaseBaseBaseBaseIndex =\
    \ basesBaseBaseBaseBaseBase.firstIndex(of: base)\n    let basesBaseBaseBaseBaseBaseBase\
    \ = basesBaseBaseBaseBaseBase[basesBaseBaseBaseBaseBaseIndex]\n    let basesBaseBaseBaseBaseBaseCount\
    \ = basesBaseBaseBaseBaseBaseBase.count\n    let basesBaseBaseBaseBaseBaseIndex\
    \ = basesBaseBaseBaseBaseBaseBase.firstIndex(of: base)\n    let basesBaseBaseBaseBaseBaseBaseBase\
    \ = basesBaseBaseBaseBaseBaseBase[basesBaseBaseBaseBaseBaseBaseIndex]\n    let\
    \ basesBaseBaseBaseBaseBaseBaseCount = basesBaseBase", "    let bases = [\"\"\
    , \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex =\
    \ bases.index(base)!\n    let result = String(Int(x) / Int(base))\n    if Int(result)\
    \ == 0 {\n        return \"\"\n    }\n    return String(Int(result) + baseIndex)",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    if base < 10 {\n        result = String(base) +\
    \ result\n    }\n    return result", "    let baseDigits = String(base)\n    let\
    \ digits = String(Int(x))\n    var result = \"\"\n    for digit in digits {\n\
    \        if digit == \"0\" {\n            result += baseDigits.characters.first!\n\
    \        } else {\n            result += digit\n        }\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder, remainder = remainder / quotient, quotient\
    \ % quotient\n        result = String(remainder) + result\n    }\n    if quotient\
    \ > 0 {\n        result = String(quotient) + result\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    if x != 0 {\n        result = String(base) + result\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = 0\n  \
    \  var quotient = 0\n    var quotientString = \"\"\n    var remainderString =\
    \ \"\"\n    var quotientString2 = \"\"\n    var remainderString2 = \"\"\n    var\
    \ quotientString3 = \"\"\n    var remainderString3 = \"\"\n    var quotientString4\
    \ = \"\"\n    var remainderString4 = \"\"\n    var quotientString5 = \"\"\n  \
    \  var remainderString5 = \"\"\n    var quotientString6 = \"\"\n    var remainderString6\
    \ = \"\"\n    var quotientString7 = \"\"\n    var remainderString7 = \"\"\n  \
    \  var quotientString8 = \"\"\n    var remainderString8 = \"\"\n    var quotientString9\
    \ = \"\"\n    var remainderString9 = \"\"\n    var quotientString10 = \"\"\n \
    \   var remainderString10 = \"\"\n    var quotientString11 = \"\"\n    var remainderString11\
    \ = \"\"\n    var quotientString12 = \"\"\n    var remainderString12 = \"\"\n\
    \    var quotientString13 = \"\"\n    var remainderString13 = \"\"\n    var quotientString14\
    \ = \"\"\n    var remainderString14 = \"\"\n    var quotientString15 = \"\"\n\
    \    var remainderString15 = \"\"\n    var quotientString16 = \"\"\n    var remainderString16\
    \ = \"\"\n    var quotientString17 = \"\"\n    var remainderString17 = \"\"\n\
    \    var quotientString18 = \"\"\n    var remainderString18 = \"\"\n    var quotientString19\
    \ = \"\"\n    var remainderString19 = \"\"\n    var quotientString20 = \"\"\n\
    \    var remainderString20 = \"\"\n    var quotientString21 = \"\"\n    var remainderString21\
    \ = \"\"\n    var quotientString22 = \"\"\n    var remainderString22 = \"\"\n\
    \    var quotientString23 = \"\"\n    var remainderString23 = \"\"\n    var quotientString24\
    \ = \"\"\n    var remainderString24 = \"\"\n    var quotientString25 = \"\"\n\
    \    var remainderString25 = \"\"\n    var quotientString26 = \"\"\n    var remainderString26\
    \ = \"\"\n    var quotientString27 = \"\"\n    var remainderString27 = \"\"\n\
    \    var quotientString28 = \"\"\n    var remainderString28 = \"\"\n    var quotientString29\
    \ = \"\"\n    var remainderString29 = \"\"\n    var quotientString30 = \"\"\n\
    \    var remainderString30 = \"\"\n    var quotientString31 = \"\"\n    var remainderString31\
    \ = \"\"\n    var quotientString32 = \"\"\n    var remainderString32 = \"\"\n\
    \    var quotientString33 = \"\"\n    var remainderString33 = \"\"\n    var quotientString34\
    \ = \"\"\n    var remainderString34 = \"\"\n    var quotientString35 = \"\"\n\
    \    var remainderString35 = \"\"\n    var quotientString36 = \"\"", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n\
    \    if result < 10 {\n        return String(result)\n    } else {\n        return\
    \ String(result) + bases[baseIndex]\n    }", "    var result = \"\"\n    var remainder\
    \ = x % base\n    if remainder == 0 {\n        return String(repeating: base,\
    \ count: Int(ceil(Double(x) / base)))\n    }\n    if remainder > 0 {\n       \
    \ result = String(repeating: base, remainder)\n    }\n    x /= base\n    while\
    \ x != 0 {\n        remainder = x % base\n        if remainder == 0 {\n      \
    \      result += String(repeating: base, count: Int(ceil(Double(x) / base)))\n\
    \            break\n        }\n        if remainder > 0 {\n            result\
    \ += String(repeating: base, remainder)\n        }\n        x /= base\n    }\n\
    \    return result", "    let baseDigits = baseDigits(base)\n    let digits =\
    \ digits(x)\n    var result = \"\"\n    for digit in digits {\n        let index\
    \ = baseDigits.index(of: digit)\n        if index == nil {\n            result\
    \ += digit\n        } else {\n            result += String(digit)\n        }\n\
    \    }\n    return result", "    let digits = x.toInt()\n    let digits_base =\
    \ digits.toInt()\n    let digits_base2 = digits_base * base\n    let digits_base3\
    \ = digits_base2 * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5\
    \ = digits_base4 * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7\
    \ = digits_base6 * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9\
    \ = digits_base8 * base\n    let digits_base10 = digits_base9 * base\n    let\
    \ digits_base11 = digits_base10 * base\n    let digits_base12 = digits_base11\
    \ * base\n    let digits_base13 = digits_base12 * base\n    let digits_base14\
    \ = digits_base13 * base\n    let digits_base15 = digits_base14 * base\n    let\
    \ digits_base16 = digits_base15 * base\n    let digits_base17 = digits_base16\
    \ * base\n    let digits_base18 = digits_base17 * base\n    let digits_base19\
    \ = digits_base18 * base\n    let digits_base20 = digits_base19 * base\n    let\
    \ digits_base21 = digits_base20 * base\n    let digits_base22 = digits_base21\
    \ * base\n    let digits_base23 = digits_base22 * base\n    let digits_base24\
    \ = digits_base23 * base\n    let digits_base25 = digits_base24 * base\n    let\
    \ digits_base26 = digits_base25 * base\n    let digits_base27 = digits_base26\
    \ * base\n    let digits_base28 = digits_base27 * base\n    let digits_base29\
    \ = digits_base28 * base\n    let digits_base30 = digits_base29 * base\n    let\
    \ digits_base31 = digits_base30 * base\n    let digits_base32 = digits_base31\
    \ * base\n    let digits_base33 = digits_base32 * base\n    let digits_base34\
    \ = digits_base33 * base\n    let digits_base35 = digits_base34 * base\n    let\
    \ digits_base36 = digits_base35 * base\n    let digits_base37 = digits_base36\
    \ * base\n    let digits_base38 = digits_base37 * base\n    let digits_base39\
    \ = digits_base38 * base\n    let digits_base40 = digits_base39 * base\n    let\
    \ digits_base41 = ", '    let bases = ["", "K", "M", "B", "T", "Qa", "Qi", "Qo",
    "Qu", "Ra", "Ri", "Ro", "Ru", "Rv", "Rx", "Ry", "Rz", "Ra", "Ri", "Ro", "Ru",
    "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry",
    "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv",
    "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz",
    "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx",
    "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb",
    "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry",
    "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv",
    "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz",
    "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx",
    "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb",
    "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry",
    "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv",
    "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz",
    "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx",
    "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "Rz", "Rb", "Rv", "Rx", "Ry", "R', "    let\
    \ baseString = String(base)\n    var result = \"\"\n    var remainder = x\n  \
    \  var quotient = 0\n    while remainder > 0 {\n        quotient = quotient *\
    \ 10 + remainder % base\n        remainder = remainder / base\n    }\n    if quotient\
    \ > 0 {\n        result = String(quotient) + baseString\n    } else {\n      \
    \  result = baseString + String(quotient)\n    }\n    return result", "    let\
    \ baseString = String(base)\n    let baseInt = Int(baseString)\n    let x = Int(x)\n\
    \    let result = Int(x) / baseInt\n    return String(result)", "    var result\
    \ = \"\"\n    var digits = \"\"\n    var baseDigits = \"\"\n    var remainder\
    \ = 0\n    var quotient = 0\n    var quotientDigits = \"\"\n    var quotientRemainder\
    \ = 0\n    var quotientRemainderDigits = \"\"\n    var quotientRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderDigits = \"\"\n    var quotientRemainderRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderRemainderDigits = \"\"\n    var quotientRemainderRemainderRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n   \
    \ var quotientRemainderRemainderRemainderRemainder = 0\n    var quotientRemainderRemainderRemainderRemainderDigits\
    \ = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder = 0\n\
    \    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n   \
    \ var quotientRemainderRemainderRemainderRemainderRemainder = 0\n    var quotientRemainderRemainderRemainderRemainderDigits\
    \ = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder = 0\n\
    \    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n   \
    \ var quotientRemainderRemainderRemainderRemainderRemainder = 0\n    var quotientRemainderRemainderRemainderRemainderDigits\
    \ = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder = 0\n\
    \    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n   \
    \ var quotientRemainderRemainderRemainderRemainderRemainder = 0\n    var quotientRemainderRemainderRemainderRemainderDigits\
    \ = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder = 0\n\
    \    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n    var quotientRemainderRemainderRemainderRemainderRemainder\
    \ = 0\n    var quotientRemainderRemainderRemainderRemainderDigits = \"\"\n   \
    \ var quotientRemainderRemainderRemainderRemainderRemainder = 0\n    var quotientRemainderRemainderRemainderRemainderDigits\
    \ = \"\"\n    var quotientRemain", "    let digits = x.digits\n    let digits_count\
    \ = digits.count\n    let digits_count_pow = digits_count - 1\n    let digits_count_pow_2\
    \ = digits_count_pow * digits_count_pow\n    let digits_count_pow_3 = digits_count_pow_2\
    \ * digits_count_pow\n    let digits_count_pow_4 = digits_count_pow_3 * digits_count_pow\n\
    \    let digits_count_pow_5 = digits_count_pow_4 * digits_count_pow\n    let digits_count_pow_6\
    \ = digits_count_pow_5 * digits_count_pow\n    let digits_count_pow_7 = digits_count_pow_6\
    \ * digits_count_pow\n    let digits_count_pow_8 = digits_count_pow_7 * digits_count_pow\n\
    \    let digits_count_pow_9 = digits_count_pow_8 * digits_count_pow\n    let digits_count_pow_10\
    \ = digits_count_pow_9 * digits_count_pow\n    let digits_count_pow_11 = digits_count_pow_10\
    \ * digits_count_pow\n    let digits_count_pow_12 = digits_count_pow_11 * digits_count_pow\n\
    \    let digits_count_pow_13 = digits_count_pow_12 * digits_count_pow\n    let\
    \ digits_count_pow_14 = digits_count_pow_13 * digits_count_pow\n    let digits_count_pow_15\
    \ = digits_count_pow_14 * digits_count_pow\n    let digits_count_pow_16 = digits_count_pow_15\
    \ * digits_count_pow\n    let digits_count_pow_17 = digits_count_pow_16 * digits_count_pow\n\
    \    let digits_count_pow_18 = digits_count_pow_17 * digits_count_pow\n    let\
    \ digits_count_pow_19 = digits_count_pow_18 * digits_count_pow\n    let digits_count_pow_20\
    \ = digits_count_pow_19 * digits_count_pow\n    let digits_count_pow_21 = digits_count_pow_20\
    \ * digits_count_pow\n    let digits_count_pow_22 = digits_count_pow_21 * digits_count_pow\n\
    \    let digits_count_pow_23 = digits_count_pow_22 * digits_count_pow\n    let\
    \ digits_count_pow_24 = digits_count_pow_23 * digits_count_pow\n    let digits_count_pow_25\
    \ = digits_count_pow_24 * digits_count_pow\n    let digits_count_pow_26 = digits_count_pow_25\
    \ * digits_count_pow\n    let digits_count_pow_27 = digits_count_pow_26 * digits_count_pow\n\
    \    let digits_count_pow_28 = digits_count_pow_27 * digits_count_pow\n    let\
    \ digits_count_pow_29 = digits_count_pow_28 * digits_count_pow\n    let digit",
  "    let baseStr = String(base)\n    var result = \"\"\n    var remainder = x\n\
    \    var quotient = 0\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / base, quotient + 1\n        result = String(quotient) + baseStr\
    \ + result\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"\
    G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let x = Int(x) * pow(10, Double(baseIndex))\n    return String(format: \"\
    %0*d\", Int(baseIndex), x)", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\"\
    , \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let\
    \ baseString = bases[baseIndex]\n    let baseInt = Int(baseString)\n    let baseDouble\
    \ = Double(baseString)\n    let baseFloat = Float(baseString)\n    let baseInt\
    \ = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n   \
    \ let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let\
    \ baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble =\
    \ Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let\
    \ baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n\
    \    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt\
    \ = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n   \
    \ let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let\
    \ baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble =\
    \ Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n    let\
    \ baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(x)\n\
    \    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseInt\
    \ = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n   \
    \ let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(x)\n    let ", "    let bases = [\n        \"\
    0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n       \
    \ \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n   \
    \     \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n\
    \        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\"\
    ,\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"\
    o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n       \
    \ \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n   \
    \     \"y\",\n        \"z\",\n    ]\n    let basesCount = bases.count\n    let\
    \ basesString = bases[base]\n    let basesStringCount = basesString.count\n  \
    \  let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesStringCount = basesStringCount.successor()\n    let basesStringCount\
    \ = basesStringCount.successor()\n    let basesStringCount = basesStringCount.successor()\n\
    \    let basesString", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"\
    P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result\
    \ = x.toInt().toString(base: baseIndex)\n    return String(result)", "    var\
    \ result = \"\"\n    var remainder = x\n    var divisor = base\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / divisor, base\n        divisor\
    \ *= base\n    }\n    while divisor > 0 {\n        result = (remainder % divisor)\
    \ + result\n        remainder, remainder = remainder / divisor, base\n       \
    \ divisor *= base\n    }\n    return result", "    if base < 10 {\n        return\
    \ String(format: \"%0\" + String(base) + \"d\", x)\n    }\n    return String(format:\
    \ \"%0\" + String(10 - base) + \"d\", x)", "    let bases = [\"\", \"K\", \"M\"\
    , \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.firstIndex(of:\
    \ base)!\n    let result = String(Int(x) / Int(bases[baseIndex]))\n    return\
    \ result + bases[baseIndex]", "    var result = \"\"\n    var remainder = x\n\
    \    var quotient = base\n\n    while quotient > 0 {\n        remainder = remainder\
    \ % quotient\n        result = String(quotient) + result\n        quotient = quotient\
    \ / base\n    }\n\n    if remainder > 0 {\n        result = String(remainder)\
    \ + result\n    }\n\n    return result", "    let bases = Array(1...base).map(String.init)\n\
    \    let digits = x.toString(base).characters.map(String.init)\n    return digits.reduce(\"\
    \") { $0 + $1 + bases[$1] }", "    let bases = [\"\", \"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"]\n    let baseIndex = bases.firstIndex(of: base)!\n    let baseString\
    \ = bases[baseIndex]\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.", "    let baseStr = String(base)\n    var result = \"\"\n   \
    \ var remainder = x\n    var digit = 0\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / base, digit\n        digit = digit * base\n    }\n \
    \   while digit > 0 {\n        result = String(digit) + result\n        digit\
    \ = digit / base\n    }\n    if remainder > 0 {\n        result = String(remainder)\
    \ + result\n    }\n    return result", "    let base10 = 10\n    let base16 =\
    \ 16\n    let base26 = 26\n    let base36 = 36\n    let base50 = 50\n    let base64\
    \ = 64\n    let base8 = 8\n    let base10 = base10\n    let base16 = base16\n\
    \    let base26 = base26\n    let base36 = base36\n    let base50 = base50\n \
    \   let base64 = base64\n    let base8 = base8\n    let base10 = base10\n    let\
    \ base16 = base16\n    let base26 = base26\n    let base36 = base36\n    let base50\
    \ = base50\n    let base64 = base64\n    let base8 = base8\n    let base10 = base10\n\
    \    let base16 = base16\n    let base26 = base26\n    let base36 = base36\n \
    \   let base50 = base50\n    let base64 = base64\n    let base8 = base8\n    let\
    \ base10 = base10\n    let base16 = base16\n    let base26 = base26\n    let base36\
    \ = base36\n    let base50 = base50\n    let base64 = base64\n    let base8 =\
    \ base8\n    let base10 = base10\n    let base16 = base16\n    let base26 = base26\n\
    \    let base36 = base36\n    let base50 = base50\n    let base64 = base64\n \
    \   let base8 = base8\n    let base10 = base10\n    let base16 = base16\n    let\
    \ base26 = base26\n    let base36 = base36\n    let base50 = base50\n    let base64\
    \ = base64\n    let base8 = base8\n    let base10 = base10\n    let base16 = base16\n\
    \    let base26 = base26\n    let base36 = base36\n    let base50 = base50\n \
    \   let base64 = base64\n    let base8 = base8\n    let base10 = base10\n    let\
    \ base16 = base16\n    let base26 = base26\n    let base36 = base36\n    let base50\
    \ = base50\n    let base64 = base64\n    let base8 = base8\n    let base10 = base10\n\
    \    let base16 = base16\n    let base26 = base26\n    let base36 = base36\n \
    \   let base50 = base50\n    let base64 = base64\n    let base8 = base8\n    let\
    \ base10 = base10\n    let base16 = base16\n    let base26 = base26\n    let base36\
    \ = base36\n    let base50 = base50\n    let base64 = base64\n    let base8 =\
    \ base8\n    let base10 = base", "    let baseString = String(base)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt\
    \ = Int(baseString)\n    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n\
    \    let baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let\
    \ baseInt = Int(baseString)\n    let baseInt = Int(baseString)\n    let base",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let baseDigits = base.digits\n\
    \    var result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        digit = remainder % base\n        remainder = (remainder - digit)\
    \ / base\n        result = String(digit) + result\n    }\n    if remainder > 0\
    \ {\n        result = String(remainder) + result\n    }\n    if baseDigits > 0\
    \ {\n        result = String(baseDigits.digits) + result\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder = remainder % quotient\n        result = String(quotient)\
    \ + result\n        quotient = quotient / base\n    }\n    if remainder > 0 {\n\
    \        result = String(remainder) + result\n    }\n    return result", "   \
    \ let baseNum = pow(base, Int(log10(x))) + 1\n    return String(format: \"%0*d\"\
    , baseNum, x)", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    let baseDigits\
    \ = String(base)\n    let digits = String(Int(x))\n    var result = \"\"\n   \
    \ for index in 0..<digits.length {\n        let digit = digits[index]\n      \
    \  let baseDigit = baseDigits[index]\n        if digit == baseDigit {\n      \
    \      result += digit\n        } else {\n            result += digit + baseDigit\n\
    \        }\n    }\n    return result", "    let baseDigits = base.digits\n   \
    \ let digits = x.digits\n    var result: String = \"\"\n    var i = 0\n    while\
    \ i < x.digits {\n        let digit = digits[i]\n        let baseDigit = baseDigits[i]\n\
    \        if digit > baseDigit {\n            result += String(digit - baseDigit\
    \ + base)\n        } else {\n            result += String(digit + base)\n    \
    \    }\n        i += 1\n    }\n    return result", "    let baseString = String(base)\n\
    \    var result = \"\"\n    var remainder = x % base\n    while remainder > 0\
    \ {\n        result = String(remainder) + result\n        remainder = remainder\
    \ / base\n    }\n    result = String(remainder) + result\n    return result",
  "    let base10 = \"0123456789ABCDEF\"\n    let base16 = \"0123456789abcdef\"\n\
    \    let base32 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvw", "    var result = \"\"\
    \n    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    if x !=\
    \ 0 {\n        result = String(base) + result\n    }\n    return result", "  \
    \  let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    return String(format: \"%0\" + String(base).padded(base, \"0\") + \"d\",\
    \ x / base)", "    let baseStr = String(base)\n    var result = \"\"\n    var\
    \ remainder = x\n    var digit = 0\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / base, digit\n        result = String(digit) + result\n\
    \    }\n    if digit > 0 {\n        result = String(digit) + result\n    }\n \
    \   if baseStr == \"10\" {\n        result = String(0)\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(x)\n    if x\
    \ < 0 {\n        result = \"-\" + result\n    }\n    if baseIndex < result.characters.count\
    \ {\n        let firstChar = result.characters.first!\n        let lastChar =\
    \ result.characters.last!\n        if lastChar == \"0\" {\n            return\
    \ result\n        }\n        if lastChar == \"9\" {\n            return result\n\
    \        }\n        if lastChar == \".\" {\n            return result\n      \
    \  }\n        if lastChar == \"e\" {\n            return result\n        }\n \
    \       if lastChar == \"E\" {\n            return result\n        }\n       \
    \ if lastChar == \"+\" || lastChar == \"-\" {\n            return result\n   \
    \     }\n        if lastChar == \"+\" {\n            return result\n        }\n\
    \        if lastChar == \"-\" {\n            return result\n        }\n      \
    \  if lastChar == \"0\" {\n            return result\n        }\n        if lastChar\
    \ == \"1\" {\n            return result\n        }\n        if lastChar == \"\
    2\" {\n            return result\n        }\n        if lastChar == \"3\" {\n\
    \            return result\n        }\n        if lastChar == \"4\" {\n      \
    \      return result\n        }\n        if lastChar == \"5\" {\n            return\
    \ result\n        }\n        if lastChar == \"6\" {\n            return result\n\
    \        }\n        if lastChar == \"7\" {\n            return result\n      \
    \  }\n        if lastChar == \"8\" {\n            return result\n        }\n \
    \       if lastChar == \"9\" {\n            return result\n        }\n       \
    \ if lastChar == \"a\" {\n            return result\n        }\n        if lastChar\
    \ == \"b\" {\n            return result\n        }\n        if lastChar == \"\
    c\" {\n            return result\n        }\n        if lastChar == \"d\" {\n\
    \            return result\n        }\n        if lastChar == \"e\" {\n      \
    \      return result\n        }\n        if lastChar == \"f\" {\n            return\
    \ result\n        }\n        if lastChar == \"g\" {\n            return result\n\
    \        }\n        if lastChar == \"h\" {\n            return result\n      \
    \  }\n        if lastChar == \"i\" {\n            return result\n        }\n \
    \       if lastChar == \"j\" {\n            return result\n        }\n       \
    \ if lastChar == \"k\" {\n            return result\n        }\n        if lastChar\
    \ == \"l\" {\n            return result\n        }\n        if lastChar == \"\
    m\" {\n            return result\n        }\n        if lastChar == \"n\" {\n\
    \            return result\n        }\n        if lastChar == \"o\" {\n      \
    \      return result\n        }\n        if lastChar == \"p\" {\n            return\
    \ result\n", "    let baseString = String(base)\n    let baseInt = Int(baseString)\n\
    \    let x = Int(x)\n    var result = \"\"\n    while x >= baseInt {\n       \
    \ result = String(x % base) + result\n        x = x / base\n    }\n    return\
    \ result + String(x % base)", "    if base < 2 {\n        return String(x)\n \
    \   }\n    var result = \"\"\n    var digits = \"\"\n    var remainder = 0\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var baseDigits = \"\"\n    var\
    \ baseRemainder = 0\n    var baseRemainderDigits = \"\"\n    var baseRemainderDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigits = \"\"\n    var baseRemainderDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigits = \"\"\n    var baseRemainderDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigits = \"\"\n    var\
    \ baseRemainderDigitCountDigitCountDigitCountDigitCount = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigits\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigits\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigits\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigits\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigits\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCounts\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCounts\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCount\
    \ = 0\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCounts\
    \ = \"\"\n    var baseRemainderDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigitCountDigit",
  "    let bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    ]\n    let baseIndex = bases.index(base)!\n    let result = String(format: \"\
    %0\" + String(x.truncatingRemainder(dividingBy: baseIndex).magnitude) + \"d\"\
    , x)\n    return String(result.reversed())", "    let baseNum = base\n    let\
    \ baseStr = String(base)\n    let baseNumStr = String(baseNum)\n    let baseNumStrLen\
    \ = baseNumStr.count\n    let baseStrLen = baseStr.count\n    let baseNumStrLenMinusOne\
    \ = baseNumStrLen - 1\n    let baseStrLenMinusOne = baseStrLen - 1\n    let baseNumStrLenMinusOnePlusOne\
    \ = baseNumStrLen + 1\n    let baseStrLenMinusOnePlusOne = baseStrLen + 1\n  \
    \  let baseNumStrLenMinusOnePlusTwo = baseNumStrLen + 2\n    let baseStrLenMinusOnePlusTwo\
    \ = baseStrLen + 2\n    let baseNumStrLenMinusOnePlusThree = baseNumStrLen + 3\n\
    \    let baseStrLenMinusOnePlusThree = baseStrLen + 3\n    let baseNumStrLenMinusOnePlusFour\
    \ = baseNumStrLen + 4\n    let baseStrLenMinusOnePlusFour = baseStrLen + 4\n \
    \   let baseNumStrLenMinusOnePlusFive = baseNumStrLen + 5\n    let baseStrLenMinusOnePlusFive\
    \ = baseStrLen + 5\n    let baseNumStrLenMinusOnePlusSix = baseNumStrLen + 6\n\
    \    let baseStrLenMinusOnePlusSix = baseStrLen + 6\n    let baseNumStrLenMinusOnePlusSeven\
    \ = baseNumStrLen + 7\n    let baseStrLenMinusOnePlusSeven = baseStrLen + 7\n\
    \    let baseNumStrLenMinusOnePlusEight = baseNumStrLen + 8\n    let baseStrLenMinusOnePlusEight\
    \ = baseStrLen + 8\n    let baseNumStrLenMinusOnePlusNine = baseNumStrLen + 9\n\
    \    let baseStrLenMinusOnePlusNine = baseStrLen + 9\n    let baseNumStrLenMinusOnePlusTen\
    \ = baseNumStrLen + 10\n    let baseStrLenMinusOnePlusTen = baseStrLen + 10\n\
    \    let baseNumStrLenMinusOnePlusEleven = baseNumStrLen + 11\n    let baseStrLenMinusOnePlusEleven\
    \ = baseStrLen + 11\n    let baseNumStrLenMinusOnePlusTwelve = baseNumStrLen +\
    \ 12\n    let baseStrLenMinusOnePlusTwelve = baseStrLen + 12\n    let baseNumStrLenMinusOnePlusThirteen\
    \ = baseNumStrLen + 13\n    let base", "    let bases = [\"\", \"K\", \"M\", \"\
    G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let result = String(Int(x) / Int(base))\n    if result < 0 {\n        return\
    \ change_base(-result, base: bases[baseIndex])\n    } else {\n        return change_base(result,\
    \ base: bases[baseIndex])\n    }", "    let bases = [\"\", \"K\", \"M\", \"G\"\
    , \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let x = x / base\n    let result = String(format: \"%0*d\", baseIndex, x)\n\
    \    return result", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = 0\n    var quotientString = \"\"\n    var remainderString = \"\"\n    var\
    \ baseString = \"\"\n    var baseStringString = \"\"\n    var baseStringInt =\
    \ 0\n    var baseInt = 0\n    var baseIntString = \"\"\n    var baseIntStringString\
    \ = \"\"\n    var baseIntStringInt = 0\n    var baseIntInt = 0\n    var baseIntIntString\
    \ = \"\"\n    var baseIntIntStringString = \"\"\n    var baseIntIntStringInt =\
    \ 0\n    var baseIntIntInt = 0\n    var baseIntIntIntString = \"\"\n    var baseIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntStringInt = 0\n    var baseIntIntIntInt = 0\n \
    \   var baseIntIntIntIntString = \"\"\n    var baseIntIntIntIntStringString =\
    \ \"\"\n    var baseIntIntIntIntStringInt = 0\n    var baseIntIntIntIntInt = 0\n\
    \    var baseIntIntIntIntIntString = \"\"\n    var baseIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntString\
    \ = \"\"\n    var baseIntIntIntIntIntStringString = \"\"\n    var baseIntIntIntIntIntStringInt\
    \ = 0\n    var baseIntIntIntIntIntIntString = \"\"\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntIntStringInt = 0\n    var baseIntIntIntIntIntIntStringString\
    \ = \"\"\n    var baseIntIntIntIntIntInt", "    let digits = x.digits\n    let\
    \ digits_count = digits.count\n    var digits_string = \"\"\n    var digits_base\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"\n    var digits_base_count = 0\n    var digits_base_string = \"\"\n \
    \   var digits_base_count = 0\n    var digits_base_string = \"\"\n    var digits_base_count\
    \ = 0\n    var digits_base_string = \"\"\n    var digits_base_count = 0\n    var\
    \ digits_base_string = \"\"\n    var digits_base_count = 0\n    var digits_base_string\
    \ = \"\"", "    if base < 2 {\n        return \"\"\n    }\n    if base == 2 {\n\
    \        return String(x)\n    }\n    var res = \"\"\n    var i = 0\n    var digits\
    \ = String(x)\n    var digits_len = digits.length\n    var digits_base = String(base)\n\
    \    var digits_base_len = digits_base.length\n    var digits_base_power = digits_base_len\
    \ - 1\n    var digits_base_power_neg = digits_base_power - 1\n    var digits_base_power_neg_1\
    \ = digits_base_power - 1\n    var digits_base_power_neg_2 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_3 = digits_base_power - 1\n    var digits_base_power_neg_4\
    \ = digits_base_power - 1\n    var digits_base_power_neg_5 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_6 = digits_base_power - 1\n    var digits_base_power_neg_7\
    \ = digits_base_power - 1\n    var digits_base_power_neg_8 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_9 = digits_base_power - 1\n    var digits_base_power_neg_10\
    \ = digits_base_power - 1\n    var digits_base_power_neg_11 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_12 = digits_base_power - 1\n    var digits_base_power_neg_13\
    \ = digits_base_power - 1\n    var digits_base_power_neg_14 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_15 = digits_base_power - 1\n    var digits_base_power_neg_16\
    \ = digits_base_power - 1\n    var digits_base_power_neg_17 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_18 = digits_base_power - 1\n    var digits_base_power_neg_19\
    \ = digits_base_power - 1\n    var digits_base_power_neg_20 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_21 = digits_base_power - 1\n    var digits_base_power_neg_22\
    \ = digits_base_power - 1\n    var digits_base_power_neg_23 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_24 = digits_base_power - 1\n    var digits_base_power_neg_25\
    \ = digits_base_power - 1\n    var digits_base_power_neg_26 = digits_base_power\
    \ - 1\n    var digits_base_power_neg_27 = digits_base_power - 1\n    var digits_base_power_neg_28\
    \ = digits_base_power - 1\n    var digits_base_power_neg_29 = digits_base_power\
    \ - 1\n    var digits_base_power_", "    let bases = Array(1...base)\n    let\
    \ basesString = bases.map { String($0) }\n    let basesString = basesString.joined(separator:\
    \ \"\")\n    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = basesString.dropFirst()\n\
    \    let basesString = basesString.dropLast()\n    let basesString = ", "    var\
    \ result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n  \
    \      result = String(remainder) + result\n        remainder = x % base\n   \
    \     x /= base\n    }\n    return String(result)", "    let baseNum = pow(base,\
    \ Int(log10(abs(x))))\n    let result = String(x)\n    if baseNum > 0 {\n    \
    \    let remainder = x % baseNum\n        result = String(remainder) + result\n\
    \    }\n    return result", "    if base < 2 {\n        return String(x)\n   \
    \ }\n    var result = \"\"\n    var remainder = x\n    var quotient = base\n \
    \   while quotient > 0 {\n        remainder, remainder = divmod(remainder, base)\n\
    \        result = String(quotient) + result\n        quotient = remainder\n  \
    \  }\n    if remainder > 0 {\n        result = String(quotient) + result\n   \
    \ }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    if base == 10 {\n  \
    \      result = String(result)\n    }\n    return result", "    let bases = [\"\
    \", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = x.toInt().toString(base: baseIndex)\n\
    \    return result", "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n\
    \    let digits_base2 = digits_base * base\n    let digits_base3 = digits_base2\
    \ * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5 = digits_base4\
    \ * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7 = digits_base6\
    \ * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9 = digits_base8\
    \ * base\n    let digits_base10 = digits_base9 * base\n    let digits_base11 =\
    \ digits_base10 * base\n    let digits_base12 = digits_base11 * base\n    let\
    \ digits_base13 = digits_base12 * base\n    let digits_base14 = digits_base13\
    \ * base\n    let digits_base15 = digits_base14 * base\n    let digits_base16\
    \ = digits_base15 * base\n    let digits_base17 = digits_base16 * base\n    let\
    \ digits_base18 = digits_base17 * base\n    let digits_base19 = digits_base18\
    \ * base\n    let digits_base20 = digits_base19 * base\n    let digits_base21\
    \ = digits_base20 * base\n    let digits_base22 = digits_base21 * base\n    let\
    \ digits_base23 = digits_base22 * base\n    let digits_base24 = digits_base23\
    \ * base\n    let digits_base25 = digits_base24 * base\n    let digits_base26\
    \ = digits_base25 * base\n    let digits_base27 = digits_base26 * base\n    let\
    \ digits_base28 = digits_base27 * base\n    let digits_base29 = digits_base28\
    \ * base\n    let digits_base30 = digits_base29 * base\n    let digits_base31\
    \ = digits_base30 * base\n    let digits_base32 = digits_base31 * base\n    let\
    \ digits_base33 = digits_base32 * base\n    let digits_base34 = digits_base33\
    \ * base\n    let digits_base35 = digits_base34 * base\n    let digits_base36\
    \ = digits_base35 * base\n    let digits_base37 = digits_base36 * base\n    let\
    \ digits_base38 = digits_base37 * base\n    let digits_base39 = digits_base38\
    \ * base\n    let digits_base40 = digits_base39 * base\n    let digits_base41\
    \ = ", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"\
    , \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = String(x)\n\
    \    if baseIndex < 0 {\n        return String(Int(result) % (baseIndex * base))\n\
    \    } else {\n        return String(Int(result) / baseIndex)\n    }", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = String(format: \"%0\" + String(x.truncatingRemainder(dividingBy:\
    \ base)) + \"d\", x)\n    return baseString + result", "    let baseString = String(base)\n\
    \    let baseStringLength = baseString.count\n    let xString = String(x)\n  \
    \  let xStringLength = xString.count\n    if xStringLength > baseStringLength\
    \ {\n        return xString\n    }\n    if xStringLength < baseStringLength {\n\
    \        return baseString\n    }\n    var result = \"\"\n    for i in 0..<baseStringLength\
    \ {\n        let index = baseString.index(baseString[i], offsetBy: xStringLength)\n\
    \        if index == nil {\n            return \"\"\n        }\n        let digit\
    \ = Int(xString[index!])\n        let newDigit = digit * base\n        let newDigitString\
    \ = String(newDigit)\n        result += newDigitString\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder = remainder % quotient\n        result = String(quotient)\
    \ + result\n        quotient = quotient / base\n    }\n    if remainder > 0 {\n\
    \        result = String(remainder) + result\n    }\n    return result", "   \
    \ var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let bases = [\n   \
    \     \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n\
    \        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\"\
    ,\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"\
    e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n       \
    \ \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n   \
    \     \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n\
    \        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\"\
    ,\n        \"y\",\n        \"z\",\n    ]\n    let basesReversed = bases.reversed()\n\
    \    let basesReversedCount = basesReversed.count\n    let basesReversedIndex\
    \ = basesReversed.index(of: base)\n    let basesReversedIndex2 = basesReversedIndex!\
    \ - 1\n    let basesReversedIndex3 = basesReversedIndex2! - 1\n    let basesReversedIndex4\
    \ = basesReversedIndex3! - 1\n    let basesReversedIndex5 = basesReversedIndex4!\
    \ - 1\n    let basesReversedIndex6 = basesReversedIndex5! - 1\n    let basesReversedIndex7\
    \ = basesReversedIndex6! - 1\n    let basesReversedIndex8 = basesReversedIndex7!\
    \ - 1\n    let basesReversedIndex9 = basesReversedIndex8! - 1\n    let basesReversedIndex10\
    \ = basesReversedIndex9! - 1\n    let basesReversedIndex11 = basesReversedIndex10!\
    \ - 1\n    let basesReversedIndex12 = basesReversedIndex11! - 1\n    let basesReversedIndex13\
    \ = basesReversedIndex12! - 1\n    let basesReversedIndex14 = basesReversedIndex13!\
    \ - 1\n    let basesReversedIndex15 = basesReversedIndex14! - 1\n    let basesReversedIndex16\
    \ = basesReversedIndex15! - 1\n    let basesReversedIndex17 = basesReversedIndex16!\
    \ - 1\n    let basesReversedIndex18 = basesReversedIndex17! - 1\n    let basesReversedIndex19\
    \ = basesReversedIndex18! - 1\n    let basesReversedIndex20 = basesReversedIndex19!\
    \ - 1\n    let basesReversedIndex21 = basesReversedIndex20! - 1\n    let basesReversedIndex22\
    \ = basesReversedIndex21! - 1\n", "    let baseDigits = String(base)\n    var\
    \ result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / base, digit\n        digit\
    \ = digit * base\n        result = String(digit) + result\n    }\n    return result",
  "    let baseString = String(base)\n    let baseInt = Int(baseString)\n    let x\
    \ = Int(x)\n    let result = Int(x) / baseInt\n    return String(result)", " \
    \   let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"\
    ]\n    let baseIndex = bases.index(base)!\n    let x = x.toInt()\n    let result\
    \ = String(x)\n    if x < 0 {\n        let negative = String(-x)\n        result\
    \ = negative + result\n    }\n    if baseIndex < result.count {\n        return\
    \ result + bases[baseIndex]\n    }\n    return result", "    let baseDigits =\
    \ base.digits\n    var result = \"\"\n    var remainder = x\n    var digit = 0\n\
    \    while remainder > 0 {\n        remainder, remainder = remainder / baseDigits[digit],\
    \ remainder % baseDigits[digit]\n        digit = digit + 1\n    }\n    while digit\
    \ > 0 {\n        result = baseDigits[digit] + result\n        digit = digit -\
    \ 1\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"\
    T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n   \
    \ let result = String(Int(x) / Int(base))\n    if result < 10 {\n        return\
    \ String(result)\n    }\n    return change_base(result: result, base: baseIndex)",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)!\n    let baseDouble = Double(baseInt)\n  \
    \  let baseFloat = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    var result = \"\"\n    if baseInt\
    \ > 0 {\n        let remainder = baseInt - Int(baseDouble)\n        let remainderString\
    \ = String(remainder)\n        let remainderInt = Int(remainderString)\n     \
    \   let remainderDouble = Double(remainderInt)\n        let remainderFloat = Float(remainderDouble)\n\
    \        result = remainderString + baseString\n    } else {\n        let remainder\
    \ = Int(baseDouble) - baseInt\n        let remainderString = String(remainder)\n\
    \        let remainderInt = Int(remainderString)\n        let remainderDouble\
    \ = Double(remainderInt)\n        let remainderFloat = Float(remainderDouble)\n\
    \        result = baseString + remainderString\n    }\n    if baseFloat > 0 {\n\
    \        let remainder = baseFloat - Int(baseDouble)\n        let remainderString\
    \ = String(remainder)\n        let remainderInt = Int(remainderString)\n     \
    \   let remainderDouble = Double(remainderInt)\n        let remainderFloat = Float(remainderDouble)\n\
    \        result = remainderString + result\n    }\n    return result", "    let\
    \ baseString = String(base)\n    var result = \"\"\n    var remainder = x\n  \
    \  var digit = 0\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / base, digit\n        digit = digit * base\n        result = String(digit)\
    \ + result\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(x)\n    if baseIndex\
    \ < 0 {\n        return String(Int(result) / Int(base))\n    }\n    if baseIndex\
    \ > 0 {\n        return String(Int(result) % Int(base))\n    }\n    return result",
  "    let bases = StringBuffer(base).reversed()\n    let digits = StringBuffer(String(x.toInt())).reversed()\n\
    \    var result = \"\"\n    for _ in 0..<bases.count {\n        let digit = digits.reversed()\n\
    \        let digitBase = digits[digits.startIndex]\n        let digitBaseIndex\
    \ = digits.startIndex\n        let digitBaseDigit = digits[digitBaseIndex]\n \
    \       let digitBaseDigitIndex = digits.startIndex\n        let digitBaseDigitValue\
    \ = digits[digitBaseDigitIndex]\n        let digitBaseDigitValueIndex = digits.startIndex\n\
    \        let digitBaseDigitValueValue = digits[digitBaseDigitValueIndex]\n   \
    \     let digitBaseDigitValueValueIndex = digits.startIndex\n        let digitBaseDigitValueValueValue\
    \ = digits[digitBaseDigitValueValueIndex]\n        let digitBaseDigitValueValueValueIndex\
    \ = digits.startIndex\n        let digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValueIndex = digits.startIndex\n        let\
    \ digitBaseDigitValueValueValueValue = digits[digitBaseDigitValueValueValueIndex]\n\
    \        let digitBaseDigitValueValueValue", "    let baseString = String(base)\n\
    \    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    var result\
    \ = \"\"\n    var remainder = Int(x)\n    while remainder > 0 {\n        let remainderInt\
    \ = remainder\n        remainder = remainder - Int(baseInt)\n        result =\
    \ String(remainderInt) + result\n    }\n    if remainder > 0 {\n        result\
    \ = String(remainder) + result\n    }\n    if baseDouble > 0 {\n        result\
    \ = String(Int(Double(x))) + result\n    }\n    if baseFloat > 0 {\n        result\
    \ = String(Int(Float(x))) + result\n    }\n    if baseString == \"10\" {\n   \
    \     result = \"0\"\n    }\n    return result", "    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let baseStr = String(base)\n    let baseInt = Int(baseStr)\n\
    \    let baseDouble = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat\
    \ = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n\
    \    let baseFloat = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n    let baseInt =\
    \ Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat\
    \ = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n\
    \    let baseFloat = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n    let baseInt =\
    \ Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat\
    \ = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n\
    \    let baseFloat = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n    let baseInt =\
    \ Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat\
    \ = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n\
    \    let baseFloat = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n    let baseInt =\
    \ Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n    let baseFloat\
    \ = Float(baseDouble)\n    let baseInt = Int(x)\n    let baseDouble = Double(baseInt)\n\
    \    let ", "    let baseString = String(base)\n    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return result", "    var\
    \ result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n  \
    \      result = String(remainder) + result\n        remainder = x % base\n   \
    \     x /= base\n    }\n    return String(result)", "    var result = \"\"\n \
    \   var remainder = x\n    var remainderBase = base\n    while remainder > 0 {\n\
    \        remainder, remainderBase = remainderBase, remainder\n        result +=\
    \ \"0123456789\"[remainderBase % base]\n    }\n    return result", "    let bases\
    \ = Array(1...base).map { String($0) }\n    let digits = x.toInt()\n    let result\
    \ = digits.toRadixString(base: bases.last!)\n    return String(digits.dropLast())",
  "    let bases = Array(1...base).map { String($0) }\n    let digits = x.toInt()\n\
    \    let result = \"\"\n    for digit in digits {\n        let index = bases.firstIndex(of:\
    \ String(digit))!\n        result = result + bases[index]\n    }\n    return result",
  "    let baseChar = String(base)\n    var result = \"\"\n    var remainder = x\n\
    \    var quotient = 0\n    while remainder > 0 {\n        quotient = remainder\
    \ / base\n        remainder = remainder % base\n        result = String(quotient)\
    \ + baseChar + result\n    }\n    return result", "    var result = \"\"\n   \
    \ var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return result", "    let\
    \ digits = x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2\
    \ = digits_base * base\n    let digits_base3 = digits_base2 * base\n    let digits_base4\
    \ = digits_base3 * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6\
    \ = digits_base5 * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8\
    \ = digits_base7 * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10\
    \ = digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let\
    \ digits_base12 = digits_base11 * base\n    let digits_base13 = digits_base12\
    \ * base\n    let digits_base14 = digits_base13 * base\n    let digits_base15\
    \ = digits_base14 * base\n    let digits_base16 = digits_base15 * base\n    let\
    \ digits_base17 = digits_base16 * base\n    let digits_base18 = digits_base17\
    \ * base\n    let digits_base19 = digits_base18 * base\n    let digits_base20\
    \ = digits_base19 * base\n    let digits_base21 = digits_base20 * base\n    let\
    \ digits_base22 = digits_base21 * base\n    let digits_base23 = digits_base22\
    \ * base\n    let digits_base24 = digits_base23 * base\n    let digits_base25\
    \ = digits_base24 * base\n    let digits_base26 = digits_base25 * base\n    let\
    \ digits_base27 = digits_base26 * base\n    let digits_base28 = digits_base27\
    \ * base\n    let digits_base29 = digits_base28 * base\n    let digits_base30\
    \ = digits_base29 * base\n    let digits_base31 = digits_base30 * base\n    let\
    \ digits_base32 = digits_base31 * base\n    let digits_base33 = digits_base32\
    \ * base\n    let digits_base34 = digits_base33 * base\n    let digits_base35\
    \ = digits_base34 * base\n    let digits_base36 = digits_base35 * base\n    let\
    \ digits_base37 = digits_base36 * base\n    let digits_base38 = digits_base37\
    \ * base\n    let digits_base39 = digits_base38 * base\n    let digits_base40\
    \ = digits_base39 * base\n    let digits_base41 = ", "    let bases = [\"\", \"\
    K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let result = x.toInt().toString(radix: baseIndex)\n    return String(result)",
  "    let digits = x.toInt()\n    let result = \"\"\n    for _ in 0..<base {\n  \
    \      result += String(digits)\n        digits /= base\n    }\n    return result",
  "    let bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    ]\n    return bases[base].prefix(Int(x)).suffix(Int(x))", "    let baseDigit =\
    \ String(base)\n    let baseDigitCount = baseDigit.count\n    let digitCount =\
    \ x.count\n    let digits = Array(repeating: 0, count: digitCount)\n    var remainder:\
    \ Int = 0\n    var remainderDigit: Int = 0\n    var digit: Int = 0\n    var digitString\
    \ = \"\"\n    var digitStringCount = 0\n    var digitStringCountMax = digitStringCount\n\
    \    var digitStringCountMaxDigit = digitStringCountMax\n    var digitStringCountMaxDigitBase\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigit = digitStringCountMax\n\
    \    var digitStringCountMaxDigitBaseDigitBase = digitStringCountMax\n    var\
    \ digitStringCountMaxDigitBaseDigitBaseDigit = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBase\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigitBaseDigitBaseDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digitStringCountMax\n    var digitStringCountMaxDigitBaseDigit", "    let\
    \ bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n\
    \        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\"\
    ,\n        \"9\",\n        \"10\",\n        \"11\",\n        \"12\",\n       \
    \ \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n\
    \        \"18\",\n        \"19\",\n        \"20\",\n        \"21\",\n        \"\
    22\",\n        \"23\",\n        \"24\",\n        \"25\",\n        \"26\",\n  \
    \      \"27\",\n        \"28\",\n        \"29\",\n        \"30\",\n        \"\
    31\"\n    ]\n    let basesCount = bases.count\n    let basesIndex = bases.index(bases.startIndex,\
    \ offsetBy: base)\n    let basesString = bases[basesIndex]\n    let basesStringCount\
    \ = basesString.count\n    let basesStringIndex = basesString.index(basesString.startIndex,\
    \ offsetBy: 1)\n    let basesStringSubstring = basesString[basesStringIndex]\n\
    \    let basesStringSubstringCount = basesStringSubstring.count\n    let basesStringSubstringIndex\
    \ = basesStringSubstring.index(basesStringSubstring.startIndex, offsetBy: 1)\n\
    \    let basesStringSubstringSubstring = basesStringSubstring[basesStringSubstringIndex]\n\
    \    let basesStringSubstringSubstringCount = basesStringSubstringSubstring.count\n\
    \    let basesStringSubstringSubstringIndex = basesStringSubstringSubstring.index(basesStringSubstringSubstring.startIndex,\
    \ offsetBy: 1)\n    let basesStringSubstringSubstringSubstringCount = basesStringSubstringSubstringSubstring.count\n\
    \    let basesStringSubstringSubstringSubstringIndex = basesStringSubstringSubstringSubstring.index(basesStringSubstringSubstringSubstring.startIndex,\
    \ offsetBy: 1)\n    let basesStringSubstringSubstringSubstringSubstringCount =\
    \ basesStringSubstringSubstringSubstringSubstring.count\n    let basesStringSubstringSubstringSubstringSubstringIndex\
    \ = basesStringSubstringSubstringSubstringSubstring.index(basesStringSubstringSubstringSubstringSubstring.startIndex,\
    \ offsetBy: 1)\n    let basesStringSubstringSubstringSubstringSubstringCount =\
    \ basesStringSubstringSubstringSubstringSubstringSubstring.count\n    let basesStringSubstringSubstringSubstringSubstringIndex\
    \ = basesStringSubstringSubstringSubstringSubstringSubstring.index(basesStringSubstringSubstringSubstringSubstringSubstring.startIndex,\
    \ offsetBy: 1)\n", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\",\
    \ \"5\", \"6\", \"7\", \"8\", \"9\"]\n    let baseIndex = bases.firstIndex(of:\
    \ base)!\n    let result = String(Int(x) / Int(bases[baseIndex]))\n    if result\
    \ < 10 {\n        return String(result)\n    } else {\n        return change_base(result:\
    \ result, base: base)\n    }", "    let baseDigits = String(base)\n    let digits\
    \ = String(UInt32(x))\n    var result = \"\"\n    for index in 0..<digits.count\
    \ {\n        let digit = digits[index]\n        if digit == \"0\" {\n        \
    \    result = \"0\"\n        } else if digit == \"1\" {\n            result =\
    \ \"1\"\n        } else if digit == \"2\" {\n            result = \"10\"\n   \
    \     } else if digit == \"3\" {\n            result = \"11\"\n        } else\
    \ if digit == \"4\" {\n            result = \"100\"\n        } else if digit ==\
    \ \"5\" {\n            result = \"101\"\n        } else if digit == \"6\" {\n\
    \            result = \"110\"\n        } else if digit == \"7\" {\n          \
    \  result = \"111\"\n        } else if digit == \"8\" {\n            result =\
    \ \"1000\"\n        } else if digit == \"9\" {\n            result = \"1001\"\n\
    \        } else if digit == \"A\" {\n            result = \"1010\"\n        }\
    \ else if digit == \"B\" {\n            result = \"1011\"\n        } else if digit\
    \ == \"C\" {\n            result = \"1110\"\n        } else if digit == \"D\"\
    \ {\n            result = \"1111\"\n        } else if digit == \"E\" {\n     \
    \       result = \"1000\"\n        } else if digit == \"F\" {\n            result\
    \ = \"1001\"\n        } else if digit == \"G\" {\n            result = \"1010\"\
    \n        } else if digit == \"H\" {\n            result = \"1011\"\n        }\
    \ else if digit == \"I\" {\n            result = \"1110\"\n        } else if digit\
    \ == \"J\" {\n            result = \"1111\"\n        } else if digit == \"K\"\
    \ {\n            result = \"1000\"\n        } else if digit == \"L\" {\n     \
    \       result = \"1001\"\n        } else if digit == \"M\" {\n            result\
    \ = \"1010\"\n        } else if digit == \"N\" {\n            result = \"1011\"\
    \n        } else if digit == \"O\" {\n            result = \"1110\"\n        }\
    \ else if digit == \"P\" {\n            result = \"1111\"\n        } else if digit\
    \ == \"Q\" {\n            result = \"1000\"\n        } else if digit == \"R\"\
    \ {\n            result = \"1001\"\n        } else if digit == \"S\" {\n     \
    \       result = \"1010\"\n        } else if digit == \"T\" {\n            result\
    \ = \"1011\"\n        } else if digit == \"U\" {\n            result = \"1110\"\
    \n        } else if digit == \"V\" {\n            result = \"1111\"\n        }\
    \ else if digit == \"W\" {\n            result = \"1000\"\n        } else if digit\
    \ == \"X\" {\n            result = \"1001\"\n        } else if digit == \"", " \
    \   let bases = Array(1...base).map { String($0) }\n    var result = \"\"\n  \
    \  var remainder = x % base\n    while remainder != 0 {\n        result = bases[remainder]\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ result", "    if base < 10 {\n        return String(format: \"%0\" + String(base)\
    \ + \"d\", x)\n    } else {\n        return String(format: \"%0\" + String(10\
    \ - base) + \"d\", x)\n    }", "    let bases = [\"\", \"K\", \"M\", \"B\", \"\
    T\", \"Qa\", \"Qi\", \"Qo\", \"Qu\", \"Sa\", \"Se\", \"So\", \"Za\", \"Zi\", \"\
    Zo\", \"Zu\", \"N\", \"U\", \"V\", \"X\", \"C\", \"D\", \"E\", \"F\", \"G\", \"\
    H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"\
    S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n \
    \   let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    var baseString = \"\"\n    if\
    \ baseDouble < 1.0 {\n        baseString = String(Int(baseDouble))\n    } else\
    \ {\n        baseString = String(Int(baseFloat))\n    }\n    if baseInt > 0 {\n\
    \        return baseString + String(Int(x))\n    } else {\n        return baseString\
    \ + String(Int(x)) + String(Int(baseInt))\n    }", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    var remainder = x\n    for digit in baseDigits {\n\
    \        if remainder >= base {\n            result += \"0\"\n            remainder\
    \ -= base\n        } else {\n            result += \"1\"\n            remainder\
    \ -= digit\n        }\n    }\n    return result + String(remainder)", "    let\
    \ bases = [\"\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    ]\n    if base < 0 || base > len(bases) {\n        throw Errors.InvalidParameter(\n\
    \            \"Invalid base \\(base). Valid bases are \\(0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, \\\n            11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100).\")\n    }\n    return String(format: \"%0\" + String(base) + \"d\"\
    , x)", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"\
    , \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = String(Int(x)\
    \ / Int(base))\n    return String(Int(result) * Int(base))", "    let digits =\
    \ x.toInt()\n    let digits_base = digits.toInt()\n    let digits_base2 = digits_base\
    \ * base\n    let digits_base3 = digits_base2 * base\n    let digits_base4 = digits_base3\
    \ * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6 = digits_base5\
    \ * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8 = digits_base7\
    \ * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10 =\
    \ digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let digits_base12\
    \ = digits_base11 * base\n    let digits_base13 = digits_base12 * base\n    let\
    \ digits_base14 = digits_base13 * base\n    let digits_base15 = digits_base14\
    \ * base\n    let digits_base16 = digits_base15 * base\n    let digits_base17\
    \ = digits_base16 * base\n    let digits_base18 = digits_base17 * base\n    let\
    \ digits_base19 = digits_base18 * base\n    let digits_base20 = digits_base19\
    \ * base\n    let digits_base21 = digits_base20 * base\n    let digits_base22\
    \ = digits_base21 * base\n    let digits_base23 = digits_base22 * base\n    let\
    \ digits_base24 = digits_base23 * base\n    let digits_base25 = digits_base24\
    \ * base\n    let digits_base26 = digits_base25 * base\n    let digits_base27\
    \ = digits_base26 * base\n    let digits_base28 = digits_base27 * base\n    let\
    \ digits_base29 = digits_base28 * base\n    let digits_base30 = digits_base29\
    \ * base\n    let digits_base31 = digits_base30 * base\n    let digits_base32\
    \ = digits_base31 * base\n    let digits_base33 = digits_base32 * base\n    let\
    \ digits_base34 = digits_base33 * base\n    let digits_base35 = digits_base34\
    \ * base\n    let digits_base36 = digits_base35 * base\n    let digits_base37\
    \ = digits_base36 * base\n    let digits_base38 = digits_base37 * base\n    let\
    \ digits_base39 = digits_base38 * base\n    let digits_base40 = digits_base39\
    \ * base\n    let digits_base41 = ", "    var result = \"\"\n    var remainder\
    \ = x\n    var quotient = base\n    while quotient > 0 {\n        remainder =\
    \ remainder % quotient\n        result = String(quotient) + result\n        quotient\
    \ = quotient / base\n    }\n    if remainder > 0 {\n        result = String(remainder)\
    \ + result\n    }\n    return result", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    var remainder = x % base\n    while remainder > 0\
    \ {\n        result = String(remainder) + result\n        remainder = remainder\
    \ / base\n    }\n    if remainder > 0 {\n        result = String(remainder) +\
    \ result\n    }\n    if baseDigits.count > 0 {\n        result = baseDigits.first\
    \ + result\n    }\n    return result", "    if base < 10 {\n        return String(format:\
    \ \"%0\" + String(base) + \"d\", x)\n    }\n    return String(format: \"%0\" +\
    \ String(base) + \"x\", x)", "    let base10 = 10\n    let base16 = 16\n    let\
    \ base2  = 2\n    let base8  = 8\n    let base10_to_base16 = [\n        \"\",\n\
    \        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n      \
    \  \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\"\
    ,\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n\
    \        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\"\
    ,\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\"\
    ,\n        \"000000000000000000\",\n        \"0000000000000000000\",\n       \
    \ \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\"\
    ,\n        \"00000000000000000000000\",\n        \"000000000000000000000000\"\
    ,\n        \"0000000000000000000000000\",\n        \"00000000000000000000000000\"\
    ,\n        \"000000000000000000000000000\",\n        \"0000000000000000000000000000\"\
    ,\n        \"00000000000000000000000000000\",\n        \"000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000\",\n        \"0000000000000000000000000000000\"\
    ,\n        \"0000000000000000000000000000000", "    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let baseDigits = baseDigits(base)\n    var result = \"\
    \"\n    var remainder = x\n    for digit in baseDigits {\n        if remainder\
    \ < 0 {\n            result += String(remainder)\n            remainder = 0\n\
    \        } else {\n            result += String(digit)\n            remainder\
    \ -= digit\n        }\n    }\n    if remainder > 0 {\n        result += String(remainder)\n\
    \    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\"\
    , \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let\
    \ result = String(x)\n    if result.characters.count > baseIndex {\n        let\
    \ remainder = result.characters.count % baseIndex\n        let remainderBase =\
    \ bases[remainder]\n        let remainderBaseIndex = bases.index(remainderBase)!\n\
    \        let remainderBaseCount = remainderBaseIndex - remainder\n        let\
    \ remainderBaseString = String(remainder)\n        let remainderBaseStringCount\
    \ = remainderBaseString.characters.count\n        let remainderBaseStringIndex\
    \ = remainderBaseString.characters.index(\n            remainderBaseStringCount,\n\
    \            offsetBy: remainderBaseStringCount - remainder\n        )!\n    \
    \    let remainderBaseStringCount = remainderBaseString.characters.count\n   \
    \     let remainderBaseStringIndex = remainderBaseString.characters.index(\n \
    \           remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.characters.count\n\
    \        let remainderBaseStringIndex = remainderBaseString.characters.index(\n\
    \            remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.characters.count\n\
    \        let remainderBaseStringIndex = remainderBaseString.characters.index(\n\
    \            remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.characters.count\n\
    \        let remainderBaseStringIndex = remainderBaseString.characters.index(\n\
    \            remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.characters.count\n\
    \        let remainderBaseStringIndex = remainderBaseString.characters.index(\n\
    \            remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.characters.count\n\
    \        let remainderBaseStringIndex = remainderBaseString.characters.index(\n\
    \            remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.characters.count\n\
    \        let remainderBaseStringIndex = remainderBaseString.characters.index(\n\
    \            remainderBaseStringCount,\n            offsetBy: remainderBaseStringCount\
    \ - remainder\n        )!\n        let remainderBaseStringCount = remainderBaseString.",
  "    var result = \"\"\n    var remainder = x\n    var divisor = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / divisor, base\n\
    \        divisor *= base\n    }\n    while divisor > 0 {\n        result = (result\
    \ + String(divisor)) + String(remainder)\n        remainder, remainder = remainder\
    \ / divisor, base\n        divisor *= base\n    }\n    return result", "    let\
    \ bases = Array(1...base)\n    let digits = x.toString(base).components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let result = \"\"\n    for digit in\
    \ digits {\n        let index = bases.index(of: digit)!\n        result += String(digit)\n\
    \    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\"\
    , \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let\
    \ result = String(Int(x) / Int(base))\n    if result < 10 {\n        return String(result)\n\
    \    }\n    return change_base(Int(result), baseIndex) + bases[baseIndex]", " \
    \   let baseDigits = String(base)\n    var result = \"\"\n    var remainder =\
    \ x\n    var digit = 0\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / base, digit\n        digit = digit * 10 + remainder\n    }\n \
    \   while digit > 0 {\n        result = String(digit) + result\n        digit\
    \ = digit / 10\n    }\n    return baseDigits + result", "    if base < 2 {\n \
    \       return \"\"\n    }\n    var result = \"\"\n    var remainder = x\n   \
    \ var quotient = base\n    while quotient > 0 {\n        remainder, remainder\
    \ = remainder / base, quotient -= 1\n        result = String(remainder) + result\n\
    \    }\n    if quotient == 0 {\n        result = String(remainder) + result\n\
    \    }\n    return result", "    var result = \"\"\n    var digits = String(x)\n\
    \    var baseDigits = String(base)\n    var baseDigitCount = baseDigits.count\n\
    \    var digitCount = digits.count\n    var remainder = digitCount % baseDigitCount\n\
    \    if remainder == 0 {\n        digits = digits.reversed()\n    }\n    var remainderDigits\
    \ = String(x%base)\n    var remainderDigitCount = remainderDigits.count\n    var\
    \ digitIndex = digitCount\n    while digitIndex < digitCount {\n        var digit\
    \ = digits[digitIndex]\n        var remainderDigit = remainderDigits[digitIndex]\n\
    \        if digit == remainderDigit {\n            digitIndex += 1\n         \
    \   continue\n        }\n        if digit < remainderDigit {\n            result\
    \ += String(digit)\n            digitIndex += 1\n            continue\n      \
    \  }\n        result += String(digit) + String(remainderDigit)\n        digitIndex\
    \ += 1\n    }\n    return result", "    let digits = x.toInt()\n    let digits_base\
    \ = digits.toInt()\n    let digits_base2 = digits_base * base\n    let digits_base3\
    \ = digits_base2 * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5\
    \ = digits_base4 * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7\
    \ = digits_base6 * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9\
    \ = digits_base8 * base\n    let digits_base10 = digits_base9 * base\n    let\
    \ digits_base11 = digits_base10 * base\n    let digits_base12 = digits_base11\
    \ * base\n    let digits_base13 = digits_base12 * base\n    let digits_base14\
    \ = digits_base13 * base\n    let digits_base15 = digits_base14 * base\n    let\
    \ digits_base16 = digits_base15 * base\n    let digits_base17 = digits_base16\
    \ * base\n    let digits_base18 = digits_base17 * base\n    let digits_base19\
    \ = digits_base18 * base\n    let digits_base20 = digits_base19 * base\n    let\
    \ digits_base21 = digits_base20 * base\n    let digits_base22 = digits_base21\
    \ * base\n    let digits_base23 = digits_base22 * base\n    let digits_base24\
    \ = digits_base23 * base\n    let digits_base25 = digits_base24 * base\n    let\
    \ digits_base26 = digits_base25 * base\n    let digits_base27 = digits_base26\
    \ * base\n    let digits_base28 = digits_base27 * base\n    let digits_base29\
    \ = digits_base28 * base\n    let digits_base30 = digits_base29 * base\n    let\
    \ digits_base31 = digits_base30 * base\n    let digits_base32 = digits_base31\
    \ * base\n    let digits_base33 = digits_base32 * base\n    let digits_base34\
    \ = digits_base33 * base\n    let digits_base35 = digits_base34 * base\n    let\
    \ digits_base36 = digits_base35 * base\n    let digits_base37 = digits_base36\
    \ * base\n    let digits_base38 = digits_base37 * base\n    let digits_base39\
    \ = digits_base38 * base\n    let digits_base40 = digits_base39 * base\n    let\
    \ digits_base41 = ", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"\
    , \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result\
    \ = String(Int(x) / Int(base))\n    if Int(result) == 0 {\n        return \"\"\
    \n    }\n    return String(Int(result) * Int(baseIndex))", "    let bases = [\"\
    \", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let baseString = bases[baseIndex]\n    let result\
    \ = x.toString(base: baseIndex)\n    return String(result.reversed())", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n\
    \    if result < 10 {\n        return String(result)\n    } else {\n        return\
    \ String(result) + bases[baseIndex]\n    }", "    let bases = [\"\", \"K\", \"\
    M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let result = String(format: \"%0*d\"\
    , Int(x.truncatingRemainder(dividingBy: pow(10, Double(baseIndex)))), Int(x))\n\
    \    return baseString + result", "    let baseNum = pow(base, Int(log10(x)))\
    \ + 1\n    let result = String(x)\n    if baseNum > 0 {\n        let remainder\
    \ = x % baseNum\n        result = String(remainder) + result\n    }\n    return\
    \ result", "    let digits = x.digits\n    let baseDigits = base.digits\n    var\
    \ result = \"\"\n    for digit in digits {\n        let index = digits.index(of:\
    \ digit)\n        let newDigit = baseDigits[index]\n        result += String(newDigit)\n\
    \    }\n    return result", "    let bases = [\n        \"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\",\n        \"16\", \"17\", \"18\", \"19\", \"20\", \"\
    21\", \"22\", \"23\",\n        \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"\n    ]\n    let baseIndex = bases.index(base)!\n    let baseString\
    \ = bases[baseIndex]\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n", "    var\
    \ result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n  \
    \      result = String(remainder) + result\n        remainder = x % base\n   \
    \     x /= base\n    }\n    if base > 10 {\n        result = String(base) + result\n\
    \    }\n    return result", "    let baseStr = String(base)\n    var result =\
    \ \"\"\n    var remainder = x\n    var quotient = 0\n    while remainder > 0 {\n\
    \        quotient = remainder / base\n        remainder = remainder % base\n \
    \       result = String(quotient) + baseStr + result\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    var result = \"\"\n\
    \    var remainder = x\n    var divisor = base\n    while remainder > 0 {\n  \
    \      remainder, remainder = remainder / divisor, divisor\n        result +=\
    \ String(divisor)\n    }\n    return result", "    let baseChar = String(base)\n\
    \    let baseChars = baseChar.characters\n    let baseCharsCount = baseChars.count\n\
    \    var result = \"\"\n    var remainder = x\n    var remainderChars = \"\"\n\
    \    while remainder > 0 {\n        let remainderChar = String(remainder % base)\n\
    \        remainderChars.append(remainderChar)\n        remainder = Int(remainder\
    \ / base)\n    }\n    for _ in 0..<baseCharsCount {\n        result = baseChars[baseChars.startIndex.advancedBy(baseCharsCount)]\
    \ + result\n    }\n    for _ in 0..<remainderChars.count {\n        result = remainderChars[remainderChars.startIndex.advancedBy(remainderChars.count)].uppercaseString\
    \ + result\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"\
    G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.firstIndex(of:\
    \ base)!\n    let baseString = bases[baseIndex]\n    let baseInt = Int(baseString)!\n\
    \    let baseInt = Int(x)\n    let baseInt = baseInt * baseInt\n    let baseInt\
    \ = baseInt.truncatingRemainder(dividingBy: baseInt)\n    return String(baseInt)",
  "    if base < 2 {\n        return \"\"\n    }\n    var result = \"\"\n    var remainder\
    \ = x\n    var quotient = base\n    while quotient > 0 {\n        if quotient\
    \ % 2 == 0 {\n            quotient = quotient / 2\n            result = String(quotient)\
    \ + result\n        } else {\n            quotient = quotient / 2\n          \
    \  result = String(quotient) + result\n        }\n    }\n    if remainder != 0\
    \ {\n        result = String(remainder) + result\n    }\n    return result", " \
    \   let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"]\n    let baseIndex = bases.index(base)!\n    let result = String(Int(x)\
    \ / Int(base))\n    return String(Int(result) * Int(base))", "    var result =\
    \ \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(result)", "    let bases = [\"\", \"K\", \"M\", \"G\"\
    , \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let baseInt = Int(baseString)\n  \
    \  let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(", "    let\
    \ digits = x.digits\n    let baseDigits = base.digits\n    var result = \"\"\n\
    \    var i = 0\n    while i < digits {\n        let digit = digits[i]\n      \
    \  let baseDigit = baseDigits[i]\n        if digit < baseDigit {\n           \
    \ result += String(digit + baseDigit - digit)\n        } else {\n            result\
    \ += String(digit - baseDigit)\n        }\n        i += 1\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let digits = x.toString(base:\
    \ base)\n    return digits.reversed()", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    if base\
    \ == 2 {\n        if x < 10 {\n            result = \"0\" + result\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(result)"]
stop_tokens:
- "\n}"
