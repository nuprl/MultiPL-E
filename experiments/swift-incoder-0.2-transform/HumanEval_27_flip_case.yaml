name: HumanEval_27_flip_case
language: swift
prompt: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
  \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
  \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
completions: ['    return string.lowercased() + string.uppercased()', '    return
    string.lowercased() + string.uppercased()', '    return string.lowercased() +
    string.uppercased()', '    return string.lowercased() + string.uppercased()',
  '    return string.uppercased().lowercased()', '    return string.lowercaseString.uppercaseString',
  "    var result = \"\"\n    for c in string.unicodeScalars {\n        switch c {\n\
    \        case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        default:\n            result += c\n\
    \        }\n    }\n    return result", '    return string.lowercased() + string.uppercased()',
  "    var result = \"\"\n    for char in string.unicodeScalars {\n        switch\
    \ char {\n        case .lowercase:\n            result += .uppercase\n       \
    \ case .uppercase:\n            result += .lowercase\n        }\n    }\n    return\
    \ result", '    return string.lowercased() + string.uppercased()', '    return
    string.lowercased() + string.uppercased()', '    return string.lowercased() +
    string.uppercased()', "    return string.characters.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n        .joined()", '    return string.lowercased() + string.uppercased()',
  "    var result = \"\"\n    for c in string.unicodeScalars {\n        switch c {\n\
    \        case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        default:\n            result += c\n\
    \        }\n    }\n    return result", '    return string.lowercased() + string.uppercased()',
  '    return string.lowercased() + string.uppercased()', "    var result = \"\"\n\
    \    for c in string.unicodeScalars {\n        switch c {\n        case .lowercase:\n\
    \            result += .uppercase\n        case .uppercase:\n            result\
    \ += .lowercase\n        }\n    }\n    return result", '    return string.characters.map
    { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', "    var result = \"\"\
    \n    for c in string.unicodeScalars {\n        if c.isUppercase {\n         \
    \   result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
