name: HumanEval_54_same_chars
language: swift
prompt: "\n/// Check if two words have the same characters.\n/// >>> same_chars(s0:\
  \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0: \"\
  abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\", s1:\
  \ \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\")\n///\
  \ false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n/// >>>\
  \ same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\nfunc same_chars(s0:\
  \ String, s1: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
  ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
  \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"\
  dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") ==\
  \ false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\n\
  assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
completions: ["    if s0.count != s1.count {\n        return false\n    }\n    for\
    \ i := 0; i < s0.count; i++ {\n        if s0[i] != s1[i] {\n            return\
    \ false\n        }\n    }\n    return true", "\ts0 += s0\n\ts1 += s1\n\treturn\
    \ s0.chars() == s1.chars()", "    if s0.count != s1.count {\n        return false\n\
    \    }\n    for i := 0; i < s0.count; i++ {\n        if s0[i] != s1[i] {\n   \
    \         return false\n        }\n    }\n    return true", "    if s0.count !=\
    \ s1.count {\n        return false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0,\
    \ s1) {\n        if c0 != c1 {\n            return false\n        }\n        i\
    \ += 1\n    }\n    return i == s0.count", "    if s0.count != s1.count {\n   \
    \     return false\n    }\n    var i = 0\n    for c0 := s0.first; c0 != nil; c0\
    \ = c0.next {\n        if c0.char != s1.first[i].char {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true", "    if s0.count != s1.count\
    \ {\n        return false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0,\
    \ s1) {\n        if c0 != c1 {\n            return false\n        }\n        i\
    \ += 1\n    }\n    return i == s0.count", "    if s0.count != s1.count {\n   \
    \     return false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1)\
    \ {\n        if c0 != c1 {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return i == s0.count", "\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\t\n\tfor i in 0..<min(s0.count,\
    \ s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\
    \treturn true", "\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\tlet n0 = s0.count\n\
    \tlet n1 = s1.count\n\t\n\tif n0 != n1 {\n\t\treturn false\n\t}\n\t\n\tfor i in\
    \ 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn\
    \ true", "    if s0.count != s1.count {\n        return false\n    }\n    var\
    \ i = 0\n    for c0, c1 in zipString(s0, s1) {\n        if c0 != c1 {\n      \
    \      return false\n        }\n        i += 1\n    }\n    return i == s0.count",
  "    var i = 0\n    var j = 0\n    var k = 0\n    var n = 0\n    var sameChars =\
    \ true\n    var s1Len = s1.count\n\n    while i < s1Len {\n        if s0[i] ==\
    \ s1[j] {\n            i += 1\n            j += 1\n            k += 1\n      \
    \  } else {\n            n += 1\n            if n == s1Len {\n               \
    \ sameChars = false\n                break\n            }\n        }\n    }\n\n\
    \    return sameChars", "\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\t\n\t\
    let n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 != n1 {\n\t\treturn false\n\
    \t}\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\t\n\treturn true", "    if s0.count != s1.count {\n        return false\n\
    \    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true",
  "    if s0.count != s1.count {\n        return false\n    }\n    for i := 0; i <\
    \ s0.count; i++ {\n        if s0[i] != s1[i] {\n            return false\n   \
    \     }\n    }\n    return true", "    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for i := 0; i < s0.count; i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true", "\ts0 = s0.lowercased()\n\
    \ts1 = s1.lowercased()\n\t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\
    \tif len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet chars0\
    \ = Array(s0)\n\tlet chars1 = Array(s1)\n\t\n\tlet sameChars = chars0.count ==\
    \ chars1.count\n\t\n\tfor i in 0..<min(len0, len1) {\n\t\tif chars0[i] != chars1[i]\
    \ {\n\t\t\tsameChars = false\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\treturn sameChars",
  "    if s0.count != s1.count {\n        return false\n    }\n    var i = 0\n   \
    \ for c0, c1 in zipString(s0, s1) {\n        if c0 != c1 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return i == s0.count", "    if\
    \ s0.count != s1.count {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s0.count {\n        if s0[i] != s1[i] {\n            return false\n    \
    \    }\n        i += 1\n    }\n    return true", "\ts0 = s0.lowercased()\n\ts1\
    \ = s1.lowercased()\n\t\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\t\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\
    \tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true", "\t\
    s0 += \"\"\n\ts1 += \"\"\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\tlet\
    \ len0 = s0.count\n\tlet len1 = s1.count\n\tif len0 != len1 {\n\t\treturn false\n\
    \t}\n\tlet i0 = 0\n\tlet i1 = 0\n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0]\
    \ != s1[i1] {\n\t\t\treturn false\n\t\t}\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\treturn\
    \ true"]
stop_tokens:
- "\n}"
