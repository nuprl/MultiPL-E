name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
  \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"\
  tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    var result = \"\"\n    for letter in message {\n        let index\
    \ = alphabet.index(of: letter)!\n        let replacement = alphabet[index + 2]\n\
    \        result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in message\
    \ {\n        let index = alphabet.index(of: letter)\n        let replacement =\
    \ alphabet[index + 2]\n        result += String(letter).uppercased() + replacement\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in message\
    \ {\n        switch letter {\n        case \"a\":\n            result += \"A\"\
    \n        case \"e\":\n            result += \"E\"\n        case \"i\":\n    \
    \        result += \"I\"\n        case \"o\":\n            result += \"O\"\n \
    \       case \"u\":\n            result += \"U\"\n        default:\n         \
    \   result += letter\n        }\n    }\n    for vowel in \"aeiou\" {\n       \
    \ let index = result.index(of: vowel)\n        let letter = result[index! + 2]\n\
    \        result = result.replacingOccurrences(of: vowel, with: letter)\n    }\n\
    \    return result", "    var result = \"\"\n    for letter in message {\n   \
    \     if letter.isUpper() {\n            result += letter.lowercased()\n     \
    \   } else {\n            result += letter.uppercased()\n        }\n    }\n  \
    \  for letter in result {\n        if letter.isUpper() {\n            if let index\
    \ = result.index(of: letter) {\n                let vowel = result[index + 1]\n\
    \                let vowelIndex = result.index(of: vowel)\n                result[index]\
    \ = vowel\n                result[vowelIndex] = letter\n            }\n      \
    \  }\n    }\n    return result", "    var result = \"\"\n    for letter in message\
    \ {\n        let index = alphabet.index(of: letter)!\n        let replacement\
    \ = alphabet[(index + 1)..<alphabet.count]\n        result += alphabet[alphabet.index(of:\
    \ replacement)!]\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        let index = english.index(of: letter)\n        let nextIndex\
    \ = index + 2\n        if nextIndex < english.count {\n            let nextLetter\
    \ = english[nextIndex]\n            result += String(letter).uppercased() + String(nextLetter).lowercased()\n\
    \        } else {\n            result += String(letter).uppercased()\n       \
    \ }\n    }\n    return result", "    var result = \"\"\n    for letter in message\
    \ {\n        let index = english.index(of: letter)\n        let nextIndex = english.index(of:\
    \ letter, offsetBy: index + 1)\n        if index != nil && nextIndex != nil {\n\
    \            let replacement = english[index!].uppercased() + english[nextIndex!].lowercased()\n\
    \            result += replacement\n        } else {\n            result += letter\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        switch letter {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"B\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        switch letter {\n        case \"a\":\n            result\
    \ = \"t\"\n        case \"e\":\n            result = \"h\"\n        case \"i\"\
    :\n            result = \"k\"\n        case \"o\":\n            result = \"g\"\
    \n        case \"u\":\n            result = \"s\"\n        default:\n        \
    \    result = letter\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for letter in message {\n        let index = alphabet.index(of: letter)\n\
    \        let replacement = alphabet[(index! + 2) % alphabet.count]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result", "    var result = \"\"\n    for letter in message {\n   \
    \     if letter.isUpper() {\n            result += letter.lowercased()\n     \
    \   } else {\n            result += letter.uppercased()\n        }\n    }\n  \
    \  for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of: vowel)\n\
    \        let replacement = result.index(index, offsetBy: 2)\n        let replacementLetter\
    \ = result[index].lowercased()\n        result = result.substring(to: replacement)\n\
    \        result += replacementLetter\n    }\n    return result", "    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result", "    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        let index = alphabet.index(of: letter)!\n        let replacement\
    \ = alphabet[(index + 1) % alphabet.count]\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n    }\n    return result", "    var result = \"\"\
    \n    for char in message {\n        let index = english.index(of: char)\n   \
    \     let nextIndex = english.index(of: char, offsetBy: index + 1)\n        if\
    \ nextIndex == nil {\n            result += english[english.index(of: char)]\n\
    \        } else {\n            result += english[nextIndex!]\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    for letter in message {\n   \
    \     if letter.isUpper() {\n            result += letter.lowercased()\n     \
    \   } else {\n            result += letter.uppercased()\n        }\n    }\n  \
    \  for letter in result {\n        if letter.isUpper() {\n            result +=\
    \ letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        if letter.isUpper() {\n            result += String(letter).swapCase()\n\
    \        } else {\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        if letter.isLetter() {\n            if let index = result.index(of:\
    \ letter) {\n                if index == result.index(of: \"A\") {\n         \
    \           result += \"B\"\n                } else if index == result.index(of:\
    \ \"E\") {\n                    result += \"F\"\n                } else if index\
    \ == result.index(of: \"I\") {\n                    result += \"J\"\n        \
    \        } else if index == result.index(of: \"O\") {\n                    result\
    \ += \"M\"\n                } else if index == result.index(of: \"U\") {\n   \
    \                 result += \"N\"\n                }\n            }\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in message\
    \ {\n        if letter.isUpper() {\n            result += String(letter).swapCase()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for letter in message {\n        let index\
    \ = alphabet.index(of: letter)\n        if index != nil {\n            let replacement\
    \ = alphabet[index! + 1]\n            result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n        } else {\n            result += String(letter)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        let index = english.index(of: letter)!\n        let replacement\
    \ = english[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result"]
stop_tokens:
- "\n}"
