name: HumanEval_49_modp
language: swift
prompt: "\n/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(n: 3, p:\
  \ 5)\n/// 3\n/// >>> modp(n: 1101, p: 101)\n/// 2\n/// >>> modp(n: 0, p: 101)\n\
  /// 1\n/// >>> modp(n: 3, p: 11)\n/// 8\n/// >>> modp(n: 100, p: 101)\n/// 1\nfunc\
  \ modp(n: Int, p: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101,\
  \ p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\n\
  assert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n:\
  \ 31, p: 5) == 3)"
completions: ["    if n < 0 {\n        return modp(abs(n), p)\n    }\n    if p < 1\
    \ {\n        return modp(n, p)\n    }\n    if p > p {\n        return modp(n,\
    \ p - 1)\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n", "    if n\
    \ < 0 {\n        return modp(abs(n), p)\n    }\n    if p < 1 {\n        return\
    \ modp(n, p - 1)\n    }\n    if p > p {\n        return modp(n, p - p)\n    }\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    if n == 2 {\n        return p + 1\n    }\n    if n == 3 {\n      \
    \  return p + 2\n    }\n    if n == 4 {\n        return p + 3\n    }\n    if n\
    \ == 5 {\n        return p + 4\n    }\n    if n == 6 {\n        return p + 5\n\
    \    }\n    if n == 7 {\n        return p + 6\n    }\n    if n == 8 {\n      \
    \  return p + 7\n    }\n    if n == 9 {\n        return p + 8\n    }\n    if n\
    \ == 10 {\n        return p + 9\n    }\n    if n == 11 {\n        return p + 10\n\
    \    }\n    if n == 12 {\n        return p + 11\n    }\n    if n == 13 {\n   \
    \     return p + 12\n    }\n    if n == 14 {\n        return p + 13\n    }\n \
    \   if n == 15 {\n        return p + 14\n    }\n    if n == 16 {\n        return\
    \ p + 15\n    }\n    if n == 17 {\n        return p + 16\n    }\n    if n == 18\
    \ {\n        return p + 17\n    }\n    if n == 19 {\n        return p + 18\n \
    \   }\n    if n == 20 {\n        return p + 19\n    }\n    if n == 21 {\n    \
    \    return p + 20\n    }\n    if n == 22 {\n        return p + 21\n    }\n  \
    \  if n == 23 {\n        return p + 22\n    }\n    if n == 24 {\n        return\
    \ p + 23\n    }\n    if n == 25 {\n        return p + 24\n    }\n    if n == 26\
    \ {\n        return p + 25\n    }\n    if n == 27 {\n        return p + 26\n \
    \   }\n    if n == 28 {\n        return p + 27\n    }\n    if n == 29 {\n    \
    \    return p + 28\n    }\n    if n == 30 {\n        return p + 29\n    }\n  \
    \  if n == 31 {\n        return p + 30\n    }\n    if n == 32 {\n        return\
    \ p + 31\n    }\n    if n == 33 {\n        return p + 32\n    }\n    if n == 34\
    \ {\n        return p + 33\n    }\n    if n == 35 {\n        return p + 34\n \
    \   }\n    if n == 36 {\n        return p + 35\n    }\n    if n == 37 {\n    \
    \    return p + 36\n    }\n    if n == 38 {\n        return p + 37\n    }\n  \
    \  if n == 39 {\n        return p + 38\n    }\n    if ", "\tif n < 0 {\n\t\tn\
    \ = -n\n\t\tp = -p\n\t}\n\tif p < 1 {\n\t\tpanic(\"p < 1\")\n\t}\n\tif p > p {\n\
    \t\tpanic(\"p > p\")\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\
    \treturn p\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n > p {\n        return modp(n, p)\n  \
    \  }\n    return 0", "\tif n < 0 {\n\t\tpanic(\"modp called with negative n\"\
    )\n\t}\n\tif p < 1 {\n\t\tpanic(\"modp called with p < 1\")\n\t}\n\tif n == 0\
    \ {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn p\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif p < p {\n\t\treturn modp(n - p, p)\n\t}\n\tif p > p {\n\t\t\
    return modp(n, p - 1)\n\t}\n\tq := modp(n - p, p)\n\tif q == p {\n\t\treturn n\n\
    \t}\n\treturn q", "\tif n < 0 {\n\t\tpanic(\"modp expects n >= 0\")\n\t}\n\tif\
    \ p < 1 {\n\t\tpanic(\"modp expects p >= 1\")\n\t}\n\tif n == 0 {\n\t\treturn\
    \ 1\n\t}\n\tif n == 1 {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn 1\n\t}\n\tif n == p {\n\t\treturn 0\n\t}\n\tif n ==\
    \ p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\t\
    return p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\
    \t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif\
    \ n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\
    \t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn\
    \ p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\
    \tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n ==\
    \ p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\t\
    return p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\
    \t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif\
    \ n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\
    \t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn\
    \ p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\
    \tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n ==\
    \ p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\t\
    return p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\
    \t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif\
    \ n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\
    \t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn\
    \ p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n\t}\n\
    \tif n == p {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn p\n", '    return
    n % p', "    if n < 0 {\n        return modp(abs(n), p)\n    }\n    if p < 1 {\n\
    \        return modp(n / p, p)\n    }\n    if p > p {\n        return modp(n /\
    \ p, p)\n    }\n    return n % p", "\tswitch {\n\tcase n < 0:\n\t\treturn modp(abs(n),\
    \ p)\n\tcase n <= p:\n\t\treturn n\n\tcase n >= p - 1:\n\t\treturn p - 1 + modp(n\
    \ - p, p)\n\tdefault:\n\t\treturn modp(n - p, p)\n\t}", "\tif n < 0 {\n\t\tn =\
    \ -n\n\t\tp = -p\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn\
    \ p\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n >= p {\n\t\treturn modp(n -\
    \ p, p)\n\t}\n\treturn modp((p - 1) * (n - p), p)", "\tif n < 0 {\n\t\tpanic(\"\
    modp requires positive n\")\n\t}\n\tif p < 1 {\n\t\tpanic(\"modp requires positive\
    \ p\")\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn p\n\t\
    }\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n\
    \ == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n", "    if n < 0 {\n        return modp(abs(n),\
    \ p)\n    }\n    if p < 1 {\n        return modp(n, p % p)\n    }\n    if p >\
    \ p {\n        return modp(n, p % p)\n    }\n    return n - (n % p)", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if n == p {\n        return n\n    }\n    if n < p {\n        return modp(n\
    \ - p, p)\n    }\n    return modp((p - n) % p, p)", "\tif n < 0 {\n\t\tn = -n\n\
    \t}\n\tif p < 0 {\n\t\tp = -p\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n ==\
    \ 1 {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p+1 {\n\t\
    \treturn n\n\t}\n\tif n == p+2 {\n\t\treturn n\n\t}\n\tif n == p+3 {\n\t\treturn\
    \ n\n\t}\n\tif n == p+4 {\n\t\treturn n\n\t}\n\tif n == p+5 {\n\t\treturn n\n\t\
    }\n\tif n == p+6 {\n\t\treturn n\n\t}\n\tif n == p+7 {\n\t\treturn n\n\t}\n\t\
    if n == p+8 {\n\t\treturn n\n\t}\n\tif n == p+9 {\n\t\treturn n\n\t}\n\tif n ==\
    \ p+10 {\n\t\treturn n\n\t}\n\tif n == p+11 {\n\t\treturn n\n\t}\n\tif n == p+12\
    \ {\n\t\treturn n\n\t}\n\tif n == p+13 {\n\t\treturn n\n\t}\n\tif n == p+14 {\n\
    \t\treturn n\n\t}\n\tif n == p+15 {\n\t\treturn n\n\t}\n\tif n == p+16 {\n\t\t\
    return n\n\t}\n\tif n == p+17 {\n\t\treturn n\n\t}\n\tif n == p+18 {\n\t\treturn\
    \ n\n\t}\n\tif n == p+19 {\n\t\treturn n\n\t}\n\tif n == p+20 {\n\t\treturn n\n\
    \t}\n\tif n == p+21 {\n\t\treturn n\n\t}\n\tif n == p+22 {\n\t\treturn n\n\t}\n\
    \tif n == p+23 {\n\t\treturn n\n\t}\n\tif n == p+24 {\n\t\treturn n\n\t}\n\tif\
    \ n == p+25 {\n\t\treturn n\n\t}\n\tif n == p+26 {\n\t\treturn n\n\t}\n\tif n\
    \ == p+27 {\n\t\treturn n\n\t}\n\tif n == p+28 {\n\t\treturn n\n\t}\n\tif n ==\
    \ p+29 {\n\t\treturn n\n\t}\n\tif n == p+30 {\n\t\treturn n\n\t}\n\tif n == p+31\
    \ {\n\t\treturn n\n\t}\n\tif n == p+32 {\n\t\treturn n\n\t}\n\tif n == p+33 {\n\
    \t\treturn n\n\t}\n\tif n == p+34 {\n\t\treturn n\n\t}\n\tif n == p+35 {\n\t\t\
    return n\n\t}\n\tif n == p+36 {\n\t\treturn n\n\t}\n\tif n == p+37 {\n\t\treturn\
    \ n\n\t}\n\tif n == p+38 {\n\t\treturn n\n\t}\n\tif n == p+39 {\n\t\treturn n\n\
    \t}\n", "\tswitch {\n\tcase n < 0:\n\t\treturn modp(abs(n), p)\n\tcase p < 2:\n\
    \t\treturn 0\n\tcase p < n:\n\t\treturn p - 1\n\tdefault:\n\t\treturn p - (p -\
    \ 1) * ((p - 1) * (p - 2) * (p - 3) * (p - 4) * (p - 5) * (p - 6) * (p - 7) *\
    \ (p - 8) * (p - 9) * (p - 10) * (p - 11) * (p - 12) * (p - 13) * (p - 14) * (p\
    \ - 15) * (p - 16) * (p - 17) * (p - 18) * (p - 19) * (p - 20) * (p - 21) * (p\
    \ - 22) * (p - 23) * (p - 24) * (p - 25) * (p - 26) * (p - 27) * (p - 28) * (p\
    \ - 29) * (p - 30) * (p - 31) * (p - 32) * (p - 33) * (p - 34) * (p - 35) * (p\
    \ - 36) * (p - 37) * (p - 38) * (p - 39) * (p - 40) * (p - 41) * (p - 42) * (p\
    \ - 43) * (p - 44) * (p - 45) * (p - 46) * (p - 47) * (p - 48) * (p - 49) * (p\
    \ - 50) * (p - 51) * (p - 52) * (p - 53) * (p - 54) * (p - 55) * (p - 56) * (p\
    \ - 57) * (p - 58) * (p - 59) * (p - 60) * (p - 61) * (p - 62) * (p - 63) * (p\
    \ - 64) * (p - 65) * (p - 66) * (p - 67) * (p - 68) * (p - 69) * (p - 70) * (p\
    \ - 71) * (p - 72) * (p - 73) * (p - 74) * (p - 75) * (p - 76) * (p - 77) * (p\
    \ - 78) * (p - 79) * (p - 80) * (p - 81) * (p - 82) * (p - 83) * (p - 84) * (p\
    \ - 85) * (p - 86) * (p - 87) * (p - 88) * (p - 89) * (p - 90) * (p - 91) * (p\
    \ - 92) * (p - 93) * (p - 94) * (p - 95) * (p - 96) * (p - 97) * (p - 98) * (p\
    \ - 99) * (p - 100) * (p - 101) * (p - 102) * (p - 103) * (p - 104) * (p - 105)\
    \ * (p - 106) * (p - 107) * (p - 108) * (p - 109) * (p-110) * (p - 111) * (p -\
    \ 112) * (p - 113) * (p - 114) * (p - 115) * (p - 116) * (p - 117) * (p - 118)\
    \ * (p - 119) * (p - 120) * (p - 121) * (p - 122) * (p - 123) * (p - 124) * (p\
    \ - 125) * (p - 126) * (p - 127) * (p - 128) * (p - 129) * (p - 130) * (p - 131)\
    \ * (p - 132) * (p - 133) * (p - 134) * (p - 135) * (p - 136) * (p - 137) * (p\
    \ - 138) * (p - 139) * (p - 140) * (p - 141) * (p - 142) * (p - 143) * (p - 144)\
    \ * (p - 145) * (p - 146) * (p - 147) * (p - 148) * (p - 149) * (", "    if n\
    \ < 0 {\n        return modp(abs(n), p)\n    }\n    if p < 0 {\n        return\
    \ modp(n, abs(p))\n    }\n    if n == 0 {\n        return 0\n    }\n    if p ==\
    \ 0 {\n        return n\n    }\n    if p == 1 {\n        return n\n    }\n   \
    \ if n == 1 {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == p {\n        return p\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == p {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == p {\n        return p", "    if n < 0 {\n    \
    \    return modp(abs(n), p)\n    }\n    if p < 1 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p > p {\n        return modp(n, p - 1)\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if n == 2 {\n        return p + 1\n    }\n    if n == 3 {\n        return p\
    \ + 2\n    }\n    if n == 4 {\n        return p + 3\n    }\n    if n == 5 {\n\
    \        return p + 4\n    }\n    if n == 6 {\n        return p + 5\n    }\n \
    \   if n == 7 {\n        return p + 6\n    }\n    if n == 8 {\n        return\
    \ p + 7\n    }\n    if n == 9 {\n        return p + 8\n    }\n    if n == 10 {\n\
    \        return p + 9\n    }\n    if n == 11 {\n        return p + 10\n    }\n\
    \    if n == 12 {\n        return p + 11\n    }\n    if n == 13 {\n        return\
    \ p + 12\n    }\n    if n == 14 {\n        return p + 13\n    }\n    if n == 15\
    \ {\n        return p + 14\n    }\n    if n == 16 {\n        return p + 15\n \
    \   }\n    if n == 17 {\n        return p + 16\n    }\n    if n == 18 {\n    \
    \    return p + 17\n    }\n    if n == 19 {\n        return p + 18\n    }\n  \
    \  if n == 20 {\n        return p + 19\n    }\n    if n == 21 {\n        return\
    \ p + 20\n    }\n    if n == 22 {\n        return p + 21\n    }\n    if n == 23\
    \ {\n        return p + 22\n    }\n    if n == 24 {\n        return p + 23\n \
    \   }\n    if n == 25 {\n        return p + 24\n    }\n    if n == 26 {\n    \
    \    return p + 25\n    }\n    if n == 27 {\n        return p + 26\n    }\n  \
    \  if n == 28 {\n        return p + 27\n    }\n    if n == 29 {\n        return\
    \ p + 28\n    }\n    if n == 30 {\n        return p + 29\n    }\n    if n == 31\
    \ {\n        return p + 30\n    }\n    if n == 32 {\n        return p + 31\n \
    \   }\n    if n == 33 {\n        return p + 32\n    }\n    if n == 34 {\n    \
    \    return p + 33\n    }\n    if n == 35 {\n        return p + 34\n    }\n  \
    \  if n == 36 {\n        return p + 35\n    }\n    if n == 37 {\n        return\
    \ p + 36\n    }\n    if n == 38 {\n        return p + 37\n    }\n    if n == 39\
    \ {\n        return p + 38\n    }\n    if ", "\tif n < 0 {\n\t\tn = -n\n\t}\n\t\
    if p < 0 {\n\t\tp = -p\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif p == 1 {\n\
    \t\treturn n\n\t}\n\tif p == 2 {\n\t\treturn n + 1\n\t}\n\tif p == 3 {\n\t\treturn\
    \ n * n\n\t}\n\tif p == 4 {\n\t\treturn n * n + n\n\t}\n\tif p == 5 {\n\t\treturn\
    \ n * n + n + 1\n\t}\n\tif p == 6 {\n\t\treturn n * n + n * n\n\t}\n\tif p ==\
    \ 7 {\n\t\treturn n * n + n * n + n\n\t}\n\tif p == 8 {\n\t\treturn n * n + n\
    \ * n + n * n\n\t}\n\tif p == 9 {\n\t\treturn n * n + n * n + n * n + n\n\t}\n\
    \tif p == 10 {\n\t\treturn n * n + n * n + n * n + n * n\n\t}\n\tif p == 11 {\n\
    \t\treturn n * n + n * n + n * n + n * n + n\n\t}\n\tif p == 12 {\n\t\treturn\
    \ n * n + n * n + n * n + n * n + n * n\n\t}\n\tif p == 13 {\n\t\treturn n * n\
    \ + n * n + n * n + n * n + n * n + n\n\t}\n\tif p == 14 {\n\t\treturn n * n +\
    \ n * n + n * n + n * n + n * n + n * n\n\t}\n\tif p == 15 {\n\t\treturn n * n\
    \ + n * n + n * n + n * n + n * n + n * n + n * n\n\t}\n\tif p == 16 {\n\t\treturn\
    \ n * n + n * n + n * n + n * n + n * n + n * n + n * n + n\n\t}\n\tif p == 17\
    \ {\n\t\treturn n * n + n * n + n * n + n * n + n * n + n * n + n * n + n * n\n\
    \t}\n\tif p == 18 {\n\t\treturn n * n + n * n + n * n + n * n + n * n + n * n\
    \ + n * n + n * n\n\t}\n\tif p == 19 {\n\t\treturn n * n + n * n + n * n + n *\
    \ n + n * n + n * n + n * n + n * n + n\n\t}\n\tif p == 20 {\n\t\treturn n * n\
    \ + n * n + n * n + n * n + n * n + n * n + n * n + n * n + n * n\n\t}\n\tif p\
    \ == 21 {\n\t\treturn n * n + n * n + n * n + n * n + n * n + n * n + n * n +\
    \ n * n + n * n + n\n\t}\n\tif p == 22 {\n\t\treturn n * n + n * n + n * n + n\
    \ * n + n * n + n * n + n * n + n * n + n * n + n\n\t}\n\tif p == 23 {\n\t\treturn\
    \ n * n + n * n + n * n + n * n + n * n + n * n + n * n + n * n + n * n + n\n\t\
    }\n\tif p == 24 {\n\t\treturn n * n + n * n + n * n + n * n + n * n + n * n +\
    \ n * n + n * n + n * n + n * n + n", "\tif n < 0 {\n\t\tpanic(\"modp: n must\
    \ be positive\")\n\t}\n\tif p < 1 {\n\t\tpanic(\"modp: p must be positive\")\n\
    \t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn p\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1\
    \ {\n        return p\n    }\n    if n == p {\n        return n\n    }\n    if\
    \ n < p {\n        return modp(n - p, p)\n    }\n    if n > p {\n        return\
    \ modp(n, p)\n    }\n    return 0"]
stop_tokens:
- "\n}"
