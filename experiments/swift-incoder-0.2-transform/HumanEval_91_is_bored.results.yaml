language: swift
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n \
    \       !$0.isEmpty\n    }\n    return boredoms.count { $0.hasPrefix(\"I\") }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmayqeyk8.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppd76a2mh.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318zxirf.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: Use a regular expression to find all sentences\
    \ that start with the word \"I\".\n    // HINT: You may want to use split() on\
    \ the sentence to split it into an array of words.\n    \n    // BEGIN PSEUDOCODE\n\
    \    \n    // END PSEUDOCODE\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp503wb2y7/tmp503wb2y7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812cf30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b812cc27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b812cc27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b812cc267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp503wb2y7                        0x000055c65afcd3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b812d11c460 __libc_start_main +
    245

    6    tmp503wb2y7                        0x000055c65afccee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmptwnhx6zi/tmptwnhx6zi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45eb8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45eb5d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45eb5d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45eb5d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwnhx6zi                        0x000055a1544423b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b45ebace460 __libc_start_main +
    245

    6    tmptwnhx6zi                        0x000055a154441ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824566
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: You can use the split() function to split\
    \ a string into a list of strings.\n    // Then you can check if the first element\
    \ of the list equals \"I\".\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp5_lmoqx_/tmp5_lmoqx_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a3122ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a30f21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a30f21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a30f207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_lmoqx_                        0x00005633573233b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b9a31416460 __libc_start_main +
    245

    6    tmp5_lmoqx_                        0x0000563357322ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", \"\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvdea0uht.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write your code here\n    \n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpcpsp77cp/tmpcpsp77cp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4421aa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44217a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44217a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b442179f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpsp77cp                        0x00005624f26ac3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b4421c95460 __libc_start_main +
    245

    6    tmpcpsp77cp                        0x00005624f26abee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n        .filter({$0.hasPrefix(\"\
    I\")})\n        .count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpn4jjfzra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for word in S.split(separator: \".?!\")\
    \ {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp3aj0ih9f/tmp3aj0ih9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4802ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe47d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe47d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe47d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3aj0ih9f                        0x000056334ea1d7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002abe48216460 __libc_start_main +
    245

    6    tmp3aj0ih9f                        0x000056334ea1d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let boredoms = S.components(separatedBy: \".?!\")\n    \n\
    \    return boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyrlpr6ki.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n        .filter\
    \ { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpja72bhia.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for word in S.split(separator: \".?!\")\
    \ {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp3aj0ih9f/tmp3aj0ih9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4802ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe47d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe47d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe47d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3aj0ih9f                        0x000056334ea1d7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002abe48216460 __libc_start_main +
    245

    6    tmp3aj0ih9f                        0x000056334ea1d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var sentences = S.split(\".\")\n    for\
    \ sentence in sentences {\n        if sentence.startsWith(\"I\") {\n         \
    \   boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpim9qqaeg.swift:12:23: error: no exact matches in call to instance\
    \ method 'split'\n    var sentences = S.split(\".\")\n                      ^\n\
    Swift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let boredoms = S.components(separatedBy: \".?!\").filter\
    \ { $0.hasPrefix(\"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphhzhr0h4.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\
    \ $0.hasPrefix(\"I\") }\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318zxirf.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk2m_8ty0.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.starts(with: \"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4ebm3fhm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for word in S.split(separator: \".?!\")\
    \ {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp3aj0ih9f/tmp3aj0ih9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4802ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe47d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe47d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe47d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3aj0ih9f                        0x000056334ea1d7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002abe48216460 __libc_start_main +
    245

    6    tmp3aj0ih9f                        0x000056334ea1d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: Use a regular expression to find all the\
    \ sentences that start with the word \"I\".\n    // HINT: Use a regular expression\
    \ to find all the sentences that end with the word \"!\".\n    // HINT: Use a\
    \ regular expression to find all the sentences that end with the word \"?\".\n\
    \    // HINT: Use a regular expression to find all the sentences that end with\
    \ the word \".\".\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp9q5onpo1/tmp9q5onpo1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a0e435c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a0e12cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a0e12c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a0e12b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q5onpo1                        0x000056134543c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b0a0e621460 __libc_start_main +
    245

    6    tmp9q5onpo1                        0x000056134543bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.starts(with: \"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplin76nwu.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp0op0udt.swift:11:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: implement the is_bored function\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpenjb4f_i/tmpenjb4f_i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fb55cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fb52c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fb52c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fb52c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenjb4f_i                        0x0000562d301263b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b3fb57b7460 __libc_start_main +
    245

    6    tmpenjb4f_i                        0x0000562d30125ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let words = S.split(separator: \".?!\") else {\n       \
    \ return 0\n    }\n    return words.filter({ $0.hasPrefix(\"I\") }).count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpint1scae.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String.SubSequence]' (aka 'Array<Substring>')\n\
    \    guard let words = S.split(separator: \".?!\") else {\n          ^       \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for s in S.split(separator: \".,?!\") {\n \
    \       if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpa9dh2ej4/tmpa9dh2ej4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee188e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee185d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee185d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee185d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9dh2ej4                        0x000055f961f3672b <unavailable> + 5931

    5    libc.so.6                          0x00002aee18acc460 __libc_start_main +
    245

    6    tmpa9dh2ej4                        0x000055f961f36309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \".?!\").map(String.init)\n   \
    \ return words.filter({ $0.starts(with: \"I\") }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpyma0wqck/tmpyma0wqck.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f0075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5efd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5efd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5efd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyma0wqck                        0x0000558e2d4887ab <unavailable> + 6059

    5    libc.so.6                          0x00002ab5f0261460 __libc_start_main +
    245

    6    tmpyma0wqck                        0x0000558e2d488389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpw_vd6ttl.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n \
    \       if s.starts(with: \"I\") {\n            bored += 1\n        }\n    }\n\
    \    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpt9_g6k6i/tmpt9_g6k6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed6acd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed6a9ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed6a9ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed6a9cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9_g6k6i                        0x000055e13169d72b <unavailable> + 5931

    5    libc.so.6                          0x00002aed6aec3460 __libc_start_main +
    245

    6    tmpt9_g6k6i                        0x000055e13169d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, bored_chars, bored_chars.count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7r0dn4wt.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, bored_chars, bored_chars.count)\n           ^~~~~~~~~~~~~~~\n\
    /tmp/tmp7r0dn4wt.swift:11:31: error: cannot find 'bored_chars' in scope\n    return\
    \ is_bored_helper(S, bored_chars, bored_chars.count)\n                       \
    \       ^~~~~~~~~~~\n/tmp/tmp7r0dn4wt.swift:11:44: error: cannot find 'bored_chars'\
    \ in scope\n    return is_bored_helper(S, bored_chars, bored_chars.count)\n  \
    \                                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqu57o4hk.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"\
    I\")})\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    let boredoms = S.components(separatedBy: \".?!\")\n    \n\
    \    return boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp92pxihh6.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, delimiter: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7a1v6oyd.swift:11:38: error: extra argument 'delimiter' in call\n\
    \    return is_bored(S: S, delimiter: \" \")\n                   ~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes in a string and returns\
    \ the number of boredoms.\n    // HINT: You can use the split() function to split\
    \ a string into an array of strings.\n    // Then you can use a for loop to go\
    \ through each string in the array.\n    // If the string starts with the letter\
    \ \"I\", you can increment a counter.\n    // After the for loop, return the counter.\n\
    \    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbqjvbubs/tmpbqjvbubs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5a067cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5a0373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5a0373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5a03727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqjvbubs                        0x000055c84eefa3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ad5a0868460 __libc_start_main +
    245

    6    tmpbqjvbubs                        0x000055c84eef9ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.split(separator: \".?!\").map(String.init) else\
    \ {\n        return 0\n    }\n    return S.filter({ $0.starts(with: \"I\") }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp70fmit3z.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String]'\n    guard let S = S.split(separator:\
    \ \".?!\").map(String.init) else {\n          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n        .filter\
    \ { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpja72bhia.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.split(separator: \".?!\").map(String.init) else\
    \ {\n        return 0\n    }\n    return S.filter({ $0.hasPrefix(\"I\") }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3ukhae75.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String]'\n    guard let S = S.split(separator:\
    \ \".?!\").map(String.init) else {\n          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    var last = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n   \
    \         last = s.endIndex\n        }\n    }\n    return count - last\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2s8_7tex.swift:16:22: error: cannot assign value of type 'Substring.Index'\
    \ (aka 'String.Index') to type 'Int'\n            last = s.endIndex\n        \
    \           ~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpajazxm7o/tmpajazxm7o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b2cbcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b2c8c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b2c8c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b2c8c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajazxm7o                        0x000055d8382503b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b5b2cdbb460 __libc_start_main +
    245

    6    tmpajazxm7o                        0x000055d83824fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: Write a function that takes in a string and returns the\
    \ number of boredoms.\n    // HINT: You can use the split() function to split\
    \ a string into an array of strings by a delimiter.\n    // For example, S.split(\"\
    \ \") would return an array of strings.\n    // Then use a for loop to go through\
    \ each string in the array and compare the first letter of the string with \"\
    I\".\n    // If it matches, add one to a counter.\n    // If no match is found,\
    \ return 0.\n    var boredoms = 0\n    var boredomStrings = S.split(separator:\
    \ \".\")\n    for boredomString in boredomStrings {\n        if boredomString.first!\
    \ == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp6mmk_x_3/tmp6mmk_x_3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5d5044c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5d4d3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5d4d3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5d4d3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mmk_x_3                        0x000055f734e6e87b <unavailable> + 6267

    5    libc.so.6                          0x00002af5d5230460 __libc_start_main +
    245

    6    tmp6mmk_x_3                        0x000055f734e6e459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for s in S.split(separator: \".,?!\") {\n \
    \       if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpa9dh2ej4/tmpa9dh2ej4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee188e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee185d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee185d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee185d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9dh2ej4                        0x000055f961f3672b <unavailable> + 5931

    5    libc.so.6                          0x00002aee18acc460 __libc_start_main +
    245

    6    tmpa9dh2ej4                        0x000055f961f36309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318zxirf.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for s in S.split(separator: \".,?!\") {\n \
    \       if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpa9dh2ej4/tmpa9dh2ej4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee188e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee185d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee185d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee185d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9dh2ej4                        0x000055f961f3672b <unavailable> + 5931

    5    libc.so.6                          0x00002aee18acc460 __libc_start_main +
    245

    6    tmpa9dh2ej4                        0x000055f961f36309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: You can use the split() method to split\
    \ a string into a list of strings.\n    // Then you can check if the first element\
    \ of the list equals \"I\".\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpg9b5gqri/tmpg9b5gqri.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef1b107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef1adfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef1adfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef1adfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9b5gqri                        0x00005591571c33b2 <unavailable> + 5042

    5    libc.so.6                          0x00002aef1b2f3460 __libc_start_main +
    245

    6    tmpg9b5gqri                        0x00005591571c2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n        .filter\
    \ { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpja72bhia.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318zxirf.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz241prgk.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter({\
    \ $0.hasPrefix(\"I\") }).count\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".?!\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0w_9tcdn.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".?!\")\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprzti_o3g.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppd76a2mh.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: Use a for loop to go through each character\
    \ in the string and\n    // increment a counter if the character is a '.', '?'\
    \ or '!'.\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpwo_86py1/tmpwo_86py1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53c87dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53c84d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53c84d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53c84d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwo_86py1                        0x0000558ccc5af3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b53c89c8460 __libc_start_main +
    245

    6    tmpwo_86py1                        0x0000558ccc5aeee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprzti_o3g.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \".?!\").map(String.init)\n   \
    \ return words.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpi4xpdqx0/tmpi4xpdqx0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b31247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b30f3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b30f3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b30f3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4xpdqx0                        0x0000556c85dc374b <unavailable> + 5963

    5    libc.so.6                          0x00002b9b31433460 __libc_start_main +
    245

    6    tmpi4xpdqx0                        0x0000556c85dc3329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfvndzvmq.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\
    \ $0.hasPrefix(\"I\") }\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", \"\")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvdea0uht.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: Use a regular expression to find all sentences\
    \ that start with the word \"I\".\n    // HINT: You can use the count() method\
    \ on strings.\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpq2e4zo_c/tmpq2e4zo_c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af726f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af726c79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af726c79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af726c787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq2e4zo_c                        0x00005614817773b2 <unavailable> + 5042

    5    libc.so.6                          0x00002af72716e460 __libc_start_main +
    245

    6    tmpq2e4zo_c                        0x0000561481776ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpofqam6bp/tmpofqam6bp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab404f7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab404c76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab404c76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab404c757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofqam6bp                        0x000055aaa301a72b <unavailable> + 5931

    5    libc.so.6                          0x00002ab40516b460 __libc_start_main +
    245

    6    tmpofqam6bp                        0x000055aaa301a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes in a string and returns\
    \ the number of boredoms.\n    // HINT: You can use the split() method and check\
    \ if the string starts with \"I\".\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpmu5f7_yj/tmpmu5f7_yj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad038f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad038c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad038c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad038c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmu5f7_yj                        0x0000563efebe33b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ad039169460 __libc_start_main +
    245

    6    tmpmu5f7_yj                        0x0000563efebe2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes in a string and returns\
    \ the number of boredoms.\n    // HINT: Split the string into an array of strings\
    \ by splitting on \".\", \"?\", and \"!\".\n    // Then use a for loop to go through\
    \ each string in the array and check if the first letter of the string is \"I\"\
    .\n    // If it is, add 1 to a variable that holds the number of boredoms.\n \
    \   \n    var boredoms = 0\n    \n    return boredoms\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpwd397faj/tmpwd397faj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60b6dd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60b6acab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60b6aca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60b6ac97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwd397faj                        0x00005618d45f03b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b60b6fbf460 __libc_start_main +
    245

    6    tmpwd397faj                        0x00005618d45efee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzbd0mgj7.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.starts(with:\
    \ \"I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpr0goi3th/tmpr0goi3th.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b0749dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b07194b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b07194988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b071937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0goi3th                        0x000055b7d2a7e68b <unavailable> + 5771

    5    libc.so.6                          0x00002b2b07689460 __libc_start_main +
    245

    6    tmpr0goi3th                        0x000055b7d2a7e269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var currentWord = \"\"\n    for word in\
    \ S.split(separator: \".?!\") {\n        if word == \"I\" {\n            boredoms\
    \ += 1\n        }\n        currentWord = word\n    }\n    return boredoms\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_zo9vd18.swift:17:23: error: cannot assign value of type 'String.SubSequence'\
    \ (aka 'Substring') to type 'String'\n        currentWord = word\n           \
    \           ^~~~\n                      String( )\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n \
    \       !$0.isEmpty && $0.hasPrefix(\"I\")\n    }.count\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpv680tpde.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzbd0mgj7.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var word = \"\"\n    for c in S {\n    \
    \    word = word + String(c)\n        if word == \"I\" {\n            boredoms\
    \ = boredoms + 1\n            word = \"\"\n        }\n    }\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpdum2e1bj/tmpdum2e1bj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b025b4eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b025b1e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b025b1e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b025b1e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdum2e1bj                        0x000055a45cf964cb <unavailable> + 5323

    5    libc.so.6                          0x00002b025b6da460 __libc_start_main +
    245

    6    tmpdum2e1bj                        0x000055a45cf960a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.split(separator: \".?!\").map(String.init) else\
    \ {\n        return 0\n    }\n    return S.filter({ $0.starts(with: \"I\") }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp70fmit3z.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String]'\n    guard let S = S.split(separator:\
    \ \".?!\").map(String.init) else {\n          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var i = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \        i += 1\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmplf_itz5a/tmplf_itz5a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81e4589c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81e4280b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81e4280988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81e427f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplf_itz5a                        0x00005586a0d077b2 <unavailable> + 6066

    5    libc.so.6                          0x00002b81e4775460 __libc_start_main +
    245

    6    tmplf_itz5a                        0x00005586a0d072e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n        .filter\
    \ { $0.hasPrefix(\"I\") }\n        .count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpja72bhia.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: implement a solution\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpsmr_a0cb/tmpsmr_a0cb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34ad0b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34acda8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34acda8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34acda77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmr_a0cb                        0x000055e15d94c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b34ad29d460 __libc_start_main +
    245

    6    tmpsmr_a0cb                        0x000055e15d94bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk2m_8ty0.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmproh5st44/tmproh5st44.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c22ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c22bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c22bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c22bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproh5st44                        0x000056194175166b <unavailable> + 5739

    5    libc.so.6                          0x00002b8c230d2460 __libc_start_main +
    245

    6    tmproh5st44                        0x0000561941751249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n \
    \       !$0.isEmpty && $0.first?.starts(with: \"I\") == true\n    }.count\n  \
    \  return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpv369hj8q.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    \n    // TODO: Write a function that takes a string and returns\
    \ the number of boredoms.\n    // HINT: Use a regular expression to find all sentences\
    \ that start with the word \"I\".\n    // The function should return the number\
    \ of boredoms.\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbx_k0yxz/tmpbx_k0yxz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae071281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae070f78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae070f78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae070f777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx_k0yxz                        0x00005608c2aae3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ae07146d460 __libc_start_main +
    245

    6    tmpbx_k0yxz                        0x00005608c2aadee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n \
    \       !$0.isEmpty && $0.hasPrefix(\"I\")\n    }.count\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpv680tpde.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: fill this in.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpfwdp93vo/tmpfwdp93vo.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0185552c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0185249b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0185249988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01852487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwdp93vo                        0x000055ffeb8ab3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b018573e460 __libc_start_main +
    245

    6    tmpfwdp93vo                        0x000055ffeb8aaee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".?!\")\n    return words.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddazo0j_.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".?!\")\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for word in S.split(separator: \".?!\") {\n\
    \        if word == \"I\" {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpnmon4o0b/tmpnmon4o0b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1d0c2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1d0923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1d0923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1d09227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmon4o0b                        0x000055ae2c9cb7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002af1d0e18460 __libc_start_main +
    245

    6    tmpnmon4o0b                        0x000055ae2c9cb2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: implement a solution\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpsmr_a0cb/tmpsmr_a0cb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34ad0b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34acda8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34acda8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34acda77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmr_a0cb                        0x000055e15d94c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b34ad29d460 __libc_start_main +
    245

    6    tmpsmr_a0cb                        0x000055e15d94bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318zxirf.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, bored_chars)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7myf9w88.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, bored_chars)\n           ^~~~~~~~~~~~~~~\n/tmp/tmp7myf9w88.swift:11:31:\
    \ error: cannot find 'bored_chars' in scope\n    return is_bored_helper(S, bored_chars)\n\
    \                              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqu57o4hk.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"\
    I\")})\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: [\"I\"])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp68ahjxmy.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: [\"I\"])\n                   ~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var\
    \ F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K\
    \ = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P =\
    \ 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n\
    \    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n\
    \    var F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n \
    \   var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n  \
    \  var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n   \
    \ var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var\
    \ Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n   \
    \ var E = 0\n    var F = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyr8wv45q.swift:64:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpyr8wv45q.swift:12:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpyr8wv45q.swift:65:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpyr8wv45q.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpyr8wv45q.swift:66:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpyr8wv45q.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpyr8wv45q.swift:67:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpyr8wv45q.swift:15:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpyr8wv45q.swift:68:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpyr8wv45q.swift:16:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpyr8wv45q.swift:69:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpyr8wv45q.swift:17:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpyr8wv45q.swift:70:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpyr8wv45q.swift:18:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpyr8wv45q.swift:71:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpyr8wv45q.swift:19:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpyr8wv45q.swift:72:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpyr8wv45q.swift:20:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpyr8wv45q.swift:73:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpyr8wv45q.swift:21:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpyr8wv45q.swift:74:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpyr8wv45q.swift:22:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpyr8wv45q.swift:75:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpyr8w"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".?!\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0w_9tcdn.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".?!\")\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \".?!\").map(String.init)\n   \
    \ let boredoms = words.filter({ $0.starts(with: \"I\") }).count\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppi6gq19s/tmppi6gq19s.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b3db55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b3d84cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b3d84c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b3d84b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi6gq19s                        0x000055f582f4e7ab <unavailable> + 6059

    5    libc.so.6                          0x00002b5b3dd41460 __libc_start_main +
    245

    6    tmppi6gq19s                        0x000055f582f4e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978559
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbuvflepm.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.count { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318zxirf.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpajazxm7o/tmpajazxm7o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b2cbcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b2c8c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b2c8c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b2c8c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajazxm7o                        0x000055d8382503b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b5b2cdbb460 __libc_start_main +
    245

    6    tmpajazxm7o                        0x000055d83824fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else {\n        return 0\n    }\n    \n    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjvyws_7g.swift:11:21: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else {\n                  ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjvyws_7g.swift:11:45:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    guard let S = S.trimmingCharacters(in: .whitespacesAndNewlines) else {\n\
    \                                           ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjlxsmr75.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for s in S.split(separator: \".?!\") {\n  \
    \      if s.starts(with: \"I\") {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp9k1xvyd2/tmp9k1xvyd2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9126f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9123e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9123e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9123e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k1xvyd2                        0x00005614b81e672b <unavailable> + 5931

    5    libc.so.6                          0x00002af9128de460 __libc_start_main +
    245

    6    tmp9k1xvyd2                        0x00005614b81e6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978559
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppd76a2mh.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var boredomStart = 0\n    var boredomEnd\
    \ = 0\n    var boredomString = \"\"\n    for character in S {\n        switch\
    \ character {\n        case \"I\":\n            boredomStart = 1\n        case\
    \ \"!\":\n            boredomEnd = 1\n        default:\n            if boredomStart\
    \ {\n                boredomString = boredomString + character\n             \
    \   boredomStart = boredomEnd = 0\n            } else {\n                boredomEnd\
    \ = 1\n            }\n        }\n    }\n    if boredomStart {\n        boredomString\
    \ = boredomString + S\n        boredomStart = boredomEnd = 0\n    } else {\n \
    \       boredomEnd = 1\n    }\n    for character in boredomString {\n        switch\
    \ character {\n        case \"?\", \".\":\n            boredomEnd = 1\n      \
    \  default:\n            if boredomEnd {\n                boredoms = boredoms\
    \ + 1\n                boredomEnd = boredomStart = 0\n            } else {\n \
    \               boredomStart = 1\n            }\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyjtyz44d.swift:22:16: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n            if boredomStart {\n               ^\n \
    \              (            != 0)\n/tmp/tmpyjtyz44d.swift:23:49: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           boredomString = boredomString + character\n                      \
    \                          ^\n/tmp/tmpyjtyz44d.swift:24:43: error: cannot assign\
    \ value of type '()' to type 'Int'\n                boredomStart = boredomEnd\
    \ = 0\n                               ~~~~~~~~~~~^~~\n/tmp/tmpyjtyz44d.swift:30:8:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ if boredomStart {\n       ^\n       (            != 0)\n/tmp/tmpyjtyz44d.swift:32:35:\
    \ error: cannot assign value of type '()' to type 'Int'\n        boredomStart\
    \ = boredomEnd = 0\n                       ~~~~~~~~~~~^~~\n/tmp/tmpyjtyz44d.swift:41:16:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \         if boredomEnd {\n               ^\n               (          != 0)\n\
    /tmp/tmpyjtyz44d.swift:43:43: error: cannot assign value of type '()' to type\
    \ 'Int'\n                boredomEnd = boredomStart = 0\n                     \
    \        ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    guard let S = S.lowercased() else {\n        return 0\n    }\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter({$0.hasPrefix(\"\
    i\")})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppmej6jdz.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let S = S.lowercased() else\
    \ {\n          ^       ~~~~~~~~~~~~~~\n/tmp/tmppmej6jdz.swift:14:22: error: value\
    \ of type 'String' has no member 'components'\n    let boredoms = S.components(separatedBy:\
    \ \".?!\").filter({$0.hasPrefix(\"i\")})\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprzti_o3g.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \".\")\n    let boredoms\
    \ = words.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9a76qgev.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n\
    \        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n  \
    \  }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfnqnmbe/tmpcfnqnmbe.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75748e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75745ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75745dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75745dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfnqnmbe                        0x000055d324c9d72b <unavailable> + 5931

    5    libc.so.6                          0x00002b7574ad2460 __libc_start_main +
    245

    6    tmpcfnqnmbe                        0x000055d324c9d309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978558
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".?!\")\n    return\
    \ boredoms.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoqb7rtx2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824566
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpovf47c1_.swift:11:34: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: nil)\n                   ~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmpovf47c1_.swift:11:34: error: 'nil' requires a contextual type\n    return\
    \ is_bored(S: S, words: nil)\n                                 ^\n"
  stdout: ''
  timestamp: 1659978558
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for word in S.split(separator: \".?!\")\
    \ {\n        if word == \"I\" {\n            boredoms += 1\n        }\n    }\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp3aj0ih9f/tmp3aj0ih9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4802ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe47d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe47d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe47d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3aj0ih9f                        0x000056334ea1d7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002abe48216460 __libc_start_main +
    245

    6    tmp3aj0ih9f                        0x000056334ea1d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjk5rrsb.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored(S: S, words: S.words)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpskk664pf.swift:11:36: error: extra argument 'words' in call\n \
    \   return is_bored(S: S, words: S.words)\n                   ~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpskk664pf.swift:11:36: error: value of type 'String' has no member 'words'\n\
    \    return is_bored(S: S, words: S.words)\n                                 ~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0jubkhhk.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824499
