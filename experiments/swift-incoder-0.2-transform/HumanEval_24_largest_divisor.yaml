name: HumanEval_24_largest_divisor
language: swift
prompt: "\n/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
  \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
  \ == 50)\nassert(largest_divisor(n: 49) == 7)"
completions: ["    var largestDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor * divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor", "    var largest = 0\n    for divisor in 1...n {\n \
    \       if n % divisor == 0 {\n            if largest < divisor {\n          \
    \      largest = divisor\n            }\n        }\n    }\n    return largest",
  "    var maxDivisor = 1\n    for divisor in 1...n {\n        if n % divisor == 0\
    \ {\n            if divisor > maxDivisor {\n                maxDivisor = divisor\n\
    \            }\n        }\n    }\n    return maxDivisor", "    var maxDivisor:\
    \ Int = 0\n    var maxDivisorIndex: Int = 0\n    for index in 0..<n {\n      \
    \  if n % index == 0 {\n            if maxDivisor < index {\n                maxDivisor\
    \ = index\n                maxDivisorIndex = index\n            }\n        }\n\
    \    }\n    return maxDivisor", "    var largestDivisor = Int()\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if largestDivisor ==\
    \ 0 {\n                largestDivisor = divisor\n            } else {\n      \
    \          if divisor > largestDivisor {\n                    largestDivisor =\
    \ divisor\n                }\n            }\n        }\n    }\n    return largestDivisor",
  "    if n == 1 {\n        return 1\n    }\n    var maxDivisor = 1\n    var maxDividend\
    \ = 1\n    for dividend := 2; dividend <= n; dividend += 1 {\n        if n % dividend\
    \ == 0 {\n            if dividend > maxDividend {\n                maxDividend\
    \ = dividend\n                maxDivisor = dividend - 1\n            }\n     \
    \   }\n    }\n    return maxDivisor", "    var largest = Int(n)\n    var divisor\
    \ = 1\n    while divisor < n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor\n        }\n        divisor++\n    }\n    return largest", "    var\
    \ largestDivisor = Int(n)\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            largestDivisor = divisor\n        }\n    }\n    return largestDivisor",
  "    var largest = Int()\n    var divisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largest < divisor {\n         \
    \       largest = divisor\n            }\n        }\n    }\n    return largest",
  "    var largest = 0\n    var divisor = 1\n    for _ in 0..<n {\n        if n %\
    \ divisor == 0 {\n            divisor++\n            if divisor > largest {\n\
    \                largest = divisor\n            }\n        } else {\n        \
    \    divisor = 1\n        }\n    }\n    return largest", "    var largestDivisor\
    \ = Int()\n    var largestDivisorNum = Int()\n    var largestDivisorNumNum = Int()\n\
    \    var largestDivisorNumNumNum = Int()\n    var largestDivisorNumNumNumNum =\
    \ Int()\n    var largestDivisorNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNum = Int()\n    var\
    \ largestDivisorNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNum = Int()\n \
    \   var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n\
    \    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var\
    \ largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNum = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = Int()\n    var largestDivisorNumNumNumNumNum", "    var max_divisor = 0\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor\n            }\n    \
    \    }\n    }\n    return max_divisor", "    var largest = 0\n    var divisor\
    \ = 1\n    for _ in 0..<n {\n        if n % divisor == 0 {\n            divisor++\n\
    \        } else {\n            divisor = 1\n        }\n        if divisor > largest\
    \ {\n            largest = divisor\n        }\n    }\n    return largest", " \
    \   var max_divisor = 0\n    for divisor in 1...n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > max_divisor {\n                max_divisor = divisor\n\
    \            }\n        }\n    }\n    return max_divisor", "    var maxDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > maxDivisor {\n                maxDivisor = divisor\n          \
    \  }\n        }\n    }\n    return maxDivisor", "    var largestDivisor = 1\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            if divisor\
    \ * divisor > n {\n                largestDivisor = divisor\n            }\n \
    \       }\n    }\n    return largestDivisor", "    var largestDivisor = Int(n)\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor", '    return largest_divisor(n:
    n, divisor: 1)', "    var largest = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest", "    if n <\
    \ 2 {\n        return n\n    }\n    var largest = Int(n/2)\n    var divisor =\
    \ 2\n    while divisor < n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor\n        }\n        divisor++\n    }\n    return largest"]
stop_tokens:
- "\n}"
