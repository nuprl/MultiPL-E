name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double)\
  \ -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ["    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", '    return Double(trunc(number))', " \
    \   let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = number % 1\n    return Double(number)\
    \ - decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", '    return Double(trunc(number))', '    return
    truncate_number(number: number, scale: 0)', "    let decimalPart = floor(number)\n\
    \    let integerPart = ceil(number)\n    return Double(integerPart) / Double(10)\
    \ * Double(10) + Double(decimalPart)", "    let (integer, decimal) = Double(trunc(number)).rounded(.towardZero)\n\
    \    return Double(integer) + Double(decimal)", "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  '    return Double(trunc(number))', "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", '    return Double(trunc(number))',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", '    return Double(trunc(number))', '    return
    Double(trunc(number))', '    return truncate_number(number: number, scale: 0)',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart * pow(10, Double(log10(Double(abs(decimalPart)))\
    \ + 1))", "    let fraction = number % 1\n    return number - fraction", "   \
    \ let decimalPart = Double(number).truncatingRemainder(dividingBy: 1)\n    let\
    \ integerPart = Double(number).truncatingRemainder(dividingBy: Double(10).pow(Double(10)))\n\
    \    return Double(integerPart) / Double(10).pow(Double(10 - decimalPart.truncatingRemainder(dividingBy:\
    \ 1).magnitude))", "    let decimalPart = number % 1\n    let integerPart = floor(number\
    \ * 10) % 10\n    return integerPart + decimalPart", "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return truncate_number(number: number, scale: 0)', '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let (integer, decimal) = Double(trunc(number)).asInt()\n    return Double(integer)\
    \ / Double(decimal)", '    return Double(trunc(number))', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number - decimalPart)\n    return\
    \ integerPart + decimalPart", '    return truncate_number(number: number, scale:
    0)', "    let (integer, decimal) = Double(trunc(number)).asInt()\n    return Double(integer)\
    \ / Double(decimal)", "    let (integer, decimal) = Double(trunc(number)).asNumber()\n\
    \    return Double(integer) + Double(decimal) / Double(10)", "    let decimalPart\
    \ = floor(log10(number))\n    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n\
    \    return Double(integerPart) * pow(10.0, Double(decimalPart))", "    let (integer,\
    \ decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(integer)\
    \ + decimal", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  '    return truncate_number(number: number, scale: 0)', "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number).rounded(.towardZero)\n    return integerPart\
    \ + decimalPart", "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    return truncate_number(number)", '    return Double(trunc(number))',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart * pow(10, Double(log10(Double(number)))) + decimalPart", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart * pow(10, Double(log10(Double(number)))) + decimalPart", '    return
    Double(trunc(number))', "    let fraction = number % 1\n    return number - fraction",
  '    return Double(trunc(number))', "    let decimalPart = number % 1\n    return\
    \ Double(number) - decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", '    return Double(trunc(number))', '    return truncate_number(number:
    number, scale: 0)', '    return Double(trunc(number))', "    let decimalPart =\
    \ number % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    if number < 0 {\n        return -truncate_number(-number)\n    }\n    var result\
    \ = number\n    if number < 1.0 {\n        result = floor(number)\n    }\n   \
    \ if number < 1.0 {\n        result = ceil(number)\n    }\n    return result",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ (decimalPart < 0.5 ? 0 : 1)", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = floor(number / pow(10.0, Double(decimalPart)))\n    return\
    \ Double(integerPart) * pow(10.0, Double(decimalPart))", "    if number < 0 {\n\
    \        return -truncate_number(-number)\n    }\n    var decimalPart = Double(number)\n\
    \    if number < 1.0 {\n        decimalPart = Double(trunc(number))\n    }\n \
    \   return decimalPart", "    let decimalPart = floor(log10(number))\n    let\
    \ integerPart = trunc(number)\n    return Double(integerPart) / pow(10.0, Double(decimalPart))",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = Double(trunc(number))\n    let integerPart\
    \ = Double(trunc(number * Double(pow(10.0, Double(floor(log10(number)))))) / Double(pow(10.0,\
    \ Double(floor(log10(number)))))\n    return integerPart + decimalPart", '    return
    Double(trunc(number))', "    let decimalPart = floor(log10(number))\n    let integerPart\
    \ = number / pow(10.0, Double(decimalPart))\n    return integerPart", "    let\
    \ decimalPart = number % 1\n    let integerPart = floor(number)\n    return integerPart\
    \ + decimalPart", '    return Double(number).truncatingRemainder(dividingBy: 1)',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(number).truncatingRemainder(dividingBy: 1.0)', "    if\
    \ number < 1.0 {\n        return number\n    }\n    let decimalPart = floor(log10(number))\n\
    \    let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  "    let decimalPart = floor(log10(number))\n    let integerPart = number / pow(10.0,\
    \ Double(decimalPart))\n    return integerPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(trunc(number))', "    let decimalPart = number % 1\n \
    \   let integerPart = floor(number)\n    return integerPart + decimalPart", " \
    \   let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let fraction = number % 1\n    return number\
    \ - fraction", "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    return truncate_number(number)", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number * 10)\
    \ % 10\n    return integerPart + decimalPart", "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = number / pow(10.0, Double(decimalPart))\n    return integerPart",
  "    let fraction = number % 1\n    return number - fraction", "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number)\n    return integerPart +\
    \ decimalPart", "    let decimalPart = floor(log10(number) + 1)\n    return trunc(number\
    \ * pow(10.0, Double(decimalPart)))", '    return truncate_number(number: number,
    scale: 0)', "    let decimalPart = floor(log10(number))\n    let integerPart =\
    \ trunc(number)\n    return Double(integerPart) / Double(10) * pow(10.0, Double(decimalPart))",
  "    let integerPart = Int(number)\n    let decimalPart = number - Double(integerPart)\n\
    \    return Double(integerPart) / Double(10) + decimalPart", "    let (integer,\
    \ decimal) = Double.trunc(number)\n    return Double(integer) + Double(decimal)",
  "    let integerPart = Int(number)\n    let decimalPart = number - Double(integerPart)\n\
    \    return Double(integerPart) / Double(10) + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    if number < 0 {\n        return -truncate_number(-number)\n    }\n \
    \   return truncate_number(number)", "    let decimalPart = number % 1\n    let\
    \ integerPart = floor(number).rounded(.towardZero)\n    return integerPart + decimalPart",
  "    let decimalPart = floor(log10(number))\n    let integerPart = floor(number\
    \ / pow(10.0, Double(decimalPart)))\n    return Double(integerPart) * pow(10.0,\
    \ Double(decimalPart))", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", "    let fraction =\
    \ number % 1\n    return number - fraction", "    let decimalPart = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    let integerPart = Double(number).truncatingRemainder(dividingBy: Double(10).pow(Double(10)))\n\
    \    return Double(integerPart) / Double(10).pow(Double(10) - Double(decimalPart))",
  '    return Double(trunc(number))', '    return Double(trunc(number))', "    let\
    \ fraction = number % 1\n    return number - fraction", '    return floor(number
    * 10) / 10', '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return
    Double(trunc(number))', '    return truncate_number(number: number, scale: 0)',
  "    let decimalPart = number % 1\n    return Double(number) - decimalPart", " \
    \   let fraction = number % 1\n    return Double(number) - fraction", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', '    return truncate_number(number:
    number, scale: 0)', "    let fraction = number % 1\n    return Double(number)\
    \ - fraction", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let decimalPart = number % 1\n  \
    \  let integerPart = floor(number)\n    return integerPart * pow(10, Double(log10(Double(abs(decimalPart)))\
    \ + 1))", '    return Double(number).truncatingRemainder(dividingBy: 1.0)', " \
    \   let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", '    return truncate_number(number: number, scale:
    0)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + (decimalPart < 0.5 ? 0 : 1)", "    let fraction = number\
    \ % 1\n    return number - fraction", '    return Double(trunc(number))', '    return
    Double(trunc(number))', "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number).rounded(.towardZero)\n    return integerPart + decimalPart",
  "    let (integer, decimal) = truncate_number_helper(number)\n    return Double(integer)\
    \ + Double(decimal)", "    let decimalPart = number % 1\n    let integerPart =\
    \ floor(number)\n    return integerPart + decimalPart", "    let decimalPart =\
    \ floor(log10(number))\n    let integerPart = number / pow(10.0, Double(decimalPart))\n\
    \    return integerPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number - decimalPart)\n    return integerPart + decimalPart", "    if\
    \ number < 0 {\n        return -truncate_number(-number)\n    }\n    let integerPart\
    \ = Int(number)\n    let decimalPart = number - Double(integerPart)\n    return\
    \ Double(integerPart) + decimalPart", '    return Double(trunc(number))', "  \
    \  let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1.0)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let fraction = number % 1\n    return\
    \ number - fraction", "    let decimalPart = number % 1\n    let integerPart =\
    \ floor(number)\n    return integerPart + decimalPart", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    return Double(number) - decimalPart",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number - decimalPart)\n    return integerPart + decimalPart", "    let\
    \ (integer, decimal) = Double(number).truncatingRemainder(dividingBy: 1)\n   \
    \ return Double(integer) + decimal", '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let fraction = number % 1\n    return Double(number) - fraction", '    return
    Double(trunc(number))', "    if number < 0 {\n        return -truncate_number(-number)\n\
    \    }\n    var decimalPart = number\n    var integerPart = 0\n    while decimalPart\
    \ > 0 {\n        decimalPart /= 10\n        integerPart += 1\n    }\n    return\
    \ Double(integerPart) / Double(10).pow(Double(integerPart - 1))", '    return
    Double(trunc(number))', "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + (decimalPart < 0.5 ? 0 : 1)", "  \
    \  let fraction = number % 1\n    return number - fraction", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return Double(trunc(number))', "    let (integer, decimal) = Double(number).truncatingRemainder(dividingBy:\
    \ 1)\n    return Double(integer) + decimal", '    return Double(trunc(number))',
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let (integer,\
    \ decimal) = Double.trunc(number).decompose()\n    return decimal / 10", '    return
    Double(number).truncatingRemainder(dividingBy: 1)', "    let (integer, decimal)\
    \ = Double(trunc(number)).rounded(.towardZero)\n    return Double(integer) + Double(decimal)",
  "    let integerPart = Int(number)\n    let decimalPart = number - Double(integerPart)\n\
    \    return Double(integerPart) + decimalPart", '    return Double(trunc(number))',
  '    return Double(number).truncatingRemainder(dividingBy: 1)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number - decimalPart)\n    return\
    \ integerPart + decimalPart", '    return floor(number * 100) / 100', "    if\
    \ number < 0 {\n        return -truncate_number(-number)\n    }\n    return trunc(number)",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let (integer, decimal) = Double(trunc(number)).rounded(.towardZero)\n\
    \    return Double(integer) + decimal", "    let integerPart = Int(number)\n \
    \   let decimalPart = number - Double(integerPart)\n    return Double(integerPart)\
    \ + decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + (decimalPart * 1)", '    return Double(trunc(number))',
  "    let (integer, decimal) = Double(trunc(number)).asInt()\n    return Double(integer)\
    \ / Double(decimal)", '    return Double(trunc(number))', '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + (decimalPart * 1)", "    let decimalPart = number %\
    \ 1\n    let integerPart = floor(number)\n    return integerPart + (decimalPart\
    \ * 10).rounded(.towardZero)", "    let (integer, decimal) = truncate_number_helper(number)\n\
    \    return Double(integer) + Double(decimal)", "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + decimalPart",
  "    let decimalPart = floor(log10(number) + 1)\n    let integerPart = trunc(number)\n\
    \    return Double(integerPart) / pow(10.0, Double(decimalPart))", "    let decimalPart\
    \ = Double(number).truncatingRemainder(dividingBy: 1)\n    return Double(number)\
    \ - decimalPart", "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + (decimalPart * Double(pow(10.0, Double(trunc(log10(number)))))",
  '    return Double(trunc(number))', '    return Double(number).truncatingRemainder(dividingBy:
    1)', "    let decimalPart = number % 1\n    let integerPart = floor(number)\n\
    \    return integerPart + decimalPart", "    let (integer, decimals) = truncate_number_with_precision(number)\n\
    \    return Double(integer) + Double(decimals)", '    return Double(trunc(number))',
  "    let decimalPart = floor(log10(number))\n    let integerPart = trunc(number)\n\
    \    return Double(integerPart) / Double(10) * pow(10.0, Double(decimalPart))",
  '    return Double(number).truncatingRemainder(dividingBy: 1)', '    return Double(trunc(number))',
  "    let fraction = number % 1\n    return number - fraction", "    let decimalPart\
    \ = number % 1\n    return number - decimalPart", "    let decimalPart = number\
    \ % 1\n    let integerPart = floor(number)\n    return integerPart + (decimalPart\
    \ < 0.5 ? 0 : 1)", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return truncate_number(number: number, scale: 0)', "    let decimalPart\
    \ = number % 1\n    let integerPart = floor(number - decimalPart)\n    return\
    \ integerPart + decimalPart", '    return Double(trunc(number))', '    return
    Double(trunc(number))', "    let fraction = number % 1\n    return number - fraction",
  "    let fraction = number % 1\n    return number - fraction", "    let integerPart\
    \ = Int(number)\n    let decimalPart = number - Double(integerPart)\n    return\
    \ Double(integerPart) / Double(10) + decimalPart", "    let (integer, decimal)\
    \ = Double(trunc(number)).asInt()\n    return Double(integer) / Double(10) * Double(decimal)",
  "    let decimalPart = number % 1\n    let integerPart = floor(number)\n    return\
    \ integerPart + decimalPart", "    let decimalPart = number % 1\n    let integerPart\
    \ = floor(number)\n    return integerPart + decimalPart", '    return floor(number
    * 10) / 10', '    return Double(trunc(number))', "    let decimalPart = floor(log10(number))\n\
    \    let integerPart = trunc(number)\n    return Double(integerPart) / Double(10)\
    \ * pow(10, Double(decimalPart))", '    return Double(number).truncatingRemainder(dividingBy:
    1)', '    return truncate_number(number: number, scale: 0)', "    let fraction\
    \ = number % 1\n    return number - fraction"]
stop_tokens:
- "\n}"
