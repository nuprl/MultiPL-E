language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int, b: Int) ->\
    \ Bool in\n        return sum - a < sum - b\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1el_99fk/tmp1el_99fk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6a39f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6a36eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6a36ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6a36e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1el_99fk                        0x000056508b327684 <unavailable> + 5764

    5    libc.so.6                          0x00002ba6a3bdf460 __libc_start_main +
    245

    6    tmp1el_99fk                        0x000056508b327269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum\
    \ > 9 {\n            sum = 0\n        }\n        result.append(num)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpt00x5w11/tmpt00x5w11.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa0d77dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa0d474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa0d474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa0d4737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00x5w11                        0x0000559065bf9604 <unavailable> + 5636

    5    libc.so.6                          0x00002baa0d969460 __libc_start_main +
    245

    6    tmpt00x5w11                        0x0000559065bf91e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < 0 {\n        \
    \    aSum = -aSum\n        }\n        if b < 0 {\n            bSum = -bSum\n \
    \       }\n        return aSum > bSum\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpspj2y3ru.swift:22:13: error: cannot assign to value: 'aSum' is\
    \ a 'let' constant\n            aSum = -aSum\n            ^~~~\n/tmp/tmpspj2y3ru.swift:19:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let aSum = sum\n   \
    \     ^~~\n        var\n/tmp/tmpspj2y3ru.swift:25:13: error: cannot assign to\
    \ value: 'bSum' is a 'let' constant\n            bSum = -bSum\n            ^~~~\n\
    /tmp/tmpspj2y3ru.swift:20:9: note: change 'let' to 'var' to make it mutable\n\
    \        let bSum = sum\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = abs(aSum\
    \ - bSum)\n        let bDiff = abs(aSum - bSum)\n        if aDiff == bDiff {\n\
    \            return a < b\n        }\n        return aDiff < bDiff\n    })\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpivkxv6vr/tmpivkxv6vr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac07f9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07f6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac07f6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac07f6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivkxv6vr                        0x000055b1b5547774 <unavailable> + 6004

    5    libc.so.6                          0x00002ac07fbc8460 __libc_start_main +
    245

    6    tmpivkxv6vr                        0x000055b1b5547359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpgpn3kjrf/tmpgpn3kjrf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad470734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47042bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47042b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47042a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpn3kjrf                        0x00005573ff3ae684 <unavailable> + 5764

    5    libc.so.6                          0x00002ad470920460 __libc_start_main +
    245

    6    tmpgpn3kjrf                        0x00005573ff3ae269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    \n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    \n    var result = [Int]()\n\
    \    for num in numsSortedCopy {\n        if numsSorted.contains(num) {\n    \
    \        index = numsSorted.index(num)\n            result.append(numsSorted[index])\n\
    \            numsSorted.remove(at: index)\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd3ehyn0u.swift:19:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjjzbffkz/tmpjjzbffkz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41679e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41676dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41676dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41676db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjzbffkz                        0x0000561708e57684 <unavailable> + 5764

    5    libc.so.6                          0x00002b4167bd1460 __libc_start_main +
    245

    6    tmpjjzbffkz                        0x0000561708e57269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: sort_by_digits)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp528bhm8p.swift:12:28: error: cannot find 'sort_by_digits' in scope\n\
    \    return nums.sorted(by: sort_by_digits)\n                           ^~~~~~~~~~~~~~\n\
    /tmp/tmp528bhm8p.swift:12:28: error: converting non-escaping value to '(Int, Int)\
    \ throws -> Bool' may allow it to escape\n    return nums.sorted(by: sort_by_digits)\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpodlvnu_a/tmpodlvnu_a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92e71fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92e6ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92e6ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92e6ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodlvnu_a                        0x00005609c8b3e684 <unavailable> + 5764

    5    libc.so.6                          0x00002b92e73ea460 __libc_start_main +
    245

    6    tmpodlvnu_a                        0x00005609c8b3e269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum.truncatingRemainder(dividingBy: 10)\n        let bSum\
    \ = sum.truncatingRemainder(dividingBy: 10)\n        return aSum == bSum\n   \
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjwfbv49h.swift:19:24: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n                   ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngjs4wm6/tmpngjs4wm6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afceb53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afceb232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afceb232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afceb2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngjs4wm6                        0x0000559f2c04c684 <unavailable> + 5764

    5    libc.so.6                          0x00002afceb727460 __libc_start_main +
    245

    6    tmpngjs4wm6                        0x0000559f2c04c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        sum += num\n\
    \        index++\n    }\n    if sum > 0 {\n        result.append(index)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvt6134uj.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum = numsSorted.sorted()\n\
    \    var numsSortedBySumReversed = numsSortedBySum.reversed()\n    var numsSortedBySumReversedByIndex\
    \ = numsSortedBySum.reversed().sorted()\n    var numsSortedBySumReversedByIndexReversed\
    \ = numsSortedBySum.reversed().sorted().reversed()\n    return numsSortedBySumReversedByIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9h0dd695/tmp9h0dd695.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83cd6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83cd3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83cd3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83cd3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h0dd695                        0x000055a4d4f987c4 <unavailable> + 6084

    5    libc.so.6                          0x00002b83cd8cd460 __libc_start_main +
    245

    6    tmp9h0dd695                        0x000055a4d4f983a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n \
    \           return a < b\n        }\n        return aSum < bSum\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpagoomoxk/tmpagoomoxk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca80068c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca7fd5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca7fd5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca7fd5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagoomoxk                        0x000055f3e1ed7684 <unavailable> + 5764

    5    libc.so.6                          0x00002aca80254460 __libc_start_main +
    245

    6    tmpagoomoxk                        0x000055f3e1ed7269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppff3jea.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpppff3jea.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpk8w44t5a.swift:18:17: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort\
    \ { sum - $0 }\n                ^\n/tmp/tmpk8w44t5a.swift:18:23: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    result.sort {\
    \ sum - $0 }\n                  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    for num in numsSorted {\n        for index in 0..<numsSortedCopy.count\
    \ {\n            if numsSortedCopy[index] == num {\n                numsSortedCopy.remove(at:\
    \ index)\n                numsSorted.remove(at: index)\n                break\n\
    \            }\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfjipvf55/tmpfjipvf55.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d8824ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87f45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87f45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87f447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjipvf55                        0x0000563f4e74e894 <unavailable> + 6292

    5    libc.so.6                          0x00002b4d8843a460 __libc_start_main +
    245

    6    tmpfjipvf55                        0x0000563f4e74e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum\
    \ > 0 {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfyahlmy9/tmpfyahlmy9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be6c28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be691fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be691f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be691e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyahlmy9                        0x000055c62f69e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b2be6e14460 __libc_start_main +
    245

    6    tmpfyahlmy9                        0x000055c62f69e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int, b: Int) ->\
    \ Bool in\n        let aDigit = Int(truncating: a / 10)\n        let bDigit =\
    \ Int(truncating: b / 10)\n        return aDigit > bDigit || (aDigit == bDigit\
    \ && a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyutdhno1.swift:19:25: error: extraneous argument label 'truncating:'\
    \ in call\n        let aDigit = Int(truncating: a / 10)\n                    \
    \    ^~~~~~~~~~~~~\n                         \n"
  stdout: ''
  timestamp: 1659825147
