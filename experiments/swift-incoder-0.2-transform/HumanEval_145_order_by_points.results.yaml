language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int, b: Int) ->\
    \ Bool in\n        return sum - a < sum - b\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1el_99fk/tmp1el_99fk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6a39f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6a36eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6a36ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6a36e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1el_99fk                        0x000056508b327684 <unavailable> + 5764

    5    libc.so.6                          0x00002ba6a3bdf460 __libc_start_main +
    245

    6    tmp1el_99fk                        0x000056508b327269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum\
    \ > 9 {\n            sum = 0\n        }\n        result.append(num)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpt00x5w11/tmpt00x5w11.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa0d77dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa0d474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa0d474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa0d4737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00x5w11                        0x0000559065bf9604 <unavailable> + 5636

    5    libc.so.6                          0x00002baa0d969460 __libc_start_main +
    245

    6    tmpt00x5w11                        0x0000559065bf91e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < 0 {\n        \
    \    aSum = -aSum\n        }\n        if b < 0 {\n            bSum = -bSum\n \
    \       }\n        return aSum > bSum\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpspj2y3ru.swift:22:13: error: cannot assign to value: 'aSum' is\
    \ a 'let' constant\n            aSum = -aSum\n            ^~~~\n/tmp/tmpspj2y3ru.swift:19:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let aSum = sum\n   \
    \     ^~~\n        var\n/tmp/tmpspj2y3ru.swift:25:13: error: cannot assign to\
    \ value: 'bSum' is a 'let' constant\n            bSum = -bSum\n            ^~~~\n\
    /tmp/tmpspj2y3ru.swift:20:9: note: change 'let' to 'var' to make it mutable\n\
    \        let bSum = sum\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = abs(aSum\
    \ - bSum)\n        let bDiff = abs(aSum - bSum)\n        if aDiff == bDiff {\n\
    \            return a < b\n        }\n        return aDiff < bDiff\n    })\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpivkxv6vr/tmpivkxv6vr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac07f9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07f6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac07f6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac07f6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivkxv6vr                        0x000055b1b5547774 <unavailable> + 6004

    5    libc.so.6                          0x00002ac07fbc8460 __libc_start_main +
    245

    6    tmpivkxv6vr                        0x000055b1b5547359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpgpn3kjrf/tmpgpn3kjrf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad470734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47042bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47042b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47042a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpn3kjrf                        0x00005573ff3ae684 <unavailable> + 5764

    5    libc.so.6                          0x00002ad470920460 __libc_start_main +
    245

    6    tmpgpn3kjrf                        0x00005573ff3ae269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    \n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    \n    var result = [Int]()\n\
    \    for num in numsSortedCopy {\n        if numsSorted.contains(num) {\n    \
    \        index = numsSorted.index(num)\n            result.append(numsSorted[index])\n\
    \            numsSorted.remove(at: index)\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd3ehyn0u.swift:19:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjjzbffkz/tmpjjzbffkz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41679e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41676dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41676dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41676db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjzbffkz                        0x0000561708e57684 <unavailable> + 5764

    5    libc.so.6                          0x00002b4167bd1460 __libc_start_main +
    245

    6    tmpjjzbffkz                        0x0000561708e57269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: sort_by_digits)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp528bhm8p.swift:12:28: error: cannot find 'sort_by_digits' in scope\n\
    \    return nums.sorted(by: sort_by_digits)\n                           ^~~~~~~~~~~~~~\n\
    /tmp/tmp528bhm8p.swift:12:28: error: converting non-escaping value to '(Int, Int)\
    \ throws -> Bool' may allow it to escape\n    return nums.sorted(by: sort_by_digits)\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpodlvnu_a/tmpodlvnu_a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92e71fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92e6ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92e6ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92e6ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodlvnu_a                        0x00005609c8b3e684 <unavailable> + 5764

    5    libc.so.6                          0x00002b92e73ea460 __libc_start_main +
    245

    6    tmpodlvnu_a                        0x00005609c8b3e269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum.truncatingRemainder(dividingBy: 10)\n        let bSum\
    \ = sum.truncatingRemainder(dividingBy: 10)\n        return aSum == bSum\n   \
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjwfbv49h.swift:19:24: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n                   ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngjs4wm6/tmpngjs4wm6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afceb53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afceb232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afceb232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afceb2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngjs4wm6                        0x0000559f2c04c684 <unavailable> + 5764

    5    libc.so.6                          0x00002afceb727460 __libc_start_main +
    245

    6    tmpngjs4wm6                        0x0000559f2c04c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        sum += num\n\
    \        index++\n    }\n    if sum > 0 {\n        result.append(index)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvt6134uj.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum = numsSorted.sorted()\n\
    \    var numsSortedBySumReversed = numsSortedBySum.reversed()\n    var numsSortedBySumReversedByIndex\
    \ = numsSortedBySum.reversed().sorted()\n    var numsSortedBySumReversedByIndexReversed\
    \ = numsSortedBySum.reversed().sorted().reversed()\n    return numsSortedBySumReversedByIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9h0dd695/tmp9h0dd695.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83cd6e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83cd3d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83cd3d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83cd3d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h0dd695                        0x000055a4d4f987c4 <unavailable> + 6084

    5    libc.so.6                          0x00002b83cd8cd460 __libc_start_main +
    245

    6    tmp9h0dd695                        0x000055a4d4f983a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n \
    \           return a < b\n        }\n        return aSum < bSum\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpagoomoxk/tmpagoomoxk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca80068c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca7fd5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca7fd5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca7fd5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagoomoxk                        0x000055f3e1ed7684 <unavailable> + 5764

    5    libc.so.6                          0x00002aca80254460 __libc_start_main +
    245

    6    tmpagoomoxk                        0x000055f3e1ed7269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppff3jea.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpppff3jea.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpk8w44t5a.swift:18:17: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort\
    \ { sum - $0 }\n                ^\n/tmp/tmpk8w44t5a.swift:18:23: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    result.sort {\
    \ sum - $0 }\n                  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    for num in numsSorted {\n        for index in 0..<numsSortedCopy.count\
    \ {\n            if numsSortedCopy[index] == num {\n                numsSortedCopy.remove(at:\
    \ index)\n                numsSorted.remove(at: index)\n                break\n\
    \            }\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfjipvf55/tmpfjipvf55.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d8824ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87f45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87f45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87f447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjipvf55                        0x0000563f4e74e894 <unavailable> + 6292

    5    libc.so.6                          0x00002b4d8843a460 __libc_start_main +
    245

    6    tmpfjipvf55                        0x0000563f4e74e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum\
    \ > 0 {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfyahlmy9/tmpfyahlmy9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be6c28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be691fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be691f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be691e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyahlmy9                        0x000055c62f69e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b2be6e14460 __libc_start_main +
    245

    6    tmpfyahlmy9                        0x000055c62f69e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int, b: Int) ->\
    \ Bool in\n        let aDigit = Int(truncating: a / 10)\n        let bDigit =\
    \ Int(truncating: b / 10)\n        return aDigit > bDigit || (aDigit == bDigit\
    \ && a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyutdhno1.swift:19:25: error: extraneous argument label 'truncating:'\
    \ in call\n        let aDigit = Int(truncating: a / 10)\n                    \
    \    ^~~~~~~~~~~~~\n                         \n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        while sum != 0 {\n            if sum < n {\n                numsSorted.insert(numsSorted[index],\
    \ at: index)\n                sum -= numsSorted[index]\n                index++\n\
    \            } else {\n                numsSorted.insert(n, at: index)\n     \
    \           sum -= n\n                index++\n            }\n        }\n    }\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb8rtcqfc.swift:24:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                index++\n                     ^~\n/tmp/tmpb8rtcqfc.swift:28:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      index++\n                     ^~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum.truncatingRemainder(dividingBy: 10)\n        let bSum\
    \ = sum.truncatingRemainder(dividingBy: 10)\n        return aSum == bSum\n   \
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjwfbv49h.swift:19:24: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n                   ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a == b {\n            return a < aSum\n\
    \        }\n        return false\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpy63oapvr/tmpy63oapvr.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb5af5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb5ac55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb5ac55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb5ac547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy63oapvr                        0x000056132e49c684 <unavailable> + 5764

    5    libc.so.6                          0x00002abb5b14a460 __libc_start_main +
    245

    6    tmpy63oapvr                        0x000056132e49c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted { $0.digits.sum < $1.digits.sum }\n    return\
    \ numsSorted.map { $0.digits }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7dpcg0qo.swift:12:39: error: value of type 'Int' has no member\
    \ 'digits'\n    let numsSorted = nums.sorted { $0.digits.sum < $1.digits.sum }\n\
    \                                   ~~ ^~~~~~\n/tmp/tmp7dpcg0qo.swift:12:55: error:\
    \ value of type 'Int' has no member 'digits'\n    let numsSorted = nums.sorted\
    \ { $0.digits.sum < $1.digits.sum }\n                                        \
    \           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n        return\
    \ aSum == bSum ? a.toInt() < b.toInt() : aSum > bSum\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpimx6ncnq.swift:19:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.map { $0.digit\
    \ }.reduce(0) { $0 + $1 }\n        let bSum = b.map { $0.digit }.reduce(0) { $0\
    \ + $1 }\n        return aSum < bSum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpl3qpa44b.swift:13:22: error: value of type 'Int' has no member\
    \ 'map'\n        let aSum = a.map { $0.digit }.reduce(0) { $0 + $1 }\n       \
    \            ~ ^~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpf7sm2dcy/tmpf7sm2dcy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e46020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e45d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e45d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e45d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7sm2dcy                        0x0000559ebf3a7684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8e4620c460 __libc_start_main +
    245

    6    tmpf7sm2dcy                        0x0000559ebf3a7269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n \
    \           return a < b\n        }\n        return aSum < bSum\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpt_nh4zhj/tmpt_nh4zhj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7845b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7842b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7842b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7842af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_nh4zhj                        0x0000561d40c75684 <unavailable> + 5764

    5    libc.so.6                          0x00002ad7847a5460 __libc_start_main +
    245

    6    tmpt_nh4zhj                        0x0000561d40c75269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpj_3fkvi1/tmpj_3fkvi1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c181f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c17eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c17eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c17ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_3fkvi1                        0x000055f999537684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6c183df460 __libc_start_main +
    245

    6    tmpj_3fkvi1                        0x000055f999537269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    for num in numsSorted {\n        var index = numsSortedCopy.index(of:\
    \ num)\n        if index != nil {\n            numsSortedCopy.remove(at: index!)\n\
    \            numsSortedCopy.insert(num, at: 0)\n        }\n    }\n    return numsSortedCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmptncg2n0x/tmptncg2n0x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b833759dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8337294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8337294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83372937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptncg2n0x                        0x0000564a8b2767b4 <unavailable> + 6068

    5    libc.so.6                          0x00002b8337789460 __libc_start_main +
    245

    6    tmptncg2n0x                        0x0000564a8b276399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if aSum > bSum {\
    \ return true }\n        if aSum < bSum { return false }\n        return a.0 >\
    \ b.0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9yw9098m.swift:23:18: error: value of type 'Int' has no member\
    \ '0'\n        return a.0 > b.0\n               ~ ^\n/tmp/tmp9yw9098m.swift:23:24:\
    \ error: value of type 'Int' has no member '0'\n        return a.0 > b.0\n   \
    \                  ~ ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp_s5qfgh1/tmp_s5qfgh1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71927fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71924f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71924f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71924f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s5qfgh1                        0x000055750f271684 <unavailable> + 5764

    5    libc.so.6                          0x00002b71929e8460 __libc_start_main +
    245

    6    tmp_s5qfgh1                        0x000055750f271269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: {\n        sum\
    \ - $0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyepvkdv3.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpyepvkdv3.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    \n    var numsSortedSorted: [Int]\
    \ = []\n    for n in numsSorted {\n        if sum == 0 {\n            numsSortedSorted.append(n)\n\
    \        } else {\n            var sumOfDigits = n % 10\n            if sumOfDigits\
    \ > 0 {\n                sumOfDigits -= 1\n            }\n            if sumOfDigits\
    \ != 0 {\n                numsSortedSorted.append(sumOfDigits)\n             \
    \   sum -= sumOfDigits\n            } else {\n                numsSortedSorted.append(sum)\n\
    \                sum = 0\n            }\n        }\n    }\n    return numsSortedSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1zpiz2ww/tmp1zpiz2ww.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f0d884c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f0d57bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f0d57b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f0d57a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zpiz2ww                        0x000056477c7f0694 <unavailable> + 5780

    5    libc.so.6                          0x00002b7f0da70460 __libc_start_main +
    245

    6    tmp1zpiz2ww                        0x000056477c7f0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var numsSortedIndex = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        numsSortedIndex.append(numsSorted.count)\n\
    \        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    for index in 0..<numsSortedIndex.count {\n        let index = numsSortedIndex[index]\n\
    \        let numsSortedCopyIndex = numsSortedCopy.index(numsSortedCopy.startIndex,\
    \ offsetBy: index)\n        numsSortedCopy[numsSortedCopyIndex] = numsSorted[index]\
    \ as! Int\n    }\n    return numsSortedCopy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpmjojrl2k/tmpmjojrl2k.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afde86a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afde8397b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afde8397988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afde83967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmjojrl2k                        0x000055eefa94c944 <unavailable> + 6468

    5    libc.so.6                          0x00002afde888c460 __libc_start_main +
    245

    6    tmpmjojrl2k                        0x000055eefa94c529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if a < b {\n   \
    \         return true\n        } else if a == b {\n            return a < 0\n\
    \        } else {\n            return false\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv4c9j4nr/tmpv4c9j4nr.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98a02eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b989ffe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b989ffe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b989ffe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4c9j4nr                        0x00005575f7e44684 <unavailable> + 5764

    5    libc.so.6                          0x00002b98a04da460 __libc_start_main +
    245

    6    tmpv4c9j4nr                        0x00005575f7e44269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return a <\
    \ b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpu_fff8mc/tmpu_fff8mc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0550b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0550866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0550866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05508657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_fff8mc                        0x000055c90fd61684 <unavailable> + 5764

    5    libc.so.6                          0x00002b0550d5b460 __libc_start_main +
    245

    6    tmpu_fff8mc                        0x000055c90fd61269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjjzbffkz/tmpjjzbffkz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41679e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41676dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41676dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41676db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjzbffkz                        0x0000561708e57684 <unavailable> + 5764

    5    libc.so.6                          0x00002b4167bd1460 __libc_start_main +
    245

    6    tmpjjzbffkz                        0x0000561708e57269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa6l8x8a1.swift:18:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpa6l8x8a1.swift:18:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpv34x0z8j/tmpv34x0z8j.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2110ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21107beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21107be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21107bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv34x0z8j                        0x0000559a49548764 <unavailable> + 5988

    5    libc.so.6                          0x00002b2110cb3460 __libc_start_main +
    245

    6    tmpv34x0z8j                        0x0000559a49548349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum == aSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpeqvmioqn/tmpeqvmioqn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027f2e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027efdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b027efde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027efdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqvmioqn                        0x00005595ab0a1684 <unavailable> + 5764

    5    libc.so.6                          0x00002b027f4d3460 __libc_start_main +
    245

    6    tmpeqvmioqn                        0x00005595ab0a1269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        if aSum == bSum\
    \ { return a.compare(b) == .orderedAscending }\n        else { return aSum > bSum\
    \ }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjfkuw0gi.swift:21:36: error: value of type 'Int' has no member\
    \ 'compare'\n        if aSum == bSum { return a.compare(b) == .orderedAscending\
    \ }\n                                 ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var index = 0\n    for\
    \ num in nums {\n        if sum < 0 {\n            sum *= -1\n            numsSorted.insert(index,\
    \ -num)\n        } else {\n            sum *= 10\n            numsSorted.insert(index,\
    \ num)\n        }\n        index++\n    }\n    return numsSorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4b2p1pwu.swift:22:24: error: no exact matches in call to instance\
    \ method 'insert'\n            numsSorted.insert(index, -num)\n              \
    \         ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4b2p1pwu.swift:25:24:\
    \ error: no exact matches in call to instance method 'insert'\n            numsSorted.insert(index,\
    \ num)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmp4b2p1pwu.swift:27:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a > b {\n        \
    \    return true\n        } else if a < b {\n            return false\n      \
    \  } else {\n            return aSum < bSum\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpwn3wjrp4/tmpwn3wjrp4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8177da9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8177aa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8177aa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8177a9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn3wjrp4                        0x0000564ff6821684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8177f95460 __libc_start_main +
    245

    6    tmpwn3wjrp4                        0x0000564ff6821269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: {\n        sum\
    \ - $0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwctxsyeu.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpwctxsyeu.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n \
    \           return a < b\n        }\n        return aSum < bSum\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpt_nh4zhj/tmpt_nh4zhj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7845b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7842b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7842b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7842af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_nh4zhj                        0x0000561d40c75684 <unavailable> + 5764

    5    libc.so.6                          0x00002ad7847a5460 __libc_start_main +
    245

    6    tmpt_nh4zhj                        0x0000561d40c75269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return a <\
    \ b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpu_fff8mc/tmpu_fff8mc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0550b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0550866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0550866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05508657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_fff8mc                        0x000055c90fd61684 <unavailable> + 5764

    5    libc.so.6                          0x00002b0550d5b460 __libc_start_main +
    245

    6    tmpu_fff8mc                        0x000055c90fd61269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum == aSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpeqvmioqn/tmpeqvmioqn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027f2e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027efdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b027efde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027efdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqvmioqn                        0x00005595ab0a1684 <unavailable> + 5764

    5    libc.so.6                          0x00002b027f4d3460 __libc_start_main +
    245

    6    tmpeqvmioqn                        0x00005595ab0a1269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngjs4wm6/tmpngjs4wm6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afceb53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afceb232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afceb232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afceb2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngjs4wm6                        0x0000559f2c04c684 <unavailable> + 5764

    5    libc.so.6                          0x00002afceb727460 __libc_start_main +
    245

    6    tmpngjs4wm6                        0x0000559f2c04c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp34dqtgkn.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppff3jea.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpppff3jea.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return nums\n    }\n    var numsSorted = nums\n\
    \    var sum = 0\n    for num in numsSorted {\n        sum += num\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n    }\n    if sum < 0 {\n        numsSorted.append(0)\n\
    \        sum = 0\n    }\n    if sum > 0 {\n        numsSorted.append(0)\n    \
    \    sum = 0\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2sk7xgu6.swift:19:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: num))\n    \
    \                                     ^\n/tmp/tmp2sk7xgu6.swift:19:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: num))\n                     \
    \                    ^\n                                                     \
    \   ?? <#default value#>\n/tmp/tmp2sk7xgu6.swift:19:42: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n                                         ^\n   \
    \                                                    !\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp34dqtgkn.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum == aSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvveipwdy/tmpvveipwdy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dd7b9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dd7891b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dd7891988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dd78907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvveipwdy                        0x00005611dff63684 <unavailable> + 5764

    5    libc.so.6                          0x00002b7dd7d86460 __libc_start_main +
    245

    6    tmpvveipwdy                        0x00005611dff63269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard !nums.isEmpty else { return [] }\n    let sum = nums.reduce(0) { $0\
    \ + $1 }\n    var numsSorted = nums\n    if sum < 0 {\n        numsSorted = nums.reversed()\n\
    \    }\n    return numsSorted.sorted(by: { $0.digits < $1.digits })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfjo974en.swift:18:39: error: value of type 'Int' has no member\
    \ 'digits'\n    return numsSorted.sorted(by: { $0.digits < $1.digits })\n    \
    \                               ~~ ^~~~~~\n/tmp/tmpfjo974en.swift:18:51: error:\
    \ value of type 'Int' has no member 'digits'\n    return numsSorted.sorted(by:\
    \ { $0.digits < $1.digits })\n                                               ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    numsSorted.sort()\n    for num in numsSortedCopy {\n       \
    \ nums.remove(num)\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_aqw0tgq.swift:21:14: error: no exact matches in call to instance\
    \ method 'remove'\n        nums.remove(num)\n             ^\n/tmp/tmp_aqw0tgq.swift:21:14:\
    \ note: found candidate with type '(Int) -> Int'\n        nums.remove(num)\n \
    \            ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa6l8x8a1.swift:18:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpa6l8x8a1.swift:18:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n    }\n    for num in nums {\n        if sum < 0 {\n            sum\
    \ += 10\n        }\n        if sum > 0 {\n            sum += num\n        }\n\
    \        result.append(num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpwk4i4uq1/tmpwk4i4uq1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b602b2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b602afa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b602afa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b602afa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwk4i4uq1                        0x0000556f638ce604 <unavailable> + 5636

    5    libc.so.6                          0x00002b602b49a460 __libc_start_main +
    245

    6    tmpwk4i4uq1                        0x0000556f638ce1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for n in nums {\n        let digits = n.digits\n\
    \        let sum = digits.reduce(0, +)\n        if sum < 0 {\n            digits.reverse()\n\
    \            sum *= -1\n        }\n        if sum == 0 {\n            result.append(n)\n\
    \        } else {\n            for (i, d) in digits.enumerated() {\n         \
    \       if sum - d < 0 {\n                    digits.insert(i, sum - d)\n    \
    \                sum -= d\n                    break\n                }\n    \
    \        }\n            result.append(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_xoisqma.swift:14:24: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = n.digits\n                     ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    while index < nums.count {\n        sum += nums[index]\n\
    \        result.append(nums[index])\n        if sum > 0 {\n            sum -=\
    \ numsSorted[index]\n            index += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp3p3qxh__/tmp3p3qxh__.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bff111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfee08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfee08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfee077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3p3qxh__                        0x00005612072ef5e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b1bff2fd460 __libc_start_main +
    245

    6    tmp3p3qxh__                        0x00005612072ef1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum == $0.sumOfDigits()\
    \ + $1.sumOfDigits()\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptq20ham_.swift:19:19: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n        sum == $0.sumOfDigits() + $1.sumOfDigits()\n        \
    \       ~~ ^~~~~~~~~~~\n/tmp/tmptq20ham_.swift:19:38: error: value of type 'Int'\
    \ has no member 'sumOfDigits'\n        sum == $0.sumOfDigits() + $1.sumOfDigits()\n\
    \                                  ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted.copy()\n    numsSorted.sort()\n    var numsSortedCopy = numsSorted.copy()\n\
    \    for num in numsSorted {\n        if numsSortedCopy.contains(num) {\n    \
    \        numsSortedCopy.remove(num)\n        } else {\n            numsSortedCopy.append(num)\n\
    \        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpupaasrzm.swift:18:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n/tmp/tmpupaasrzm.swift:20:37: error: value of type '[Int]'\
    \ has no member 'copy'\n    var numsSortedCopy = numsSorted.copy()\n         \
    \                ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    for idx in 0..<nums.count {\n        let digitSum\
    \ = nums[idx].digitSum()\n        if digitSum < 0 {\n            swap(&numsSorted[idx],\
    \ &numsSorted[numsSorted.index(before: idx)!])\n        }\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpywp0jvo4.swift:14:34: error: value of type 'Int' has no member\
    \ 'digitSum'\n        let digitSum = nums[idx].digitSum()\n                  \
    \     ~~~~~~~~~ ^~~~~~~~\n/tmp/tmpywp0jvo4.swift:16:77: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            swap(&numsSorted[idx], &numsSorted[numsSorted.index(before:\
    \ idx)!])\n                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum == $0.sumOfDigits()\
    \ ?\n            $0.index - $1.index : $0.sumOfDigits() - $1.sumOfDigits()\n \
    \   })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp01es23yb.swift:19:19: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n        sum == $0.sumOfDigits() ?\n               ~~ ^~~~~~~~~~~\n\
    /tmp/tmp01es23yb.swift:20:16: error: value of type 'Int' has no member 'index'\n\
    \            $0.index - $1.index : $0.sumOfDigits() - $1.sumOfDigits()\n     \
    \       ~~ ^~~~~\n/tmp/tmp01es23yb.swift:20:27: error: value of type 'Int' has\
    \ no member 'index'\n            $0.index - $1.index : $0.sumOfDigits() - $1.sumOfDigits()\n\
    \                       ~~ ^~~~~\n/tmp/tmp01es23yb.swift:20:38: error: value of\
    \ type 'Int' has no member 'sumOfDigits'\n            $0.index - $1.index : $0.sumOfDigits()\
    \ - $1.sumOfDigits()\n                                  ~~ ^~~~~~~~~~~\n/tmp/tmp01es23yb.swift:20:57:\
    \ error: value of type 'Int' has no member 'sumOfDigits'\n            $0.index\
    \ - $1.index : $0.sumOfDigits() - $1.sumOfDigits()\n                         \
    \                            ~~ ^~~~~~~~~~~\n/tmp/tmp01es23yb.swift:19:33: error:\
    \ cannot convert value of type 'Duration' to closure result type 'Bool'\n    \
    \    sum == $0.sumOfDigits() ?\n        ~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return nums\n    }\n    var sum = 0\n    var maxSum\
    \ = nums.reduce(0) { $0 + $1 }\n    var maxIndex = 0\n    var maxSumIndex = 0\n\
    \    var minSum = nums.reduce(0) { $0 + $1 }\n    var minIndex = 0\n    var minSumIndex\
    \ = 0\n    var maxSumDigit = 0\n    var minSumDigit = 0\n    var maxSumDigitIndex\
    \ = 0\n    var minSumDigitIndex = 0\n    var maxSumDigitDigit = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpg7uf0k0r.swift:29:9: error: invalid redeclaration of 'minSumDigitDigit'\n\
    \    var minSumDigitDigit = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:27:9: note: 'minSumDigitDigit'\
    \ previously declared here\n    var minSumDigitDigit = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:30:9:\
    \ error: invalid redeclaration of 'maxSumDigitDigitIndex'\n    var maxSumDigitDigitIndex\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:28:9: note: 'maxSumDigitDigitIndex' previously\
    \ declared here\n    var maxSumDigitDigitIndex = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:31:9:\
    \ error: invalid redeclaration of 'minSumDigitDigit'\n    var minSumDigitDigit\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:27:9: note: 'minSumDigitDigit' previously\
    \ declared here\n    var minSumDigitDigit = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:32:9:\
    \ error: invalid redeclaration of 'maxSumDigitDigitIndex'\n    var maxSumDigitDigitIndex\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:28:9: note: 'maxSumDigitDigitIndex' previously\
    \ declared here\n    var maxSumDigitDigitIndex = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:33:9:\
    \ error: invalid redeclaration of 'minSumDigitDigit'\n    var minSumDigitDigit\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:27:9: note: 'minSumDigitDigit' previously\
    \ declared here\n    var minSumDigitDigit = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:34:9:\
    \ error: invalid redeclaration of 'maxSumDigitDigitIndex'\n    var maxSumDigitDigitIndex\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:28:9: note: 'maxSumDigitDigitIndex' previously\
    \ declared here\n    var maxSumDigitDigitIndex = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:35:9:\
    \ error: invalid redeclaration of 'minSumDigitDigit'\n    var minSumDigitDigit\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:27:9: note: 'minSumDigitDigit' previously\
    \ declared here\n    var minSumDigitDigit = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:36:9:\
    \ error: invalid redeclaration of 'maxSumDigitDigitIndex'\n    var maxSumDigitDigitIndex\
    \ = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:28:9: note: 'maxSumDigitDigitIndex' previously\
    \ declared here\n    var maxSumDigitDigitIndex = 0\n        ^\n/tmp/tmpg7uf0k0r.swift:37:9:\
    \ error: invalid redeclaration of 'minSumDigi"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aSumDigit = Int(truncating:\
    \ aSum / 10)\n        let bSumDigit = Int(truncating: bSum / 10)\n        if aSumDigit\
    \ == bSumDigit {\n            return a < b\n        }\n        return aSumDigit\
    \ < bSumDigit\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1wtnf972.swift:21:28: error: extraneous argument label 'truncating:'\
    \ in call\n        let aSumDigit = Int(truncating: aSum / 10)\n              \
    \             ^~~~~~~~~~~~~\n                            \n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var index = 0\n    while\
    \ index < numsSorted.count {\n        if sum < 0 {\n            numsSorted.remove(at:\
    \ index)\n        } else {\n            sum += numsSorted[index]\n           \
    \ index += 1\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpyn72pi_5/tmpyn72pi_5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0574756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b057444db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b057444d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b057444c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn72pi_5                        0x000055dae08b0704 <unavailable> + 5892

    5    libc.so.6                          0x00002b0574942460 __libc_start_main +
    245

    6    tmpyn72pi_5                        0x000055dae08b02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    return numsSorted.map { $0.toInt() }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcquc1ke7.swift:13:32: error: value of type 'Int' has no member\
    \ 'toInt'\n    return numsSorted.map { $0.toInt() }\n                        \
    \    ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    for num in numsSorted\
    \ {\n        for num2 in numsSorted {\n            if num2 == num {\n        \
    \        numsSorted.remove(num2)\n                break\n            }\n     \
    \   }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3pzcl__0.swift:21:28: error: no exact matches in call to instance\
    \ method 'remove'\n                numsSorted.remove(num2)\n                 \
    \          ^\nSwift.Array:10:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(at:)')\n    @inlinable public mutating func remove(at index: Int)\
    \ -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return nums\n    }\n    var sums = nums.map {\
    \ $0.digits.reduce(0) { $0 + $1 } }\n    sums.sortInPlace()\n    return sums.map\
    \ { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmplve60si2.swift:15:30: error: value of type 'Int' has no member\
    \ 'digits'\n    var sums = nums.map { $0.digits.reduce(0) { $0 + $1 } }\n    \
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        sum -= num\n\
    \        index++\n    }\n    if sum > 0 {\n        result.append(index)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4b3x7lgd.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa6l8x8a1.swift:18:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpa6l8x8a1.swift:18:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n\
    \        numsSorted.remove(at: i)\n        numsSorted.insert(sum, at: i)\n   \
    \ }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp61tvq98k/tmp61tvq98k.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb6e783c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb6e47ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb6e47a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb6e4797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61tvq98k                        0x0000559c0c1bb764 <unavailable> + 5988

    5    libc.so.6                          0x00002aeb6e96f460 __libc_start_main +
    245

    6    tmp61tvq98k                        0x0000559c0c1bb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if aSum == bSum\
    \ {\n            return a.compare(to: b) == .orderedAscending\n        } else\
    \ {\n            return aSum < bSum\n        }\n    })\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphy1tpbxq.swift:22:22: error: value of type 'Int' has no member\
    \ 'compare'\n            return a.compare(to: b) == .orderedAscending\n      \
    \             ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb3qd5o7m.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpb3qd5o7m.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n \
    \           return a < b\n        }\n        return aSum < bSum\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpt_nh4zhj/tmpt_nh4zhj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7845b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7842b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7842b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7842af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_nh4zhj                        0x0000561d40c75684 <unavailable> + 5764

    5    libc.so.6                          0x00002ad7847a5460 __libc_start_main +
    245

    6    tmpt_nh4zhj                        0x0000561d40c75269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            if sum > 0 {\n                sum += n\n      \
    \      }\n        }\n        result.append(n)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpny8ltk06/tmpny8ltk06.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4740bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af473db1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af473db1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af473db07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny8ltk06                        0x000055fe0ba9d604 <unavailable> + 5636

    5    libc.so.6                          0x00002af4742a6460 __libc_start_main +
    245

    6    tmpny8ltk06                        0x000055fe0ba9d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpk8w44t5a.swift:18:17: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort\
    \ { sum - $0 }\n                ^\n/tmp/tmpk8w44t5a.swift:18:23: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    result.sort {\
    \ sum - $0 }\n                  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < 0 {\n        \
    \    aSum = -aSum\n        }\n        if b < 0 {\n            bSum = -bSum\n \
    \       }\n        return aSum < bSum\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpznuc_kc0.swift:22:13: error: cannot assign to value: 'aSum' is\
    \ a 'let' constant\n            aSum = -aSum\n            ^~~~\n/tmp/tmpznuc_kc0.swift:19:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let aSum = sum\n   \
    \     ^~~\n        var\n/tmp/tmpznuc_kc0.swift:25:13: error: cannot assign to\
    \ value: 'bSum' is a 'let' constant\n            bSum = -bSum\n            ^~~~\n\
    /tmp/tmpznuc_kc0.swift:20:9: note: change 'let' to 'var' to make it mutable\n\
    \        let bSum = sum\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpj_3fkvi1/tmpj_3fkvi1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c181f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c17eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c17eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c17ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_3fkvi1                        0x000055f999537684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6c183df460 __libc_start_main +
    245

    6    tmpj_3fkvi1                        0x000055f999537269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpj_3fkvi1/tmpj_3fkvi1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c181f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c17eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c17eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c17ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_3fkvi1                        0x000055f999537684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6c183df460 __libc_start_main +
    245

    6    tmpj_3fkvi1                        0x000055f999537269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = a - aSum\n\
    \        let bDiff = b - bSum\n        return aDiff > bDiff\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmplhwvbcdg/tmplhwvbcdg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35418fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35415f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35415f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35415f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhwvbcdg                        0x00005594cbd9f684 <unavailable> + 5764

    5    libc.so.6                          0x00002b3541aea460 __libc_start_main +
    245

    6    tmplhwvbcdg                        0x00005594cbd9f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa6l8x8a1.swift:18:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpa6l8x8a1.swift:18:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n        if aSum\
    \ == bSum {\n            return a.toInt() < b.toInt()\n        }\n        return\
    \ aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcj7gqict.swift:19:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\
    \ + [sum]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfj74t0f8.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int, b: Int) ->\
    \ Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n        return\
    \ aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp6rkbhueb/tmp6rkbhueb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5aeba15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5aeb70cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5aeb70c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5aeb70b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rkbhueb                        0x0000560486aad684 <unavailable> + 5764

    5    libc.so.6                          0x00002b5aebc01460 __libc_start_main +
    245

    6    tmp6rkbhueb                        0x0000560486aad269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngjs4wm6/tmpngjs4wm6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afceb53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afceb232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afceb232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afceb2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngjs4wm6                        0x0000559f2c04c684 <unavailable> + 5764

    5    libc.so.6                          0x00002afceb727460 __libc_start_main +
    245

    6    tmpngjs4wm6                        0x0000559f2c04c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var i = 0\n    for num\
    \ in numsSorted {\n        while i < numsSorted.count && numsSorted[i] == sum\
    \ {\n            i += 1\n        }\n        numsSorted.swap(i, numsSorted.count\
    \ - 1)\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpj1m2a3xg.swift:23:20: error: value of type '[Int]' has no member\
    \ 'swap'\n        numsSorted.swap(i, numsSorted.count - 1)\n        ~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpk8w44t5a.swift:18:17: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort\
    \ { sum - $0 }\n                ^\n/tmp/tmpk8w44t5a.swift:18:23: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    result.sort {\
    \ sum - $0 }\n                  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else {\n        return nums\n    }\n    var numsSorted\
    \ = nums\n    var sum = 0\n    for n in numsSorted {\n        sum += n\n    }\n\
    \    var index = 0\n    for n in numsSorted {\n        if sum > 0 {\n        \
    \    sum -= n\n            numsSorted[index] = n\n            index++\n      \
    \  }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1p_23qnl.swift:25:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvsa3qld4/tmpvsa3qld4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ba3d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ba3a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ba3a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ba3a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsa3qld4                        0x0000564649a0f684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8ba3f15460 __libc_start_main +
    245

    6    tmpvsa3qld4                        0x0000564649a0f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    return numsSorted.sorted(by:\
    \ { $0 + $1 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpe0dopguk/tmpe0dopguk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab29df80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab29dc77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab29dc77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab29dc767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0dopguk                        0x000055ea6bed4674 <unavailable> + 5748

    5    libc.so.6                          0x00002ab29e16c460 __libc_start_main +
    245

    6    tmpe0dopguk                        0x000055ea6bed4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aDigit = a % 10\n        let bDigit = b % 10\n        if aDigit ==\
    \ bDigit {\n            return a < b\n        } else {\n            return aDigit\
    \ < bDigit\n        }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpj_lau4vx/tmpj_lau4vx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac64b1f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac64aeefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac64aeef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac64aeee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_lau4vx                        0x0000562edc7f1714 <unavailable> + 5908

    5    libc.so.6                          0x00002ac64b3e4460 __libc_start_main +
    245

    6    tmpj_lau4vx                        0x0000562edc7f12f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard !nums.isEmpty else { return [] }\n    let numsCopy = nums.map { $0\
    \ }\n    let numsCopySorted = numsCopy.sorted()\n    let numsCopySortedSortedBySum\
    \ = numsCopySorted.map { $0.reduce(0, +) }\n    return numsCopySortedSortedBySum.map\
    \ { $0.isNegative ? -$0 : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmftxnad7.swift:15:61: error: value of type 'Int' has no member\
    \ 'reduce'\n    let numsCopySortedSortedBySum = numsCopySorted.map { $0.reduce(0,\
    \ +) }\n                                                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        while sum > 0 {\n            if sum < 10 {\n                numsSorted[index]\
    \ = n\n                sum -= 10\n                index++\n            } else\
    \ {\n                sum -= n\n                index++\n            }\n      \
    \  }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphk15isa6.swift:24:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                index++\n                     ^~\n/tmp/tmphk15isa6.swift:27:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      index++\n                     ^~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppff3jea.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpppff3jea.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted {\n   \
    \     sum += num\n    }\n    var index = 0\n    for num in numsSorted {\n    \
    \    if sum > 0 {\n            sum -= num\n            numsSorted[index] = num\n\
    \            index++\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvb439vey.swift:22:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpk8w44t5a.swift:18:17: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort\
    \ { sum - $0 }\n                ^\n/tmp/tmpk8w44t5a.swift:18:23: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    result.sort {\
    \ sum - $0 }\n                  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum.truncatingRemainder(dividingBy: 10)\n        let bSum\
    \ = sum.truncatingRemainder(dividingBy: 10)\n        return aSum == bSum\n   \
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjwfbv49h.swift:19:24: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n                   ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted { $0.digits < $1.digits }\n    return numsSorted.map\
    \ { $0.digits }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp25f8r_55.swift:12:39: error: value of type 'Int' has no member\
    \ 'digits'\n    let numsSorted = nums.sorted { $0.digits < $1.digits }\n     \
    \                              ~~ ^~~~~~\n/tmp/tmp25f8r_55.swift:12:51: error:\
    \ value of type 'Int' has no member 'digits'\n    let numsSorted = nums.sorted\
    \ { $0.digits < $1.digits }\n                                               ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    for index in 0..<nums.count {\n        let digitSum\
    \ = nums[index].digitSum()\n        if digitSum == numsSorted[index].digitSum()\
    \ {\n            numsSorted.swapAt(index, numsSorted.count - 1 - index)\n    \
    \    }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfg3v0ktb.swift:14:36: error: value of type 'Int' has no member\
    \ 'digitSum'\n        let digitSum = nums[index].digitSum()\n                \
    \       ~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpfg3v0ktb.swift:15:42: error: value of type\
    \ 'Int' has no member 'digitSum'\n        if digitSum == numsSorted[index].digitSum()\
    \ {\n                       ~~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted {\n     \
    \   sum += n\n        numsSorted.removeAll{ $0 > n }\n    }\n    return numsSorted.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmphphjqugl/tmphphjqugl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9071f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af906eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af906eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af906eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphphjqugl                        0x000055c1e67106e4 <unavailable> + 5860

    5    libc.so.6                          0x00002af9073e0460 __libc_start_main +
    245

    6    tmphphjqugl                        0x000055c1e67102c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let digits = nums.map({ String($0) })\n    let sortedDigits = digits.sorted()\n\
    \    return sortedDigits.map { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmplh30paa7.swift:14:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return sortedDigits.map { Int($0)\
    \ }\n                              ^\n/tmp/tmplh30paa7.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \ return sortedDigits.map { Int($0) }\n                              ^\n     \
    \                                 ?? <#default value#>\n/tmp/tmplh30paa7.swift:14:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return sortedDigits.map { Int($0) }\n                           \
    \   ^\n                                     !\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n        if aSum\
    \ == bSum {\n            return a.toInt() < b.toInt()\n        }\n        return\
    \ aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcj7gqict.swift:19:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard !nums.isEmpty else { return nums }\n    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { $0.0 < $1.0 }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqmnntkb2.swift:19:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpqmnntkb2.swift:19:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted {\n   \
    \     sum += num\n    }\n    var index = 0\n    var numsSorted2 = numsSorted\n\
    \    var sum2 = 0\n    for num in numsSorted2 {\n        sum2 += num\n       \
    \ if sum2 == sum {\n            numsSorted2.remove(at: index)\n            numsSorted.append(num)\n\
    \        }\n        index += 1\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpmhtwo2ya/tmpmhtwo2ya.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1354675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b135436cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b135436c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b135436b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhtwo2ya                        0x00005579dde48604 <unavailable> + 5636

    5    libc.so.6                          0x00002b1354861460 __libc_start_main +
    245

    6    tmpmhtwo2ya                        0x00005579dde481e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            sum += n % 10\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmphea6w5gs/tmphea6w5gs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a415ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a3e51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a3e51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a3e507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphea6w5gs                        0x00005609f4a93694 <unavailable> + 5780

    5    libc.so.6                          0x00002b92a4346460 __libc_start_main +
    245

    6    tmphea6w5gs                        0x00005609f4a93279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp5vkfn6gn/tmp5vkfn6gn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5cdaedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5cd7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5cd7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5cd7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vkfn6gn                        0x000056330c21a764 <unavailable> + 5988

    5    libc.so.6                          0x00002ba5cdcd9460 __libc_start_main +
    245

    6    tmp5vkfn6gn                        0x000056330c21a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum == $0.sumOfDigits()\
    \ && sum == $1.sumOfDigits()\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpit2w5mz6.swift:19:19: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n        sum == $0.sumOfDigits() && sum == $1.sumOfDigits()\n\
    \               ~~ ^~~~~~~~~~~\n/tmp/tmpit2w5mz6.swift:19:46: error: value of\
    \ type 'Int' has no member 'sumOfDigits'\n        sum == $0.sumOfDigits() && sum\
    \ == $1.sumOfDigits()\n                                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    var maxSum = 0\n    for num in numsSorted {\n   \
    \     sum += num\n        if sum > maxSum {\n            maxSum = sum\n      \
    \  }\n    }\n    var maxIndex = 0\n    var maxSumIndex = 0\n    for index in 0..<numsSorted.count\
    \ {\n        sum += numsSorted[index]\n        if sum == maxSum {\n          \
    \  maxSumIndex = index\n        }\n        if sum < maxSum {\n            break\n\
    \        }\n    }\n    numsSorted.removeAtIndex(maxSumIndex)\n    numsSorted.append(numsSorted[maxIndex])\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvg2oq5nl.swift:35:16: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n    numsSorted.removeAtIndex(maxSumIndex)\n    ~~~~~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    for num in numsSorted {\n        var index = numsSortedCopy.index(of:\
    \ num)\n        if index != nil {\n            numsSortedCopy.remove(at: index!)\n\
    \            numsSortedCopy.insert(num, at: 0)\n        }\n    }\n    return numsSortedCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmptncg2n0x/tmptncg2n0x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b833759dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8337294b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8337294988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83372937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptncg2n0x                        0x0000564a8b2767b4 <unavailable> + 6068

    5    libc.so.6                          0x00002b8337789460 __libc_start_main +
    245

    6    tmptncg2n0x                        0x0000564a8b276399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum < 0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1vpf2kle/tmp1vpf2kle.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f8198ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f81681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f81681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f816807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1vpf2kle                        0x0000557f1074d684 <unavailable> + 5764

    5    libc.so.6                          0x00002b9f81b76460 __libc_start_main +
    245

    6    tmp1vpf2kle                        0x0000557f1074d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpodlvnu_a/tmpodlvnu_a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92e71fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92e6ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92e6ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92e6ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodlvnu_a                        0x00005609c8b3e684 <unavailable> + 5764

    5    libc.so.6                          0x00002b92e73ea460 __libc_start_main +
    245

    6    tmpodlvnu_a                        0x00005609c8b3e269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    while index < numsSorted.count {\n        sum += numsSorted[index]\n\
    \        if sum < 0 {\n            sum = 0\n            index++\n            continue\n\
    \        }\n        result.append(numsSorted[index])\n        index++\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpabnb7a3k.swift:20:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpabnb7a3k.swift:24:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        if aDigit == bDigit {\n            return\
    \ a < b\n        } else {\n            return aDigit > bDigit\n        }\n   \
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpoq7y08a0/tmpoq7y08a0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36dc0a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36dbd9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36dbd9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36dbd9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoq7y08a0                        0x000056484a3a04f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b36dc294460 __libc_start_main +
    245

    6    tmpoq7y08a0                        0x000056484a3a00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for num in numsSorted {\n        sum += num\n   \
    \ }\n    var index = 0\n    var numsSorted2 = numsSorted\n    while index < numsSorted.count\
    \ {\n        if sum < 0 {\n            numsSorted.remove(at: index)\n        }\
    \ else {\n            sum += numsSorted[index + 1]\n            numsSorted.remove(at:\
    \ index + 1)\n        }\n        index += 1\n    }\n    return numsSorted\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpi5f1yo55/tmpi5f1yo55.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b122b7c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b122b4c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b122b4c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b122b4bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5f1yo55                        0x0000563cae9f16a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b122b9b5460 __libc_start_main +
    245

    6    tmpi5f1yo55                        0x0000563cae9f1289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb3qd5o7m.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpb3qd5o7m.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    while index < numsSorted.count {\n        sum += numsSorted[index]\n\
    \        if sum > 0 {\n            result.append(index)\n        }\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpi255zo_m/tmpi255zo_m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59e0557c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59e024eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59e024e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59e024d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi255zo_m                        0x00005586fcd465e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b59e0743460 __libc_start_main +
    245

    6    tmpi255zo_m                        0x00005586fcd461c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        } else if a > b {\n            return false\n      \
    \  } else {\n            return aSum < bSum\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmperk1rkm0/tmperk1rkm0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae168ef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae168beab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae168bea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae168be97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperk1rkm0                        0x0000560326df8684 <unavailable> + 5764

    5    libc.so.6                          0x00002ae1690df460 __libc_start_main +
    245

    6    tmperk1rkm0                        0x0000560326df8269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            sum += n % 10\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmphea6w5gs/tmphea6w5gs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a415ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a3e51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a3e51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a3e507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphea6w5gs                        0x00005609f4a93694 <unavailable> + 5780

    5    libc.so.6                          0x00002b92a4346460 __libc_start_main +
    245

    6    tmphea6w5gs                        0x00005609f4a93279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp34dqtgkn.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aDigit = a % 10\n        let bDigit = b % 10\n        return aDigit\
    \ > bDigit || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n    })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwdswuwd8.swift:21:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit > bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if a < b {\n   \
    \         return true\n        }\n        if a > b {\n            return false\n\
    \        }\n        if aSum < bSum {\n            return true\n        }\n   \
    \     if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpq4xr2y8c/tmpq4xr2y8c.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c23d7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c23a73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c23a73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c23a727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4xr2y8c                        0x0000555e75bd8684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6c23f68460 __libc_start_main +
    245

    6    tmpq4xr2y8c                        0x0000555e75bd8269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp34dqtgkn.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aInd = a.hashValue\
    \ % aSum\n        let bInd = b.hashValue % bSum\n        return aInd < bInd\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpn9t13lw_/tmpn9t13lw_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dea37fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dea076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dea076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dea0757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9t13lw_                        0x000055999c6de764 <unavailable> + 5988

    5    libc.so.6                          0x00002b2dea56b460 __libc_start_main +
    245

    6    tmpn9t13lw_                        0x000055999c6de349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmplz0y1sca/tmplz0y1sca.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03b171fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03b1416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03b1416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03b14157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplz0y1sca                        0x0000555ca69dd764 <unavailable> + 5988

    5    libc.so.6                          0x00002b03b190b460 __libc_start_main +
    245

    6    tmplz0y1sca                        0x0000555ca69dd349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard !nums.isEmpty else { return nums }\n    var numsCopy = nums\n    var\
    \ sum = 0\n    var maxSum = -Int.max\n    var maxIndex = 0\n    for i in numsCopy\
    \ {\n        sum += i\n        if sum > maxSum {\n            maxSum = sum\n \
    \           maxIndex = i\n        }\n    }\n    return numsCopy.sorted(by: { $0.distance(to:\
    \ $1) < $1.distance(to: $0) })\n        .enumerated().map { i, v in\n        \
    \    if v.1 == maxIndex {\n                return i\n            } else {\n  \
    \              return v.1\n            }\n        }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbk2lh2jy.swift:26:18: error: value of type 'Int' has no member\
    \ '1'\n            if v.1 == maxIndex {\n               ~ ^\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aSumDigit = aSum.digits\n\
    \        let bSumDigit = bSum.digits\n        if aSumDigit.count < bSumDigit.count\
    \ {\n            return true\n        }\n        if aSumDigit.count > bSumDigit.count\
    \ {\n            return false\n        }\n        if aSumDigit.count == bSumDigit.count\
    \ {\n            return aSumDigit < bSumDigit\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6a5xwd1w.swift:21:30: error: value of type 'Int' has no member\
    \ 'digits'\n        let aSumDigit = aSum.digits\n                        ~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            if sum == 0 {\n                result.append(n)\n\
    \            } else {\n                let index = nums.firstIndex(of: n)!\n \
    \               result.append(nums[index])\n                nums.remove(at: index)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp72sc65_6.swift:26:22: error: cannot use mutating member on immutable\
    \ value: 'nums' is a 'let' constant\n                nums.remove(at: index)\n\
    \                ~~~~ ^\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        if sum < 0 {\n            sum *= -1\n            index = numsSorted.index(of:\
    \ n)!\n        } else {\n            sum += n\n            index = numsSorted.index(of:\
    \ n)!\n        }\n    }\n    return numsSorted[index..<numsSorted.count]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpddjzrzr0.swift:22:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            index = numsSorted.index(of: n)!\n       \
    \                        ^\n/tmp/tmpddjzrzr0.swift:22:32: note: use 'firstIndex(of:)'\
    \ instead\n            index = numsSorted.index(of: n)!\n                    \
    \           ^~~~~\n                               firstIndex\n/tmp/tmpddjzrzr0.swift:25:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    index = numsSorted.index(of: n)!\n                               ^\n/tmp/tmpddjzrzr0.swift:25:32:\
    \ note: use 'firstIndex(of:)' instead\n            index = numsSorted.index(of:\
    \ n)!\n                               ^~~~~\n                               firstIndex\n\
    /tmp/tmpddjzrzr0.swift:28:22: error: no 'subscript' candidates produce the expected\
    \ contextual result type '[Int]'\n    return numsSorted[index..<numsSorted.count]\n\
    \                     ^\nSwift.Array:17:23: note: 'subscript(_:)' produces '@lvalue\
    \ ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript(bounds: Range<Int>) -> ArraySlice<Element> { get set }\n  \
    \                    ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\nSwift.Array:17:23: note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public subscript(bounds:\
    \ Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:2:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type '[In"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpxeu6lnrm/tmpxeu6lnrm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac9bbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac98b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac98b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac98b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxeu6lnrm                        0x0000560693408764 <unavailable> + 5988

    5    libc.so.6                          0x00002b6ac9da8460 __libc_start_main +
    245

    6    tmpxeu6lnrm                        0x0000560693408349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb3qd5o7m.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpb3qd5o7m.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    \n    var numsSortedBySum = [Int]()\n\
    \    var sumBySum = [Int]()\n    for n in numsSorted {\n        sumBySum[sum]\
    \ = n\n        sum += n\n    }\n    \n    var numsSortedBySumSorted = [Int]()\n\
    \    for n in numsSortedBySum {\n        numsSortedBySumSorted.append(n)\n   \
    \ }\n    \n    return numsSortedBySumSorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fa3465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fa315c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5fa315c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5fa315c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5fa315bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5fa2f5b7ec <unavailable> + 186348

    6    tmp3crzsgo9                        0x00005610c4b6e137 <unavailable> + 8503

    7    tmp3crzsgo9                        0x00005610c4b6d564 <unavailable> + 5476

    8    libc.so.6                          0x00002b5fa3651460 __libc_start_main +
    245

    9    tmp3crzsgo9                        0x00005610c4b6d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum { return\
    \ a.compare(to: b) == .orderedAscending }\n        if aSum > bSum { return true\
    \ }\n        if aSum < bSum { return false }\n        return a.compare(to: b)\
    \ == .orderedDescending\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdx1rpezu.swift:21:36: error: value of type 'Int' has no member\
    \ 'compare'\n        if aSum == bSum { return a.compare(to: b) == .orderedAscending\
    \ }\n                                 ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for num in numsSorted {\n        sum += num\n   \
    \ }\n    var numsSorted2 = numsSorted\n    var index = 0\n    while index < numsSorted.count\
    \ {\n        if sum < 0 {\n            numsSorted2.append(numsSorted[index])\n\
    \            sum -= numsSorted[index] % 10\n            index += 1\n        }\
    \ else {\n            numsSorted2.append(numsSorted[index])\n            sum +=\
    \ numsSorted[index] % 10\n            index += 1\n        }\n    }\n    return\
    \ numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmphusfzolw/tmphusfzolw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08cac9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08ca993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08ca993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08ca9927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphusfzolw                        0x000055b6dc244744 <unavailable> + 5956

    5    libc.so.6                          0x00002b08cae88460 __libc_start_main +
    245

    6    tmphusfzolw                        0x000055b6dc244329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp34dqtgkn.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    return nums.sorted(by: { $0.digits.reduce(0,+) + $1.digits.reduce(0,+) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcmt4yeej.swift:12:33: error: value of type 'Int' has no member\
    \ 'digits'\n    return nums.sorted(by: { $0.digits.reduce(0,+) + $1.digits.reduce(0,+)\
    \ })\n                             ~~ ^~~~~~\n/tmp/tmpcmt4yeej.swift:12:57: error:\
    \ value of type 'Int' has no member 'digits'\n    return nums.sorted(by: { $0.digits.reduce(0,+)\
    \ + $1.digits.reduce(0,+) })\n                                               \
    \      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp34dqtgkn.swift:18:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    \n    var numsSorted2\
    \ = numsSorted\n    \n    for num in numsSorted {\n        var index = numsSorted2.index(of:\
    \ num)\n        if index != nil {\n            numsSorted2.remove(at: index!)\n\
    \            numsSorted2.insert(num, at: index!)\n        }\n    }\n    \n   \
    \ return numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp9mgdu3sk/tmp9mgdu3sk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ec919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ec610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ec610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ec60f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mgdu3sk                        0x0000557595d677b4 <unavailable> + 6068

    5    libc.so.6                          0x00002af3ecb05460 __libc_start_main +
    245

    6    tmp9mgdu3sk                        0x0000557595d67399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        let aNum = a\n \
    \       let bNum = b\n        let aSumDigit = aSum % 10\n        let bSumDigit\
    \ = bSum % 10\n        if aSumDigit > bSumDigit {\n            return true\n \
    \       } else if aSumDigit < bSumDigit {\n            return false\n        }\
    \ else {\n            return a < b\n        }\n    })\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpszm_f_ye/tmpszm_f_ye.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86e2fa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86e2c9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86e2c9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86e2c997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszm_f_ye                        0x00005565c1c32714 <unavailable> + 5908

    5    libc.so.6                          0x00002b86e318f460 __libc_start_main +
    245

    6    tmpszm_f_ye                        0x00005565c1c322f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppff3jea.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpppff3jea.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = aSum - a\n\
    \        let bDiff = bSum - b\n        if aDiff < bDiff {\n            return\
    \ true\n        } else if aDiff > bDiff {\n            return false\n        }\
    \ else {\n            return a < b\n        }\n    })\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpos92h2ep/tmpos92h2ep.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2826ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b27f61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b27f61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b27f607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos92h2ep                        0x0000563fbde95684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8b28456460 __libc_start_main +
    245

    6    tmpos92h2ep                        0x0000563fbde95269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted {\n   \
    \     sum += num\n        numsSorted.remove(at: numsSorted.index(of: num))\n \
    \   }\n    return numsSorted.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpx77__lkh.swift:16:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: num))\n    \
    \                                     ^\n/tmp/tmpx77__lkh.swift:16:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: num))\n                     \
    \                    ^\n                                                     \
    \   ?? <#default value#>\n/tmp/tmpx77__lkh.swift:16:42: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n                                         ^\n   \
    \                                                    !\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let digits = nums.map { String($0) }\n    let sorted = digits[..<digits.count].sorted()\n\
    \    return nums[sorted.indices]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1oopbewu.swift:14:16: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return nums[sorted.indices]\n\
    \           ~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    \n    var index = 0\n    while index < numsSorted.count {\n\
    \        if numsSorted[index] == sum {\n            numsSorted.remove(at: index)\n\
    \            numsSorted.insert(numsSorted[index], at: index)\n        }\n    \
    \    index += 1\n    }\n    return numsSortedCopy\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c45e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c45b14561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2c45b14286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2c45b1413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2c45b13bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2c45913e83 <unavailable> + 188035

    6    tmpi3h4go2j                        0x000055af09e261d2 <unavailable> + 8658

    7    tmpi3h4go2j                        0x000055af09e25674 <unavailable> + 5748

    8    libc.so.6                          0x00002b2c46009460 __libc_start_main +
    245

    9    tmpi3h4go2j                        0x000055af09e25349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for n in nums {\n        let digits = n.digits\n\
    \        if digits.isEmpty {\n            result.append(n)\n        } else {\n\
    \            let sum = digits.reduce(0, +)\n            if result.contains(where:\
    \ { $0.digits == digits }) {\n                let index = result.index(where:\
    \ { $0.digits == digits })\n                result[index] = n\n            } else\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpek946rli.swift:14:24: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = n.digits\n                     ~ ^~~~~~\n/tmp/tmpek946rli.swift:19:44:\
    \ error: value of type 'Int' has no member 'digits'\n            if result.contains(where:\
    \ { $0.digits == digits }) {\n                                        ~~ ^~~~~~\n\
    /tmp/tmpek946rli.swift:20:54: error: value of type 'Int' has no member 'digits'\n\
    \                let index = result.index(where: { $0.digits == digits })\n  \
    \                                                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return nums\n    }\n    var numsSorted = nums\n\
    \    var sum = 0\n    for num in numsSorted {\n        sum += num\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n    }\n    return numsSorted.sorted { $0 + $1 <\
    \ $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmph5day_lg.swift:19:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: num))\n    \
    \                                     ^\n/tmp/tmph5day_lg.swift:19:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: num))\n                     \
    \                    ^\n                                                     \
    \   ?? <#default value#>\n/tmp/tmph5day_lg.swift:19:42: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n                                         ^\n   \
    \                                                    !\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        let aSumDigit =\
    \ aSum % 10\n        let bSumDigit = bSum % 10\n        if aSumDigit == bSumDigit\
    \ {\n            return a < b\n        } else {\n            return aSumDigit\
    \ < bSumDigit\n        }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp35c4et4g/tmp35c4et4g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f97bb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f978afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f978af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f978ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35c4et4g                        0x000055c0dc407714 <unavailable> + 5908

    5    libc.so.6                          0x00002b7f97da4460 __libc_start_main +
    245

    6    tmp35c4et4g                        0x000055c0dc4072f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        if sum > 0 {\n            result.append(num)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp9ewywkid/tmp9ewywkid.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed1177fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed11476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed11476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed114757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ewywkid                        0x000055a26a7d9604 <unavailable> + 5636

    5    libc.so.6                          0x00002aed1196b460 __libc_start_main +
    245

    6    tmp9ewywkid                        0x000055a26a7d91e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpv9bbsdqw/tmpv9bbsdqw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab33bd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab33ba23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab33ba23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab33ba227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bbsdqw                        0x000055fe9d92d684 <unavailable> + 5764

    5    libc.so.6                          0x00002ab33bf18460 __libc_start_main +
    245

    6    tmpv9bbsdqw                        0x000055fe9d92d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjjzbffkz/tmpjjzbffkz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41679e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41676dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41676dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41676db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjzbffkz                        0x0000561708e57684 <unavailable> + 5764

    5    libc.so.6                          0x00002b4167bd1460 __libc_start_main +
    245

    6    tmpjjzbffkz                        0x0000561708e57269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var index = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n        if sum > 0 {\n      \
    \      sum -= result[index]\n            index++\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0vuxgspb.swift:20:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum { return\
    \ a.compare(to: b) == .orderedAscending }\n        if aSum > bSum { return true\
    \ }\n        if aSum < bSum { return false }\n        return a.compare(to: b)\
    \ == .orderedDescending\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdx1rpezu.swift:21:36: error: value of type 'Int' has no member\
    \ 'compare'\n        if aSum == bSum { return a.compare(to: b) == .orderedAscending\
    \ }\n                                 ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort { sum, num1 in\n\
    \        let num2 = nums.filter { $0 != num1 }.first!\n        return sum - num1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp69d5vvmp.swift:20:20: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return sum - num1\n                   ^\n \
    \              ((        ) != 0)\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return nums\n    }\n    var sum = 0\n    var result\
    \ = [Int]()\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum == bSum || aSum > bSum\n  \
    \  })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpuvzbijm6.swift:22:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb3qd5o7m.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpb3qd5o7m.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        while sum > 0 {\n            sum += nums[index]\n            index++\n\
    \        }\n        numsSorted.append(n)\n    }\n    return numsSorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp28g754lt.swift:22:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum - a\n        let bSum = sum - b\n        if aSum\
    \ == bSum { return a.compare(to: b) == .orderedAscending }\n        return aSum\
    \ > bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpstm1bjgh.swift:21:36: error: value of type 'Int' has no member\
    \ 'compare'\n        if aSum == bSum { return a.compare(to: b) == .orderedAscending\
    \ }\n                                 ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptszkv1uh/tmptszkv1uh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844ff85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844fc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844fc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844fc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptszkv1uh                        0x0000556ffd3a5684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8450171460 __libc_start_main +
    245

    6    tmptszkv1uh                        0x0000556ffd3a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let len = nums.count\n    var sum = 0\n    var ans = [Int]()\n    for i in\
    \ 0..<len {\n        sum += nums[i]\n        ans.append(sum)\n    }\n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpr8lyhhjy/tmpr8lyhhjy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cc550ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cc5201b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cc5201988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cc52007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8lyhhjy                        0x000055a361d996d4 <unavailable> + 5844

    5    libc.so.6                          0x00002b5cc56f6460 __libc_start_main +
    245

    6    tmpr8lyhhjy                        0x000055a361d992b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    for n in nums {\n        let digits = n.digits\n\
    \        if digits.count > 0 {\n            let sum = digits.reduce(0) { $0 +\
    \ $1 }\n            if result.contains(where: { $0 == sum }) {\n             \
    \   result.sort { $0 < $1 }\n            } else {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9unqzklw.swift:14:24: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = n.digits\n                     ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    var\
    \ digitSums = [Int]()\n    for n in nums {\n        digitSums.append(sum % 10)\n\
    \        sum /= 10\n    }\n    var index = 0\n    var numsSorted2 = numsSorted\n\
    \    for n in numsSorted {\n        var digitSums2 = digitSums\n        if digitSums2.count\
    \ == 0 {\n            digitSums2 = [0]\n        }\n        var digitSum = digitSums2[index]\
    \ % 10\n        digitSums2[index] /= 10\n        if digitSum < digitSums2 {\n\
    \            numsSorted2.insert(n, at: index)\n        }\n        index += 1\n\
    \    }\n    return numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjs09a6rr.swift:34:23: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        if digitSum < digitSums2 {\n      \
    \                ^\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum > 0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp14t59kki/tmp14t59kki.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4baa20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4ba717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4ba717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4ba7167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14t59kki                        0x000055e25231b684 <unavailable> + 5764

    5    libc.so.6                          0x00002ba4bac0c460 __libc_start_main +
    245

    6    tmp14t59kki                        0x000055e25231b269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for n in numsSorted {\n        sum += n\n        result.append(index)\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvuyx73vo.swift:19:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if a < b {\n   \
    \         return true\n        }\n        if a > b {\n            return false\n\
    \        }\n        if aSum < bSum {\n            return true\n        }\n   \
    \     if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpq4xr2y8c/tmpq4xr2y8c.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c23d7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c23a73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c23a73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c23a727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq4xr2y8c                        0x0000555e75bd8684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6c23f68460 __libc_start_main +
    245

    6    tmpq4xr2y8c                        0x0000555e75bd8269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp_s5qfgh1/tmp_s5qfgh1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71927fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71924f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71924f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71924f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s5qfgh1                        0x000055750f271684 <unavailable> + 5764

    5    libc.so.6                          0x00002b71929e8460 __libc_start_main +
    245

    6    tmp_s5qfgh1                        0x000055750f271269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009297
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        if sum < 0 {\n            sum *= -1\n            index = numsSorted.index(of:\
    \ n)!\n        }\n        if sum == 0 {\n            numsSorted.remove(at: index)\n\
    \        } else {\n            sum -= numsSorted[index]\n            index +=\
    \ 1\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmplt30aith/tmplt30aith.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b644e0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b644dd97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b644dd97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b644dd967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt30aith                        0x000055ae11e537b4 <unavailable> + 6068

    5    libc.so.6                          0x00002b644e28c460 __libc_start_main +
    245

    6    tmplt30aith                        0x000055ae11e53399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppff3jea.swift:18:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpppff3jea.swift:19:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825147
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for i in numsSorted {\n        sum += i\n    }\n\
    \    var digitSums = [Int]()\n    for i in 0..<nums.count {\n        digitSums.append(0)\n\
    \    }\n    for i in 0..<nums.count {\n        digitSums[nums[i]]++\n    }\n \
    \   var sortedNums = [Int]()\n    for i in 0..<nums.count {\n        if digitSums[nums[i]]\
    \ == 1 {\n            sortedNums.append(nums[i])\n        }\n    }\n    return\
    \ sortedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp164lvd5w.swift:25:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        digitSums[nums[i]]++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum < 0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfxb7z0am/tmpfxb7z0am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17bccffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17bc9f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17bc9f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17bc9f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxb7z0am                        0x000055abaac6d684 <unavailable> + 5764

    5    libc.so.6                          0x00002b17bceeb460 __libc_start_main +
    245

    6    tmpfxb7z0am                        0x000055abaac6d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        while sum >= 10 {\n            sum -= 10\n            numsSorted[index]\
    \ = n\n            index += 1\n        }\n        sum += n\n    }\n    return\
    \ numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpwjdr2b4y/tmpwjdr2b4y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafa8eacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafa8ba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafa8ba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafa8ba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjdr2b4y                        0x000055ecef320654 <unavailable> + 5716

    5    libc.so.6                          0x00002aafa9098460 __libc_start_main +
    245

    6    tmpwjdr2b4y                        0x000055ecef320239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        } else if a > b {\n            return false\n      \
    \  } else {\n            return aSum < bSum\n        }\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmperk1rkm0/tmperk1rkm0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae168ef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae168beab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae168bea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae168be97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperk1rkm0                        0x0000560326df8684 <unavailable> + 5764

    5    libc.so.6                          0x00002ae1690df460 __libc_start_main +
    245

    6    tmperk1rkm0                        0x0000560326df8269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    if nums.isEmpty {\n        return nums\n    }\n    var numsSorted = nums\n\
    \    var sum = 0\n    for num in numsSorted {\n        sum += num\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n    }\n    return numsSorted.sorted { $0 + $1 <\
    \ $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmph5day_lg.swift:19:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: num))\n    \
    \                                     ^\n/tmp/tmph5day_lg.swift:19:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: num))\n                     \
    \                    ^\n                                                     \
    \   ?? <#default value#>\n/tmp/tmph5day_lg.swift:19:42: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n                                         ^\n   \
    \                                                    !\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for i in numsSorted {\n        sum += i\n    }\n\
    \    var index = 0\n    var index2 = 0\n    var index3 = 0\n    var index4 = 0\n\
    \    var index5 = 0\n    var index6 = 0\n    var index7 = 0\n    var index8 =\
    \ 0\n    var index9 = 0\n    var index10 = 0\n    var index11 = 0\n    var index12\
    \ = 0\n    var index13 = 0\n    var index14 = 0\n    var index15 = 0\n    var\
    \ index16 = 0\n    var index17 = 0\n    var index18 = 0\n    var index19 = 0\n\
    \    var index20 = 0\n    var index21 = 0\n    var index22 = 0\n    var index23\
    \ = 0\n    var index24 = 0\n    var index25 = 0\n    var index26 = 0\n    var\
    \ index27 = 0\n    var index28 = 0\n    var index29 = 0\n    var index30 = 0\n\
    \    var index31 = 0\n    var index32 = 0\n    var index33 = 0\n    var index34\
    \ = 0\n    var index35 = 0\n    var index36 = 0\n    var index37 = 0\n    var\
    \ index38 = 0\n    var index39 = 0\n    var index40 = 0\n    var index41 = 0\n\
    \    var index42 = 0\n    var index43 = 0\n    var index44 = 0\n    var index45\
    \ = 0\n    var index46 = 0\n    var index47 = 0\n    var index48 = 0\n    var\
    \ index49 = 0\n    var index50 = 0\n    var index51 = 0\n    var index52 = 0\n\
    \    var index53 = 0\n    var index54 = 0\n    var index55 = 0\n    var index56\
    \ = 0\n    var index57 = 0\n    var index58 = 0\n    var index59 = 0\n    var\
    \ index60 = 0\n    var index61 = 0\n    var index62 = 0\n    var index63 = 0\n\
    \    var index64 = 0\n    var index65 = 0\n    var index66 = 0\n    var index67\
    \ = 0\n    var index68 = 0\n    var index69 = 0\n    var index70 = 0\n    var\
    \ index71 = 0\n    var index72 = 0\n    var index73 = 0\n    var index74 = 0\n\
    \    var index75 = 0\n    var index76 = 0\n    var index77 = 0\n    var index78\
    \ = 0\n    var index79 = 0\n    var index80 = 0\n    var index81 = 0\n    var\
    \ index82 = 0\n    var index83 = 0\n    var index84 = 0\n    var index85 = 0\n\
    \    var index86 = 0\n    var index87 = 0\n    var index88 = 0\n    var index89\
    \ = 0\n    var index90 = 0\n    var index91 = 0\n    var index92 = 0\n    var\
    \ index93 = 0\n    var index94 = 0\n    var index95 = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9n83nq4e.swift:12:9: warning: variable 'numsSorted' was never mutated;\
    \ consider changing to 'let' constant\n    var numsSorted = nums\n    ~~~ ^\n\
    \    let\n/tmp/tmp9n83nq4e.swift:20:9: warning: initialization of variable 'index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var index = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp9n83nq4e.swift:21:9: warning:\
    \ initialization of variable 'index2' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var index2 = 0\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp9n83nq4e.swift:22:9: warning: initialization of variable 'index3' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ index3 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp9n83nq4e.swift:23:9: warning: initialization\
    \ of variable 'index4' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var index4 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp9n83nq4e.swift:24:9:\
    \ warning: initialization of variable 'index5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index5 = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp9n83nq4e.swift:25:9: warning: initialization of variable 'index6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var index6 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp9n83nq4e.swift:26:9: warning:\
    \ initialization of variable 'index7' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var index7 = 0\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp9n83nq4e.swift:27:9: warning: initialization of variable 'index8' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ index8 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp9n83nq4e.swift:28:9: warning: initialization\
    \ of variable 'index9' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var index9 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp9n83nq4e.swift:29:9:\
    \ warning: initialization of variable 'index10' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index10 = 0\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmp9n83nq4e.sw"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aDigit = a % 10\n        let bDigit = b % 10\n        return aDigit\
    \ < bDigit || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n    })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcniqu46f.swift:21:58: error: value of type 'Int' has no member\
    \ 'compareTo'\n        return aDigit < bDigit || (aDigit == bDigit && a.compareTo(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    var numsSortedBySumByIndex = numsSortedBySum.enumerated().map\
    \ { (index, item) in\n        return numsSortedBySumByIndex[index].element\n \
    \   }\n    return numsSortedBySumByIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqqajb2at.swift:19:50: error: generic parameter 'T' could not be\
    \ inferred\n    var numsSortedBySumByIndex = numsSortedBySum.enumerated().map\
    \ { (index, item) in\n                                                 ^\nSwift.Sequence:2:28:\
    \ note: in call to function 'map'\n    @inlinable public func map<T>(_ transform:\
    \ (Self.Element) throws -> T) rethrows -> [T]\n                           ^\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        sum += num\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpss1bx4cx/tmpss1bx4cx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c4a10ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c49e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c49e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c49e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpss1bx4cx                        0x000055794cef06a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b1c4a2fa460 __libc_start_main +
    245

    6    tmpss1bx4cx                        0x000055794cef0289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    guard nums.count > 0 else { return nums }\n    var numsSorted = nums\n  \
    \  var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.remove(at:\
    \ numsSorted.index(of: n))\n    }\n    return numsSorted.sorted { $0 + $1 < $1\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmplmj1z2pn.swift:17:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: n))\n      \
    \                                   ^\n/tmp/tmplmj1z2pn.swift:17:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: n))\n                       \
    \                  ^\n                                                      ??\
    \ <#default value#>\n/tmp/tmplmj1z2pn.swift:17:42: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: n))\n                                         ^\n     \
    \                                                !\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n \
    \           return a.compare(to: b) == .orderedAscending\n        }\n        return\
    \ aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmo0s0vzz.swift:22:22: error: value of type 'Int' has no member\
    \ 'compare'\n            return a.compare(to: b) == .orderedAscending\n      \
    \             ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    var numsSortedCopyIndex = 0\n    for num in numsSorted {\n \
    \       if numsSortedCopyIndex == numsSortedCopy.count {\n            break\n\
    \        }\n        if numsSortedCopy[numsSortedCopyIndex] > sum {\n         \
    \   numsSortedCopy[numsSortedCopyIndex], num = num, numsSortedCopy[numsSortedCopyIndex]\n\
    \            numsSortedCopyIndex += 1\n        }\n    }\n    return numsSortedCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp567pr400.swift:25:48: error: consecutive statements on a line must\
    \ be separated by ';'\n            numsSortedCopy[numsSortedCopyIndex], num =\
    \ num, numsSortedCopy[numsSortedCopyIndex]\n                                 \
    \              ^\n                                               ;\n/tmp/tmp567pr400.swift:25:48:\
    \ error: expected expression\n            numsSortedCopy[numsSortedCopyIndex],\
    \ num = num, numsSortedCopy[numsSortedCopyIndex]\n                           \
    \                    ^\n/tmp/tmp567pr400.swift:25:27: warning: subscript is accessed\
    \ but result is unused\n            numsSortedCopy[numsSortedCopyIndex], num =\
    \ num, numsSortedCopy[numsSortedCopyIndex]\n            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp567pr400.swift:18:9: warning: variable 'numsSortedCopy' was never mutated;\
    \ consider changing to 'let' constant\n    var numsSortedCopy = numsSorted\n \
    \   ~~~ ^\n    let\n/tmp/tmp567pr400.swift:19:9: warning: variable 'numsSortedCopyIndex'\
    \ was never mutated; consider changing to 'let' constant\n    var numsSortedCopyIndex\
    \ = 0\n    ~~~ ^\n    let\n/tmp/tmp567pr400.swift:20:9: warning: immutable value\
    \ 'num' was never used; consider replacing with '_' or removing it\n    for num\
    \ in numsSorted {\n        ^~~\n        _\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            if sum == 0 {\n                result.append(n)\n\
    \            } else {\n                let index = nums.firstIndex(of: n)\n  \
    \              if index != nil {\n                    result.append(nums[index!])\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpxipzc0cb/tmpxipzc0cb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fbc17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fb90eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fb90e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fb90d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxipzc0cb                        0x00005640cf7aa754 <unavailable> + 5972

    5    libc.so.6                          0x00002b72fbe03460 __libc_start_main +
    245

    6    tmpxipzc0cb                        0x00005640cf7aa339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009299
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy =\
    \ numsSorted\n    numsSorted.sortInPlace()\n    var result = [Int]()\n    for\
    \ num in numsSortedCopy {\n        if num != 0 {\n            result.append(sum)\n\
    \            sum = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqg9izpwd.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    numsSorted.sortInPlace()\n    ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum > 0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp14t59kki/tmp14t59kki.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4baa20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4ba717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4ba717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4ba7167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14t59kki                        0x000055e25231b684 <unavailable> + 5764

    5    libc.so.6                          0x00002ba4bac0c460 __libc_start_main +
    245

    6    tmp14t59kki                        0x000055e25231b269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points(nums: [1,\
    \ 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums:\
    \ [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n\
    \    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvsa3qld4/tmpvsa3qld4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ba3d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ba3a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ba3a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ba3a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsa3qld4                        0x0000564649a0f684 <unavailable> + 5764

    5    libc.so.6                          0x00002b8ba3f15460 __libc_start_main +
    245

    6    tmpvsa3qld4                        0x0000564649a0f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009298
