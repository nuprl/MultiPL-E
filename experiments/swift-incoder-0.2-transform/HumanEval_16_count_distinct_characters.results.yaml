language: swift
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.lowercased())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpuib4pdmw.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.lowercased())\n          \
    \                           ^\n                                     string: \n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let count = string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n    return count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpwfry8o02.swift:8:51: error: value of type 'Unicode.Scalar' has\
    \ no member 'isInverted'\n    let count = string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n                                               ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvbhnqfnk.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmpvbhnqfnk.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters_internal(string)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgpnqb98m.swift:8:12: error: cannot find 'count_distinct_characters_internal'\
    \ in scope\n    return count_distinct_characters_internal(string)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !isAlphaNumeric(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpy5_c9bgd.swift:10:13: error: cannot find 'isAlphaNumeric' in scope\n\
    \        if !isAlphaNumeric(c) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if character != character {\n            distinctCharacterCount++\n\
    \        }\n    }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_cvfdixe.swift:11:35: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCharacterCount++\n               \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.characters\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != characters[characters.index(of:\
    \ character)!] {\n            distinctCharacters = distinctCharacters + 1\n  \
    \      }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_dj9yq04.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_dj9yq04.swift:11:47: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if character != characters[characters.index(of:\
    \ character)!] {\n                                              ^\n/tmp/tmp_dj9yq04.swift:11:47:\
    \ note: use 'firstIndex(of:)' instead\n        if character != characters[characters.index(of:\
    \ character)!] {\n                                              ^~~~~\n      \
    \                                        firstIndex\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgtj244rg.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character != character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpvad9jw39/tmpvad9jw39.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9172710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9172407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9172407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91724067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvad9jw39                        0x0000558b67f3041a <unavailable> + 5146

    5    libc.so.6                          0x00002b91728fc460 __libc_start_main +
    245

    6    tmpvad9jw39                        0x0000558b67f2fff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpyt8942ma/tmpyt8942ma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f2913cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f28e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f28e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f28e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt8942ma                        0x000056132a0495d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b4f29328460 __libc_start_main +
    245

    6    tmpyt8942ma                        0x000056132a049109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if let _ = character.unicodeScalars.first {\n            distinctCharacterCount\
    \ += 1\n        }\n    }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpy24gu3ha/tmpy24gu3ha.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72cf737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72cf42eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72cf42e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72cf42d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy24gu3ha                        0x0000559a52dea5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b72cf923460 __libc_start_main +
    245

    6    tmpy24gu3ha                        0x0000559a52dea109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvbhnqfnk.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmpvbhnqfnk.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if character != character.lowercaseString {\n            distinctCharacters++\n\
    \        }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpyyk__qzf.swift:10:35: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if character != character.lowercaseString {\n   \
    \                     ~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpyyk__qzf.swift:11:31:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  distinctCharacters++\n                              ^~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.lowercased())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpuib4pdmw.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.lowercased())\n          \
    \                           ^\n                                     string: \n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.characters\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character.lowercaseString\
    \ {\n            distinctCharacters = distinctCharacters + 1\n        }\n    }\n\
    \    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpi56vegj0.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi56vegj0.swift:11:35: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if character != character.lowercaseString {\n   \
    \                     ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, lowercase:\
    \ false, uppercase: false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp34h1lts3.swift:8:37: error: extra arguments at positions #2, #3\
    \ in call\n    return count_distinct_characters(string: string, lowercase: false,\
    \ uppercase: false)\n                                    ^\n/tmp/tmp34h1lts3.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.filter({ $0.isInverted }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxwn1lkcf.swift:8:46: error: value of type 'Unicode.Scalar' has\
    \ no member 'isInverted'\n    return string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n                                          ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first?.unicodeScalars.first {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp8fvspsyt.swift:10:59: error: type of expression is ambiguous without\
    \ more context\n        if let _ = c.unicodeScalars.first?.unicodeScalars.first\
    \ {\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvbhnqfnk.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmpvbhnqfnk.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if character != character {\n            distinctCharacters = distinctCharacters\
    \ + 1\n        }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpn2mdagmu/tmpn2mdagmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c2f1ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c2eee2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c2eee2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c2eee17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2mdagmu                        0x000055b98cdc841a <unavailable> + 5146

    5    libc.so.6                          0x00002b9c2f3d7460 __libc_start_main +
    245

    6    tmpn2mdagmu                        0x000055b98cdc7ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(string:\
    \ c, caseSensitive: true) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpi4g1wcei.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(string: c, caseSensitive: true)\
    \ {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpyt8942ma/tmpyt8942ma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f2913cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f28e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f28e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f28e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt8942ma                        0x000056132a0495d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b4f29328460 __libc_start_main +
    245

    6    tmpyt8942ma                        0x000056132a049109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(string:\
    \ c, caseSensitive: true) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpi4g1wcei.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(string: c, caseSensitive: true)\
    \ {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.characters\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character {\n\
    \            distinctCharacters = distinctCharacters + 1\n        }\n    }\n \
    \   return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgbiqdve0.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if character == character {\n            distinctCharacterCount +=\
    \ 1\n        } else {\n            distinctCharacterCount = 0\n        }\n   \
    \ }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd5t91i_m/tmpd5t91i_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d1ac59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d1a950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d1a950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d1a94f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5t91i_m                        0x0000556ea764f4c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b0d1ae45460 __libc_start_main +
    245

    6    tmpd5t91i_m                        0x0000556ea764eff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characterSet = CharacterSet(charactersIn: string)\n\
    \    return characterSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpbqfi8w7n.swift:8:24: error: cannot find 'CharacterSet' in scope\n\
    \    let characterSet = CharacterSet(charactersIn: string)\n                 \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ [])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpmbsbx_vv.swift:8:63: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: [])\n         \
    \                           ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.characters\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character.lowercaseString\
    \ {\n            distinctCharacters = distinctCharacters + 1\n        }\n    }\n\
    \    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpi56vegj0.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi56vegj0.swift:11:35: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if character != character.lowercaseString {\n   \
    \                     ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpyt8942ma/tmpyt8942ma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f2913cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f28e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f28e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f28e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt8942ma                        0x000056132a0495d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b4f29328460 __libc_start_main +
    245

    6    tmpyt8942ma                        0x000056132a049109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if character == character {\n            distinctCharacters++\n \
    \       }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpu0wr85ny.swift:11:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCharacters++\n                   \
    \           ^~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, lowercase:\
    \ false, uppercase: false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp34h1lts3.swift:8:37: error: extra arguments at positions #2, #3\
    \ in call\n    return count_distinct_characters(string: string, lowercase: false,\
    \ uppercase: false)\n                                    ^\n/tmp/tmp34h1lts3.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmprtrltex0.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmprtrltex0.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isNonSpacing {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmprtrltex0.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isNonSpacing'\n        if !c.isUppercase && !c.isLowercase && !c.isNonSpacing\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpyt8942ma/tmpyt8942ma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f2913cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f28e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f28e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f28e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt8942ma                        0x000056132a0495d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b4f29328460 __libc_start_main +
    245

    6    tmpyt8942ma                        0x000056132a049109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if let _ = character.unicodeScalars.first {\n            distinctCharacters\
    \ += 1\n        }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpelh4hbbg/tmpelh4hbbg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca48f55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca48c4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca48c4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca48c4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelh4hbbg                        0x0000562dde1095d1 <unavailable> + 5585

    5    libc.so.6                          0x00002aca49141460 __libc_start_main +
    245

    6    tmpelh4hbbg                        0x0000562dde109109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgtj244rg.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvbhnqfnk.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmpvbhnqfnk.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if character == character {\n            distinctCharacterCount++\n\
    \        }\n    }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp0o2sh5fk.swift:11:35: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCharacterCount++\n               \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isWhitespace {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpukg1q4rb.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpukg1q4rb.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isWhitespace {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpukg1q4rb.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isWhitespace'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if character != character {\n            distinctCharacters++\n \
    \       }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp872wlogd.swift:11:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCharacters++\n                   \
    \           ^~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if character == character {\n            distinctCharacters++\n \
    \       }\n    }\n    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpu0wr85ny.swift:11:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCharacters++\n                   \
    \           ^~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpyt8942ma/tmpyt8942ma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f2913cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f28e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f28e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f28e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt8942ma                        0x000056132a0495d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b4f29328460 __libc_start_main +
    245

    6    tmpyt8942ma                        0x000056132a049109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isNonSpacing\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpnqf8gsvk.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ && !c.isNonSpacing {\n            ~ ^~~~~~~~~~~\n/tmp/tmpnqf8gsvk.swift:10:33:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase && !c.isLowercase && !c.isTitlecase && !c.isNonSpacing {\n  \
    \                            ~ ^~~~~~~~~~~\n/tmp/tmpnqf8gsvk.swift:10:51: error:\
    \ value of type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase && !c.isNonSpacing {\n                 \
    \                               ~ ^~~~~~~~~~~\n/tmp/tmpnqf8gsvk.swift:10:69: error:\
    \ value of type 'Unicode.Scalar' has no member 'isNonSpacing'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase && !c.isNonSpacing {\n                 \
    \                                                 ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.filter({ $0.isInverted }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpxwn1lkcf.swift:8:46: error: value of type 'Unicode.Scalar' has\
    \ no member 'isInverted'\n    return string.unicodeScalars.filter({ $0.isInverted\
    \ }).count\n                                          ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.unicodeScalars.reduce(0) { acc, cur in\n\
    \        guard let cur = cur else { return acc }\n        guard let prev = string.unicodeScalars.first(where:\
    \ { $0.value == cur.value }) else {\n            return acc\n        }\n     \
    \   return acc + prev.value - cur.value\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmplux12477.swift:13:16: error: cannot convert value of type 'Int'\
    \ to expected argument type 'UInt32'\n        return acc + prev.value - cur.value\n\
    \               ^\n               UInt32( )\n/tmp/tmplux12477.swift:13:33: error:\
    \ cannot convert return expression of type 'UInt32' to return type 'Int'\n   \
    \     return acc + prev.value - cur.value\n               ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    \               Int(                        )\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if character == character {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd9ihjeh9/tmpd9ihjeh9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a348efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a345e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a345e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a345e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ihjeh9                        0x00005559393224c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b5a34adb460 __libc_start_main +
    245

    6    tmpd9ihjeh9                        0x0000555939321ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.lowercased())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpuib4pdmw.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.lowercased())\n          \
    \                           ^\n                                     string: \n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if let _ = character.unicodeScalars.first {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmplvjrr74f/tmplvjrr74f.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c921eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c91ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c91ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c91ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvjrr74f                        0x000055e1656135d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b2c923d6460 __libc_start_main +
    245

    6    tmplvjrr74f                        0x000055e165613109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, lowercase:\
    \ false, uppercase: false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp34h1lts3.swift:8:37: error: extra arguments at positions #2, #3\
    \ in call\n    return count_distinct_characters(string: string, lowercase: false,\
    \ uppercase: false)\n                                    ^\n/tmp/tmp34h1lts3.swift:7:6:\
    \ note: 'count_distinct_characters(string:)' declared here\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if let _ = c.isUppercase {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpyk67nwu3.swift:10:22: error: type of expression is ambiguous without\
    \ more context\n        if let _ = c.isUppercase {\n                   ~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for character in string {\n       \
    \ if let _ = character.unicodeScalars.first {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmplvjrr74f/tmplvjrr74f.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c921eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c91ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c91ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c91ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvjrr74f                        0x000055e1656135d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b2c923d6460 __libc_start_main +
    245

    6    tmplvjrr74f                        0x000055e165613109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if character == character {\n            distinctCharacterCount +=\
    \ 1\n        } else {\n            distinctCharacterCount = 0\n        }\n   \
    \ }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd5t91i_m/tmpd5t91i_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d1ac59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d1a950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d1a950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d1a94f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5t91i_m                        0x0000556ea764f4c1 <unavailable> + 5313

    5    libc.so.6                          0x00002b0d1ae45460 __libc_start_main +
    245

    6    tmpd5t91i_m                        0x0000556ea764eff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = 0\n    for character in string\
    \ {\n        if let _ = character.unicodeScalars.first {\n            distinctCharacters\
    \ = distinctCharacters + 1\n        }\n    }\n    return distinctCharacters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6uy4ebvc/tmp6uy4ebvc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c3ccc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c3c9beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c3c9be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c3c9bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6uy4ebvc                        0x00005601ba9ee5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b9c3ceb3460 __libc_start_main +
    245

    6    tmp6uy4ebvc                        0x00005601ba9ee109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660015422
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isWhitespace {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpukg1q4rb.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpukg1q4rb.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isWhitespace {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpukg1q4rb.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isWhitespace'\n        if !c.isUppercase && !c.isLowercase && !c.isWhitespace\
    \ {\n                                                ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.characters\n    var distinctCharacters\
    \ = 0\n    for character in characters {\n        if character != character.lowercaseString\
    \ {\n            distinctCharacters = distinctCharacters + 1\n        }\n    }\n\
    \    return distinctCharacters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpi56vegj0.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi56vegj0.swift:11:35: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if character != character.lowercaseString {\n   \
    \                     ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string.unicodeScalars)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm32y20kz.swift:8:38: error: missing argument label 'string:' in\
    \ call\n    return count_distinct_characters(string.unicodeScalars)\n        \
    \                             ^\n                                     string:\
    \ \n/tmp/tmpm32y20kz.swift:8:45: error: cannot convert value of type 'String.UnicodeScalarView'\
    \ to expected argument type 'String'\n    return count_distinct_characters(string.unicodeScalars)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if character != character {\n            distinctCharacterCount++\n\
    \        }\n    }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_cvfdixe.swift:11:35: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            distinctCharacterCount++\n               \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, caseSensitive:\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmppm3nwd2f.swift:8:69: error: extra argument 'caseSensitive' in call\n\
    \    return count_distinct_characters(string: string, caseSensitive: false)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isPunctuation {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp6etsmuoi.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmp6etsmuoi.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isPunctuation {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmp6etsmuoi.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isPunctuation'\n        if !c.isUppercase && !c.isLowercase && !c.isPunctuation\
    \ {\n                                                ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpgtj244rg.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() {\n            ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if let _\
    \ = c.unicodeScalars.first?.unicodeScalars.first {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp8fvspsyt.swift:10:59: error: type of expression is ambiguous without\
    \ more context\n        if let _ = c.unicodeScalars.first?.unicodeScalars.first\
    \ {\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660015421
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpvbhnqfnk.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() {\n\
    \            ~ ^~~~~~~~~~~\n/tmp/tmpvbhnqfnk.swift:10:35: error: value of type\
    \ 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase() &&\
    \ !c.isLowercase() {\n                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacterCount = 0\n    for character in string\
    \ {\n        if let _ = character.unicodeScalars.first {\n            distinctCharacterCount\
    \ += 1\n        }\n    }\n    return distinctCharacterCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpy24gu3ha/tmpy24gu3ha.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72cf737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72cf42eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72cf42e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72cf42d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy24gu3ha                        0x0000559a52dea5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b72cf923460 __libc_start_main +
    245

    6    tmpy24gu3ha                        0x0000559a52dea109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return count_distinct_characters(string: string, options:\
    \ .withUndefinedKeys)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpumabh0gl.swift:8:64: error: extra argument 'options' in call\n\
    \    return count_distinct_characters(string: string, options: .withUndefinedKeys)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpumabh0gl.swift:8:64: error: cannot infer contextual base in reference\
    \ to member 'withUndefinedKeys'\n    return count_distinct_characters(string:\
    \ string, options: .withUndefinedKeys)\n                                     \
    \                         ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string {\n        if !is_distinct_character(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp9we1p49u.swift:10:13: error: cannot find 'is_distinct_character'\
    \ in scope\n        if !is_distinct_character(c) {\n            ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.unicodeScalars\n        .map {\
    \ $0.value }\n        .sorted()\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String($0) }\n        .map { String($0) }\n   \
    \     .map { String($0) }\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .map { String($0) }\n        .map { String($0) }\n        .map {\
    \ String($0) }\n        .map { String(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzswfcnjq.swift:73:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzswfcnjq.swift:92:69: error: expected '}' at end of brace statement\n\
    assert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)\n     \
    \                                                               ^\n/tmp/tmpzswfcnjq.swift:7:55:\
    \ note: to match this opening '{'\nfunc count_distinct_characters(string: String)\
    \ -> Int {\n                                                      ^\n/tmp/tmpzswfcnjq.swift:8:22:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    let characters\
    \ = string.unicodeScalars\n                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzswfcnjq.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp7wjjn_kx.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase() && !c.isLowercase() &&\
    \ !c.isTitlecase() {\n            ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:35:\
    \ error: value of type 'Unicode.Scalar' has no member 'isLowercase'\n        if\
    \ !c.isUppercase() && !c.isLowercase() && !c.isTitlecase() {\n               \
    \                 ~ ^~~~~~~~~~~\n/tmp/tmp7wjjn_kx.swift:10:55: error: value of\
    \ type 'Unicode.Scalar' has no member 'isTitlecase'\n        if !c.isUppercase()\
    \ && !c.isLowercase() && !c.isTitlecase() {\n                                \
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if !c.isUppercase && !c.isLowercase && !c.isTitlecase {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpfos5p93h.swift:10:15: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n            ~ ^~~~~~~~~~~\n/tmp/tmpfos5p93h.swift:10:33: error: value of\
    \ type 'Unicode.Scalar' has no member 'isLowercase'\n        if !c.isUppercase\
    \ && !c.isLowercase && !c.isTitlecase {\n                              ~ ^~~~~~~~~~~\n\
    /tmp/tmpfos5p93h.swift:10:51: error: value of type 'Unicode.Scalar' has no member\
    \ 'isTitlecase'\n        if !c.isUppercase && !c.isLowercase && !c.isTitlecase\
    \ {\n                                                ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014164
