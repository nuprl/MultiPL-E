language: swift
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx35m7l53.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx35m7l53.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx35m7l53.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx35m7l53.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx35m7l53.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpx35m7l53.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpx35m7l53.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(1)\n\
    \    result.append(3)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsk9of1fm.swift:31:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpsk9of1fm.swift:31:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpsk9of1fm.swift:31:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpsk9of1fm.swift:35:19: error:\
    \ missing argument label 'contentsOf:' in call\n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                  ^\n                  contentsOf:\
    \ \n/tmp/tmpsk9of1fm.swift:35:23: error: missing argument label 'n:' in call\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                   \
    \   ^\n                      n: \n/tmp/tmpsk9of1fm.swift:35:36: error: missing\
    \ argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                   ^\n                              \
    \     n: \n/tmp/tmpsk9of1fm.swift:35:49: error: missing argument label 'n:' in\
    \ call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            \
    \                                    ^\n                                     \
    \           n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo2bjvjx5.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpo2bjvjx5.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo2bjvjx5.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo2bjvjx5.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpo2bjvjx5.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpo2bjvjx5.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpo2bjvjx5.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdnl7wx91.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpdnl7wx91.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdnl7wx91.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdnl7wx91.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzbn0naie.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwt04q2bx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpwt04q2bx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpwt04q2bx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpwt04q2bx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpwt04q2bx.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpwt04q2bx.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpwt04q2bx.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi11z90sp.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi11z90sp.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi11z90sp.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpi11z90sp.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpi11z90sp.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmzn4q4jg.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmzn4q4jg.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmzn4q4jg.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmzn4q4jg.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfjdczqe4.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpfjdczqe4.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfjdczqe4.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfjdczqe4.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfjdczqe4.swift:45:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpfjdczqe4.swift:45:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpfjdczqe4.swift:45:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpfjdczqe4.swift:45:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n == 1 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n       \
    \ result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn1kf7qy0.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpn1kf7qy0.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn1kf7qy0.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn1kf7qy0.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpn1kf7qy0.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn1kf7qy0.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn1kf7qy0.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn1kf7qy0.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpn1kf7qy0.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn1kf7qy0.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            result.append(b)\n\
    \            a += b\n            b += c\n            c += a + b\n        } else\
    \ {\n            result.append(c)\n            a += c\n            c += b\n  \
    \          b += a\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9jesb35a/tmp9jesb35a.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae18ef0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18ec05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18ec05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18ec047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jesb35a                        0x0000561c38ce25ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae18f0fa460 __libc_start_main +
    245

    6    tmp9jesb35a                        0x0000561c38ce2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for _ in 1...(n + 1) {\n        result.append(result[0] + result[1]\
    \ + result[2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpqpwrmyrd/tmpqpwrmyrd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a3fc9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a3f991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a3f991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a3f9907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpwrmyrd                        0x000055b787d7d61a <unavailable> + 5658

    5    libc.so.6                          0x00002b7a3fe86460 __libc_start_main +
    245

    6    tmpqpwrmyrd                        0x000055b787d7d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy9qbepzg.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpy9qbepzg.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpy9qbepzg.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpy9qbepzg.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpy9qbepzg.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpy9qbepzg.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpy9qbepzg.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpy9qbepzg.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpy9qbepzg.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpy9qbepzg.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    var firstTribonacci = tri(n - 1) + tri(n\
    \ - 2)\n    \n    if n % 2 == 0 {\n        result.append(firstTribonacci)\n  \
    \      result.append(firstTribonacci + tri(n + 1))\n    } else {\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n        result.append(firstTribonacci)\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe21pbbju.swift:27:31: error: missing argument label 'n:' in call\n\
    \    var firstTribonacci = tri(n - 1) + tri(n - 2)\n                         \
    \     ^\n                              n: \n/tmp/tmpe21pbbju.swift:27:44: error:\
    \ missing argument label 'n:' in call\n    var firstTribonacci = tri(n - 1) +\
    \ tri(n - 2)\n                                           ^\n                 \
    \                          n: \n/tmp/tmpe21pbbju.swift:31:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(firstTribonacci + tri(n +\
    \ 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe21pbbju.swift:31:45:\
    \ error: missing argument label 'n:' in call\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n                                            ^\n             \
    \                               n: \n/tmp/tmpe21pbbju.swift:33:23: error: missing\
    \ argument label 'contentsOf:' in call\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n                      ^\n                      contentsOf: \n\
    /tmp/tmpe21pbbju.swift:33:45: error: missing argument label 'n:' in call\n   \
    \     result.append(firstTribonacci + tri(n + 1))\n                          \
    \                  ^\n                                            n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(1)\n        result.append(1 + n / 2)\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphfgjx71r/tmphfgjx71r.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef4ee66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef4eb5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef4eb5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef4eb5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfgjx71r                        0x0000557d1b4024da <unavailable> + 5338

    5    libc.so.6                          0x00002aef4f052460 __libc_start_main +
    245

    6    tmphfgjx71r                        0x0000557d1b402119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzygnshgt.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpzygnshgt.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpzygnshgt.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpzygnshgt.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzygnshgt.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzygnshgt.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzygnshgt.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0wfkouri.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0wfkouri.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0wfkouri.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0wfkouri.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0wfkouri.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0wfkouri.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0wfkouri.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0wfkouri.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0wfkouri.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0wfkouri.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n        result.append(1 + n / 2)\n        if n % 2 ==\
    \ 0 {\n            result.append(1 + n / 2 + n / 2)\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp004iai5z/tmp004iai5z.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c8bbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c88b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c88b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c88b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp004iai5z                        0x0000557962b194da <unavailable> + 5338

    5    libc.so.6                          0x00002b57c8da6460 __libc_start_main +
    245

    6    tmp004iai5z                        0x0000557962b19119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825141
