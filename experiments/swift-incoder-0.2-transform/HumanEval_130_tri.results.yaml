language: swift
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx35m7l53.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx35m7l53.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx35m7l53.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx35m7l53.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx35m7l53.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpx35m7l53.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpx35m7l53.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(1)\n\
    \    result.append(3)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsk9of1fm.swift:31:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpsk9of1fm.swift:31:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpsk9of1fm.swift:31:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpsk9of1fm.swift:35:19: error:\
    \ missing argument label 'contentsOf:' in call\n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                  ^\n                  contentsOf:\
    \ \n/tmp/tmpsk9of1fm.swift:35:23: error: missing argument label 'n:' in call\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                   \
    \   ^\n                      n: \n/tmp/tmpsk9of1fm.swift:35:36: error: missing\
    \ argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                   ^\n                              \
    \     n: \n/tmp/tmpsk9of1fm.swift:35:49: error: missing argument label 'n:' in\
    \ call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            \
    \                                    ^\n                                     \
    \           n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo2bjvjx5.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpo2bjvjx5.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpo2bjvjx5.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo2bjvjx5.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpo2bjvjx5.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpo2bjvjx5.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpo2bjvjx5.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdnl7wx91.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpdnl7wx91.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdnl7wx91.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdnl7wx91.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzbn0naie.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwt04q2bx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpwt04q2bx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpwt04q2bx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpwt04q2bx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpwt04q2bx.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpwt04q2bx.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpwt04q2bx.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi11z90sp.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi11z90sp.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi11z90sp.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpi11z90sp.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpi11z90sp.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmzn4q4jg.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmzn4q4jg.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmzn4q4jg.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmzn4q4jg.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfjdczqe4.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpfjdczqe4.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfjdczqe4.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfjdczqe4.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfjdczqe4.swift:45:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpfjdczqe4.swift:45:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpfjdczqe4.swift:45:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpfjdczqe4.swift:45:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n == 1 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n       \
    \ result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn1kf7qy0.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpn1kf7qy0.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn1kf7qy0.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn1kf7qy0.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpn1kf7qy0.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn1kf7qy0.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpn1kf7qy0.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpn1kf7qy0.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpn1kf7qy0.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpn1kf7qy0.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            result.append(b)\n\
    \            a += b\n            b += c\n            c += a + b\n        } else\
    \ {\n            result.append(c)\n            a += c\n            c += b\n  \
    \          b += a\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9jesb35a/tmp9jesb35a.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae18ef0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18ec05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18ec05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18ec047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jesb35a                        0x0000561c38ce25ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae18f0fa460 __libc_start_main +
    245

    6    tmp9jesb35a                        0x0000561c38ce2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for _ in 1...(n + 1) {\n        result.append(result[0] + result[1]\
    \ + result[2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpqpwrmyrd/tmpqpwrmyrd.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a3fc9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a3f991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a3f991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a3f9907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpwrmyrd                        0x000055b787d7d61a <unavailable> + 5658

    5    libc.so.6                          0x00002b7a3fe86460 __libc_start_main +
    245

    6    tmpqpwrmyrd                        0x000055b787d7d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy9qbepzg.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpy9qbepzg.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpy9qbepzg.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpy9qbepzg.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpy9qbepzg.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpy9qbepzg.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpy9qbepzg.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpy9qbepzg.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpy9qbepzg.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpy9qbepzg.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    var firstTribonacci = tri(n - 1) + tri(n\
    \ - 2)\n    \n    if n % 2 == 0 {\n        result.append(firstTribonacci)\n  \
    \      result.append(firstTribonacci + tri(n + 1))\n    } else {\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n        result.append(firstTribonacci)\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe21pbbju.swift:27:31: error: missing argument label 'n:' in call\n\
    \    var firstTribonacci = tri(n - 1) + tri(n - 2)\n                         \
    \     ^\n                              n: \n/tmp/tmpe21pbbju.swift:27:44: error:\
    \ missing argument label 'n:' in call\n    var firstTribonacci = tri(n - 1) +\
    \ tri(n - 2)\n                                           ^\n                 \
    \                          n: \n/tmp/tmpe21pbbju.swift:31:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(firstTribonacci + tri(n +\
    \ 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe21pbbju.swift:31:45:\
    \ error: missing argument label 'n:' in call\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n                                            ^\n             \
    \                               n: \n/tmp/tmpe21pbbju.swift:33:23: error: missing\
    \ argument label 'contentsOf:' in call\n        result.append(firstTribonacci\
    \ + tri(n + 1))\n                      ^\n                      contentsOf: \n\
    /tmp/tmpe21pbbju.swift:33:45: error: missing argument label 'n:' in call\n   \
    \     result.append(firstTribonacci + tri(n + 1))\n                          \
    \                  ^\n                                            n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        result.append(1)\n\
    \    } else {\n        result.append(1)\n        result.append(1 + n / 2)\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphfgjx71r/tmphfgjx71r.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef4ee66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef4eb5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef4eb5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef4eb5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfgjx71r                        0x0000557d1b4024da <unavailable> + 5338

    5    libc.so.6                          0x00002aef4f052460 __libc_start_main +
    245

    6    tmphfgjx71r                        0x0000557d1b402119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzygnshgt.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpzygnshgt.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpzygnshgt.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpzygnshgt.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzygnshgt.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzygnshgt.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzygnshgt.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0wfkouri.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0wfkouri.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0wfkouri.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0wfkouri.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0wfkouri.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0wfkouri.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0wfkouri.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0wfkouri.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0wfkouri.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0wfkouri.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n        result.append(1 + n / 2)\n        if n % 2 ==\
    \ 0 {\n            result.append(1 + n / 2 + n / 2)\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp004iai5z/tmp004iai5z.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c8bbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c88b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c88b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c88b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp004iai5z                        0x0000557962b194da <unavailable> + 5338

    5    libc.so.6                          0x00002b57c8da6460 __libc_start_main +
    245

    6    tmp004iai5z                        0x0000557962b19119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    for _ in\
    \ 0..<n {\n        tri3 = tri1 + tri2\n        tri2 = tri1\n        tri1 = tri3\n\
    \        result.append(tri3)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpk4emix3w/tmpk4emix3w.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5037707c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50373feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50373fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50373fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4emix3w                        0x0000564d7651f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b50378f3460 __libc_start_main +
    245

    6    tmpk4emix3w                        0x0000564d7651f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4qn8nak.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpo4qn8nak.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpo4qn8nak.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprp786a9e.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprp786a9e.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprp786a9e.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprp786a9e.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprp786a9e.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0nsa0dui.swift:39:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmp0nsa0dui.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmp0nsa0dui.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmp0nsa0dui.swift:39:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbgdv6ult.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpbgdv6ult.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpbgdv6ult.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpbgdv6ult.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpbgdv6ult.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659979743
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var tri1 = 3\n    var tri2 = 1\n    var tri3 = 2\n    var tri4\
    \ = 3\n    if n % 2 == 0 {\n        tri1 = tri1 + tri2\n        tri2 = tri1 +\
    \ tri3\n        tri3 = tri2 + tri4\n        tri4 = tri3 + tri1\n    }\n    for\
    \ _ in 1...n {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n    \
    \    tri2 = tri1 + tri3\n        tri3 = tri2 + tri4\n        tri4 = tri3 + tri1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpditjzqsr/tmpditjzqsr.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d7b68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d785fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d785f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d785e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpditjzqsr                        0x00005585720ac5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b69d7d54460 __libc_start_main +
    245

    6    tmpditjzqsr                        0x00005585720ac209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3nqhkrra.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3nqhkrra.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3nqhkrra.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3nqhkrra.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7vnff6uc.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp7vnff6uc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp7vnff6uc.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp7vnff6uc.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp7vnff6uc.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp7vnff6uc.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp7vnff6uc.swift:40:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm57i5659.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n\
    \    var thirteenthThree = [Int]()\n    var fourteenthThree = [Int]()\n    var\
    \ fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n    var seventeenthThree\
    \ = [Int]()\n    var eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n\
    \    var twentiethThree = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree\
    \ = [Int]()\n    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n\
    \    var seventiethThree = [Int]()\n    var eightiethThree = [Int]()\n    var\
    \ ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n    var thousandthThree\
    \ = [Int]()\n    var millionthThree = [Int]()\n    var billionthThree = [Int]()\n\
    \    var trillionthThree = [Int]()\n    var quadrillionthThree = [Int]()\n   \
    \ var quintillionthThree = [Int]()\n    var sextillionthThree = [Int]()\n    var\
    \ septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n    var nonillionthThree\
    \ = [Int]()\n    var decillionthThree = [Int]()\n    var undecillionthThree =\
    \ [Int]()\n    var duodecillionthThree = [Int]()\n    var tredecillionthThree\
    \ = [Int]()\n    var quattuordecillionthThree = [Int]()\n    var quindecillionthThree\
    \ = [Int]()\n    var sexdecillionthThree = [Int]()\n    var septendecillionthThree\
    \ = [Int]()\n    var octodecillionthThree = [Int]()\n    var novemdecillionthThree\
    \ = [Int]()\n    var vigintilli\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpoclhtorh.swift:68:9: error: type annotation missing in pattern\n\
    \    var vigintilli\n        ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(2)\n    case 4:\n        result.append(3)\n\
    \    case 5:\n        result.append(4)\n    case 6:\n        result.append(5)\n\
    \    case 7:\n        result.append(6)\n    case 8:\n        result.append(7)\n\
    \    case 9:\n        result.append(8)\n    case 10:\n        result.append(9)\n\
    \    case 11:\n        result.append(10)\n    case 12:\n        result.append(11)\n\
    \    case 13:\n        result.append(12)\n    case 14:\n        result.append(13)\n\
    \    case 15:\n        result.append(14)\n    case 16:\n        result.append(15)\n\
    \    case 17:\n        result.append(16)\n    case 18:\n        result.append(17)\n\
    \    case 19:\n        result.append(18)\n    case 20:\n        result.append(19)\n\
    \    case 21:\n        result.append(20)\n    case 22:\n        result.append(21)\n\
    \    case 23:\n        result.append(22)\n    case 24:\n        result.append(23)\n\
    \    case 25:\n        result.append(24)\n    case 26:\n        result.append(25)\n\
    \    case 27:\n        result.append(26)\n    case 28:\n        result.append(27)\n\
    \    case 29:\n        result.append(28)\n    case 30:\n        result.append(29)\n\
    \    case 31:\n        result.append(30)\n    case 32:\n        result.append(31)\n\
    \    case 33:\n        result.append(32)\n    case 34:\n        result.append(33)\n\
    \    case 35:\n        result.append(34)\n    case 36:\n        result.append(35)\n\
    \    case 37:\n        result.append(36)\n    case 38:\n        result.append(37)\n\
    \    case 39:\n        result.append(38)\n    case 40:\n        result.append(39)\n\
    \    case 41:\n        result.append(40)\n    case 42:\n        result.append(41)\n\
    \    case 43:\n        result.append(42)\n    case 44:\n        result.append(43)\n\
    \    case 45:\n        result.append(44)\n    case 46:\n        result.append(45)\n\
    \    case 47:\n        result.append(46)\n    case 48:\n        result.append(47)\n\
    \    case 49:\n        result.append(48)\n    case 50:\n        result.append(49)\n\
    \    case 51:\n        result.append(50)\n    case 52:\n        result.append(51)\n\
    \    case 53:\n        result.append(52)\n    case 54:\n        result.append(53)\n\
    \    case 55:\n        result.append(54)\n    case 56:\n        result.append(55)\n\
    \    case 57:\n        result.append(56)\n    case 58:\n        result.append(57)\n\
    \    case 59:\n        result.append(58)\n    case 60:\n        result.append(59)\n\
    \    case 61:\n        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppbq_56m0.swift:146:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmppbq_56m0.swift:170:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmppbq_56m0.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmppbq_56m0.swift:145:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmppbq_56m0.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmppbq_56m0.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmppbq_56m0.swift:149:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjmik_n9w.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpjmik_n9w.swift:39:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpjmik_n9w.swift:39:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpjmik_n9w.swift:41:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjmik_n9w.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjmik_n9w.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjmik_n9w.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n   \
    \ var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n    var x = Int(1)\n    var y = Int(1)\n\
    \    var z = Int(1)\n    var a = Int(1)\n    var b = Int(1)\n    var c = Int(1)\n\
    \    var d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n\
    \    var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8nip_t_e.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmp8nip_t_e.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmp8nip_t_e.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(1)\n "
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzhffsoax.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzhffsoax.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzhffsoax.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzhffsoax.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzhffsoax.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzhffsoax.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpzhffsoax.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    func tri(n : Int, result : [Int]) -> [Int] {\n        if n <=\
    \ 1 {\n            result.append(1)\n            return result\n        }\n  \
    \      \n        func tri(n : Int, result : [Int]) -> [Int] {\n            if\
    \ n <= 1 {\n                result.append(1)\n                return result\n\
    \            }\n            \n            func tri(n : Int, result : [Int]) ->\
    \ [Int] {\n                if n <= 1 {\n                    result.append(1)\n\
    \                    return result\n                }\n                \n    \
    \            func tri(n : Int, result : [Int]) -> [Int] {\n                  \
    \  if n <= 1 {\n                        result.append(1)\n                   \
    \     return result\n                    }\n                    \n           \
    \         func tri(n : Int, result : [Int]) -> [Int] {\n                     \
    \   if n <= 1 {\n                            result.append(1)\n              \
    \              return result\n                        }\n                    \
    \    \n                        func tri(n : Int, result : [Int]) -> [Int] {\n\
    \                            if n <= 1 {\n                                result.append(1)\n\
    \                                return result\n                            }\n\
    \                            \n                            func tri(n : Int, result\
    \ : [Int]) -> [Int] {\n                                if n <= 1 {\n         \
    \                           result.append(1)\n                               \
    \     return result\n                                }\n                     \
    \           \n                                func tri(n : Int, result : [Int])\
    \ -> [Int] {\n                                    if n <= 1 {\n              \
    \                          result.append(1)\n                                \
    \        return result\n                                    }\n              \
    \                      \n                                    func tri(n : Int,\
    \ result : [Int]) -> [Int] {\n                                        if n <=\
    \ 1 {\n                                            result.append(1)\n        \
    \                                    return result\n                         \
    \               }\n                                        \n                \
    \                        func tri(n : Int, result : [Int]) -> [Int] {\n      \
    \                                      if n <= 1 {\n                         \
    \                       result.append(1)\n                                   \
    \             return result\n                                            }\n \
    \                                           \n                               \
    \             func tri(n : Int, result : [Int]) -> [Int] {\n                 \
    \                               if n <= 1 {\n                                \
    \                    result.append(1)\n                                      \
    \              return result\n                                               \
    \ }\n                                                \n                      \
    \                          func tri(n : Int, result : [Int]) -> [Int] {\n    \
    \                                                if n <= 1 {\n               \
    \                                         result.append(1)\n                 \
    \                                       return result\n                      \
    \                              }\n                                           \
    \         \n                                                    func tri(n : Int,\
    \ result : [Int]) -> [Int] {\n                                               \
    \         if n <= 1 {\n                                                      \
    \      result.append(1)\n                                                    \
    \        return result\n                                                     \
    \   }\n                                                        \n            \
    \                                            func tri(n : Int, result : [Int])\
    \ -> [Int] {\n                                                            if n\
    \ <= 1 {\n                                                                result.append(1)\n\
    \                                                                return result\n\
    \                                                            }\n             \
    \                                               \n                           \
    \                                 func tri(n \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8vz64zc3.swift:110:70: error: expected parameter name followed\
    \ by ':'\n                                                            func tri(n\
    \ \n                                                                     ^\n/tmp/tmp8vz64zc3.swift:135:28:\
    \ error: expected '}' at end of brace statement\nassert(tri(n: 1) == [1, 3])\n\
    \                           ^\n/tmp/tmp8vz64zc3.swift:98:96: note: to match this\
    \ opening '{'\n                                                    func tri(n\
    \ : Int, result : [Int]) -> [Int] {\n                                        \
    \                                                       ^\n/tmp/tmp8vz64zc3.swift:135:28:\
    \ error: expected '}' at end of brace statement\nassert(tri(n: 1) == [1, 3])\n\
    \                           ^\n/tmp/tmp8vz64zc3.swift:92:92: note: to match this\
    \ opening '{'\n                                                func tri(n : Int,\
    \ result : [Int]) -> [Int] {\n                                               \
    \                                            ^\n/tmp/tmp8vz64zc3.swift:135:28:\
    \ error: expected '}' at end of brace statement\nassert(tri(n: 1) == [1, 3])\n\
    \                           ^\n/tmp/tmp8vz64zc3.swift:86:88: note: to match this\
    \ opening '{'\n                                            func tri(n : Int, result\
    \ : [Int]) -> [Int] {\n                                                      \
    \                                 ^\n/tmp/tmp8vz64zc3.swift:135:28: error: expected\
    \ '}' at end of brace statement\nassert(tri(n: 1) == [1, 3])\n               \
    \            ^\n/tmp/tmp8vz64zc3.swift:80:84: note: to match this opening '{'\n\
    \                                        func tri(n : Int, result : [Int]) ->\
    \ [Int] {\n                                                                  \
    \                 ^\n/tmp/tmp8vz64zc3.swift:135:28: error: expected '}' at end\
    \ of brace statement\nassert(tri(n: 1) == [1, 3])\n                          \
    \ ^\n/tmp/tmp8vz64zc3.swift:74:80: note: to match this opening '{'\n         \
    \                           func tri(n : Int, result : [Int]) -> [Int] {\n   \
    \                                   "
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt1fqzqcb.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpt1fqzqcb.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpt1fqzqcb.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpt1fqzqcb.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpt1fqzqcb.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpt1fqzqcb.swift:36:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpt1fqzqcb.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9mma5fx7.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp9mma5fx7.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9mma5fx7.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9mma5fx7.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp9mma5fx7.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmp9mma5fx7.swift:36:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmp9mma5fx7.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe5e1cjaj.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpe5e1cjaj.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe5e1cjaj.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe5e1cjaj.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe5e1cjaj.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe5e1cjaj.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe5e1cjaj.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe5e1cjaj.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe5e1cjaj.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpe5e1cjaj.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc8350ne4.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpc8350ne4.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpc8350ne4.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpc8350ne4.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpc8350ne4.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpc8350ne4.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpc8350ne4.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpc8350ne4.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpc8350ne4.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpc8350ne4.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkl8841th.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpkl8841th.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkl8841th.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkl8841th.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpkl8841th.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpkl8841th.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpkl8841th.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu_k8e_rh.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpu_k8e_rh.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu_k8e_rh.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu_k8e_rh.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu_k8e_rh.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpu_k8e_rh.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpu_k8e_rh.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8omivbuj.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8omivbuj.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8omivbuj.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8omivbuj.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(1)\n        result.append(n / 2)\n    }\
    \ else {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcvg_6gp_.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpcvg_6gp_.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcvg_6gp_.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcvg_6gp_.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpti51n9lg.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpti51n9lg.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpti51n9lg.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpti51n9lg.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpti51n9lg.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpti51n9lg.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpti51n9lg.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var first = 3\n    var second = 1\n    var third = 1\n    for\
    \ _ in 1...n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first = second\n        second = third\n\
    \        third = first + second\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpwsp8dfx6/tmpwsp8dfx6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55f746cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55f7163b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55f7163988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55f71627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsp8dfx6                        0x0000558b1e16c5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b55f7658460 __libc_start_main +
    245

    6    tmpwsp8dfx6                        0x0000558b1e16c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptbuwtx23.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptbuwtx23.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptbuwtx23.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptbuwtx23.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    if n %\
    \ 2 == 0 {\n        tri1 = tri1 + tri2\n        tri2 = tri3\n        tri3 = tri1\
    \ + tri2\n    }\n    for _ in 1...n {\n        result.append(tri3)\n        tri3\
    \ = tri1 + tri2\n        tri2 = tri3\n        tri1 = tri1 + tri2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpa3wetch5/tmpa3wetch5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b27bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4b24b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4b24b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4b24b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3wetch5                        0x00005557fa48d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad4b29aa460 __libc_start_main +
    245

    6    tmpa3wetch5                        0x00005557fa48d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm57i5659.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj1hy_iv7.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n / 2)\n    } else {\n        result.append(1)\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpscqv0u22.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpscqv0u22.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpscqv0u22.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpscqv0u22.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiqpbqgka.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiqpbqgka.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiqpbqgka.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiqpbqgka.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiqpbqgka.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiqpbqgka.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiqpbqgka.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiqpbqgka.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiqpbqgka.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiqpbqgka.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    default:\n        let firstTri = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        result.append(firstTri)\n    }\n    \n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbyccrirv.swift:26:28: error: missing argument label 'n:' in call\n\
    \        let firstTri = tri(n - 1) + tri(n - 2) + tri(n + 1)\n               \
    \            ^\n                           n: \n/tmp/tmpbyccrirv.swift:26:41:\
    \ error: missing argument label 'n:' in call\n        let firstTri = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n                                        ^\n     \
    \                                   n: \n/tmp/tmpbyccrirv.swift:26:54: error:\
    \ missing argument label 'n:' in call\n        let firstTri = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                                     ^\n\
    \                                                     n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp89du72pz.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp89du72pz.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp89du72pz.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp89du72pz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp89du72pz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var first = 0\n    var second = 1\n    var third = 1\n    var\
    \ fourth = 1\n    for _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        result.append(fourth)\n        first =\
    \ second\n        second = third\n        third = fourth\n        fourth = first\
    \ + second + third\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzj4bku7d/tmpzj4bku7d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acce22b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acce1fa8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acce1fa8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acce1fa77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzj4bku7d                        0x000055583441d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002acce249d460 __libc_start_main +
    245

    6    tmpzj4bku7d                        0x000055583441d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcxqr7765.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpcxqr7765.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcxqr7765.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcxqr7765.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcxqr7765.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpcxqr7765.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpcxqr7765.swift:40:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n        result.append(tri(n + 1))\n        return result\n  \
    \  }\n    result.append(tri(n - 1) + tri(n - 2))\n    result.append(tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu7dvk3zr.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpu7dvk3zr.swift:34:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpu7dvk3zr.swift:34:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpu7dvk3zr.swift:35:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n + 1))\n           \
    \           ^\n                      contentsOf: \n/tmp/tmpu7dvk3zr.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n + 1))\n\
    \                          ^\n                          n: \n/tmp/tmpu7dvk3zr.swift:38:19:\
    \ error: missing argument label 'contentsOf:' in call\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n                  ^\n                  contentsOf: \n/tmp/tmpu7dvk3zr.swift:38:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                      ^\n                      n: \n/tmp/tmpu7dvk3zr.swift:38:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n/tmp/tmpu7dvk3zr.swift:39:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n + 1))\n                  ^\n              \
    \    contentsOf: \n/tmp/tmpu7dvk3zr.swift:39:23: error: missing argument label\
    \ 'n:' in call\n    result.append(tri(n + 1))\n                      ^\n     \
    \                 n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwt04q2bx.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpwt04q2bx.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpwt04q2bx.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpwt04q2bx.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpwt04q2bx.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpwt04q2bx.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpwt04q2bx.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8kxk78hr.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8kxk78hr.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8kxk78hr.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8kxk78hr.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8kxk78hr.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8kxk78hr.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8kxk78hr.swift:42:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8kxk78hr.swift:42:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8kxk78hr.swift:43:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8kxk78hr.swift:43:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result;\n  \
    \  }\n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqm3vg276.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqm3vg276.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqm3vg276.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqm3vg276.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqm3vg276.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqm3vg276.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqm3vg276.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbgdv6ult.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpbgdv6ult.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpbgdv6ult.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpbgdv6ult.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpbgdv6ult.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpbgdv6ult.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result;\n  \
    \  }\n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqm3vg276.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqm3vg276.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqm3vg276.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqm3vg276.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqm3vg276.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqm3vg276.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqm3vg276.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu_k8e_rh.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpu_k8e_rh.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu_k8e_rh.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu_k8e_rh.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu_k8e_rh.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpu_k8e_rh.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpu_k8e_rh.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(5)\n\
    \    }\n    \n    for _ in 1...n {\n        result.append(result[-1] + result[-2])\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b777a611c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b777a308561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b777a308286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b777a30813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b777a307bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b777a107e83 <unavailable> + 188035

    6    tmplgf24ee0                        0x000055f21dfd739b <unavailable> + 9115

    7    tmplgf24ee0                        0x000055f21dfd653b <unavailable> + 5435

    8    libc.so.6                          0x00002b777a7fd460 __libc_start_main +
    245

    9    tmplgf24ee0                        0x000055f21dfd6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm57i5659.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfj6133mg.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpfj6133mg.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfj6133mg.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfj6133mg.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfj6133mg.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpfj6133mg.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfj6133mg.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfj6133mg.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfj6133mg.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpfj6133mg.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiqpbqgka.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiqpbqgka.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiqpbqgka.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiqpbqgka.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiqpbqgka.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiqpbqgka.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiqpbqgka.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiqpbqgka.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiqpbqgka.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiqpbqgka.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzhffsoax.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzhffsoax.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzhffsoax.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzhffsoax.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzhffsoax.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzhffsoax.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpzhffsoax.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt_qbgwra.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpt_qbgwra.swift:38:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpt_qbgwra.swift:38:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpt_qbgwra.swift:40:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpt_qbgwra.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpt_qbgwra.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpt_qbgwra.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0nsa0dui.swift:39:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmp0nsa0dui.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmp0nsa0dui.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmp0nsa0dui.swift:39:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n   \
    \ var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(0)\n    var o = Int(1)\n\
    \    var p = Int(2)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(0)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n\
    \    var x = Int(2)\n    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(2)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(0)\n    var o = Int(1)\n    var p = Int(2)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(0)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(1)\n    var x = Int(2)\n    var y = Int(1)\n\
    \    var z = Int(2)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n\
    \    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(0)\n    var o = Int(1)\n\
    \    var p = Int(2)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(0)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n\
    \    var x = Int(2)\n    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(2)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(0)\n    var o = Int(1)\n    var p = Int(2)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(0)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(1)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq0k57kt5.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmpq0k57kt5.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpq0k57kt5.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmpq0k57kt5.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpq0k57kt5.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpq0k57kt5.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpq0k57kt5.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(2)\n        ^\n/tmp/tmpq0k57kt5.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(2)\n        ^\n/tmp/tmpq0k57kt5.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpq0k57kt5.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpq0k57kt5.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmpq0k57kt5.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(2)\n        ^\n/tmp/tmpq0k57kt5.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(2)\n "
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8ogxtloa.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8ogxtloa.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8ogxtloa.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8ogxtloa.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8ogxtloa.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8ogxtloa.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8ogxtloa.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8ogxtloa.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8ogxtloa.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8ogxtloa.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    if n %\
    \ 2 == 0 {\n        tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n        tri3\
    \ = tri1 + tri2\n    }\n    for _ in 1...n {\n        result.append(tri1)\n  \
    \      tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n        tri3 = tri1 + tri2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpnmjo30jj/tmpnmjo30jj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab023f8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab023c82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab023c82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab023c817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmjo30jj                        0x000055a116c3f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab024177460 __libc_start_main +
    245

    6    tmpnmjo30jj                        0x000055a116c3f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyifjzfhc.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyifjzfhc.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyifjzfhc.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyifjzfhc.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyifjzfhc.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyifjzfhc.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyifjzfhc.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyifjzfhc.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyifjzfhc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyifjzfhc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp89du72pz.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp89du72pz.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp89du72pz.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp89du72pz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp89du72pz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm3are5vi.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm3are5vi.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm3are5vi.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm3are5vi.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp46tnlwof.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp46tnlwof.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp46tnlwof.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp46tnlwof.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp46tnlwof.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp46tnlwof.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp46tnlwof.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var tri1 = 3\n    var tri2 = 1\n    var tri3 = 2\n    if n %\
    \ 2 == 0 {\n        tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n        tri3\
    \ = tri2 + tri1\n    }\n    for _ in 1...n {\n        result.append(tri1)\n  \
    \      tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n        tri3 = tri2 + tri1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpl0h1_22t/tmpl0h1_22t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dccf94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dccc8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dccc8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dccc8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0h1_22t                        0x00005580e11ef5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b8dcd180460 __libc_start_main +
    245

    6    tmpl0h1_22t                        0x00005580e11ef209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2))\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8wbd2p2x.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8wbd2p2x.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8wbd2p2x.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8wbd2p2x.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8wbd2p2x.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp8wbd2p2x.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp8wbd2p2x.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        return result;\n    }\n    if n == 1 {\n\
    \        result.append(3)\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.append(1)\n        result.append(n / 2)\n    } else {\n      \
    \  result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppbni1y7j.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmppbni1y7j.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmppbni1y7j.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmppbni1y7j.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n   \
    \ var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n    var x = Int(1)\n    var y = Int(1)\n\
    \    var z = Int(1)\n    var a = Int(1)\n    var b = Int(1)\n    var c = Int(1)\n\
    \    var d = Int(1)\n    var e = Int(1)\n    var f = Int(1)\n    var g = Int(1)\n\
    \    var h = Int(1)\n    var i = Int(1)\n    var j = Int(1)\n    var k = Int(1)\n\
    \    var l = Int(1)\n    var m = Int(1)\n    var n = Int(1)\n    var o = Int(1)\n\
    \    var p = Int(1)\n    var q = Int(1)\n    var r = Int(1)\n    var s = Int(1)\n\
    \    var t = Int(1)\n    var u = Int(1)\n    var v = Int(1)\n    var w = Int(1)\n\
    \    var x = Int(1)\n    var y = Int(1)\n    var z = Int(1)\n    var a = Int(1)\n\
    \    var b = Int(1)\n    var c = Int(1)\n    var d = Int(1)\n    var e = Int(1)\n\
    \    var f = Int(1)\n    var g = Int(1)\n    var h = Int(1)\n    var i = Int(1)\n\
    \    var j = Int(1)\n    var k = Int(1)\n    var l = Int(1)\n    var m = Int(1)\n\
    \    var n = Int(1)\n    var o = Int(1)\n    var p = Int(1)\n    var q = Int(1)\n\
    \    var r = Int(1)\n    var s = Int(1)\n    var t = Int(1)\n    var u = Int(1)\n\
    \    var v = Int(1)\n    var w = Int(1)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8nip_t_e.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmp8nip_t_e.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmp8nip_t_e.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(1)\n        ^\n/tmp/tmp8nip_t_e.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(1)\n "
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm57i5659.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n   \
    \ } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprdyiikd8.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmprdyiikd8.swift:29:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmprdyiikd8.swift:29:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmprdyiikd8.swift:31:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprdyiikd8.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprdyiikd8.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprdyiikd8.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1k1_05bj.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp1k1_05bj.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp1k1_05bj.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp1k1_05bj.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp1k1_05bj.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp1k1_05bj.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp1k1_05bj.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp1k1_05bj.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp1k1_05bj.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp1k1_05bj.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsc0p3rz5.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsc0p3rz5.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsc0p3rz5.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsc0p3rz5.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsc0p3rz5.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsc0p3rz5.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsc0p3rz5.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsc0p3rz5.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsc0p3rz5.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsc0p3rz5.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj1hy_iv7.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyox4458k.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyox4458k.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyox4458k.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyox4458k.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyox4458k.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyox4458k.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyox4458k.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyox4458k.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyox4458k.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyox4458k.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc6x0_3j0.swift:41:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpc6x0_3j0.swift:41:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpc6x0_3j0.swift:41:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpc6x0_3j0.swift:48:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmpc6x0_3j0.swift:48:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmpc6x0_3j0.swift:48:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmpc6x0_3j0.swift:48:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    \n    let firstTri = tri(n\
    \ - 1)\n    let secondTri = tri(n - 2)\n    \n    result.append(firstTri[0] +\
    \ secondTri[0])\n    result.append(firstTri[1] + secondTri[1])\n    result.append(firstTri[2]\
    \ + secondTri[2])\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8jxva0ux.swift:35:24: error: missing argument label 'n:' in call\n\
    \    let firstTri = tri(n - 1)\n                       ^\n                   \
    \    n: \n/tmp/tmp8jxva0ux.swift:36:25: error: missing argument label 'n:' in\
    \ call\n    let secondTri = tri(n - 2)\n                        ^\n          \
    \              n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprp786a9e.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprp786a9e.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprp786a9e.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprp786a9e.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprp786a9e.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    switch\
    \ n {\n    case 1:\n        result.append(3)\n    case 2:\n        result.append(1)\n\
    \        result.append(3)\n    case 3:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n    case 4:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n    case 5:\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n    case 6:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n    case 7:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n    case 8:\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n    case 9:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n    case 10:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n    case 11:\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n    case 12:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n    case 13:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n    case 14:\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n    case 15:\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_6pcju0n.swift:152:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp_6pcju0n.swift:176:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp_6pcju0n.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp_6pcju0n.swift:151:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmp_6pcju0n.swift:25:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp_6pcju0n.swift:25:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp_6pcju0n.swift:155:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj1hy_iv7.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4qn8nak.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpo4qn8nak.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpo4qn8nak.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ehnu7of.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6ehnu7of.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6ehnu7of.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6ehnu7of.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6ehnu7of.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6ehnu7of.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6ehnu7of.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp89du72pz.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp89du72pz.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp89du72pz.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp89du72pz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp89du72pz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc6x0_3j0.swift:41:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpc6x0_3j0.swift:41:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpc6x0_3j0.swift:41:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpc6x0_3j0.swift:48:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmpc6x0_3j0.swift:48:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmpc6x0_3j0.swift:48:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmpc6x0_3j0.swift:48:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp89du72pz.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp89du72pz.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp89du72pz.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp89du72pz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp89du72pz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzbn0naie.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp82uvsx71.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp82uvsx71.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp82uvsx71.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp82uvsx71.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp82uvsx71.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp82uvsx71.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp82uvsx71.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp82uvsx71.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp82uvsx71.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp82uvsx71.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n   \
    \ var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(0)\n\
    \    var l = Int(1)\n    var m = Int(0)\n    var n = Int(1)\n    var o = Int(0)\n\
    \    var p = Int(1)\n    var q = Int(0)\n    var r = Int(1)\n    var s = Int(0)\n\
    \    var t = Int(1)\n    var u = Int(0)\n    var v = Int(1)\n    var w = Int(0)\n\
    \    var x = Int(1)\n    var y = Int(0)\n    var z = Int(1)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(0)\n    var l = Int(1)\n    var m = Int(0)\n\
    \    var n = Int(1)\n    var o = Int(0)\n    var p = Int(1)\n    var q = Int(0)\n\
    \    var r = Int(1)\n    var s = Int(0)\n    var t = Int(1)\n    var u = Int(0)\n\
    \    var v = Int(1)\n    var w = Int(0)\n    var x = Int(1)\n    var y = Int(0)\n\
    \    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n\
    \    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(0)\n\
    \    var l = Int(1)\n    var m = Int(0)\n    var n = Int(1)\n    var o = Int(0)\n\
    \    var p = Int(1)\n    var q = Int(0)\n    var r = Int(1)\n    var s = Int(0)\n\
    \    var t = Int(1)\n    var u = Int(0)\n    var v = Int(1)\n    var w = Int(0)\n\
    \    var x = Int(1)\n    var y = Int(0)\n    var z = Int(1)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(0)\n    var l = Int(1)\n    var m = Int(0)\n\
    \    var n = Int(1)\n    var o = Int(0)\n    var p = Int(1)\n    var q = Int(0)\n\
    \    var r = Int(1)\n    var s = Int(0)\n    var t = Int(1)\n    var u = Int(0)\n\
    \    var v = Int(1)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp58bdh8xn.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmp58bdh8xn.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmp58bdh8xn.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmp58bdh8xn.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmp58bdh8xn.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(1)\n        ^\n/tmp/tmp58bdh8xn.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmp58bdh8xn.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 2)\n    } else {\n        result.append(n)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbvs64h3_.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpbvs64h3_.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbvs64h3_.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbvs64h3_.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpti51n9lg.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpti51n9lg.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpti51n9lg.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpti51n9lg.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpti51n9lg.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpti51n9lg.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpti51n9lg.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp931ekcsm.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp931ekcsm.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp931ekcsm.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp931ekcsm.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4qn8nak.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpo4qn8nak.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpo4qn8nak.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprp786a9e.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprp786a9e.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprp786a9e.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprp786a9e.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprp786a9e.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwfr785wn.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpwfr785wn.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpwfr785wn.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpwfr785wn.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpwfr785wn.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpwfr785wn.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpwfr785wn.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpwfr785wn.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpwfr785wn.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpwfr785wn.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvix8lv3b.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpvix8lv3b.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvix8lv3b.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvix8lv3b.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvix8lv3b.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpvix8lv3b.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpvix8lv3b.swift:41:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprw5vrarz.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprw5vrarz.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprw5vrarz.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprw5vrarz.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprw5vrarz.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprw5vrarz.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprw5vrarz.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprw5vrarz.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprw5vrarz.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprw5vrarz.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpicvxdewl.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpicvxdewl.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpicvxdewl.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpicvxdewl.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpicvxdewl.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpicvxdewl.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpicvxdewl.swift:31:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo4qn8nak.swift:160:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpo4qn8nak.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpo4qn8nak.swift:139:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgjpwjwvh.swift:41:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n          \
    \         ^\n                   n: \n/tmp/tmpgjpwjwvh.swift:41:33: error: missing\
    \ argument label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n                                ^\n                     \
    \           n: \n/tmp/tmpgjpwjwvh.swift:41:46: error: missing argument label 'n:'\
    \ in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                             ^\n                            \
    \                 n: \n/tmp/tmpgjpwjwvh.swift:41:59: error: missing argument label\
    \ 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)\n                                                          ^\n          \
    \                                                n: \n/tmp/tmpgjpwjwvh.swift:48:16:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n               ^\n              \
    \ n: \n/tmp/tmpgjpwjwvh.swift:48:29: error: missing argument label 'n:' in call\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n \
    \                           ^\n                            n: \n/tmp/tmpgjpwjwvh.swift:48:42:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n                                \
    \         ^\n                                         n: \n/tmp/tmpgjpwjwvh.swift:48:55:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n                                \
    \                      ^\n                                                   \
    \   n: \n/tmp/tmpgjpwjwvh.swift:48:68: error: missing argument label 'n:' in call\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) + tri(n + 3)\n \
    \                                                                  ^\n       \
    \                                                     "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaj9a66xh.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpaj9a66xh.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaj9a66xh.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaj9a66xh.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpaj9a66xh.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpaj9a66xh.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaj9a66xh.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaj9a66xh.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpaj9a66xh.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpaj9a66xh.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_k3g0ci7.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_k3g0ci7.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_k3g0ci7.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_k3g0ci7.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            a += b\n     \
    \       b += c\n        } else {\n            b += a\n            c += b\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpm_15m0dm/tmpm_15m0dm.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81d5e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81d5b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81d5b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81d5b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_15m0dm                        0x000055fcec1695ca <unavailable> + 5578

    5    libc.so.6                          0x00002b81d6073460 __libc_start_main +
    245

    6    tmpm_15m0dm                        0x000055fcec169209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstTribonacciNumber: Int\n    var secondTribonacciNumber:\
    \ Int\n    var thirdTribonacciNumber: Int\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        firstTribonacciNumber\
    \ = 1\n        secondTribonacciNumber = 2\n        thirdTribonacciNumber = 1\n\
    \    } else {\n        firstTribonacciNumber = 1\n        secondTribonacciNumber\
    \ = 1\n        thirdTribonacciNumber = 2\n    }\n    \n    for i in 1...n {\n\
    \        result.append(thirdTribonacciNumber)\n        thirdTribonacciNumber =\
    \ secondTribonacciNumber + firstTribonacciNumber\n        secondTribonacciNumber\
    \ = firstTribonacciNumber\n        firstTribonacciNumber = thirdTribonacciNumber\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpu9gnp9hx/tmpu9gnp9hx.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade3f5d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3f2cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3f2cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade3f2ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9gnp9hx                        0x000056227bd585ca <unavailable> + 5578

    5    libc.so.6                          0x00002ade3f7c0460 __libc_start_main +
    245

    6    tmpu9gnp9hx                        0x000056227bd58209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8uky9nf6.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8uky9nf6.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8uky9nf6.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8uky9nf6.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8uky9nf6.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8uky9nf6.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8uky9nf6.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8uky9nf6.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8uky9nf6.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8uky9nf6.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 1 {\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n    }\n    \n    result.append(1)\n    result.append(2)\n\
    \    result.append(3)\n    result.append(4)\n    result.append(5)\n    result.append(6)\n\
    \    result.append(7)\n    result.append(8)\n    result.append(9)\n    result.append(10)\n\
    \    result.append(11)\n    result.append(12)\n    result.append(13)\n    result.append(14)\n\
    \    result.append(15)\n    result.append(16)\n    result.append(17)\n    result.append(18)\n\
    \    result.append(19)\n    result.append(20)\n    result.append(21)\n    result.append(22)\n\
    \    result.append(23)\n    result.append(24)\n    result.append(25)\n    result.append(26)\n\
    \    result.append(27)\n    result.append(28)\n    result.append(29)\n    result.append(30)\n\
    \    result.append(31)\n    result.append(32)\n    result.append(33)\n    result.append(34)\n\
    \    result.append(35)\n    result.append(36)\n    result.append(37)\n    result.append(38)\n\
    \    result.append(39)\n    result.append(40)\n    result.append(41)\n    result.append(42)\n\
    \    result.append(43)\n    result.append(44)\n    result.append(45)\n    result.append(46)\n\
    \    result.append(47)\n    result.append(48)\n    result.append(49)\n    result.append(50)\n\
    \    result.append(51)\n    result.append(52)\n    result.append(53)\n    result.append(54)\n\
    \    result.append(55)\n    result.append(56)\n    result.append(57)\n    result.append(58)\n\
    \    result.append(59)\n    result.append(60)\n    result.append(61)\n    result.append(62)\n\
    \    result.append(63)\n    result.append(64)\n    result.append(65)\n    result.append(66)\n\
    \    result.append(67)\n    result.append(68)\n    result.append(69)\n    result.append(70)\n\
    \    result.append(71)\n    result.append(72)\n    result.append(73)\n    result.append(74)\n\
    \    result.append(75)\n    result.append(76)\n    result.append(77)\n    result.append(78)\n\
    \    result.append(79)\n    result.append(80)\n    result.append(81)\n    result.append(82)\n\
    \    result.append(83)\n    result.append(84)\n    result.append(85)\n    result.append(86)\n\
    \    result.append(87)\n    result.append(88)\n    result.append(89)\n    result.append(90)\n\
    \    result.append(91)\n    result.append(92)\n    result.append(93)\n    result.append(94)\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: '/tmp/tmpw1_clies.swift:137:1: error: missing return in global function
    expected to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq9a61d4a.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpq9a61d4a.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpq9a61d4a.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpq9a61d4a.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpq9a61d4a.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpq9a61d4a.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpq9a61d4a.swift:42:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp89du72pz.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp89du72pz.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp89du72pz.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp89du72pz.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp89du72pz.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp89du72pz.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplg5wj2ow.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmplg5wj2ow.swift:29:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmplg5wj2ow.swift:29:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmplg5wj2ow.swift:31:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmplg5wj2ow.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplg5wj2ow.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplg5wj2ow.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6x5krzne.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6x5krzne.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6x5krzne.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6x5krzne.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6x5krzne.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp6x5krzne.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6x5krzne.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6x5krzne.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6x5krzne.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6x5krzne.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(1)\n        result.append(n / 2)\n    }\
    \ else {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcvg_6gp_.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpcvg_6gp_.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcvg_6gp_.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcvg_6gp_.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        return result\n    }\n    \n    var\
    \ first = 1\n    var second = 2\n    var third = 3\n    \n    for _ in 1...n {\n\
    \        result.append(first)\n        \n        if n % 2 == 0 {\n           \
    \ third = first + second\n            first = second\n            second = third\n\
    \        } else {\n            third = first + second\n            first = second\n\
    \            second = third\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5o9whzuf/tmp5o9whzuf.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870c4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5o9whzuf                        0x00005599ed2675ca <unavailable> + 5578

    5    libc.so.6                          0x00002b870c6c7460 __libc_start_main +
    245

    6    tmp5o9whzuf                        0x00005599ed267209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx35m7l53.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpx35m7l53.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpx35m7l53.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpx35m7l53.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpx35m7l53.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpx35m7l53.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpx35m7l53.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0f54geiy.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0f54geiy.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0f54geiy.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0f54geiy.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0f54geiy.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp0f54geiy.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0f54geiy.swift:41:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0f54geiy.swift:41:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0f54geiy.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp0f54geiy.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979745
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    } else {\n \
    \       result.append(3)\n        result.append(1 + n / 2)\n        if n % 2 ==\
    \ 0 {\n            result.append(1 + n / 2 + n / 2)\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp004iai5z/tmp004iai5z.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57c8bbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57c88b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57c88b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57c88b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp004iai5z                        0x0000557962b194da <unavailable> + 5338

    5    libc.so.6                          0x00002b57c8da6460 __libc_start_main +
    245

    6    tmp004iai5z                        0x0000557962b19119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(n)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpllefc1mr.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpllefc1mr.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpllefc1mr.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpllefc1mr.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n == 1 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n       \
    \ result.append(n)\n        result.append(n + 2)\n        return result\n    }\n\
    \    \n    result.append(1)\n    result.append(n)\n    result.append(n + 2)\n\
    \    result.append(n + 3)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpq7fo2brr/tmpq7fo2brr.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c5a660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c5a357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c5a357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c5a3567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7fo2brr                        0x0000556a8fa014da <unavailable> + 5338

    5    libc.so.6                          0x00002b1c5a84c460 __libc_start_main +
    245

    6    tmpq7fo2brr                        0x0000556a8fa01119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvol3e6z3.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpvol3e6z3.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvol3e6z3.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvol3e6z3.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvol3e6z3.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpvol3e6z3.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvol3e6z3.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvol3e6z3.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvol3e6z3.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpvol3e6z3.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpti51n9lg.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpti51n9lg.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpti51n9lg.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpti51n9lg.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpti51n9lg.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpti51n9lg.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpti51n9lg.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    default:\n        let firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        result.append(firstTribonacci)\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpegvnrlot.swift:26:35: error: missing argument label 'n:' in call\n\
    \        let firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        \
    \                          ^\n                                  n: \n/tmp/tmpegvnrlot.swift:26:48:\
    \ error: missing argument label 'n:' in call\n        let firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \    ^\n                                               n: \n/tmp/tmpegvnrlot.swift:26:61:\
    \ error: missing argument label 'n:' in call\n        let firstTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \                 ^\n                                                        \
    \    n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    }\n    else {\n        result.append(1)\n        result.append(3)\n     \
    \   result.append(3)\n    }\n    for _ in 1...n {\n        result.append(result[n-2]\
    \ + result[n-1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpo57lvxcn/tmpo57lvxcn.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae75f2d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae75efcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae75efca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae75efc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo57lvxcn                        0x000055ef79aac61a <unavailable> + 5658

    5    libc.so.6                          0x00002ae75f4bf460 __libc_start_main +
    245

    6    tmpo57lvxcn                        0x000055ef79aac259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpesn5i_0e.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpesn5i_0e.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpesn5i_0e.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpesn5i_0e.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpesn5i_0e.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpesn5i_0e.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpesn5i_0e.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbyx6ys1q.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpbyx6ys1q.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbyx6ys1q.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbyx6ys1q.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp46tnlwof.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp46tnlwof.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp46tnlwof.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp46tnlwof.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp46tnlwof.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp46tnlwof.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp46tnlwof.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj1hy_iv7.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1hy_iv7.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1hy_iv7.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1hy_iv7.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpj1hy_iv7.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result;\n  \
    \  }\n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqm3vg276.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqm3vg276.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqm3vg276.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqm3vg276.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqm3vg276.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqm3vg276.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqm3vg276.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpqm3vg276.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm57i5659.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm57i5659.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm57i5659.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm57i5659.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm57i5659.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(1)\n        result.append(2)\n        result.append(3)\n   \
    \     result.append(4)\n        result.append(5)\n        result.append(6)\n \
    \       result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)\n        result.append(95)\n        result.append(96)\n\
    \        result.append(97)\n        result.append(98)\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2rmb6d60.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp2rmb6d60.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp2rmb6d60.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprp786a9e.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprp786a9e.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprp786a9e.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprp786a9e.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprp786a9e.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n)\n        result.append(1)\n\
    \        result.append(n)\n        result.append(n + 1)\n        return result\n\
    \    }\n    \n    result.append(1)\n    result.append(n)\n    result.append(1)\n\
    \    result.append(n)\n    result.append(n + 1)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpgpvhhq9b/tmpgpvhhq9b.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b2f0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b2c02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b2c02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b2c017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpvhhq9b                        0x0000562a2efca4da <unavailable> + 5338

    5    libc.so.6                          0x00002b65b30f7460 __libc_start_main +
    245

    6    tmpgpvhhq9b                        0x0000562a2efca119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n    \n  \
    \  if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n     \
    \   result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp931ekcsm.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp931ekcsm.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp931ekcsm.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp931ekcsm.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var first = 3\n    var second = 1\n    var third = 1\n    var\
    \ fourth = 1\n    var fifth = 1\n    var sixth = 1\n    var seventh = 1\n    var\
    \ eighth = 1\n    var nineth = 1\n    var tenth = 1\n    var eleventh = 1\n  \
    \  var twelfth = 1\n    var thirteenth = 1\n    var fourteenth = 1\n    var fifteenth\
    \ = 1\n    var sixteenth = 1\n    var seventeenth = 1\n    var eighteenth = 1\n\
    \    var nineteenth = 1\n    var twentieth = 1\n    var twentyfirst = 1\n    var\
    \ twentysecond = 1\n    var twentythird = 1\n    var twentyfourth = 1\n    var\
    \ twentyfifth = 1\n    var twentysixth = 1\n    var twentyseventh = 1\n    var\
    \ twentyeighth = 1\n    var twentynineth = 1\n    var thirtieth = 1\n    var thirtyfirst\
    \ = 1\n    var thirtysecond = 1\n    var thirtythird = 1\n    var thirtyfourth\
    \ = 1\n    var thirtyfifth = 1\n    var thirtysixth = 1\n    var thirtyseventh\
    \ = 1\n    var thirtyeighth = 1\n    var thirtynineth = 1\n    var fourtieth =\
    \ 1\n    var fourtyfirst = 1\n    var fourtysecond = 1\n    var fourtythird =\
    \ 1\n    var fourtyfourth = 1\n    var fourtyfifth = 1\n    var fourtysixth =\
    \ 1\n    var fourtyseventh = 1\n    var fourtyeighth = 1\n    var fourtynineth\
    \ = 1\n    var fiftieth = 1\n    var fiftyfirst = 1\n    var fiftysecond = 1\n\
    \    var fiftythird = 1\n    var fiftyfourth = 1\n    var fiftyfifth = 1\n   \
    \ var fiftysixth = 1\n    var fiftyseventh = 1\n    var fiftyeighth = 1\n    var\
    \ fiftynineth = 1\n    var sixtieth = 1\n    var sixtyfirst = 1\n    var sixtysecond\
    \ = 1\n    var sixtythird = 1\n    var sixtyfourth = 1\n    var sixtyfifth = 1\n\
    \    var sixtysixth = 1\n    var sixtyseventh = 1\n    var sixtyeighth = 1\n \
    \   var sixtynineth = 1\n    var seventieth = 1\n    var seventyfirst = 1\n  \
    \  var seventysecond = 1\n    var seventythird = 1\n    var seventyfourth = 1\n\
    \    var se\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9dwpu4ko.swift:94:9: error: type annotation missing in pattern\n\
    \    var se\n        ^\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    } else {\n \
    \       result.append(1)\n        result.append(n / 2)\n        if n % 2 == 0\
    \ {\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n       \
    \ }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpodmjf37j.swift:27:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmpodmjf37j.swift:27:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmpodmjf37j.swift:27:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmpodmjf37j.swift:27:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n\
    \        result.append(a)\n        if n % 2 == 0 {\n            result.append(b)\n\
    \        } else {\n            result.append(c)\n        }\n        a = b\n  \
    \      b = c\n        c = a + b\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpykdjy0xm/tmpykdjy0xm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f4c9eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f4c6e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f4c6e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f4c6e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykdjy0xm                        0x000055d9ec3df5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b4f4cbd6460 __libc_start_main +
    245

    6    tmpykdjy0xm                        0x000055d9ec3df209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    }\n    \n  \
    \  if n % 2 == 0 {\n        result.append(1)\n        result.append(n / 2)\n \
    \   }\n    \n    if n % 2 == 1 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmjxqf8hv.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpmjxqf8hv.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpmjxqf8hv.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpmjxqf8hv.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxa6du61e.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxa6du61e.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxa6du61e.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxa6du61e.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxa6du61e.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxa6du61e.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxa6du61e.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0:\n        result.append(0)\n   \
    \ case 1:\n        result.append(1)\n    case 2:\n        result.append(3)\n \
    \   case 3:\n        result.append(2)\n    case 4:\n        result.append(3)\n\
    \    case 5:\n        result.append(4)\n    case 6:\n        result.append(5)\n\
    \    case 7:\n        result.append(6)\n    case 8:\n        result.append(7)\n\
    \    case 9:\n        result.append(8)\n    case 10:\n        result.append(9)\n\
    \    case 11:\n        result.append(10)\n    case 12:\n        result.append(11)\n\
    \    case 13:\n        result.append(12)\n    case 14:\n        result.append(13)\n\
    \    case 15:\n        result.append(14)\n    case 16:\n        result.append(15)\n\
    \    case 17:\n        result.append(16)\n    case 18:\n        result.append(17)\n\
    \    case 19:\n        result.append(18)\n    case 20:\n        result.append(19)\n\
    \    case 21:\n        result.append(20)\n    case 22:\n        result.append(21)\n\
    \    case 23:\n        result.append(22)\n    case 24:\n        result.append(23)\n\
    \    case 25:\n        result.append(24)\n    case 26:\n        result.append(25)\n\
    \    case 27:\n        result.append(26)\n    case 28:\n        result.append(27)\n\
    \    case 29:\n        result.append(28)\n    case 30:\n        result.append(29)\n\
    \    case 31:\n        result.append(30)\n    case 32:\n        result.append(31)\n\
    \    case 33:\n        result.append(32)\n    case 34:\n        result.append(33)\n\
    \    case 35:\n        result.append(34)\n    case 36:\n        result.append(35)\n\
    \    case 37:\n        result.append(36)\n    case 38:\n        result.append(37)\n\
    \    case 39:\n        result.append(38)\n    case 40:\n        result.append(39)\n\
    \    case 41:\n        result.append(40)\n    case 42:\n        result.append(41)\n\
    \    case 43:\n        result.append(42)\n    case 44:\n        result.append(43)\n\
    \    case 45:\n        result.append(44)\n    case 46:\n        result.append(45)\n\
    \    case 47:\n        result.append(46)\n    case 48:\n        result.append(47)\n\
    \    case 49:\n        result.append(48)\n    case 50:\n        result.append(49)\n\
    \    case 51:\n        result.append(50)\n    case 52:\n        result.append(51)\n\
    \    case 53:\n        result.append(52)\n    case 54:\n        result.append(53)\n\
    \    case 55:\n        result.append(54)\n    case 56:\n        result.append(55)\n\
    \    case 57:\n        result.append(56)\n    case 58:\n        result.append(57)\n\
    \    case 59:\n        result.append(58)\n    case 60:\n        result.append(59)\n\
    \    case 61:\n        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppbq_56m0.swift:146:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmppbq_56m0.swift:170:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmppbq_56m0.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmppbq_56m0.swift:145:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmppbq_56m0.swift:21:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmppbq_56m0.swift:21:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmppbq_56m0.swift:149:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnv9e3xpc.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpnv9e3xpc.swift:28:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpnv9e3xpc.swift:28:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpnv9e3xpc.swift:30:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpnv9e3xpc.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnv9e3xpc.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnv9e3xpc.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(2)\n    var f = Int(3)\n    var g = Int(1)\n   \
    \ var h = Int(2)\n    var i = Int(1)\n    var j = Int(2)\n    var k = Int(3)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(1)\n    var o = Int(2)\n\
    \    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(3)\n    var v = Int(1)\n    var w = Int(2)\n\
    \    var x = Int(1)\n    var y = Int(2)\n    var z = Int(1)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(2)\n\
    \    var f = Int(3)\n    var g = Int(1)\n    var h = Int(2)\n    var i = Int(1)\n\
    \    var j = Int(2)\n    var k = Int(3)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(3)\n\
    \    var v = Int(1)\n    var w = Int(2)\n    var x = Int(1)\n    var y = Int(2)\n\
    \    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(2)\n    var f = Int(3)\n    var g = Int(1)\n\
    \    var h = Int(2)\n    var i = Int(1)\n    var j = Int(2)\n    var k = Int(3)\n\
    \    var l = Int(1)\n    var m = Int(2)\n    var n = Int(1)\n    var o = Int(2)\n\
    \    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(3)\n    var v = Int(1)\n    var w = Int(2)\n\
    \    var x = Int(1)\n    var y = Int(2)\n    var z = Int(1)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(2)\n\
    \    var f = Int(3)\n    var g = Int(1)\n    var h = Int(2)\n    var i = Int(1)\n\
    \    var j = Int(2)\n    var k = Int(3)\n    var l = Int(1)\n    var m = Int(2)\n\
    \    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n\
    \    var r = Int(2)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(3)\n\
    \    var v = Int(1)\n    var w = Int(2)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdcid03n4.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmpdcid03n4.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpdcid03n4.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(3)\n        ^\n/tmp/tmpdcid03n4.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(3)\n        ^\n/tmp/tmpdcid03n4.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(1)\n        ^\n/tmp/tmpdcid03n4.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(2)\n        ^\n/tmp/tmpdcid03n4.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(3)\n        ^\n/tmp/tmpdcid03n4.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(3)\n "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpb85cmk8p.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpb85cmk8p.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpb85cmk8p.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpb85cmk8p.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpb85cmk8p.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpb85cmk8p.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpb85cmk8p.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpb85cmk8p.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpb85cmk8p.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpb85cmk8p.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n\
    \    var thirteenthThree = [Int]()\n    var fourteenthThree = [Int]()\n    var\
    \ fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n    var seventeenthThree\
    \ = [Int]()\n    var eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n\
    \    var twentiethThree = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree\
    \ = [Int]()\n    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n\
    \    var seventiethThree = [Int]()\n    var eightiethThree = [Int]()\n    var\
    \ ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n    var thousandthThree\
    \ = [Int]()\n    var tenthousandthThree = [Int]()\n    var hundredthousandthThree\
    \ = [Int]()\n    var thousandthousandthThree = [Int]()\n    var onehundredthousandthThree\
    \ = [Int]()\n    var onethousandthousandthThree = [Int]()\n    var onehundredthousandthousandthThree\
    \ = [Int]()\n    var onethousandthousandthousandthThree = [Int]()\n    var onehundredthousandthousandthousandthThree\
    \ = [Int]()\n    var onethousandthousandthousandthousandthThree = [Int]()\n  \
    \  var onehundredthousandthousandthousandthousandthThree = [Int]()\n    var onethousandthousandthousandthousandthousandthThree\
    \ = [Int]()\n    var onehundredthousandthousandthousandthousandthousandthThree\
    \ = [Int]()\n    var onethousandthousandthousandthousandthousandthousandthousandthThree\
    \ = [Int]()\n    var onehundredthousandthousandthousand\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq2qpwhwh.swift:62:9: error: type annotation missing in pattern\n\
    \    var onehundredthousandthousandthousand\n        ^\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpdnl7wx91.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpdnl7wx91.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpdnl7wx91.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpdnl7wx91.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpw9m_6ghl.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpw9m_6ghl.swift:28:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpw9m_6ghl.swift:28:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpw9m_6ghl.swift:30:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpw9m_6ghl.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpw9m_6ghl.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpw9m_6ghl.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppwblrw_0.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmppwblrw_0.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmppwblrw_0.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmppwblrw_0.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmppwblrw_0.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmppwblrw_0.swift:40:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n  \
    \                        ^\n                          n: \n/tmp/tmppwblrw_0.swift:40:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \     ^\n                                       n: \n/tmp/tmppwblrw_0.swift:40:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmppwblrw_0.swift:40:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu9rfipc4.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpu9rfipc4.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu9rfipc4.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu9rfipc4.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu9rfipc4.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpu9rfipc4.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu9rfipc4.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu9rfipc4.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu9rfipc4.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpu9rfipc4.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n   \
    \ var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpz2leltr7.swift:46:9: error: invalid redeclaration of 'a'\n    var\
    \ a = Int(3)\n        ^\n/tmp/tmpz2leltr7.swift:20:9: note: 'a' previously declared\
    \ here\n    var a = Int(3)\n        ^\n/tmp/tmpz2leltr7.swift:47:9: error: invalid\
    \ redeclaration of 'b'\n    var b = Int(1)\n        ^\n/tmp/tmpz2leltr7.swift:21:9:\
    \ note: 'b' previously declared here\n    var b = Int(1)\n        ^\n/tmp/tmpz2leltr7.swift:48:9:\
    \ error: invalid redeclaration of 'c'\n    var c = Int(2)\n        ^\n/tmp/tmpz2leltr7.swift:22:9:\
    \ note: 'c' previously declared here\n    var c = Int(2)\n        ^\n/tmp/tmpz2leltr7.swift:49:9:\
    \ error: invalid redeclaration of 'd'\n    var d = Int(1)\n        ^\n/tmp/tmpz2leltr7.swift:23:9:\
    \ note: 'd' previously declared here\n    var d = Int(1)\n        ^\n/tmp/tmpz2leltr7.swift:50:9:\
    \ error: invalid redeclaration of 'e'\n    var e = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:24:9:\
    \ note: 'e' previously declared here\n    var e = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:51:9:\
    \ error: invalid redeclaration of 'f'\n    var f = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:25:9:\
    \ note: 'f' previously declared here\n    var f = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:52:9:\
    \ error: invalid redeclaration of 'g'\n    var g = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:26:9:\
    \ note: 'g' previously declared here\n    var g = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:53:9:\
    \ error: invalid redeclaration of 'h'\n    var h = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:27:9:\
    \ note: 'h' previously declared here\n    var h = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:54:9:\
    \ error: invalid redeclaration of 'i'\n    var i = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:28:9:\
    \ note: 'i' previously declared here\n    var i = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:55:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:29:9:\
    \ note: 'j' previously declared here\n    var j = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int(0)\n        ^\n/tmp/tmpz2leltr7.swift:30:9:\
    \ note: 'k' previously declared here\n    var k = Int(0)\n "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0tvnm256.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp0tvnm256.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp0tvnm256.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp0tvnm256.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp0tvnm256.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp0tvnm256.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp0tvnm256.swift:41:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi11z90sp.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi11z90sp.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi11z90sp.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpi11z90sp.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpi11z90sp.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 0 {\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(3)\n    }\n    \n    if n % 2 == 1 {\n \
    \       result.append(1)\n    }\n    \n    for _ in 1...n / 2 {\n        result.append(result[-1]\
    \ + result[-2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c81c89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c81980561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3c81980286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3c8198013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3c8197fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3c8177fe83 <unavailable> + 188035

    6    tmpuzw0wu7o                        0x0000559a47dfc453 <unavailable> + 9299

    7    tmpuzw0wu7o                        0x0000559a47dfb53b <unavailable> + 5435

    8    libc.so.6                          0x00002b3c81e75460 __libc_start_main +
    245

    9    tmpuzw0wu7o                        0x0000559a47dfb259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu9rfipc4.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpu9rfipc4.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu9rfipc4.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu9rfipc4.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu9rfipc4.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpu9rfipc4.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu9rfipc4.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu9rfipc4.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu9rfipc4.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpu9rfipc4.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi11z90sp.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpi11z90sp.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpi11z90sp.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpi11z90sp.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpi11z90sp.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpi11z90sp.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc6x0_3j0.swift:41:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpc6x0_3j0.swift:41:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpc6x0_3j0.swift:41:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpc6x0_3j0.swift:48:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmpc6x0_3j0.swift:48:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmpc6x0_3j0.swift:48:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmpc6x0_3j0.swift:48:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm5r52lz9.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm5r52lz9.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm5r52lz9.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm5r52lz9.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm5r52lz9.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpm5r52lz9.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm5r52lz9.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm5r52lz9.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpm5r52lz9.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpm5r52lz9.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979745
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var\
    \ d = Int(1)\n    if n % 2 == 0 {\n        for _ in 0..<n {\n            result.append(a)\n\
    \            a = b\n            b = c\n            c = d\n            d = a +\
    \ b + c\n        }\n    } else {\n        for _ in 0..<n {\n            result.append(b)\n\
    \            a = c\n            b = d\n            c = a + b + c\n           \
    \ d = a + b + c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9q52a3ye/tmp9q52a3ye.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad73c7fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad73c4f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad73c4f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad73c4f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q52a3ye                        0x0000563f0afb65ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad73c9e7460 __libc_start_main +
    245

    6    tmp9q52a3ye                        0x0000563f0afb6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprp786a9e.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprp786a9e.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprp786a9e.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprp786a9e.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmprp786a9e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmprp786a9e.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    switch n {\n    case 0: result.append(0)\n    case 1: result.append(1)\n\
    \    case 2: result.append(3)\n    case 3: result.append(3)\n    case 4: result.append(5)\n\
    \    case 5: result.append(5)\n    case 6: result.append(8)\n    case 7: result.append(8)\n\
    \    case 8: result.append(13)\n    case 9: result.append(13)\n    case 10: result.append(17)\n\
    \    case 11: result.append(17)\n    case 12: result.append(21)\n    case 13:\
    \ result.append(21)\n    case 14: result.append(25)\n    case 15: result.append(25)\n\
    \    case 16: result.append(29)\n    case 17: result.append(29)\n    case 18:\
    \ result.append(34)\n    case 19: result.append(34)\n    case 20: result.append(39)\n\
    \    case 21: result.append(39)\n    case 22: result.append(44)\n    case 23:\
    \ result.append(44)\n    case 24: result.append(49)\n    case 25: result.append(49)\n\
    \    case 26: result.append(54)\n    case 27: result.append(54)\n    case 28:\
    \ result.append(59)\n    case 29: result.append(59)\n    case 30: result.append(62)\n\
    \    case 31: result.append(62)\n    case 32: result.append(67)\n    case 33:\
    \ result.append(67)\n    case 34: result.append(71)\n    case 35: result.append(71)\n\
    \    case 36: result.append(76)\n    case 37: result.append(76)\n    case 38:\
    \ result.append(81)\n    case 39: result.append(81)\n    case 40: result.append(86)\n\
    \    case 41: result.append(86)\n    case 42: result.append(91)\n    case 43:\
    \ result.append(91)\n    case 44: result.append(96)\n    case 45: result.append(96)\n\
    \    case 46: result.append(101)\n    case 47: result.append(101)\n    case 48:\
    \ result.append(106)\n    case 49: result.append(106)\n    case 50: result.append(111)\n\
    \    case 51: result.append(111)\n    case 52: result.append(116)\n    case 53:\
    \ result.append(116)\n    case 54: result.append(121)\n    case 55: result.append(121)\n\
    \    case 56: result.append(126)\n    case 57: result.append(126)\n    case 58:\
    \ result.append(131)\n    case 59: result.append(131)\n    case 60: result.append(136)\n\
    \    case 61: result.append(136)\n    case 62: result.append(141)\n    case 63:\
    \ result.append(141)\n    case 64: result.append(146)\n    case 65: result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptmv_19j9.swift:112:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmptmv_19j9.swift:18:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmptmv_19j9.swift:87:14: warning: variable is unused\n \
    \   case 65: result\n             ^~~~~~\n/tmp/tmptmv_19j9.swift:21:5: error:\
    \ switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmptmv_19j9.swift:21:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmptmv_19j9.swift:91:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var a = 2\n    var b = 2\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            c += a + b\n \
    \       } else {\n            c += b + a\n        }\n        a = b\n        b\
    \ = c\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpj1domlj7/tmpj1domlj7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0560ae7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05607deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05607de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05607dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1domlj7                        0x000055b2a55aa5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b0560cd3460 __libc_start_main +
    245

    6    tmpj1domlj7                        0x000055b2a55aa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    result.append(1)\n    result.append(3)\n    result.append(2)\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: '/tmp/tmpftic5tqw.swift:152:1: error: missing return in global function
    expected to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n <= 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkan7pjiy.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpkan7pjiy.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkan7pjiy.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkan7pjiy.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpkan7pjiy.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpkan7pjiy.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpkan7pjiy.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(1 + n / 2)\n    } else {\n        result.append(1 + n /\
    \ 2)\n        result.append(1 + n / 2)\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2ub4it9p/tmp2ub4it9p.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53863b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53860b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53860b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53860af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ub4it9p                        0x000055be901e04da <unavailable> + 5338

    5    libc.so.6                          0x00002b53865a5460 __libc_start_main +
    245

    6    tmp2ub4it9p                        0x000055be901e0119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    \n    var a = tri(n - 1)\n\
    \    var b = tri(n - 2)\n    var c = tri(n + 1)\n    \n    result.append(a[0]\
    \ + b[0] + c[0])\n    result.append(a[1] + b[1] + c[1])\n    result.append(a[2]\
    \ + b[2] + c[2])\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt49pkobu.swift:35:17: error: missing argument label 'n:' in call\n\
    \    var a = tri(n - 1)\n                ^\n                n: \n/tmp/tmpt49pkobu.swift:36:17:\
    \ error: missing argument label 'n:' in call\n    var b = tri(n - 2)\n       \
    \         ^\n                n: \n/tmp/tmpt49pkobu.swift:37:17: error: missing\
    \ argument label 'n:' in call\n    var c = tri(n + 1)\n                ^\n   \
    \             n: \n"
  stdout: ''
  timestamp: 1659979746
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuiu4pz0y.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:32:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpuiu4pz0y.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpuiu4pz0y.swift:34:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpuiu4pz0y.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpuiu4pz0y.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpuiu4pz0y.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp003w01i6.swift:34:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmp003w01i6.swift:34:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmp003w01i6.swift:34:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmp003w01i6.swift:39:19: error:\
    \ missing argument label 'contentsOf:' in call\n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                  ^\n                  contentsOf:\
    \ \n/tmp/tmp003w01i6.swift:39:23: error: missing argument label 'n:' in call\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                   \
    \   ^\n                      n: \n/tmp/tmp003w01i6.swift:39:36: error: missing\
    \ argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                   ^\n                              \
    \     n: \n/tmp/tmp003w01i6.swift:39:49: error: missing argument label 'n:' in\
    \ call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            \
    \                                    ^\n                                     \
    \           n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  result.append(1)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnacp9stc.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpnacp9stc.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnacp9stc.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnacp9stc.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpnacp9stc.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpnacp9stc.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpnacp9stc.swift:37:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n    }\n    \n  \
    \  if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n    else {\n    \
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm81wydkk.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpm81wydkk.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpm81wydkk.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpm81wydkk.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_jjgzq_i.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_jjgzq_i.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_jjgzq_i.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_jjgzq_i.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_jjgzq_i.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_jjgzq_i.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_jjgzq_i.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_jjgzq_i.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_jjgzq_i.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_jjgzq_i.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979746
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzbn0naie.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzbn0naie.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzbn0naie.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzbn0naie.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzbn0naie.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8y_1jo99.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp8y_1jo99.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp8y_1jo99.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8y_1jo99.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8y_1jo99.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8y_1jo99.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659825141
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu_k8e_rh.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpu_k8e_rh.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu_k8e_rh.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu_k8e_rh.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu_k8e_rh.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpu_k8e_rh.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpu_k8e_rh.swift:39:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbqvvshnh.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpbqvvshnh.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbqvvshnh.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbqvvshnh.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpbqvvshnh.swift:44:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpbqvvshnh.swift:44:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpbqvvshnh.swift:44:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpbqvvshnh.swift:44:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979746
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1cnir8ia.swift:38:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp1cnir8ia.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp1cnir8ia.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp1cnir8ia.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp1cnir8ia.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp1cnir8ia.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp1cnir8ia.swift:40:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3vzrx_2a.swift:40:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp3vzrx_2a.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3vzrx_2a.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3vzrx_2a.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp3vzrx_2a.swift:42:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3vzrx_2a.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3vzrx_2a.swift:42:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3vzrx_2a.swift:42:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp3vzrx_2a.swift:43:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp3vzrx_2a.swift:43:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979746
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n / 2)\n    } else {\n        result.append(1)\n      \
    \  result.append(n - 1)\n        result.append(n + 1 )\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_c_pp96c/tmp_c_pp96c.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b250864ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2508345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2508345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25083447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c_pp96c                        0x0000559613fa84da <unavailable> + 5338

    5    libc.so.6                          0x00002b250883a460 __libc_start_main +
    245

    6    tmp_c_pp96c                        0x0000559613fa8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(3)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    \n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpastp81uj.swift:42:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpastp81uj.swift:42:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpastp81uj.swift:42:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpastp81uj.swift:42:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpastp81uj.swift:46:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpastp81uj.swift:46:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpastp81uj.swift:46:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpastp81uj.swift:46:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979746
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(3)\n        result.append(1\
    \ + n / 2)\n        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(1 + n / 2)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwlwjwk6z.swift:48:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpwlwjwk6z.swift:48:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpwlwjwk6z.swift:48:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpwlwjwk6z.swift:48:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6ehnu7of.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6ehnu7of.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6ehnu7of.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6ehnu7of.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6ehnu7of.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp6ehnu7of.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp6ehnu7of.swift:34:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(n)\n        result.append(1 +\
    \ n / 2)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwur9xo8b.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpwur9xo8b.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpwur9xo8b.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpwur9xo8b.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979745
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(n)\n        result.append(n +\
    \ 2)\n        return result\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(n)\n    result.append(n + 2)\n    result.append(n + 3)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpefvj4ttt/tmpefvj4ttt.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82cf18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82cc0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82cc0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82cc0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefvj4ttt                        0x000056008907c4da <unavailable> + 5338

    5    libc.so.6                          0x00002af82d104460 __libc_start_main +
    245

    6    tmpefvj4ttt                        0x000056008907c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979745
