name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given a list of positive integers x. return a sorted list of all \n\
  /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33, 1422,\
  \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n/// [] as\
  \ [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ["    var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var index = 0\n    for n in x {\n        if n % 10 ==\
    \ 0 {\n            result.append(n)\n        }\n    }\n    for n in result {\n\
    \        if n % 2 == 0 {\n            result.remove(at: index)\n        }\n  \
    \      index++\n    }\n    return result", "    var result = [Int]()\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var i =\
    \ 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result", "    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var evenDigit = [Int]()\n    var i = 0\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n  \
    \      } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in evenDigit {\n        if result.contains(element) {\n            result.remove(at:\
    \ result.index(of: element))\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var evenDigit = false\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            evenDigit = true\n\
    \        }\n        if evenDigit {\n            result.append(element)\n     \
    \   }\n        evenDigit = false\n    }\n    return result", "    var result =\
    \ Set<Int>()\n    for element in x {\n        if element % 2 == 0 {\n        \
    \    result.insert(element)\n        }\n    }\n    return result.sorted()", " \
    \   var result = [Int]()\n    for num in x {\n        if num % 2 == 0 {\n    \
    \        continue\n        }\n        for num2 in x {\n            if num2 ==\
    \ num {\n                continue\n            }\n            if num2 % 2 == 0\
    \ {\n                continue\n            }\n            if num2 % num == 0 {\n\
    \                result.append(num2)\n            }\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    var evenDigit: Int = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigit += 1\n        }\
    \ else {\n            if evenDigit == 0 {\n                result.append(element)\n\
    \            } else {\n                evenDigit = 0\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var index = 0\n   \
    \ for element in x {\n        if element % 2 == 0 {\n            result[index]\
    \ = element\n            index += 1\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var even = [Int]()\n    var odd = [Int]()\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            even.append(element)\n\
    \        } else {\n            odd.append(element)\n        }\n    }\n    for\
    \ element in even {\n        if !contains(result, element) {\n            result.append(element)\n\
    \        }\n    }\n    for element in odd {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = Set<Int>()\n    for num in x {\n        let digit\
    \ = num % 10\n        if !result.contains(digit) {\n            result.insert(digit)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n %\
    \ 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var evenDigits\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            for e in evenDigits {\n                if e % e\
    \ == 0 {\n                    result.append(n)\n                    break\n  \
    \              }\n            }\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = last * 10 + n % 10\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = n % 10\n\
    \        }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n  \
    \  return result"]
stop_tokens:
- "\n}"
