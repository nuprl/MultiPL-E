name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n\
  /// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as\
  \ [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    var result = [Int]()\n    var sum = 0\n    for n in nums {\n  \
    \      sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int,\
    \ b: Int) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum >\
    \ 9 {\n            sum = 0\n        }\n        result.append(num)\n    }\n   \
    \ return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if\
    \ a < 0 {\n            aSum = -aSum\n        }\n        if b < 0 {\n         \
    \   bSum = -bSum\n        }\n        return aSum > bSum\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = abs(aSum\
    \ - bSum)\n        let bDiff = abs(aSum - bSum)\n        if aDiff == bDiff {\n\
    \            return a < b\n        }\n        return aDiff < bDiff\n    })\n \
    \   return result", "    var result = [Int]()\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    \n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    \n    var result = [Int]()\n\
    \    for num in numsSortedCopy {\n        if numsSorted.contains(num) {\n    \
    \        index = numsSorted.index(num)\n            result.append(numsSorted[index])\n\
    \            numsSorted.remove(at: index)\n        }\n    }\n    \n    return\
    \ result", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        return sum - a < sum - b\n    })\n    return result", " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result", '    return nums.sorted(by: sort_by_digits)', " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n        let bSum = sum.truncatingRemainder(dividingBy: 10)\n        return\
    \ aSum == bSum\n    })\n    return result", "    var sum = 0\n    var result =\
    \ [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum + a\n \
    \       let bSum = sum + b\n        return aSum < bSum\n    })\n    return result",
  "    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        sum += num\n\
    \        index++\n    }\n    if sum > 0 {\n        result.append(index)\n    }\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    var numsSortedBySumReversed = numsSortedBySum.reversed()\n\
    \    var numsSortedBySumReversedByIndex = numsSortedBySum.reversed().sorted()\n\
    \    var numsSortedBySumReversedByIndexReversed = numsSortedBySum.reversed().sorted().reversed()\n\
    \    return numsSortedBySumReversedByIndex", "    var result = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n     \
    \   let bSum = sum\n        if aSum == bSum {\n            return a < b\n    \
    \    }\n        return aSum < bSum\n    })\n    return result", "    var sum =\
    \ 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n       \
    \ result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n    })\n \
    \   return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort { sum\
    \ - $0 }\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var numsSortedCopy = numsSorted\n    for num in numsSorted {\n    \
    \    for index in 0..<numsSortedCopy.count {\n            if numsSortedCopy[index]\
    \ == num {\n                numsSortedCopy.remove(at: index)\n               \
    \ numsSorted.remove(at: index)\n                break\n            }\n       \
    \ }\n    }\n    return numsSorted", "    var result = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        if sum < 0 {\n           \
    \ sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n \
    \       }\n    }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a: Int, b: Int) -> Bool in\n        let aDigit = Int(truncating: a / 10)\n\
    \        let bDigit = Int(truncating: b / 10)\n        return aDigit > bDigit\
    \ || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n    })\n    return\
    \ result"]
stop_tokens:
- "\n}"
