name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n\
  /// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as\
  \ [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    var result = [Int]()\n    var sum = 0\n    for n in nums {\n  \
    \      sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a: Int,\
    \ b: Int) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum >\
    \ 9 {\n            sum = 0\n        }\n        result.append(num)\n    }\n   \
    \ return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if\
    \ a < 0 {\n            aSum = -aSum\n        }\n        if b < 0 {\n         \
    \   bSum = -bSum\n        }\n        return aSum > bSum\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = abs(aSum\
    \ - bSum)\n        let bDiff = abs(aSum - bSum)\n        if aDiff == bDiff {\n\
    \            return a < b\n        }\n        return aDiff < bDiff\n    })\n \
    \   return result", "    var result = [Int]()\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    \n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    \n    var result = [Int]()\n\
    \    for num in numsSortedCopy {\n        if numsSorted.contains(num) {\n    \
    \        index = numsSorted.index(num)\n            result.append(numsSorted[index])\n\
    \            numsSorted.remove(at: index)\n        }\n    }\n    \n    return\
    \ result", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        return sum - a < sum - b\n    })\n    return result", " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result", '    return nums.sorted(by: sort_by_digits)', " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n        let bSum = sum.truncatingRemainder(dividingBy: 10)\n        return\
    \ aSum == bSum\n    })\n    return result", "    var sum = 0\n    var result =\
    \ [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum + a\n \
    \       let bSum = sum + b\n        return aSum < bSum\n    })\n    return result",
  "    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        sum += num\n\
    \        index++\n    }\n    if sum > 0 {\n        result.append(index)\n    }\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    var numsSortedBySumReversed = numsSortedBySum.reversed()\n\
    \    var numsSortedBySumReversedByIndex = numsSortedBySum.reversed().sorted()\n\
    \    var numsSortedBySumReversedByIndexReversed = numsSortedBySum.reversed().sorted().reversed()\n\
    \    return numsSortedBySumReversedByIndex", "    var result = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n     \
    \   let bSum = sum\n        if aSum == bSum {\n            return a < b\n    \
    \    }\n        return aSum < bSum\n    })\n    return result", "    var sum =\
    \ 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n       \
    \ result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n    })\n \
    \   return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort { sum\
    \ - $0 }\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var numsSortedCopy = numsSorted\n    for num in numsSorted {\n    \
    \    for index in 0..<numsSortedCopy.count {\n            if numsSortedCopy[index]\
    \ == num {\n                numsSortedCopy.remove(at: index)\n               \
    \ numsSorted.remove(at: index)\n                break\n            }\n       \
    \ }\n    }\n    return numsSorted", "    var result = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        if sum < 0 {\n           \
    \ sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n \
    \       }\n    }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a: Int, b: Int) -> Bool in\n        let aDigit = Int(truncating: a / 10)\n\
    \        let bDigit = Int(truncating: b / 10)\n        return aDigit > bDigit\
    \ || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n    })\n    return\
    \ result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n  \
    \  for n in numsSorted {\n        while sum != 0 {\n            if sum < n {\n\
    \                numsSorted.insert(numsSorted[index], at: index)\n           \
    \     sum -= numsSorted[index]\n                index++\n            } else {\n\
    \                numsSorted.insert(n, at: index)\n                sum -= n\n \
    \               index++\n            }\n        }\n    }\n    return numsSorted",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum.truncatingRemainder(dividingBy: 10)\n        let bSum\
    \ = sum.truncatingRemainder(dividingBy: 10)\n        return aSum == bSum\n   \
    \ })\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a == b {\n     \
    \       return a < aSum\n        }\n        return false\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result", "    let numsSorted = nums.sorted { $0.digits.sum\
    \ < $1.digits.sum }\n    return numsSorted.map { $0.digits }", "    var sum =\
    \ 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n       \
    \ result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n        return\
    \ sum - a < sum - b\n    })\n    return result", "    var result = [Int]()\n \
    \   var sum = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum == bSum ? a.toInt() < b.toInt()\
    \ : aSum > bSum\n    })\n    return result", "    return nums.sorted(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.map { $0.digit }.reduce(0) { $0 + $1 }\n\
    \        let bSum = b.map { $0.digit }.reduce(0) { $0 + $1 }\n        return aSum\
    \ < bSum\n    })", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var sum = 0\n  \
    \  var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if aSum == bSum {\n            return a < b\n        }\n        return aSum\
    \ < bSum\n    })\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n       \
    \ let bSum = sum - b\n        return aSum < bSum\n    })\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    for num in numsSorted {\n        var index = numsSortedCopy.index(of: num)\n\
    \        if index != nil {\n            numsSortedCopy.remove(at: index!)\n  \
    \          numsSortedCopy.insert(num, at: 0)\n        }\n    }\n    return numsSortedCopy",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if aSum > bSum {\
    \ return true }\n        if aSum < bSum { return false }\n        return a.0 >\
    \ b.0\n    })\n    return result", "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum + a\n        let bSum = sum + b\n\
    \        return aSum < bSum\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return false\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        result.append(num)\n    }\n    result.sort(by: {\n        sum -\
    \ $0\n    })\n    return result", "    var numsSorted = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n   \
    \ }\n    \n    var numsSortedSorted: [Int] = []\n    for n in numsSorted {\n \
    \       if sum == 0 {\n            numsSortedSorted.append(n)\n        } else\
    \ {\n            var sumOfDigits = n % 10\n            if sumOfDigits > 0 {\n\
    \                sumOfDigits -= 1\n            }\n            if sumOfDigits !=\
    \ 0 {\n                numsSortedSorted.append(sumOfDigits)\n                sum\
    \ -= sumOfDigits\n            } else {\n                numsSortedSorted.append(sum)\n\
    \                sum = 0\n            }\n        }\n    }\n    return numsSortedSorted",
  "    var numsSorted = [Int]()\n    var numsSortedIndex = [Int]()\n    var sum =\
    \ 0\n    for num in nums {\n        sum += num\n        numsSortedIndex.append(numsSorted.count)\n\
    \        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    for index in 0..<numsSortedIndex.count {\n        let index = numsSortedIndex[index]\n\
    \        let numsSortedCopyIndex = numsSortedCopy.index(numsSortedCopy.startIndex,\
    \ offsetBy: index)\n        numsSortedCopy[numsSortedCopyIndex] = numsSorted[index]\
    \ as! Int\n    }\n    return numsSortedCopy", "    var sum = 0\n    var result\
    \ = [Int]()\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        } else\
    \ if a == b {\n            return a < 0\n        } else {\n            return\
    \ false\n        }\n    })\n    return result", "    var result = [Int]()\n  \
    \  var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return a < b\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n        let\
    \ bSum = sum\n        let aIndex = a.hashValue % aSum\n        let bIndex = b.hashValue\
    \ % bSum\n        return aIndex < bIndex\n    })\n    return result", "    var\
    \ sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n   \
    \     let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n       \
    \ return sum == aSum\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n\
    \        let bSum = sum - b\n        if aSum == bSum { return a.compare(b) ==\
    \ .orderedAscending }\n        else { return aSum > bSum }\n    })\n    return\
    \ result", "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var index\
    \ = 0\n    for num in nums {\n        if sum < 0 {\n            sum *= -1\n  \
    \          numsSorted.insert(index, -num)\n        } else {\n            sum *=\
    \ 10\n            numsSorted.insert(index, num)\n        }\n        index++\n\
    \    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n \
    \   for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a > b {\n            return true\n        } else if a < b {\n          \
    \  return false\n        } else {\n            return aSum < bSum\n        }\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ num in nums {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ {\n        sum - $0\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if aSum == bSum {\n            return a < b\n   \
    \     }\n        return aSum < bSum\n    })\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return a < b\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum == aSum\n    })\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum + a\n\
    \        let bSum = sum + b\n        return aSum < bSum\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result", "    if nums.isEmpty {\n        return nums\n   \
    \ }\n    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted {\n\
    \        sum += num\n        numsSorted.remove(at: numsSorted.index(of: num))\n\
    \    }\n    if sum < 0 {\n        numsSorted.append(0)\n        sum = 0\n    }\n\
    \    if sum > 0 {\n        numsSorted.append(0)\n        sum = 0\n    }\n    return\
    \ numsSorted", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  sum = aSum + b\n        return sum == aSum\n    })\n    return result", " \
    \   guard !nums.isEmpty else { return [] }\n    let sum = nums.reduce(0) { $0\
    \ + $1 }\n    var numsSorted = nums\n    if sum < 0 {\n        numsSorted = nums.reversed()\n\
    \    }\n    return numsSorted.sorted(by: { $0.digits < $1.digits })", "    var\
    \ numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    numsSorted.sort()\n    for num in numsSortedCopy {\n        nums.remove(num)\n\
    \    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n \
    \   for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n    }\n    for num in nums {\n        if sum < 0 {\n            sum +=\
    \ 10\n        }\n        if sum > 0 {\n            sum += num\n        }\n   \
    \     result.append(num)\n    }\n    return result", "    var result = [Int]()\n\
    \    for n in nums {\n        let digits = n.digits\n        let sum = digits.reduce(0,\
    \ +)\n        if sum < 0 {\n            digits.reverse()\n            sum *= -1\n\
    \        }\n        if sum == 0 {\n            result.append(n)\n        } else\
    \ {\n            for (i, d) in digits.enumerated() {\n                if sum -\
    \ d < 0 {\n                    digits.insert(i, sum - d)\n                   \
    \ sum -= d\n                    break\n                }\n            }\n    \
    \        result.append(n)\n        }\n    }\n    return result", "    let numsSorted\
    \ = nums.sorted()\n    var sum = 0\n    var index = 0\n    var result = [Int]()\n\
    \    while index < nums.count {\n        sum += nums[index]\n        result.append(nums[index])\n\
    \        if sum > 0 {\n            sum -= numsSorted[index]\n            index\
    \ += 1\n        }\n    }\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: {\n        sum == $0.sumOfDigits() + $1.sumOfDigits()\n\
    \    })\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var numsSortedCopy = numsSorted.copy()\n    numsSorted.sort()\n   \
    \ var numsSortedCopy = numsSorted.copy()\n    for num in numsSorted {\n      \
    \  if numsSortedCopy.contains(num) {\n            numsSortedCopy.remove(num)\n\
    \        } else {\n            numsSortedCopy.append(num)\n        }\n    }\n\
    \    return numsSorted", "    var numsSorted = nums\n    for idx in 0..<nums.count\
    \ {\n        let digitSum = nums[idx].digitSum()\n        if digitSum < 0 {\n\
    \            swap(&numsSorted[idx], &numsSorted[numsSorted.index(before: idx)!])\n\
    \        }\n    }\n    return numsSorted", "    var result = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: {\n        sum == $0.sumOfDigits() ?\n            $0.index\
    \ - $1.index : $0.sumOfDigits() - $1.sumOfDigits()\n    })\n    return result",
  "    if nums.isEmpty {\n        return nums\n    }\n    var sum = 0\n    var maxSum\
    \ = nums.reduce(0) { $0 + $1 }\n    var maxIndex = 0\n    var maxSumIndex = 0\n\
    \    var minSum = nums.reduce(0) { $0 + $1 }\n    var minIndex = 0\n    var minSumIndex\
    \ = 0\n    var maxSumDigit = 0\n    var minSumDigit = 0\n    var maxSumDigitIndex\
    \ = 0\n    var minSumDigitIndex = 0\n    var maxSumDigitDigit = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex\
    \ = 0\n    var minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var\
    \ minSumDigitDigit = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit\
    \ = 0\n    var maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n    var\
    \ maxSumDigitDigitIndex = 0\n    var minSumDigitDigit = 0\n", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aSumDigit = Int(truncating: aSum / 10)\n    \
    \    let bSumDigit = Int(truncating: bSum / 10)\n        if aSumDigit == bSumDigit\
    \ {\n            return a < b\n        }\n        return aSumDigit < bSumDigit\n\
    \    })\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var index = 0\n    while index < numsSorted.count {\n        if sum\
    \ < 0 {\n            numsSorted.remove(at: index)\n        } else {\n        \
    \    sum += numsSorted[index]\n            index += 1\n        }\n    }\n    return\
    \ numsSorted", "    let numsSorted = nums.sorted()\n    return numsSorted.map\
    \ { $0.toInt() }", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    for num in numsSorted {\n\
    \        for num2 in numsSorted {\n            if num2 == num {\n            \
    \    numsSorted.remove(num2)\n                break\n            }\n        }\n\
    \    }\n    return numsSorted", "    if nums.isEmpty {\n        return nums\n\
    \    }\n    var sums = nums.map { $0.digits.reduce(0) { $0 + $1 } }\n    sums.sortInPlace()\n\
    \    return sums.map { nums[$0] }", "    let numsSorted = nums.sorted()\n    var\
    \ sum = 0\n    var index = 0\n    var result = [Int]()\n    for num in numsSorted\
    \ {\n        sum += num\n        if sum > 0 {\n            result.append(index)\n\
    \        }\n        sum -= num\n        index++\n    }\n    if sum > 0 {\n   \
    \     result.append(index)\n    }\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return false\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum < bSum {\n            return true\n        }\n     \
    \   if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n \
    \   }\n    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n\
    \        numsSorted.remove(at: i)\n        numsSorted.insert(sum, at: i)\n   \
    \ }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if aSum == bSum\
    \ {\n            return a.compare(to: b) == .orderedAscending\n        } else\
    \ {\n            return aSum < bSum\n        }\n    })\n    return result", " \
    \   var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if aSum == bSum {\n            return a < b\n        }\n        return aSum\
    \ < bSum\n    })\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n     \
    \   if sum < 0 {\n            sum += n\n        } else {\n            if sum >\
    \ 0 {\n                sum += n\n            }\n        }\n        result.append(n)\n\
    \    }\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { sum - $0 }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < 0 {\n            aSum = -aSum\n        }\n        if b < 0 {\n     \
    \       bSum = -bSum\n        }\n        return aSum < bSum\n    })\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n       \
    \ return aSum < bSum\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n\
    \        let bSum = sum - b\n        return aSum < bSum\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aDiff = a - aSum\n\
    \        let bDiff = b - bSum\n        return aDiff > bDiff\n    })\n    return\
    \ result", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for num\
    \ in nums {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        if aSum == bSum {\n            return a.toInt() < b.toInt()\n       \
    \ }\n        return aSum < bSum\n    })\n    return result", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sortInPlace()\n    return result + [sum]", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a: Int, b: Int) -> Bool in\n        let aSum =\
    \ sum - a\n        let bSum = sum - b\n        return aSum < bSum\n    })\n  \
    \  return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum + a\n        let bSum = sum + b\n\
    \        return aSum < bSum\n    })\n    return result", "    var numsSorted =\
    \ [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n      \
    \  numsSorted.append(num)\n    }\n    var i = 0\n    for num in numsSorted {\n\
    \        while i < numsSorted.count && numsSorted[i] == sum {\n            i +=\
    \ 1\n        }\n        numsSorted.swap(i, numsSorted.count - 1)\n    }\n    return\
    \ numsSorted", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { sum - $0\
    \ }\n    return result", "    guard nums.count > 0 else {\n        return nums\n\
    \    }\n    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted {\n\
    \        sum += n\n    }\n    var index = 0\n    for n in numsSorted {\n     \
    \   if sum > 0 {\n            sum -= n\n            numsSorted[index] = n\n  \
    \          index++\n        }\n    }\n    return numsSorted", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result", "    var numsSorted = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    return numsSorted.sorted(by: { $0 + $1 < $1 })", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        if aDigit == bDigit {\n            return\
    \ a < b\n        } else {\n            return aDigit < bDigit\n        }\n   \
    \ })\n    return result", "    guard !nums.isEmpty else { return [] }\n    let\
    \ numsCopy = nums.map { $0 }\n    let numsCopySorted = numsCopy.sorted()\n   \
    \ let numsCopySortedSortedBySum = numsCopySorted.map { $0.reduce(0, +) }\n   \
    \ return numsCopySortedSortedBySum.map { $0.isNegative ? -$0 : $0 }", "    var\
    \ numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n\
    \        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        while sum > 0 {\n            if sum < 10 {\n                numsSorted[index]\
    \ = n\n                sum -= 10\n                index++\n            } else\
    \ {\n                sum -= n\n                index++\n            }\n      \
    \  }\n    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ {\n        sum - $0\n    })\n    return result", "    var numsSorted = nums\n\
    \    var sum = 0\n    for num in numsSorted {\n        sum += num\n    }\n   \
    \ var index = 0\n    for num in numsSorted {\n        if sum > 0 {\n         \
    \   sum -= num\n            numsSorted[index] = num\n            index++\n   \
    \     }\n    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { sum - $0 }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n        let bSum = sum.truncatingRemainder(dividingBy: 10)\n        return\
    \ aSum == bSum\n    })\n    return result", "    let numsSorted = nums.sorted\
    \ { $0.digits < $1.digits }\n    return numsSorted.map { $0.digits }", "    var\
    \ numsSorted = nums\n    for index in 0..<nums.count {\n        let digitSum =\
    \ nums[index].digitSum()\n        if digitSum == numsSorted[index].digitSum()\
    \ {\n            numsSorted.swapAt(index, numsSorted.count - 1 - index)\n    \
    \    }\n    }\n    return numsSorted", "    var numsSorted = nums\n    var sum\
    \ = 0\n    for n in numsSorted {\n        sum += n\n        numsSorted.removeAll{\
    \ $0 > n }\n    }\n    return numsSorted.sorted()", "    let digits = nums.map({\
    \ String($0) })\n    let sortedDigits = digits.sorted()\n    return sortedDigits.map\
    \ { Int($0) }", "    var result = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        if aSum == bSum {\n            return a.toInt() < b.toInt()\n       \
    \ }\n        return aSum < bSum\n    })\n    return result", "    guard !nums.isEmpty\
    \ else { return nums }\n    var sum = 0\n    var result = [Int]()\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort {\
    \ $0.0 < $1.0 }\n    return result", "    var numsSorted = nums\n    var sum =\
    \ 0\n    for num in numsSorted {\n        sum += num\n    }\n    var index = 0\n\
    \    var numsSorted2 = numsSorted\n    var sum2 = 0\n    for num in numsSorted2\
    \ {\n        sum2 += num\n        if sum2 == sum {\n            numsSorted2.remove(at:\
    \ index)\n            numsSorted.append(num)\n        }\n        index += 1\n\
    \    }\n    return numsSorted", "    var result = [Int]()\n    var sum = 0\n \
    \   for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if\
    \ sum < 0 {\n            sum += n\n        } else {\n            sum += n % 10\n\
    \        }\n        result.append(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aIndex = a.hashValue % aSum\n        let bIndex\
    \ = b.hashValue % bSum\n        return aIndex < bIndex\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum == $0.sumOfDigits()\
    \ && sum == $1.sumOfDigits()\n    })\n    return result", "    var numsSorted\
    \ = nums\n    if nums.isEmpty {\n        return numsSorted\n    }\n    var sum\
    \ = 0\n    var maxSum = 0\n    for num in numsSorted {\n        sum += num\n \
    \       if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    var\
    \ maxIndex = 0\n    var maxSumIndex = 0\n    for index in 0..<numsSorted.count\
    \ {\n        sum += numsSorted[index]\n        if sum == maxSum {\n          \
    \  maxSumIndex = index\n        }\n        if sum < maxSum {\n            break\n\
    \        }\n    }\n    numsSorted.removeAtIndex(maxSumIndex)\n    numsSorted.append(numsSorted[maxIndex])\n\
    \    return numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n        numsSorted.append(num)\n    }\n \
    \   var numsSortedCopy = numsSorted\n    for num in numsSorted {\n        var\
    \ index = numsSortedCopy.index(of: num)\n        if index != nil {\n         \
    \   numsSortedCopy.remove(at: index!)\n            numsSortedCopy.insert(num,\
    \ at: 0)\n        }\n    }\n    return numsSortedCopy", "    var sum = 0\n   \
    \ var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        sum = aSum + b\n        return sum < 0\n    })\n\
    \    return result", "    var sum = 0\n    var result = [Int]()\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum > b\n    })\n    return result", " \
    \   let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    while index < numsSorted.count {\n        sum += numsSorted[index]\n\
    \        if sum < 0 {\n            sum = 0\n            index++\n            continue\n\
    \        }\n        result.append(numsSorted[index])\n        index++\n    }\n\
    \    return result", "    return nums.sorted(by: { (a, b) -> Bool in\n       \
    \ let aDigit = a % 10\n        let bDigit = b % 10\n        if aDigit == bDigit\
    \ {\n            return a < b\n        } else {\n            return aDigit > bDigit\n\
    \        }\n    })", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a > b {\n      \
    \      return false\n        }\n        if aSum < bSum {\n            return true\n\
    \        }\n        if aSum > bSum {\n            return false\n        }\n  \
    \      return false\n    })\n    return result", "    var numsSorted = nums\n\
    \    if nums.isEmpty {\n        return numsSorted\n    }\n    var sum = 0\n  \
    \  for num in numsSorted {\n        sum += num\n    }\n    var index = 0\n   \
    \ var numsSorted2 = numsSorted\n    while index < numsSorted.count {\n       \
    \ if sum < 0 {\n            numsSorted.remove(at: index)\n        } else {\n \
    \           sum += numsSorted[index + 1]\n            numsSorted.remove(at: index\
    \ + 1)\n        }\n        index += 1\n    }\n    return numsSorted", "    var\
    \ result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n   \
    \ })\n    return result", "    let numsSorted = nums.sorted()\n    var sum = 0\n\
    \    var index = 0\n    var result = [Int]()\n    while index < numsSorted.count\
    \ {\n        sum += numsSorted[index]\n        if sum > 0 {\n            result.append(index)\n\
    \        }\n        index += 1\n    }\n    return result", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        } else\
    \ if a > b {\n            return false\n        } else {\n            return aSum\
    \ < bSum\n        }\n    })\n    return result", "    var result = [Int]()\n \
    \   var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum < 0 {\n            sum += n\n        } else {\n          \
    \  sum += n % 10\n        }\n        result.append(n)\n    }\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    var sum =\
    \ 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n       \
    \ result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n        let\
    \ aDigit = a % 10\n        let bDigit = b % 10\n        return aDigit > bDigit\
    \ || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n    })\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        result.append(num)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if\
    \ a < b {\n            return true\n        }\n        if a > b {\n          \
    \  return false\n        }\n        if aSum < bSum {\n            return true\n\
    \        }\n        if aSum > bSum {\n            return false\n        }\n  \
    \      return false\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sortInPlace()\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aInd = a.hashValue % aSum\n        let bInd =\
    \ b.hashValue % bSum\n        return aInd < bInd\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result", "    guard !nums.isEmpty else { return nums }\n \
    \   var numsCopy = nums\n    var sum = 0\n    var maxSum = -Int.max\n    var maxIndex\
    \ = 0\n    for i in numsCopy {\n        sum += i\n        if sum > maxSum {\n\
    \            maxSum = sum\n            maxIndex = i\n        }\n    }\n    return\
    \ numsCopy.sorted(by: { $0.distance(to: $1) < $1.distance(to: $0) })\n       \
    \ .enumerated().map { i, v in\n            if v.1 == maxIndex {\n            \
    \    return i\n            } else {\n                return v.1\n            }\n\
    \        }", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        let aSumDigit\
    \ = aSum.digits\n        let bSumDigit = bSum.digits\n        if aSumDigit.count\
    \ < bSumDigit.count {\n            return true\n        }\n        if aSumDigit.count\
    \ > bSumDigit.count {\n            return false\n        }\n        if aSumDigit.count\
    \ == bSumDigit.count {\n            return aSumDigit < bSumDigit\n        }\n\
    \        return false\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum < 0 {\n            sum += n\n        } else {\n          \
    \  if sum == 0 {\n                result.append(n)\n            } else {\n   \
    \             let index = nums.firstIndex(of: n)!\n                result.append(nums[index])\n\
    \                nums.remove(at: index)\n            }\n        }\n    }\n   \
    \ return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index\
    \ = 0\n    for n in numsSorted {\n        if sum < 0 {\n            sum *= -1\n\
    \            index = numsSorted.index(of: n)!\n        } else {\n            sum\
    \ += n\n            index = numsSorted.index(of: n)!\n        }\n    }\n    return\
    \ numsSorted[index..<numsSorted.count]", "    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aIndex = a.hashValue % aSum\n        let bIndex\
    \ = b.hashValue % bSum\n        return aIndex < bIndex\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n\
    \    })\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n\
    \    \n    var numsSortedBySum = [Int]()\n    var sumBySum = [Int]()\n    for\
    \ n in numsSorted {\n        sumBySum[sum] = n\n        sum += n\n    }\n    \n\
    \    var numsSortedBySumSorted = [Int]()\n    for n in numsSortedBySum {\n   \
    \     numsSortedBySumSorted.append(n)\n    }\n    \n    return numsSortedBySumSorted",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if aSum == bSum { return\
    \ a.compare(to: b) == .orderedAscending }\n        if aSum > bSum { return true\
    \ }\n        if aSum < bSum { return false }\n        return a.compare(to: b)\
    \ == .orderedDescending\n    })\n    return result", "    var numsSorted = nums\n\
    \    if nums.isEmpty {\n        return numsSorted\n    }\n    var sum = 0\n  \
    \  for num in numsSorted {\n        sum += num\n    }\n    var numsSorted2 = numsSorted\n\
    \    var index = 0\n    while index < numsSorted.count {\n        if sum < 0 {\n\
    \            numsSorted2.append(numsSorted[index])\n            sum -= numsSorted[index]\
    \ % 10\n            index += 1\n        } else {\n            numsSorted2.append(numsSorted[index])\n\
    \            sum += numsSorted[index] % 10\n            index += 1\n        }\n\
    \    }\n    return numsSorted2", "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a > b {\n      \
    \      return false\n        }\n        if aSum < bSum {\n            return true\n\
    \        }\n        if aSum > bSum {\n            return false\n        }\n  \
    \      return false\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sortInPlace()\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result", '    return nums.sorted(by: { $0.digits.reduce(0,+)
    + $1.digits.reduce(0,+) })', "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for num\
    \ in nums {\n        sum += num\n        numsSorted.append(num)\n    }\n    \n\
    \    var numsSorted2 = numsSorted\n    \n    for num in numsSorted {\n       \
    \ var index = numsSorted2.index(of: num)\n        if index != nil {\n        \
    \    numsSorted2.remove(at: index!)\n            numsSorted2.insert(num, at: index!)\n\
    \        }\n    }\n    \n    return numsSorted2", "    var result = [Int]()\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aNum = a\n        let bNum = b\n        let aSumDigit\
    \ = aSum % 10\n        let bSumDigit = bSum % 10\n        if aSumDigit > bSumDigit\
    \ {\n            return true\n        } else if aSumDigit < bSumDigit {\n    \
    \        return false\n        } else {\n            return a < b\n        }\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ {\n        sum - $0\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aDiff = aSum - a\n        let bDiff = bSum -\
    \ b\n        if aDiff < bDiff {\n            return true\n        } else if aDiff\
    \ > bDiff {\n            return false\n        } else {\n            return a\
    \ < b\n        }\n    })\n    return result", "    var numsSorted = nums\n   \
    \ var sum = 0\n    for num in numsSorted {\n        sum += num\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n    }\n    return numsSorted.sorted()", "    let\
    \ digits = nums.map { String($0) }\n    let sorted = digits[..<digits.count].sorted()\n\
    \    return nums[sorted.indices]", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    \n    var index = 0\n    while index < numsSorted.count {\n        if numsSorted[index]\
    \ == sum {\n            numsSorted.remove(at: index)\n            numsSorted.insert(numsSorted[index],\
    \ at: index)\n        }\n        index += 1\n    }\n    return numsSortedCopy",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    var result\
    \ = [Int]()\n    for n in nums {\n        let digits = n.digits\n        if digits.isEmpty\
    \ {\n            result.append(n)\n        } else {\n            let sum = digits.reduce(0,\
    \ +)\n            if result.contains(where: { $0.digits == digits }) {\n     \
    \           let index = result.index(where: { $0.digits == digits })\n       \
    \         result[index] = n\n            } else {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result", "    if nums.isEmpty {\n\
    \        return nums\n    }\n    var numsSorted = nums\n    var sum = 0\n    for\
    \ num in numsSorted {\n        sum += num\n        numsSorted.remove(at: numsSorted.index(of:\
    \ num))\n    }\n    return numsSorted.sorted { $0 + $1 < $1 }", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool in\n    \
    \    let aSum = sum\n        let bSum = sum\n        let aSumDigit = aSum % 10\n\
    \        let bSumDigit = bSum % 10\n        if aSumDigit == bSumDigit {\n    \
    \        return a < b\n        } else {\n            return aSumDigit < bSumDigit\n\
    \        }\n    })\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result", "    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n       \
    \ return sum - a < sum - b\n    })\n    return result", "    var sum = 0\n   \
    \ var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return false\n    })\n    return result",
  "    var sum = 0\n    var index = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n        if sum > 0 {\n      \
    \      sum -= result[index]\n            index++\n        }\n    }\n    return\
    \ result", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if aSum\
    \ == bSum { return a.compare(to: b) == .orderedAscending }\n        if aSum >\
    \ bSum { return true }\n        if aSum < bSum { return false }\n        return\
    \ a.compare(to: b) == .orderedDescending\n    })\n    return result", "    var\
    \ sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum += num\n\
    \        result.append(num)\n    }\n    result.sort { sum, num1 in\n        let\
    \ num2 = nums.filter { $0 != num1 }.first!\n        return sum - num1\n    }\n\
    \    return result", "    if nums.isEmpty {\n        return nums\n    }\n    var\
    \ sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum += num\n\
    \        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = a.toInt()\n        let bSum = b.toInt()\n        return aSum\
    \ == bSum || aSum > bSum\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: {\n        sum - $0\n    })\n    return result", " \
    \   var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var index = 0\n    for n in numsSorted\
    \ {\n        while sum > 0 {\n            sum += nums[index]\n            index++\n\
    \        }\n        numsSorted.append(n)\n    }\n    return numsSorted", "   \
    \ var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum - a\n        let bSum = sum - b\n        if aSum\
    \ == bSum { return a.compare(to: b) == .orderedAscending }\n        return aSum\
    \ > bSum\n    })\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n        let\
    \ bSum = sum\n        if a < b {\n            return true\n        }\n       \
    \ if a > b {\n            return false\n        }\n        if aSum < bSum {\n\
    \            return true\n        }\n        if aSum > bSum {\n            return\
    \ false\n        }\n        return false\n    })\n    return result", "    let\
    \ len = nums.count\n    var sum = 0\n    var ans = [Int]()\n    for i in 0..<len\
    \ {\n        sum += nums[i]\n        ans.append(sum)\n    }\n    return ans",
  "    var result = [Int]()\n    for n in nums {\n        let digits = n.digits\n\
    \        if digits.count > 0 {\n            let sum = digits.reduce(0) { $0 +\
    \ $1 }\n            if result.contains(where: { $0 == sum }) {\n             \
    \   result.sort { $0 < $1 }\n            } else {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result", "    var numsSorted = nums\n\
    \    if nums.isEmpty {\n        return numsSorted\n    }\n    var sum = 0\n  \
    \  for n in nums {\n        sum += n\n    }\n    var digitSums = [Int]()\n   \
    \ for n in nums {\n        digitSums.append(sum % 10)\n        sum /= 10\n   \
    \ }\n    var index = 0\n    var numsSorted2 = numsSorted\n    for n in numsSorted\
    \ {\n        var digitSums2 = digitSums\n        if digitSums2.count == 0 {\n\
    \            digitSums2 = [0]\n        }\n        var digitSum = digitSums2[index]\
    \ % 10\n        digitSums2[index] /= 10\n        if digitSum < digitSums2 {\n\
    \            numsSorted2.insert(n, at: index)\n        }\n        index += 1\n\
    \    }\n    return numsSorted2", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  sum = aSum + b\n        return sum > 0\n    })\n    return result", "    let\
    \ numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var result\
    \ = [Int]()\n    for n in numsSorted {\n        sum += n\n        result.append(index)\n\
    \        index++\n    }\n    return result", "    var result = [Int]()\n    var\
    \ sum = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return false\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum + a\n        let bSum = sum + b\n        return aSum <\
    \ bSum\n    })\n    return result", "    var numsSorted = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n \
    \   }\n    var index = 0\n    for n in numsSorted {\n        if sum < 0 {\n  \
    \          sum *= -1\n            index = numsSorted.index(of: n)!\n        }\n\
    \        if sum == 0 {\n            numsSorted.remove(at: index)\n        } else\
    \ {\n            sum -= numsSorted[index]\n            index += 1\n        }\n\
    \    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n \
    \   for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ {\n        sum - $0\n    })\n    return result", "    var numsSorted = nums\n\
    \    if nums.isEmpty {\n        return numsSorted\n    }\n    var sum = 0\n  \
    \  for i in numsSorted {\n        sum += i\n    }\n    var digitSums = [Int]()\n\
    \    for i in 0..<nums.count {\n        digitSums.append(0)\n    }\n    for i\
    \ in 0..<nums.count {\n        digitSums[nums[i]]++\n    }\n    var sortedNums\
    \ = [Int]()\n    for i in 0..<nums.count {\n        if digitSums[nums[i]] == 1\
    \ {\n            sortedNums.append(nums[i])\n        }\n    }\n    return sortedNums",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum < 0\n    })\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var index = 0\n    for n in numsSorted {\n        while sum >= 10\
    \ {\n            sum -= 10\n            numsSorted[index] = n\n            index\
    \ += 1\n        }\n        sum += n\n    }\n    return numsSorted", "    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n       \
    \ let aSum = sum\n        let bSum = sum\n        if a < b {\n            return\
    \ true\n        } else if a > b {\n            return false\n        } else {\n\
    \            return aSum < bSum\n        }\n    })\n    return result", "    if\
    \ nums.isEmpty {\n        return nums\n    }\n    var numsSorted = nums\n    var\
    \ sum = 0\n    for num in numsSorted {\n        sum += num\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n    }\n    return numsSorted.sorted { $0 + $1 <\
    \ $1 }", "    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for i in numsSorted {\n        sum += i\n    }\n\
    \    var index = 0\n    var index2 = 0\n    var index3 = 0\n    var index4 = 0\n\
    \    var index5 = 0\n    var index6 = 0\n    var index7 = 0\n    var index8 =\
    \ 0\n    var index9 = 0\n    var index10 = 0\n    var index11 = 0\n    var index12\
    \ = 0\n    var index13 = 0\n    var index14 = 0\n    var index15 = 0\n    var\
    \ index16 = 0\n    var index17 = 0\n    var index18 = 0\n    var index19 = 0\n\
    \    var index20 = 0\n    var index21 = 0\n    var index22 = 0\n    var index23\
    \ = 0\n    var index24 = 0\n    var index25 = 0\n    var index26 = 0\n    var\
    \ index27 = 0\n    var index28 = 0\n    var index29 = 0\n    var index30 = 0\n\
    \    var index31 = 0\n    var index32 = 0\n    var index33 = 0\n    var index34\
    \ = 0\n    var index35 = 0\n    var index36 = 0\n    var index37 = 0\n    var\
    \ index38 = 0\n    var index39 = 0\n    var index40 = 0\n    var index41 = 0\n\
    \    var index42 = 0\n    var index43 = 0\n    var index44 = 0\n    var index45\
    \ = 0\n    var index46 = 0\n    var index47 = 0\n    var index48 = 0\n    var\
    \ index49 = 0\n    var index50 = 0\n    var index51 = 0\n    var index52 = 0\n\
    \    var index53 = 0\n    var index54 = 0\n    var index55 = 0\n    var index56\
    \ = 0\n    var index57 = 0\n    var index58 = 0\n    var index59 = 0\n    var\
    \ index60 = 0\n    var index61 = 0\n    var index62 = 0\n    var index63 = 0\n\
    \    var index64 = 0\n    var index65 = 0\n    var index66 = 0\n    var index67\
    \ = 0\n    var index68 = 0\n    var index69 = 0\n    var index70 = 0\n    var\
    \ index71 = 0\n    var index72 = 0\n    var index73 = 0\n    var index74 = 0\n\
    \    var index75 = 0\n    var index76 = 0\n    var index77 = 0\n    var index78\
    \ = 0\n    var index79 = 0\n    var index80 = 0\n    var index81 = 0\n    var\
    \ index82 = 0\n    var index83 = 0\n    var index84 = 0\n    var index85 = 0\n\
    \    var index86 = 0\n    var index87 = 0\n    var index88 = 0\n    var index89\
    \ = 0\n    var index90 = 0\n    var index91 = 0\n    var index92 = 0\n    var\
    \ index93 = 0\n    var index94 = 0\n    var index95 = 0", "    var sum = 0\n \
    \   var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit < bDigit || (aDigit == bDigit\
    \ && a.compareTo(b) == .orderedAscending)\n    })\n    return result", "    var\
    \ numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum = numsSorted.sorted()\n\
    \    var numsSortedBySumByIndex = numsSortedBySum.enumerated().map { (index, item)\
    \ in\n        return numsSortedBySumByIndex[index].element\n    }\n    return\
    \ numsSortedBySumByIndex", "    let numsSorted = nums.sorted()\n    var sum =\
    \ 0\n    var index = 0\n    var result = [Int]()\n    for num in numsSorted {\n\
    \        sum += num\n        if sum > 0 {\n            result.append(index)\n\
    \        }\n        sum += num\n        index += 1\n    }\n    return result",
  "    guard nums.count > 0 else { return nums }\n    var numsSorted = nums\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.remove(at:\
    \ numsSorted.index(of: n))\n    }\n    return numsSorted.sorted { $0 + $1 < $1\
    \ }", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n      \
    \  sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) ->\
    \ Bool in\n        let aSum = sum\n        let bSum = sum\n        if aSum ==\
    \ bSum {\n            return a.compare(to: b) == .orderedAscending\n        }\n\
    \        return aSum < bSum\n    })\n    return result", "    var numsSorted =\
    \ [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n      \
    \  numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n    var\
    \ numsSortedCopyIndex = 0\n    for num in numsSorted {\n        if numsSortedCopyIndex\
    \ == numsSortedCopy.count {\n            break\n        }\n        if numsSortedCopy[numsSortedCopyIndex]\
    \ > sum {\n            numsSortedCopy[numsSortedCopyIndex], num = num, numsSortedCopy[numsSortedCopyIndex]\n\
    \            numsSortedCopyIndex += 1\n        }\n    }\n    return numsSortedCopy",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            if sum == 0 {\n                result.append(n)\n\
    \            } else {\n                let index = nums.firstIndex(of: n)\n  \
    \              if index != nil {\n                    result.append(nums[index!])\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    numsSorted.sortInPlace()\n    var result = [Int]()\n    for num in numsSortedCopy\
    \ {\n        if num != 0 {\n            result.append(sum)\n            sum =\
    \ 0\n        }\n    }\n    return result", "    var sum = 0\n    var result =\
    \ [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n     \
    \   let bSum = sum\n        sum = aSum + b\n        return sum > 0\n    })\n \
    \   return result", "    var result = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result"]
stop_tokens:
- "\n}"
