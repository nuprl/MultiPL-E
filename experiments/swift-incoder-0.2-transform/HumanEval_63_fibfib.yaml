name: HumanEval_63_fibfib
language: swift
prompt: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
  /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  /// Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n///\
  \ >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1)\
  \ == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
  \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
completions: ["    var fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n\
    \    }\n    return fibfib", "    var fibfib = 0\n    for _ in 0..<n {\n      \
    \  fibfib += fibfib\n    }\n    return fibfib", "  var result = 1\n  for _ in\
    \ 1...n {\n    result *= n\n    result %= 1000000\n  }\n  return result", "  //\
    \ TODO: recursion here\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return\
    \ 0\n  }\n  if n == 2 {\n    return 1\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib +\
    \ fibfib\n  }\n  return fibfib", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1]\
    \ = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "  // TODO: Write code\
    \ here\n  return 0", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib\
    \ + fibfib\n  }\n  return fibfib", "  // TODO: Write code here\n  return 0", " \
    \ var fibfib: Int = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n\
    \  return fibfib", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n\
    \  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "  if n < 2 {\n    return\
    \ 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    if n == 0 || n == 1\
    \ {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  // TODO: Write code here\n  return 0", "  if n < 2 {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "    var\
    \ fibfib: Int = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n  \
    \  }\n    return fibfib", "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib\
    \ += fibfib\n    }\n    return fibfib", "    var fibfib = [Int]()\n    fibfib[0]\
    \ = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i <= n; i++ {\n\
    \        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]"]
stop_tokens:
- "\n}"
