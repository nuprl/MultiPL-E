name: HumanEval_63_fibfib
language: swift
prompt: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
  /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  /// Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n///\
  \ >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1)\
  \ == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
  \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
completions: ["    var fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n\
    \    }\n    return fibfib", "    var fibfib = 0\n    for _ in 0..<n {\n      \
    \  fibfib += fibfib\n    }\n    return fibfib", "  var result = 1\n  for _ in\
    \ 1...n {\n    result *= n\n    result %= 1000000\n  }\n  return result", "  //\
    \ TODO: recursion here\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return\
    \ 0\n  }\n  if n == 2 {\n    return 1\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib +\
    \ fibfib\n  }\n  return fibfib", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1]\
    \ = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "  // TODO: Write code\
    \ here\n  return 0", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib\
    \ + fibfib\n  }\n  return fibfib", "  // TODO: Write code here\n  return 0", " \
    \ var fibfib: Int = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n\
    \  return fibfib", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n\
    \  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "  if n < 2 {\n    return\
    \ 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    if n == 0 || n == 1\
    \ {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  // TODO: Write code here\n  return 0", "  if n < 2 {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "    var\
    \ fibfib: Int = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n  \
    \  }\n    return fibfib", "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib\
    \ += fibfib\n    }\n    return fibfib", "    var fibfib = [Int]()\n    fibfib[0]\
    \ = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i <= n; i++ {\n\
    \        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n\
    \    fibfib[2] = 1\n    for var i = 2; i < n; i++ {\n        fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "  var fibfib = 0\n\
    \  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib", "  \
    \  if n == 0 || n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib\
    \ = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i =\
    \ 2; i < n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \ }\n  return fibfib[n]", "\treturn fibfibHelper(n, 0, 0, 0)", "  var fibfib =\
    \ 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib",
  "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] =\
    \ 1\n    for var i = 2; i <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", '    return fibfibHelper(n, 0)',
  "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] =\
    \ 1\n    for i : Int in stride(from: 3, to: n, by: -1) {\n        fibfib[i] =\
    \ fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n    }\n    return fibfib[n]", "   \
    \ var fibfib = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n   \
    \ }\n    return fibfib", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib\
    \ + fibfib\n  }\n  return fibfib", '    return fibfibHelper(n, n)', "  var fibfib\
    \ = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for index in\
    \ 3 ..< n {\n    fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \  }\n  return fibfib[n]", "    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for i : Int in 0..<n {\n        fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "    var fibfib =\
    \ [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i\
    \ : Int in stride(from: 3, through: n, by: -1) {\n        fibfib[i] = fibfib[i-2]\
    \ + fibfib[i-1] + fibfib[i-3]\n    }\n    return fibfib[n]", "    var fibfib:\
    \ Int = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n\
    \        return 2\n    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    return fibfib", "\tif n == 0 || n == 1 {\n\t\treturn 0\n\t} else if n ==\
    \ 2 {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \t}", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] =\
    \ 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n  }\n  return fibfib[n]", "    if n == 0 || n == 1 {\n      \
    \  return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  //\
    \ TODO: Write code here\n  return 0", "  var fibfib = 0\n  for _ in 0..<n {\n\
    \    fibfib = fibfib + fibfib\n  }\n  return fibfib", "  // TODO: Write code here\n\
    \  return 0", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n\
    \    fibfib[2] = 1\n    for var i = 2; i <= n; i++ {\n        fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "  if n < 0 {\n \
    \   fatalError(\"fibfib: negative numbers not allowed\")\n  }\n  if n == 0 {\n\
    \    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "  var result = 1\n  for _ in 1...n {\n    result = result *\
    \ 2\n  }\n  return result", "  var fibfib: Int = 0\n  for _ in 0..<n {\n    fibfib\
    \ = fibfib + fibfib\n  }\n  return fibfib", "    var fibfib = 0\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n\
    \    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n\
    \    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return\
    \ 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n == 9 {\n    \
    \    return 34\n    }\n    if n == 10 {\n        return 55\n    }\n    if n ==\
    \ 11 {\n        return 89\n    }\n    if n == 12 {\n        return 144\n    }\n\
    \    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n        return\
    \ 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if n == 16 {\n\
    \        return 987\n    }\n    if n == 17 {\n        return 1597\n    }\n   \
    \ if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n        return 4181\n\
    \    }\n    if n == 20 {\n        return 6765\n    }\n    if n == 21 {\n     \
    \   return 10946\n    }\n    if n == 22 {\n        return 17711\n    }\n    if\
    \ n == 23 {\n        return 28657\n    }\n    if n == 24 {\n        return 46368\n\
    \    }\n    if n == 25 {\n        return 71457\n    }\n    if n == 26 {\n    \
    \    return 102337\n    }\n    if n == 27 {\n        return 165552\n    }\n  \
    \  if n == 28 {\n        return 267725\n    }\n    if n == 29 {\n        return\
    \ 433944\n    }\n    if n == 30 {\n        return 701496\n    }\n    if n == 31\
    \ {\n        return 1065921\n    }\n    if n == 32 {\n        return 1686361\n\
    \    }\n    if n == 33 {\n        return 2679141\n    }\n    if n == 34 {\n  \
    \      return 4337880\n    }\n    if n == 35 {\n        return 7012229\n    }\n\
    \    if n == 36 {\n        return 10660353\n    }\n    if n == 37 {\n        return\
    \ 16858966\n    }\n    if n == 38 {\n        return 26781861\n    }\n    if n\
    \ == 39 {\n        return 43381380\n    }\n    if n == 40 {\n        return 70106229\n\
    \    }\n    if n == 41 {\n        return 106585633\n    }\n    if n == 42 {\n\
    \        return 168554663\n    }\n    if n == 43 {\n        return 267714663\n\
    \    }\n    if n == 44 {\n        return 433680663\n    }\n", "  var fibfib =\
    \ [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2;\
    \ i <= n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n\
    \  return fibfib[n]", "    if n == 0 || n == 1 {\n        return 0\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  if n < 0 {\n    return\
    \ 0\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib", "  var fibfib\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib",
  "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return\
    \ fibfib", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n\
    \  }\n  return fibfib", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for i : Int in 3..<n {\n        fibfib[i] = fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 0..<n {\n    fibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return fibfib[n]", " \
    \ var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for\
    \ i in  3...n {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n\
    \  return fibfib[n]", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] =\
    \ 0\n  fibfib[2] = 1\n  for i in  3...n {\n    fibfib[i] = fibfib[i - 1] + fibfib[i\
    \ - 2] + fibfib[i - 3]\n  }\n  return fibfib[n]", "    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib", " \
    \   var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2]\
    \ = 1\n    for var i = 3; i <= n; i++ {\n        fibfib[i] = fibfib[i - 1] + fibfib[i\
    \ - 2] + fibfib[i - 3]\n    }\n    return fibfib[n]", "\tif n < 0 {\n\t\tpanic(\"\
    fibfib: negative number\")\n\t}\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1\
    \ {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "    var fibfib = [Int]()\n    fibfib[0] = 0\n\
    \    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from: 3, to:\
    \ n, by: 1) {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i -\
    \ 3]\n    }\n    return fibfib[n]", "    var fibfib = [Int]()\n    fibfib[0] =\
    \ 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i in  3...n {\n        fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", " \
    \   var fibfib = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n \
    \   }\n    return fibfib", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for var i = 2; i < n; i++ {\n        fibfib[i] =\
    \ fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "   \
    \ var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] =\
    \ 1\n    for var i = 2; i <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "    var fibfib = 0\n    for _\
    \ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib", " \
    \ var result = 1\n  for _ in 1...n {\n    result *= 2\n  }\n  return result",
  "  var fibfib: Int = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n\
    \  return fibfib", "  if n < 0 {\n    return 0\n  }\n  if n == 0 {\n    return\
    \ 0\n  }\n  if n == 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "\treturn fibfibHelper(n, 0, 0, 0)", "    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 3, through: n, by: 1) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]", "    var fibfib = 0\n    for _ in 0..<n {\n   \
    \     fibfib += fibfib\n    }\n    return fibfib", "\tif n == 0 || n == 1 {\n\t\
    \treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "\tif n == 0 || n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\
    \t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib",
  "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] =\
    \ 1\n    for i : Int in 3...n {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "\tif n < 0 {\n\t\tpanic(\"fibfib:\
    \ negative number\")\n\t}\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\
    \treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib +\
    \ fibfib\n  }\n  return fibfib", "    var fibfib = [Int]()\n    fibfib[0] = 0\n\
    \    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 2..<n {\n        fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", " \
    \ // TODO: recursion here\n  if n < 0 {\n    fatalError(\"fibfib: negative number\"\
    )\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", '    return fibfibHelper(n,
    n)', "    if n <= 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for var i = 2; i <= n; i++ {\n        fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "\t\
    return fibfibHelper(n, 0, 1)", "  var result = 1\n  for _ in 1...n {\n    result\
    \ *= n\n    result %= 1000000007\n  }\n  return result", "    if n < 0 {\n   \
    \     return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for\
    \ var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \  }\n  return fibfib[n]", "  var result = 1\n  for _ in 1...n {\n    result =\
    \ result + result\n  }\n  return result", "  // TODO: Write code here\n  return\
    \ 0", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n\
    \  return fibfib", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib\
    \ + fibfib + 1\n  }\n  return fibfib", "  var fibfib = [Int]()\n  fibfib[0] =\
    \ 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "  var\
    \ fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var\
    \ i = 2; i < n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \  }\n  return fibfib[n]", "  // TODO: recursion here\n  if n == 0 {\n    return\
    \ 0\n  }\n  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 1\n  }\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "   \
    \ var fibfib = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib + 1\n\
    \    }\n    return fibfib", "    var fibfib = [Int]()\n    fibfib[0] = 0\n   \
    \ fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i < n; i++ {\n        fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", " \
    \   var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2]\
    \ = 1\n    for var i = 2; i < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "    if n < 2 {\n        return\
    \ 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib\
    \ = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i := 3;\
    \ i <= n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n\
    \  return fibfib[n]", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib\
    \ + fibfib\n  }\n  return fibfib", "  var fibfib = 0\n  for _ in 0..<n {\n   \
    \ fibfib += fibfib\n  }\n  return fibfib", "    var fibfib: Int = 0\n    for _\
    \ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib", " \
    \ // TODO: recursion here\n  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "    var fibfib = [Int]()\n    fibfib[0] = 0\n\
    \    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from: 3, through:\
    \ n, by: -1) {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i -\
    \ 3]\n    }\n    return fibfib[n]", "    var fibfib = [Int]()\n    fibfib[0] =\
    \ 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i <= n; i++ {\n\
    \        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]", "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n\
    \    }\n    return fibfib", "  var fibfib: Int = 0\n  for var i = 0; i <= n; i++\
    \ {\n    fibfib = fibfib + i\n  }\n  return fibfib", "  if n < 2 {\n    return\
    \ 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    var fibfib =\
    \ [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i\
    \ : Int in 2..<n {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]", "  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "    if n == 0 || n == 1 {\n        return 0\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    var fibfib:\
    \ Int = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib + 1\n    }\n\
    \    return fibfib", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for var i = 2; i < n; i++ {\n        fibfib[i] =\
    \ fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "\treturn\
    \ fibfibHelper(n, 0)", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] =\
    \ 0\n  fibfib[2] = 1\n  for i : Int in stride(from: 3, through: n, by: 1) {\n\
    \    fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return\
    \ fibfib[n]", "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib = fibfib\
    \ + fibfib\n    }\n    return fibfib", "  var fibfib = [Int]()\n  fibfib[0] =\
    \ 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 2...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "    var\
    \ fibfib: Int = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n  \
    \  }\n    return fibfib", "  // TODO: Write code here\n  return 0", "  var fibfib\
    \ = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib",
  "  var result = 1\n  for _ in 1...n {\n    result = result + result\n  }\n  return\
    \ result", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n \
    \   fibfib[2] = 1\n    for var i = 2; i < n; i++ {\n        fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]",
  "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n   \
    \ return fibfib", '    return fibfibHelper(n, 0)', "\treturn fibfibHelper(n, n)",
  "  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return\
    \ fibfib", "  // TODO: Write code here\n  return 0", "    var fibfib: Int = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib",
  "  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n   \
    \ return fibfib", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib += fibfib\n\
    \  }\n  return fibfib", "  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "  var fibfib = 0\n  for _ in 0..<n {\n    fibfib\
    \ = fibfib + fibfib\n  }\n  return fibfib", "  var fibfib = 0\n  for _ in 0..<n\
    \ {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib", "  var fibfib =\
    \ [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2;\
    \ i <= n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n\
    \  return fibfib[n]", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for i : Int in 3...n {\n        fibfib[i] = fibfib[i-2]\
    \ + fibfib[i-1] + fibfib[i-3]\n    }\n    return fibfib[n]", "  if n < 2 {\n \
    \   return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  // TODO:\
    \ Write code here\n  return 0", "    var fibfib = 0\n    for _ in 0..<n {\n  \
    \      fibfib += fibfib\n    }\n    return fibfib", "  if n < 0 {\n    return\
    \ 0\n  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    var fibfib: Int = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib",
  "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "  if n < 2 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  // TODO: Write code here\n  return 0", "    var fibfib = 0\n    for _ in 0..<n\
    \ {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib", "    var fibfib\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib",
  "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] =\
    \ 1\n    for var i = 2; i <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "  var fibfib: Int = 0\n  for _\
    \ in 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib", "    var\
    \ fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return\
    \ fibfib", "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n\
    \    }\n    return fibfib", "  var fibfib: Int = 0\n  var fibfib1: Int = 0\n \
    \ var fibfib2: Int = 0\n  var fibfib3: Int = 0\n  var fibfib4: Int = 0\n  var\
    \ fibfib5: Int = 0\n  var fibfib6: Int = 0\n  var fibfib7: Int = 0\n  var fibfib8:\
    \ Int = 0\n  var fibfib9: Int = 0\n  var fibfib10: Int = 0\n  var fibfib11: Int\
    \ = 0\n  var fibfib12: Int = 0\n  var fibfib13: Int = 0\n  var fibfib14: Int =\
    \ 0\n  var fibfib15: Int = 0\n  var fibfib16: Int = 0\n  var fibfib17: Int = 0\n\
    \  var fibfib18: Int = 0\n  var fibfib19: Int = 0\n  var fibfib20: Int = 0\n \
    \ var fibfib21: Int = 0\n  var fibfib22: Int = 0\n  var fibfib23: Int = 0\n  var\
    \ fibfib24: Int = 0\n  var fibfib25: Int = 0\n  var fibfib26: Int = 0\n  var fibfib27:\
    \ Int = 0\n  var fibfib28: Int = 0\n  var fibfib29: Int = 0\n  var fibfib30: Int\
    \ = 0\n  var fibfib31: Int = 0\n  var fibfib32: Int = 0\n  var fibfib33: Int =\
    \ 0\n  var fibfib34: Int = 0\n  var fibfib35: Int = 0\n  var fibfib36: Int = 0\n\
    \  var fibfib37: Int = 0\n  var fibfib38: Int = 0\n  var fibfib39: Int = 0\n \
    \ var fibfib40: Int = 0\n  var fibfib41: Int = 0\n  var fibfib42: Int = 0\n  var\
    \ fibfib43: Int = 0\n  var fibfib44: Int = 0\n  var fibfib45: Int = 0\n  var fibfib46:\
    \ Int = 0\n  var fibfib47: Int = 0\n  var fibfib48: Int = 0\n  var fibfib49: Int\
    \ = 0\n  var fibfib50: Int = 0\n  var fibfib51: Int = 0\n  var fibfib52: Int =\
    \ 0\n  var fibfib53: Int = 0\n  var fibfib54: Int = 0\n  var fibfib55: Int = 0\n\
    \  var fibfib56: Int = 0\n  var fibfib57: Int = 0\n  var fibfib58: Int = 0\n \
    \ var fibfib59: Int = 0\n  var fibfib60: Int = 0\n  var fibfib61: Int = 0\n  var\
    \ fibfib62: Int = 0\n  var fibfib63: Int = 0\n  var fibfib64: Int", "\tif n <\
    \ 0 {\n\t\tpanic(\"fibfib: negative number\")\n\t}\n\tif n == 0 {\n\t\treturn\
    \ 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib = [Int]()\n \
    \ fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i in  3...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "    var\
    \ fibfib: Int = 0\n    var fibfib2: Int = 0\n    var fibfib3: Int = 0\n    var\
    \ fibfib4: Int = 0\n    var fibfib5: Int = 0\n    var fibfib6: Int = 0\n    var\
    \ fibfib7: Int = 0\n    var fibfib8: Int = 0\n    var fibfib9: Int = 0\n    var\
    \ fibfib10: Int = 0\n    var fibfib11: Int = 0\n    var fibfib12: Int = 0\n  \
    \  var fibfib13: Int = 0\n    var fibfib14: Int = 0\n    var fibfib15: Int = 0\n\
    \    var fibfib16: Int = 0\n    var fibfib17: Int = 0\n    var fibfib18: Int =\
    \ 0\n    var fibfib19: Int = 0\n    var fibfib20: Int = 0\n    var fibfib21: Int\
    \ = 0\n    var fibfib22: Int = 0\n    var fibfib23: Int = 0\n    var fibfib24:\
    \ Int = 0\n    var fibfib25: Int = 0\n    var fibfib26: Int = 0\n    var fibfib27:\
    \ Int = 0\n    var fibfib28: Int = 0\n    var fibfib29: Int = 0\n    var fibfib30:\
    \ Int = 0\n    var fibfib31: Int = 0\n    var fibfib32: Int = 0\n    var fibfib33:\
    \ Int = 0\n    var fibfib34: Int = 0\n    var fibfib35: Int = 0\n    var fibfib36:\
    \ Int = 0\n    var fibfib37: Int = 0\n    var fibfib38: Int = 0\n    var fibfib39:\
    \ Int = 0\n    var fibfib40: Int = 0\n    var fibfib41: Int = 0\n    var fibfib42:\
    \ Int = 0\n    var fibfib43: Int = 0\n    var fibfib44: Int = 0\n    var fibfib45:\
    \ Int = 0\n    var fibfib46: Int = 0\n    var fibfib47: Int = 0\n    var fibfib48:\
    \ Int = 0\n    var fibfib49: Int = 0\n    var fibfib50: Int = 0\n    var fibfib51:\
    \ Int = 0\n    var fibfib52: Int = 0\n    var fibfib53: Int = 0\n    var fibfib54:\
    \ Int = 0\n    var fibfib55: Int = 0\n    var fibfib56: Int = 0\n    var fibfib57:\
    \ Int = 0\n    var fibfib58: Int = 0\n    var fibfib59: Int = 0\n    var fibfib60:\
    \ Int = 0\n    var fibfib61: Int = 0\n    var fibfib62: Int = 0\n    var fibfib63:\
    \ Int = 0\n    var fibfib64: Int = 0\n    var fibfib65: ", "    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib",
  "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n  \
    \  }\n    return fibfib", '    return fibfibHelper(n, 0)', "    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 3, through: n, by: -1) {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2]\
    \ + fibfib[i - 3]\n    }\n    return fibfib[n]", "\treturn fibfibHelper(n, 0,\
    \ 0, 1)", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2]\
    \ = 1\n  for index in 3..<n {\n    fibfib[index] = fibfib[index-1] + fibfib[index-2]\
    \ + fibfib[index-3]\n  }\n  return fibfib[n]", "    var fibfib = 0\n    for _\
    \ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib", "    var fibfib\
    \ = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for\
    \ i : Int in 2...n {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]", "\treturn fibfibHelper(n, 0, 1)", "    var fibfib:\
    \ Int = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 1\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n\
    \        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n ==\
    \ 5 {\n        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n   \
    \ if n == 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n\
    \    }\n    if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return\
    \ 55\n    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n  \
    \      return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if\
    \ n == 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n\
    \    }\n    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n      \
    \  return 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n\
    \ == 19 {\n        return 4181\n    }\n    if n == 20 {\n        return 6765\n\
    \    }\n    if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n    \
    \    return 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if\
    \ n == 24 {\n        return 46368\n    }\n    if n == 25 {\n        return 71457\n\
    \    }\n    if n == 26 {\n        return 102337\n    }\n    if n == 27 {\n   \
    \     return 165552\n    }\n    if n == 28 {\n        return 267725\n    }\n \
    \   if n == 29 {\n        return 433944\n    }\n    if n == 30 {\n        return\
    \ 685557\n    }\n    if n == 31 {\n        return 1094597\n    }\n    if n ==\
    \ 32 {\n        return 1771267\n    }\n    if n == 33 {\n        return 286579\n\
    \    }\n    if n == 34 {\n        return 463689\n    }\n    if n == 35 {\n   \
    \     return 714579\n    }\n    if n == 36 {\n        return 1023377\n    }\n\
    \    if n == 37 {\n        return 1655527\n    }\n    if n == 38 {\n        return\
    \ 2677256\n    }\n    if n == 39 {\n        return 4339446\n    }\n    if n ==\
    \ 40 {\n        return 6855576\n    }\n    if n == 41 {\n        return 10945977\n\
    \    }\n    if n == 42 {\n        return 17712677\n    }\n    if n == 43 {\n \
    \       return 2865789\n    }\n    if n == 44 {\n        return 4636898\n    }\n\
    \    if n == 45 {\n        return 71457", "    if n <= 1 {\n        return 0\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  // TODO: Write\
    \ code here\n  return 0", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1]\
    \ = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "    var fibfib = 0\n\
    \    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib",
  "  var fibfib: Int = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n\
    \  return fibfib", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n\
    \  fibfib[2] = 1\n  for index in 3 ..< n {\n    fibfib[index] = fibfib[index-1]\
    \ + fibfib[index-2] + fibfib[index-3]\n  }\n  return fibfib[n]", "    var fibfib\
    \ = 0\n    for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib",
  "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] =\
    \ 1\n    for var i = 2; i < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "    if n == 0 || n == 1 {\n  \
    \      return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", " \
    \   var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2]\
    \ = 1\n    for var i = 2; i <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3]\n    }\n    return fibfib[n]", "  if n < 0 {\n    fatalError(\"\
    fibfib: negative numbers not allowed\")\n  }\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in stride(from: 2, through:\
    \ n, by: 1) {\n    fibfib[i] = fibfib[i-2] + fibfib[i-1] + fibfib[i-3]\n  }\n\
    \  return fibfib[n]", "    var fibfib = 0\n    for _ in 0..<n {\n        fibfib\
    \ += fibfib\n    }\n    return fibfib", "  if n < 2 {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  if n < 0 {\n    return 0\n  }\n\
    \  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib: Int = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib", "    if n == 0\
    \ || n == 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)", "  var result = 1\n  for _ in 1...n {\n    result = result + result\n\
    \  }\n  return result", "    if n < 2 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1]\
    \ = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]", "  var fibfib: Int =\
    \ 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib",
  "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)", "\tif n < 0 {\n\t\tpanic(\"fibfib: negative number\")\n\t}\n\
    \tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n ==\
    \ 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", " \
    \   var fibfib: Int = 0\n    for _ in 0..<n {\n        fibfib = fibfib + fibfib\n\
    \    }\n    return fibfib", "    if n == 0 || n == 1 {\n        return 0\n   \
    \ }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  var fibfib = [Int]()\n\
    \  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++\
    \ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]",
  "  var fibfib: Int = 0\n  for _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n\
    \  return fibfib", "    var fibfib = [Int]()\n    fibfib[0] = 0\n    fibfib[1]\
    \ = 0\n    fibfib[2] = 1\n    for i : Int in 3...n {\n        fibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]", "    if n < 1 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "  var fibfib = [Int]()\n  fibfib[0] = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for\
    \ var i = 2; i <= n; i++ {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \  }\n  return fibfib[n]"]
stop_tokens:
- "\n}"
