language: swift
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp645qvtm7.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp645qvtm7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp645qvtm7.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp645qvtm7.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return false\n    }\n    if a < 6 {\n\
    \        return false\n    }\n    if a < 7 {\n        return false\n    }\n  \
    \  if a < 8 {\n        return false\n    }\n    if a < 9 {\n        return false\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return false\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return false\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return false\n    }\n    if a < 16 {\n      \
    \  return false\n    }\n    if a < 17 {\n        return false\n    }\n    if a\
    \ < 18 {\n        return false\n    }\n    if a < 19 {\n        return false\n\
    \    }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n      \
    \  return false\n    }\n    if a < 22 {\n        return false\n    }\n    if a\
    \ < 23 {\n        return false\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 25 {\n        return false\n    }\n    if a < 26 {\n      \
    \  return false\n    }\n    if a < 27 {\n        return false\n    }\n    if a\
    \ < 28 {\n        return false\n    }\n    if a < 29 {\n        return false\n\
    \    }\n    if a < 30 {\n        return false\n    }\n    if a < 31 {\n      \
    \  return false\n    }\n    if a < 32 {\n        return false\n    }\n    if a\
    \ < 33 {\n        return false\n    }\n    if a < 34 {\n        return false\n\
    \    }\n    if a < 35 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a < 37 {\n        return false\n    }\n    if a\
    \ < 38 {\n        return false\n    }\n    if a < 39 {\n        return false\n\
    \    }\n    if a < 40 {\n        return false\n    }\n    if a < 41 {\n      \
    \  return false\n    }\n    if a < 42 {\n        return false\n    }\n    if a\
    \ < 43 {\n        return false\n    }\n    if a < 44 {\n        return false\n\
    \    }\n    if a < 45 {\n        return false\n    }\n    if a < 46 {\n      \
    \  return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz2liaij7.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpz11rovbf/tmpz11rovbf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b595ecefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b595e9e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b595e9e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b595e9e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz11rovbf                        0x000055918d9792b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b595eedb460 __libc_start_main +
    245

    6    tmpz11rovbf                        0x000055918d978ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpz11rovbf/tmpz11rovbf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b595ecefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b595e9e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b595e9e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b595e9e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz11rovbf                        0x000055918d9792b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b595eedb460 __libc_start_main +
    245

    6    tmpz11rovbf                        0x000055918d978ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 6 {\n        return true\n\
    \    }\n    if a < 180 {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpg0zv2t30/tmpg0zv2t30.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32f12c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32f0fbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32f0fbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32f0fba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0zv2t30                        0x000055feab8f3227 <unavailable> + 4647

    5    libc.so.6                          0x00002b32f14b0460 __libc_start_main +
    245

    6    tmpg0zv2t30                        0x000055feab8f2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   if a > 9 {\n        return false\n    }\n    if a % 3 == 0 {\n        return\
    \ true\n    }\n    if a % 5 == 0 {\n        return true\n    }\n    if a % 7 ==\
    \ 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp6tzctu3h/tmp6tzctu3h.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad00ff45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad00fc3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad00fc3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad00fc3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tzctu3h                        0x00005557990be241 <unavailable> + 4673

    5    libc.so.6                          0x00002ad010131460 __libc_start_main +
    245

    6    tmp6tzctu3h                        0x00005557990bdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a > 360 {\n        return\
    \ false\n    }\n    if a > 720 {\n        return false\n    }\n    if a > 1440\
    \ {\n        return false\n    }\n    if a > 2880 {\n        return false\n  \
    \  }\n    if a > 5760 { // 720 x 720 x 720\n        return true\n    }\n    if\
    \ a > 11520 { // 1440 x 1440 x 1440\n        return true\n    }\n    if a > 23040\
    \ { // 2880 x 2880 x 2880\n        return true\n    }\n    if a > 46080 { // 5760\
    \ x 5760 x 5760\n        return true\n    }\n    if a > 72520 { // 11520 x 11520\
    \ x 11520\n        return true\n    }\n    if a > 128060 { // 23040 x 23040 x\
    \ 23040\n        return true\n    }\n    if a > 172880 { // 46080 x 46080 x 46080\n\
    \        return true\n    }\n    if a > 259200 { // 72520 x 72520 x 72520\n  \
    \      return true\n    }\n    if a > 420800 { // 128060 x 128060 x 128060\n \
    \       return true\n    }\n    if a > 576000 { // 172880 x 172880 x 172880\n\
    \        return true\n    }\n    if a > 1152000 { // 259200 x 259200 x 259200\n\
    \        return true\n    }\n    if a > 2304000 { // 420800 x 420800 x 420800\n\
    \        return true\n    }\n    if a > 4608000 { // 576000 x 576000 x 576000\n\
    \        return true\n    }\n    if a > 7252000 { // 1152000 x 1152000 x 1152000\n\
    \        return true\n    }\n    if a > 12806000 { // 2304000 x 2304000 x 2304000\n\
    \        return true\n    }\n    if a > 17287000 { // 4608000 x 4608000 x 4608000\n\
    \        return true\n    }\n    if a > 25912000 { // 7252000 x 7252000 x 7252000\n\
    \        return true\n    }\n    if a > 42076000 { // 12806000 x 12806000 x 12806000\n\
    \        return true\n    }\n    if a > 57601000 { // 17287000 x 17287000 x 17\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4uut97ug.swift:114:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp4uut97ug.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp4uut97ug.swift:95:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a % a == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpz11rovbf/tmpz11rovbf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b595ecefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b595e9e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b595e9e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b595e9e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz11rovbf                        0x000055918d9792b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b595eedb460 __libc_start_main +
    245

    6    tmpz11rovbf                        0x000055918d978ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaesfx5b1.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpaesfx5b1.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpaesfx5b1.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaesfx5b1.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpaesfx5b1.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpaesfx5b1.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a < 2 {\n        return false\n    }\n    if a < 3 {\n        return\
    \ false\n    }\n    if a < 4 {\n        return false\n    }\n    if a < 5 {\n\
    \        return false\n    }\n    if a < 6 {\n        return false\n    }\n  \
    \  if a < 7 {\n        return false\n    }\n    if a < 8 {\n        return false\n\
    \    }\n    if a < 9 {\n        return false\n    }\n    if a < 10 {\n       \
    \ return false\n    }\n    if a < 11 {\n        return false\n    }\n    if a\
    \ < 12 {\n        return false\n    }\n    if a < 13 {\n        return false\n\
    \    }\n    if a < 14 {\n        return false\n    }\n    if a < 15 {\n      \
    \  return false\n    }\n    if a < 16 {\n        return false\n    }\n    if a\
    \ < 17 {\n        return false\n    }\n    if a < 18 {\n        return false\n\
    \    }\n    if a < 19 {\n        return false\n    }\n    if a < 20 {\n      \
    \  return false\n    }\n    if a < 21 {\n        return false\n    }\n    if a\
    \ < 22 {\n        return false\n    }\n    if a < 23 {\n        return false\n\
    \    }\n    if a < 24 {\n        return false\n    }\n    if a < 25 {\n      \
    \  return false\n    }\n    if a < 26 {\n        return false\n    }\n    if a\
    \ < 27 {\n        return false\n    }\n    if a < 28 {\n        return false\n\
    \    }\n    if a < 29 {\n        return false\n    }\n    if a < 30 {\n      \
    \  return false\n    }\n    if a < 31 {\n        return false\n    }\n    if a\
    \ < 32 {\n        return false\n    }\n    if a < 33 {\n        return false\n\
    \    }\n    if a < 34 {\n        return false\n    }\n    if a < 35 {\n      \
    \  return false\n    }\n    if a < 36 {\n        return false\n    }\n    if a\
    \ < 37 {\n        return false\n    }\n    if a < 38 {\n        return false\n\
    \    }\n    if a < 39 {\n        return false\n    }\n    if a < 40 {\n      \
    \  return false\n    }\n    if a < 41 {\n        return false\n    }\n    if a\
    \ < 42 {\n        return false\n    }\n    if a < 43 {\n        return false\n\
    \    }\n    if a < 44 {\n        return false\n    }\n    if a < 45 {\n      \
    \  return false\n    }\n    if a \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaavjnomw.swift:160:9: error: expected '{' after 'if' condition\n\
    \    if a \n        ^\n/tmp/tmpaavjnomw.swift:160:8: error: type 'Int' cannot\
    \ be used as a boolean; test for '!= 0' instead\n    if a \n       ^\n       (\
    \ != 0)\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    if a < 4294967296 {\n        return true\n  \
    \  }\n    if a < 8589934592 {\n        return true\n    }\n    if a < 17179869184\
    \ {\n        return true\n    }\n    if a < 34359738368 {\n        return true\n\
    \    }\n    if a < 68719476736 {\n        return true\n    }\n    if a < 137438953472\
    \ {\n        return true\n    }\n    if a < 274877906944 {\n        return true\n\
    \    }\n    if a < 549755813888 {\n        return true\n    }\n    if a < 10995\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp4h5xec.swift:139:17: error: expected '{' after 'if' condition\n\
    \    if a < 10995\n                ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 8 {\n        return true\n\
    \    }\n    if a < 16 {\n        return true\n    }\n    if a < 32 {\n       \
    \ return true\n    }\n    if a < 64 {\n        return true\n    }\n    if a <\
    \ 128 {\n        return true\n    }\n    if a < 256 {\n        return true\n \
    \   }\n    if a < 512 {\n        return true\n    }\n    if a < 1024 {\n     \
    \   return true\n    }\n    if a < 2048 {\n        return true\n    }\n    if\
    \ a < 4096 {\n        return true\n    }\n    if a < 8192 {\n        return true\n\
    \    }\n    if a < 16384 {\n        return true\n    }\n    if a < 32768 {\n \
    \       return true\n    }\n    if a < 65536 {\n        return true\n    }\n \
    \   if a < 131072 {\n        return true\n    }\n    if a < 262144 {\n       \
    \ return true\n    }\n    if a < 524288 {\n        return true\n    }\n    if\
    \ a < 1048576 {\n        return true\n    }\n    if a < 2097152 {\n        return\
    \ true\n    }\n    if a < 4194304 {\n        return true\n    }\n    if a < 8388608\
    \ {\n        return true\n    }\n    if a < 16777216 {\n        return true\n\
    \    }\n    if a < 33554432 {\n        return true\n    }\n    if a < 67108864\
    \ {\n        return true\n    }\n    if a < 134217728 {\n        return true\n\
    \    }\n    if a < 268435456 {\n        return true\n    }\n    if a < 536870912\
    \ {\n        return true\n    }\n    if a < 1073741824 {\n        return true\n\
    \    }\n    if a < 2147483648 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp45m6h0n4/tmp45m6h0n4.swift:129: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7478b10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7478807b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7478807988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74788067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45m6h0n4                        0x0000557bf7c36227 <unavailable> + 4647

    5    libc.so.6                          0x00002b7478cfc460 __libc_start_main +
    245

    6    tmp45m6h0n4                        0x0000557bf7c35e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaesfx5b1.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpaesfx5b1.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpaesfx5b1.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 18\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmproea4hld/tmproea4hld.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c4a9d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c4a6cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c4a6cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c4a6cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproea4hld                        0x000055cc34950227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9c4abc2460 __libc_start_main +
    245

    6    tmproea4hld                        0x000055cc3494fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpilmq3o0l/tmpilmq3o0l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae42103ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae420d35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae420d35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae420d347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilmq3o0l                        0x00005609f12e2227 <unavailable> + 4647

    5    libc.so.6                          0x00002ae42122a460 __libc_start_main +
    245

    6    tmpilmq3o0l                        0x00005609f12e1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp645qvtm7.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp645qvtm7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp645qvtm7.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp645qvtm7.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpilmq3o0l/tmpilmq3o0l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae42103ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae420d35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae420d35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae420d347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilmq3o0l                        0x00005609f12e2227 <unavailable> + 4647

    5    libc.so.6                          0x00002ae42122a460 __libc_start_main +
    245

    6    tmpilmq3o0l                        0x00005609f12e1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 3 {\n        return true\n\
    \    }\n    if a < 4 {\n        return true\n    }\n    if a < 5 {\n        return\
    \ true\n    }\n    if a < 6 {\n        return true\n    }\n    if a < 7 {\n  \
    \      return true\n    }\n    if a < 8 {\n        return true\n    }\n    if\
    \ a < 9 {\n        return true\n    }\n    if a < 10 {\n        return true\n\
    \    }\n    if a < 11 {\n        return true\n    }\n    if a < 12 {\n       \
    \ return true\n    }\n    if a < 13 {\n        return true\n    }\n    if a <\
    \ 14 {\n        return true\n    }\n    if a < 15 {\n        return true\n   \
    \ }\n    if a < 16 {\n        return true\n    }\n    if a < 17 {\n        return\
    \ true\n    }\n    if a < 18 {\n        return true\n    }\n    if a < 19 {\n\
    \        return true\n    }\n    if a < 20 {\n        return true\n    }\n   \
    \ if a < 21 {\n        return true\n    }\n    if a < 22 {\n        return true\n\
    \    }\n    if a < 23 {\n        return true\n    }\n    if a < 24 {\n       \
    \ return true\n    }\n    if a < 25 {\n        return true\n    }\n    if a <\
    \ 26 {\n        return true\n    }\n    if a < 27 {\n        return true\n   \
    \ }\n    if a < 28 {\n        return true\n    }\n    if a < 29 {\n        return\
    \ true\n    }\n    if a < 30 {\n        return true\n    }\n    if a < 31 {\n\
    \        return true\n    }\n    if a < 32 {\n        return true\n    }\n   \
    \ if a < 33 {\n        return true\n    }\n    if a < 34 {\n        return true\n\
    \    }\n    if a < 35 {\n        return true\n    }\n    if a < 36 {\n       \
    \ return true\n    }\n    if a < 37 {\n        return true\n    }\n    if a <\
    \ 38 {\n        return true\n    }\n    if a < 39 {\n        return true\n   \
    \ }\n    if a < 40 {\n        return true\n    }\n    if a < 41 {\n        return\
    \ true\n    }\n    if a < 42 {\n        return true\n    }\n    if a < 43 {\n\
    \        return true\n    }\n    if a < 44 {\n        return true\n    }\n   \
    \ if a < 45 {\n        return true\n    }\n    if a < 46 {\n        return true\n\
    \    }\n    if a < 47 {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpfy8y87sk.swift:160:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 4 {\n        return true\n\
    \    }\n    if a < 8 {\n        return true\n    }\n    if a < 16 {\n        return\
    \ true\n    }\n    if a < 32 {\n        return true\n    }\n    if a < 64 {\n\
    \        return true\n    }\n    if a < 128 {\n        return true\n    }\n  \
    \  if a < 256 {\n        return true\n    }\n    if a < 512 {\n        return\
    \ true\n    }\n    if a < 1024 {\n        return true\n    }\n    if a < 2048\
    \ {\n        return true\n    }\n    if a < 4096 {\n        return true\n    }\n\
    \    if a < 8192 {\n        return true\n    }\n    if a < 16384 {\n        return\
    \ true\n    }\n    if a < 32768 {\n        return true\n    }\n    if a < 65536\
    \ {\n        return true\n    }\n    if a < 131072 {\n        return true\n  \
    \  }\n    if a < 262144 {\n        return true\n    }\n    if a < 524288 {\n \
    \       return true\n    }\n    if a < 1048576 {\n        return true\n    }\n\
    \    if a < 2097152 {\n        return true\n    }\n    if a < 4194304 {\n    \
    \    return true\n    }\n    if a < 8388608 {\n        return true\n    }\n  \
    \  if a < 16777216 {\n        return true\n    }\n    if a < 33554432 {\n    \
    \    return true\n    }\n    if a < 67108864 {\n        return true\n    }\n \
    \   if a < 134217728 {\n        return true\n    }\n    if a < 268435456 {\n \
    \       return true\n    }\n    if a < 536870912 {\n        return true\n    }\n\
    \    if a < 1073741824 {\n        return true\n    }\n    if a < 2147483648 {\n\
    \        return true\n    }\n    if a < 4294967296 {\n        return true\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpsoydhvgd/tmpsoydhvgd.swift:135: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4eb6f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4eb3efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4eb3ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4eb3ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsoydhvgd                        0x000055a567d85227 <unavailable> + 4647

    5    libc.so.6                          0x00002af4eb8e4460 __libc_start_main +
    245

    6    tmpsoydhvgd                        0x000055a567d84e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 8 {\n        return true\n    }\n    if a <= 16 {\n\
    \        return true\n    }\n    if a <= 32 {\n        return true\n    }\n  \
    \  if a <= 64 {\n        return true\n    }\n    if a <= 128 {\n        return\
    \ true\n    }\n    if a <= 256 {\n        return true\n    }\n    if a <= 512\
    \ {\n        return true\n    }\n    if a <= 1024 {\n        return true\n   \
    \ }\n    if a <= 2048 {\n        return true\n    }\n    if a <= 4096 {\n    \
    \    return true\n    }\n    if a <= 8192 {\n        return true\n    }\n    if\
    \ a <= 16384 {\n        return true\n    }\n    if a <= 32768 {\n        return\
    \ true\n    }\n    if a <= 65536 {\n        return true\n    }\n    if a <= 131072\
    \ {\n        return true\n    }\n    if a <= 262144 {\n        return true\n \
    \   }\n    if a <= 524288 {\n        return true\n    }\n    if a <= 1048576 {\n\
    \        return true\n    }\n    if a <= 2097152 {\n        return true\n    }\n\
    \    if a <= 4194304 {\n        return true\n    }\n    if a <= 8388608 {\n  \
    \      return true\n    }\n    if a <= 16777216 {\n        return true\n    }\n\
    \    if a <= 33554432 {\n        return true\n    }\n    if a <= 67108864 {\n\
    \        return true\n    }\n    if a <= 134217728 {\n        return true\n  \
    \  }\n    if a <= 268435456 {\n        return true\n    }\n    if a <= 536870912\
    \ {\n        return true\n    }\n    if a <= 1073741824 {\n        return true\n\
    \    }\n    if a <= 2147483648 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpqubdca0m/tmpqubdca0m.swift:132: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f887d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f884d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f884d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f884cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqubdca0m                        0x0000559a47c71227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2f889c5460 __libc_start_main +
    245

    6    tmpqubdca0m                        0x0000559a47c70e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 3 {\n        return true\n\
    \    }\n    if a < 4 {\n        return true\n    }\n    if a < 5 {\n        return\
    \ true\n    }\n    if a < 6 {\n        return true\n    }\n    if a < 7 {\n  \
    \      return true\n    }\n    if a < 8 {\n        return true\n    }\n    if\
    \ a < 9 {\n        return true\n    }\n    if a < 10 {\n        return true\n\
    \    }\n    if a < 11 {\n        return true\n    }\n    if a < 12 {\n       \
    \ return true\n    }\n    if a < 13 {\n        return true\n    }\n    if a <\
    \ 14 {\n        return true\n    }\n    if a < 15 {\n        return true\n   \
    \ }\n    if a < 16 {\n        return true\n    }\n    if a < 17 {\n        return\
    \ true\n    }\n    if a < 18 {\n        return true\n    }\n    if a < 19 {\n\
    \        return true\n    }\n    if a < 20 {\n        return true\n    }\n   \
    \ if a < 21 {\n        return true\n    }\n    if a < 22 {\n        return true\n\
    \    }\n    if a < 23 {\n        return true\n    }\n    if a < 24 {\n       \
    \ return true\n    }\n    if a < 25 {\n        return true\n    }\n    if a <\
    \ 26 {\n        return true\n    }\n    if a < 27 {\n        return true\n   \
    \ }\n    if a < 28 {\n        return true\n    }\n    if a < 29 {\n        return\
    \ true\n    }\n    if a < 30 {\n        return true\n    }\n    if a < 31 {\n\
    \        return true\n    }\n    if a < 32 {\n        return true\n    }\n   \
    \ if a < 33 {\n        return true\n    }\n    if a < 34 {\n        return true\n\
    \    }\n    if a < 35 {\n        return true\n    }\n    if a < 36 {\n       \
    \ return true\n    }\n    if a < 37 {\n        return true\n    }\n    if a <\
    \ 38 {\n        return true\n    }\n    if a < 39 {\n        return true\n   \
    \ }\n    if a < 40 {\n        return true\n    }\n    if a < 41 {\n        return\
    \ true\n    }\n    if a < 42 {\n        return true\n    }\n    if a < 43 {\n\
    \        return true\n    }\n    if a < 44 {\n        return true\n    }\n   \
    \ if a < 45 {\n        return true\n    }\n    if a < 46 {\n        return true\n\
    \    }\n    if a < 47 {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpfy8y87sk.swift:160:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 3 {\n        return true\n\
    \    }\n    if a < 4 {\n        return true\n    }\n    if a < 5 {\n        return\
    \ true\n    }\n    if a < 6 {\n        return true\n    }\n    if a < 7 {\n  \
    \      return true\n    }\n    if a < 8 {\n        return true\n    }\n    if\
    \ a < 9 {\n        return true\n    }\n    if a < 10 {\n        return true\n\
    \    }\n    if a < 11 {\n        return true\n    }\n    if a < 12 {\n       \
    \ return true\n    }\n    if a < 13 {\n        return true\n    }\n    if a <\
    \ 14 {\n        return true\n    }\n    if a < 15 {\n        return true\n   \
    \ }\n    if a < 16 {\n        return true\n    }\n    if a < 17 {\n        return\
    \ true\n    }\n    if a < 18 {\n        return true\n    }\n    if a < 19 {\n\
    \        return true\n    }\n    if a < 20 {\n        return true\n    }\n   \
    \ if a < 21 {\n        return true\n    }\n    if a < 22 {\n        return true\n\
    \    }\n    if a < 23 {\n        return true\n    }\n    if a < 24 {\n       \
    \ return true\n    }\n    if a < 25 {\n        return true\n    }\n    if a <\
    \ 26 {\n        return true\n    }\n    if a < 27 {\n        return true\n   \
    \ }\n    if a < 28 {\n        return true\n    }\n    if a < 29 {\n        return\
    \ true\n    }\n    if a < 30 {\n        return true\n    }\n    if a < 31 {\n\
    \        return true\n    }\n    if a < 32 {\n        return true\n    }\n   \
    \ if a < 33 {\n        return true\n    }\n    if a < 34 {\n        return true\n\
    \    }\n    if a < 35 {\n        return true\n    }\n    if a < 36 {\n       \
    \ return true\n    }\n    if a < 37 {\n        return true\n    }\n    if a <\
    \ 38 {\n        return true\n    }\n    if a < 39 {\n        return true\n   \
    \ }\n    if a < 40 {\n        return true\n    }\n    if a < 41 {\n        return\
    \ true\n    }\n    if a < 42 {\n        return true\n    }\n    if a < 43 {\n\
    \        return true\n    }\n    if a < 44 {\n        return true\n    }\n   \
    \ if a < 45 {\n        return true\n    }\n    if a < 46 {\n        return true\n\
    \    }\n    if a < 47 {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpfy8y87sk.swift:160:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 2 {\n        return true\n\
    \    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 4 {\n       \
    \ return true\n    }\n    if a <= 5 {\n        return true\n    }\n    if a <=\
    \ 6 {\n        return true\n    }\n    if a <= 7 {\n        return true\n    }\n\
    \    if a <= 8 {\n        return true\n    }\n    if a <= 9 {\n        return\
    \ true\n    }\n    if a <= 10 {\n        return true\n    }\n    if a <= 11 {\n\
    \        return true\n    }\n    if a <= 12 {\n        return true\n    }\n  \
    \  if a <= 13 {\n        return true\n    }\n    if a <= 14 {\n        return\
    \ true\n    }\n    if a <= 15 {\n        return true\n    }\n    if a <= 16 {\n\
    \        return true\n    }\n    if a <= 17 {\n        return true\n    }\n  \
    \  if a <= 18 {\n        return true\n    }\n    if a <= 19 {\n        return\
    \ true\n    }\n    if a <= 20 {\n        return true\n    }\n    if a <= 21 {\n\
    \        return true\n    }\n    if a <= 22 {\n        return true\n    }\n  \
    \  if a <= 23 {\n        return true\n    }\n    if a <= 24 {\n        return\
    \ true\n    }\n    if a <= 25 {\n        return true\n    }\n    if a <= 26 {\n\
    \        return true\n    }\n    if a <= 27 {\n        return true\n    }\n  \
    \  if a <= 28 {\n        return true\n    }\n    if a <= 29 {\n        return\
    \ true\n    }\n    if a <= 30 {\n        return true\n    }\n    if a <= 31 {\n\
    \        return true\n    }\n    if a <= 32 {\n        return true\n    }\n  \
    \  if a <= 33 {\n        return true\n    }\n    if a <= 34 {\n        return\
    \ true\n    }\n    if a <= 35 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 37 {\n        return true\n    }\n  \
    \  if a <= 38 {\n        return true\n    }\n    if a <= 39 {\n        return\
    \ true\n    }\n    if a <= 40 {\n        return true\n    }\n    if a <= 41 {\n\
    \        return true\n    }\n    if a <= 42 {\n        return true\n    }\n  \
    \  if a <= 43 {\n        return true\n    }\n    if a <= 44 {\n        return\
    \ true\n    }\n    if a <= 45 {\n        return true\n    }\n    if a <= 46 {\n\
    \        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp4osus7jg.swift:161:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64 && a % 1 == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphak01wyp/tmphak01wyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e3f40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e3f104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e3f104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e3f1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphak01wyp                        0x0000558bbff332b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1e3f5f9460 __libc_start_main +
    245

    6    tmphak01wyp                        0x0000558bbff32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp645qvtm7.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp645qvtm7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp645qvtm7.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp645qvtm7.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 18\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmproea4hld/tmproea4hld.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c4a9d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c4a6cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c4a6cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c4a6cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproea4hld                        0x000055cc34950227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9c4abc2460 __libc_start_main +
    245

    6    tmproea4hld                        0x000055cc3494fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 180 && (a % 180) <= 9\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpedppafl_/tmpedppafl_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9759799c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9759490b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9759490988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b975948f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedppafl_                        0x000055aea488f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b9759985460 __libc_start_main +
    245

    6    tmpedppafl_                        0x000055aea488eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp645qvtm7.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp645qvtm7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp645qvtm7.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp645qvtm7.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64 && a % 1 == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphak01wyp/tmphak01wyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e3f40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e3f104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e3f104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e3f1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphak01wyp                        0x0000558bbff332b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1e3f5f9460 __libc_start_main +
    245

    6    tmphak01wyp                        0x0000558bbff32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return true\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return true\n    }\n    if a < 6 {\n \
    \       return false\n    }\n    if a < 7 {\n        return true\n    }\n    if\
    \ a < 8 {\n        return false\n    }\n    if a < 9 {\n        return true\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return true\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return true\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return true\n    }\n    if a < 16 {\n       \
    \ return false\n    }\n    if a < 17 {\n        return true\n    }\n    if a <\
    \ 18 {\n        return false\n    }\n    if a < 19 {\n        return true\n  \
    \  }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n        return\
    \ true\n    }\n    if a < 22 {\n        return false\n    }\n    if a < 23 {\n\
    \        return true\n    }\n    if a < 24 {\n        return false\n    }\n  \
    \  if a < 25 {\n        return true\n    }\n    if a < 26 {\n        return false\n\
    \    }\n    if a < 27 {\n        return true\n    }\n    if a < 28 {\n       \
    \ return false\n    }\n    if a < 29 {\n        return true\n    }\n    if a <\
    \ 30 {\n        return false\n    }\n    if a < 31 {\n        return true\n  \
    \  }\n    if a < 32 {\n        return false\n    }\n    if a < 33 {\n        return\
    \ true\n    }\n    if a < 34 {\n        return false\n    }\n    if a < 35 {\n\
    \        return true\n    }\n    if a < 36 {\n        return false\n    }\n  \
    \  if a < 37 {\n        return true\n    }\n    if a < 38 {\n        return false\n\
    \    }\n    if a < 39 {\n        return true\n    }\n    if a < 40 {\n       \
    \ return false\n    }\n    if a < 41 {\n        return true\n    }\n    if a <\
    \ 42 {\n        return false\n    }\n    if a < 43 {\n        return true\n  \
    \  }\n    if a < 44 {\n        return false\n    }\n    if a < 45 {\n        return\
    \ true\n    }\n    if a < 46 {\n        return false\n    }\n    if \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6aqinhv7.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 2 {\n        return true\n\
    \    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 4 {\n       \
    \ return true\n    }\n    if a <= 5 {\n        return true\n    }\n    if a <=\
    \ 6 {\n        return true\n    }\n    if a <= 7 {\n        return true\n    }\n\
    \    if a <= 8 {\n        return true\n    }\n    if a <= 9 {\n        return\
    \ true\n    }\n    if a <= 10 {\n        return true\n    }\n    if a <= 11 {\n\
    \        return true\n    }\n    if a <= 12 {\n        return true\n    }\n  \
    \  if a <= 13 {\n        return true\n    }\n    if a <= 14 {\n        return\
    \ true\n    }\n    if a <= 15 {\n        return true\n    }\n    if a <= 16 {\n\
    \        return true\n    }\n    if a <= 17 {\n        return true\n    }\n  \
    \  if a <= 18 {\n        return true\n    }\n    if a <= 19 {\n        return\
    \ true\n    }\n    if a <= 20 {\n        return true\n    }\n    if a <= 21 {\n\
    \        return true\n    }\n    if a <= 22 {\n        return true\n    }\n  \
    \  if a <= 23 {\n        return true\n    }\n    if a <= 24 {\n        return\
    \ true\n    }\n    if a <= 25 {\n        return true\n    }\n    if a <= 26 {\n\
    \        return true\n    }\n    if a <= 27 {\n        return true\n    }\n  \
    \  if a <= 28 {\n        return true\n    }\n    if a <= 29 {\n        return\
    \ true\n    }\n    if a <= 30 {\n        return true\n    }\n    if a <= 31 {\n\
    \        return true\n    }\n    if a <= 32 {\n        return true\n    }\n  \
    \  if a <= 33 {\n        return true\n    }\n    if a <= 34 {\n        return\
    \ true\n    }\n    if a <= 35 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 37 {\n        return true\n    }\n  \
    \  if a <= 38 {\n        return true\n    }\n    if a <= 39 {\n        return\
    \ true\n    }\n    if a <= 40 {\n        return true\n    }\n    if a <= 41 {\n\
    \        return true\n    }\n    if a <= 42 {\n        return true\n    }\n  \
    \  if a <= 43 {\n        return true\n    }\n    if a <= 44 {\n        return\
    \ true\n    }\n    if a <= 45 {\n        return true\n    }\n    if a <= 46 {\n\
    \        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp4osus7jg.swift:161:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 90 {\n        return true\n    }\n  \
    \  if a <= 270 {\n        return true\n    }\n    if a <= 360{\n        return\
    \ true\n    }\n    if a <= 720 {\n        return true\n    }\n    if a <= 1440\
    \ {\n        return true\n    }\n    if a <= 2880 {\n        return true\n   \
    \ }\n    if a <= 5760{\n        return true\n    }\n    if a <= 11520 {\n    \
    \    return true\n    }\n    if a <= 23040 {\n        return true\n    }\n   \
    \ if a <= 46080 {\n        return true\n    }\n    if a <= 52520 {\n        return\
    \ true\n    }\n    if a <= 57120 {\n        return true\n    }\n    if a <= 73024\
    \ {\n        return true\n    }\n    if a <= 90112 {\n        return true\n  \
    \  }\n    if a <= 123024 {\n        return true\n    }\n    if a <= 156048 {\n\
    \        return true\n    }\n    if a <= 180064 {\n        return true\n    }\n\
    \    if a <= 216064 {\n        return true\n    }\n    if a <= 252096 {\n    \
    \    return true\n    }\n    if a <= 296944 {\n        return true\n    }\n  \
    \  if a <= 335544 {\n        return true\n    }\n    if a <= 377488 {\n      \
    \  return true\n    }\n    if a <= 460800 {\n        return true\n    }\n    if\
    \ a <= 525200 {\n        return true\n    }\n    if a <= 571200 {\n        return\
    \ true\n    }\n    if a <= 730240 {\n        return true\n    }\n    if a <= 901124\
    \ {\n        return true\n    }\n    if a <= 1230240 {\n        return true\n\
    \    }\n    if a <= 1560480 {\n        return true\n    }\n    if a <= 1800640\
    \ {\n        return true\n    }\n    if a <= 2160640 {\n        return true\n\
    \    }\n    if a <= 2520960{\n        return true\n    }\n    if a <= 2969440\
    \ {\n        return true\n    }\n    if a <= 3355440 {\n        return true\n\
    \    }\n    if a <= 3774880 {\n        return true\n    }\n    if a <= 4608000\
    \ {\n        return true\n    }\n    if a <= 5252000 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y9cnqfz.swift:166:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp4y9cnqfz.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp4y9cnqfz.swift:147:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 6 {\n        return\
    \ true\n    }\n    if a < 9 {\n        return true\n    }\n    if a < 12 {\n \
    \       return true\n    }\n    if a < 15 {\n        return true\n    }\n    if\
    \ a < 18 {\n        return true\n    }\n    if a < 21 {\n        return true\n\
    \    }\n    if a < 24 {\n        return true\n    }\n    if a < 27 {\n       \
    \ return true\n    }\n    if a < 30 {\n        return true\n    }\n    if a <\
    \ 33 {\n        return true\n    }\n    if a < 36 {\n        return true\n   \
    \ }\n    if a < 39 {\n        return true\n    }\n    if a < 42 {\n        return\
    \ true\n    }\n    if a < 45 {\n        return true\n    }\n    if a < 48 {\n\
    \        return true\n    }\n    if a < 51 {\n        return true\n    }\n   \
    \ if a < 54 {\n        return true\n    }\n    if a < 57 {\n        return true\n\
    \    }\n    if a < 60 {\n        return true\n    }\n    if a < 63 {\n       \
    \ return true\n    }\n    if a < 66 {\n        return true\n    }\n    if a <\
    \ 69 {\n        return true\n    }\n    if a < 72 {\n        return true\n   \
    \ }\n    if a < 75 {\n        return true\n    }\n    if a < 78 {\n        return\
    \ true\n    }\n    if a < 81 {\n        return true\n    }\n    if a < 84 {\n\
    \        return true\n    }\n    if a < 87 {\n        return true\n    }\n   \
    \ if a < 90 {\n        return true\n    }\n    if a < 93 {\n        return true\n\
    \    }\n    if a < 96 {\n        return true\n    }\n    if a < 99 {\n       \
    \ return true\n    }\n    if a < 102 {\n        return true\n    }\n    if a <\
    \ 105 {\n        return true\n    }\n    if a < 108 {\n        return true\n \
    \   }\n    if a < 111 {\n        return true\n    }\n    if a < 114 {\n      \
    \  return true\n    }\n    if a < 117 {\n        return true\n    }\n    if a\
    \ < 120 {\n        return true\n    }\n    if a < 123 {\n        return true\n\
    \    }\n    if a < 126 {\n        return true\n    }\n    if a < 129 {\n     \
    \   return true\n    }\n    if a < 132 {\n        return true\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpt10bp_rq.swift:161:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 18\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmproea4hld/tmproea4hld.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c4a9d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c4a6cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c4a6cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c4a6cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproea4hld                        0x000055cc34950227 <unavailable> + 4647

    5    libc.so.6                          0x00002b9c4abc2460 __libc_start_main +
    245

    6    tmproea4hld                        0x000055cc3494fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64 && a % 1 == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphak01wyp/tmphak01wyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e3f40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e3f104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e3f104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e3f1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphak01wyp                        0x0000558bbff332b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1e3f5f9460 __libc_start_main +
    245

    6    tmphak01wyp                        0x0000558bbff32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return false\n    }\n    if a < 6 {\n\
    \        return false\n    }\n    if a < 7 {\n        return false\n    }\n  \
    \  if a < 8 {\n        return false\n    }\n    if a < 9 {\n        return false\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return false\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return false\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return false\n    }\n    if a < 16 {\n      \
    \  return false\n    }\n    if a < 17 {\n        return false\n    }\n    if a\
    \ < 18 {\n        return false\n    }\n    if a < 19 {\n        return false\n\
    \    }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n      \
    \  return false\n    }\n    if a < 22 {\n        return false\n    }\n    if a\
    \ < 23 {\n        return false\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 25 {\n        return false\n    }\n    if a < 26 {\n      \
    \  return false\n    }\n    if a < 27 {\n        return false\n    }\n    if a\
    \ < 28 {\n        return false\n    }\n    if a < 29 {\n        return false\n\
    \    }\n    if a < 30 {\n        return false\n    }\n    if a < 31 {\n      \
    \  return false\n    }\n    if a < 32 {\n        return false\n    }\n    if a\
    \ < 33 {\n        return false\n    }\n    if a < 34 {\n        return false\n\
    \    }\n    if a < 35 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a < 37 {\n        return false\n    }\n    if a\
    \ < 38 {\n        return false\n    }\n    if a < 39 {\n        return false\n\
    \    }\n    if a < 40 {\n        return false\n    }\n    if a < 41 {\n      \
    \  return false\n    }\n    if a < 42 {\n        return false\n    }\n    if a\
    \ < 43 {\n        return false\n    }\n    if a < 44 {\n        return false\n\
    \    }\n    if a < 45 {\n        return false\n    }\n    if a < 46 {\n      \
    \  return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz2liaij7.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 2 {\n        return true\n\
    \    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 4 {\n       \
    \ return true\n    }\n    if a <= 5 {\n        return true\n    }\n    if a <=\
    \ 6 {\n        return true\n    }\n    if a <= 7 {\n        return true\n    }\n\
    \    if a <= 8 {\n        return true\n    }\n    if a <= 9 {\n        return\
    \ true\n    }\n    if a <= 10 {\n        return true\n    }\n    if a <= 11 {\n\
    \        return true\n    }\n    if a <= 12 {\n        return true\n    }\n  \
    \  if a <= 13 {\n        return true\n    }\n    if a <= 14 {\n        return\
    \ true\n    }\n    if a <= 15 {\n        return true\n    }\n    if a <= 16 {\n\
    \        return true\n    }\n    if a <= 17 {\n        return true\n    }\n  \
    \  if a <= 18 {\n        return true\n    }\n    if a <= 19 {\n        return\
    \ true\n    }\n    if a <= 20 {\n        return true\n    }\n    if a <= 21 {\n\
    \        return true\n    }\n    if a <= 22 {\n        return true\n    }\n  \
    \  if a <= 23 {\n        return true\n    }\n    if a <= 24 {\n        return\
    \ true\n    }\n    if a <= 25 {\n        return true\n    }\n    if a <= 26 {\n\
    \        return true\n    }\n    if a <= 27 {\n        return true\n    }\n  \
    \  if a <= 28 {\n        return true\n    }\n    if a <= 29 {\n        return\
    \ true\n    }\n    if a <= 30 {\n        return true\n    }\n    if a <= 31 {\n\
    \        return true\n    }\n    if a <= 32 {\n        return true\n    }\n  \
    \  if a <= 33 {\n        return true\n    }\n    if a <= 34 {\n        return\
    \ true\n    }\n    if a <= 35 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 37 {\n        return true\n    }\n  \
    \  if a <= 38 {\n        return true\n    }\n    if a <= 39 {\n        return\
    \ true\n    }\n    if a <= 40 {\n        return true\n    }\n    if a <= 41 {\n\
    \        return true\n    }\n    if a <= 42 {\n        return true\n    }\n  \
    \  if a <= 43 {\n        return true\n    }\n    if a <= 44 {\n        return\
    \ true\n    }\n    if a <= 45 {\n        return true\n    }\n    if a <= 46 {\n\
    \        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp4osus7jg.swift:161:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 1 {\n        return true\n    }\n    if a < 2 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 4 {\n        return\
    \ false\n    }\n    if a < 5 {\n        return false\n    }\n    if a < 6 {\n\
    \        return false\n    }\n    if a < 7 {\n        return false\n    }\n  \
    \  if a < 8 {\n        return false\n    }\n    if a < 9 {\n        return false\n\
    \    }\n    if a < 10 {\n        return false\n    }\n    if a < 11 {\n      \
    \  return false\n    }\n    if a < 12 {\n        return false\n    }\n    if a\
    \ < 13 {\n        return false\n    }\n    if a < 14 {\n        return false\n\
    \    }\n    if a < 15 {\n        return false\n    }\n    if a < 16 {\n      \
    \  return false\n    }\n    if a < 17 {\n        return false\n    }\n    if a\
    \ < 18 {\n        return false\n    }\n    if a < 19 {\n        return false\n\
    \    }\n    if a < 20 {\n        return false\n    }\n    if a < 21 {\n      \
    \  return false\n    }\n    if a < 22 {\n        return false\n    }\n    if a\
    \ < 23 {\n        return false\n    }\n    if a < 24 {\n        return false\n\
    \    }\n    if a < 25 {\n        return false\n    }\n    if a < 26 {\n      \
    \  return false\n    }\n    if a < 27 {\n        return false\n    }\n    if a\
    \ < 28 {\n        return false\n    }\n    if a < 29 {\n        return false\n\
    \    }\n    if a < 30 {\n        return false\n    }\n    if a < 31 {\n      \
    \  return false\n    }\n    if a < 32 {\n        return false\n    }\n    if a\
    \ < 33 {\n        return false\n    }\n    if a < 34 {\n        return false\n\
    \    }\n    if a < 35 {\n        return false\n    }\n    if a < 36 {\n      \
    \  return false\n    }\n    if a < 37 {\n        return false\n    }\n    if a\
    \ < 38 {\n        return false\n    }\n    if a < 39 {\n        return false\n\
    \    }\n    if a < 40 {\n        return false\n    }\n    if a < 41 {\n      \
    \  return false\n    }\n    if a < 42 {\n        return false\n    }\n    if a\
    \ < 43 {\n        return false\n    }\n    if a < 44 {\n        return false\n\
    \    }\n    if a < 45 {\n        return false\n    }\n    if a < 46 {\n      \
    \  return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz2liaij7.swift:160:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpajz0dvgr/tmpajz0dvgr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3697792c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3697489b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3697489988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36974887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajz0dvgr                        0x0000557807d55227 <unavailable> + 4647

    5    libc.so.6                          0x00002b369797e460 __libc_start_main +
    245

    6    tmpajz0dvgr                        0x0000557807d54e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp645qvtm7.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp645qvtm7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp645qvtm7.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp645qvtm7.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpilmq3o0l/tmpilmq3o0l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae42103ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae420d35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae420d35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae420d347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilmq3o0l                        0x00005609f12e2227 <unavailable> + 4647

    5    libc.so.6                          0x00002ae42122a460 __libc_start_main +
    245

    6    tmpilmq3o0l                        0x00005609f12e1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 180 && (a % 6) == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpz73i0ozf/tmpz73i0ozf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f71141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f70e38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f70e38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f70e377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz73i0ozf                        0x0000559de9fa1241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7f7132d460 __libc_start_main +
    245

    6    tmpz73i0ozf                        0x0000559de9fa0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 2 {\n        return true\n\
    \    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 4 {\n       \
    \ return true\n    }\n    if a <= 5 {\n        return true\n    }\n    if a <=\
    \ 6 {\n        return true\n    }\n    if a <= 7 {\n        return true\n    }\n\
    \    if a <= 8 {\n        return true\n    }\n    if a <= 9 {\n        return\
    \ true\n    }\n    if a <= 10 {\n        return true\n    }\n    if a <= 11 {\n\
    \        return true\n    }\n    if a <= 12 {\n        return true\n    }\n  \
    \  if a <= 13 {\n        return true\n    }\n    if a <= 14 {\n        return\
    \ true\n    }\n    if a <= 15 {\n        return true\n    }\n    if a <= 16 {\n\
    \        return true\n    }\n    if a <= 17 {\n        return true\n    }\n  \
    \  if a <= 18 {\n        return true\n    }\n    if a <= 19 {\n        return\
    \ true\n    }\n    if a <= 20 {\n        return true\n    }\n    if a <= 21 {\n\
    \        return true\n    }\n    if a <= 22 {\n        return true\n    }\n  \
    \  if a <= 23 {\n        return true\n    }\n    if a <= 24 {\n        return\
    \ true\n    }\n    if a <= 25 {\n        return true\n    }\n    if a <= 26 {\n\
    \        return true\n    }\n    if a <= 27 {\n        return true\n    }\n  \
    \  if a <= 28 {\n        return true\n    }\n    if a <= 29 {\n        return\
    \ true\n    }\n    if a <= 30 {\n        return true\n    }\n    if a <= 31 {\n\
    \        return true\n    }\n    if a <= 32 {\n        return true\n    }\n  \
    \  if a <= 33 {\n        return true\n    }\n    if a <= 34 {\n        return\
    \ true\n    }\n    if a <= 35 {\n        return true\n    }\n    if a <= 36 {\n\
    \        return true\n    }\n    if a <= 37 {\n        return true\n    }\n  \
    \  if a <= 38 {\n        return true\n    }\n    if a <= 39 {\n        return\
    \ true\n    }\n    if a <= 40 {\n        return true\n    }\n    if a <= 41 {\n\
    \        return true\n    }\n    if a <= 42 {\n        return true\n    }\n  \
    \  if a <= 43 {\n        return true\n    }\n    if a <= 44 {\n        return\
    \ true\n    }\n    if a <= 45 {\n        return true\n    }\n    if a <= 46 {\n\
    \        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp4osus7jg.swift:161:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 1 {\n        return true\n    }\n \
    \   if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return true\n\
    \    }\n    if a == 4 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 6 {\n        return true\n    }\n    if a ==\
    \ 7 {\n        return true\n    }\n    if a == 8 {\n        return true\n    }\n\
    \    if a == 9 {\n        return true\n    }\n    if a == 10 {\n        return\
    \ true\n    }\n    if a == 11 {\n        return true\n    }\n    if a == 12 {\n\
    \        return true\n    }\n    if a == 13 {\n        return true\n    }\n  \
    \  if a == 14 {\n        return true\n    }\n    if a == 15 {\n        return\
    \ true\n    }\n    if a == 16 {\n        return true\n    }\n    if a == 17 {\n\
    \        return true\n    }\n    if a == 18 {\n        return true\n    }\n  \
    \  if a == 19 {\n        return true\n    }\n    if a == 20 {\n        return\
    \ true\n    }\n    if a == 21 {\n        return true\n    }\n    if a == 22 {\n\
    \        return true\n    }\n    if a == 23 {\n        return true\n    }\n  \
    \  if a == 24 {\n        return true\n    }\n    if a == 25 {\n        return\
    \ true\n    }\n    if a == 26 {\n        return true\n    }\n    if a == 27 {\n\
    \        return true\n    }\n    if a == 28 {\n        return true\n    }\n  \
    \  if a == 29 {\n        return true\n    }\n    if a == 30 {\n        return\
    \ true\n    }\n    if a == 31 {\n        return true\n    }\n    if a == 32 {\n\
    \        return true\n    }\n    if a == 33 {\n        return true\n    }\n  \
    \  if a == 34 {\n        return true\n    }\n    if a == 35 {\n        return\
    \ true\n    }\n    if a == 36 {\n        return true\n    }\n    if a == 37 {\n\
    \        return true\n    }\n    if a == 38 {\n        return true\n    }\n  \
    \  if a == 39 {\n        return true\n    }\n    if a == 40 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 42 {\n\
    \        return true\n    }\n    if a == 43 {\n        return true\n    }\n  \
    \  if a == 44 {\n        return true\n    }\n    if a == 45 {\n        return\
    \ true\n    }\n    if a == 46 {\n        return true\n    }\n    if a == 47 {\n\
    \        return true\n    }\n    if a == 48 {\n        return true\n    }\n  \
    \  if a == 49 {\n        return true\n    }\n    if a == 50 {\n        return\
    \ true\n    }\n    if a == 51 {\n        return true\n    }\n    if a == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp645qvtm7.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp645qvtm7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp645qvtm7.swift:173:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp645qvtm7.swift:177:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 1 {\n        return false\n    }\n \
    \   if a < 2 {\n        return true\n    }\n    if a < 3 {\n        return true\n\
    \    }\n    if a < 4 {\n        return true\n    }\n    if a < 5 {\n        return\
    \ true\n    }\n    if a < 6 {\n        return true\n    }\n    if a < 7 {\n  \
    \      return true\n    }\n    if a < 8 {\n        return true\n    }\n    if\
    \ a < 9 {\n        return true\n    }\n    if a < 10 {\n        return true\n\
    \    }\n    if a < 11 {\n        return true\n    }\n    if a < 12 {\n       \
    \ return true\n    }\n    if a < 13 {\n        return true\n    }\n    if a <\
    \ 14 {\n        return true\n    }\n    if a < 15 {\n        return true\n   \
    \ }\n    if a < 16 {\n        return true\n    }\n    if a < 17 {\n        return\
    \ true\n    }\n    if a < 18 {\n        return true\n    }\n    if a < 19 {\n\
    \        return true\n    }\n    if a < 20 {\n        return true\n    }\n   \
    \ if a < 21 {\n        return true\n    }\n    if a < 22 {\n        return true\n\
    \    }\n    if a < 23 {\n        return true\n    }\n    if a < 24 {\n       \
    \ return true\n    }\n    if a < 25 {\n        return true\n    }\n    if a <\
    \ 26 {\n        return true\n    }\n    if a < 27 {\n        return true\n   \
    \ }\n    if a < 28 {\n        return true\n    }\n    if a < 29 {\n        return\
    \ true\n    }\n    if a < 30 {\n        return true\n    }\n    if a < 31 {\n\
    \        return true\n    }\n    if a < 32 {\n        return true\n    }\n   \
    \ if a < 33 {\n        return true\n    }\n    if a < 34 {\n        return true\n\
    \    }\n    if a < 35 {\n        return true\n    }\n    if a < 36 {\n       \
    \ return true\n    }\n    if a < 37 {\n        return true\n    }\n    if a <\
    \ 38 {\n        return true\n    }\n    if a < 39 {\n        return true\n   \
    \ }\n    if a < 40 {\n        return true\n    }\n    if a < 41 {\n        return\
    \ true\n    }\n    if a < 42 {\n        return true\n    }\n    if a < 43 {\n\
    \        return true\n    }\n    if a < 44 {\n        return true\n    }\n   \
    \ if a < 45 {\n        return true\n    }\n    if a < 46 {\n        return true\n\
    \    }\n    if a < 47 {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpfy8y87sk.swift:160:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaesfx5b1.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpaesfx5b1.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpaesfx5b1.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpok7bt1yr/tmpok7bt1yr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe7861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe7861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe78607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok7bt1yr                        0x0000560bce817227 <unavailable> + 4647

    5    libc.so.6                          0x00002b6fe7d56460 __libc_start_main +
    245

    6    tmpok7bt1yr                        0x0000560bce816e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return isCube(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyd3rv_q_.swift:19:12: error: cannot find 'isCube' in scope\n  \
    \  return isCube(a)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a > 9 {\n        return\
    \ true\n    }\n    if a > 36 {\n        return true\n    }\n    if a > 36 {\n\
    \        return true\n    }\n    if a > 9 {\n        return true\n    }\n    if\
    \ a > 36 {\n        return true\n    }\n    if a > 9 {\n        return true\n\
    \    }\n    if a > 36 {\n        return true\n    }\n    if a > 9 {\n        return\
    \ true\n    }\n    if a > 36 {\n        return true\n    }\n    if a > 9 {\n \
    \       return true\n    }\n    if a > 36 {\n        return true\n    }\n    if\
    \ a > 9 {\n        return true\n    }\n    if a > 36 {\n        return true\n\
    \    }\n    if a > 9 {\n        return true\n    }\n    if a > 36 {\n        return\
    \ true\n    }\n    if a > 9 {\n        return true\n    }\n    if a > 36 {\n \
    \       return true\n    }\n    if a > 9 {\n        return true\n    }\n    if\
    \ a > 36 {\n        return true\n    }\n    if a > 9 {\n        return true\n\
    \    }\n    if a > 36 {\n        return true\n    }\n    if a > 9 {\n        return\
    \ true\n    }\n    if a > 36 {\n        return true\n    }\n    if a > 9 {\n \
    \       return true\n    }\n    if a > 36 {\n        return true\n    }\n    if\
    \ a > 9 {\n        return true\n    }\n    if a > 36 {\n        return true\n\
    \    }\n    if a > 9 {\n        return true\n    }\n    if a > 36 {\n        return\
    \ true\n    }\n    if a > 9 {\n        return true\n    }\n    if a > 36 {\n \
    \       return true\n    }\n    if a > 9 {\n        return true\n    }\n    if\
    \ a > 36 {\n        return true\n    }\n    if a > 9 {\n        return true\n\
    \    }\n    if a > 36 {\n        return true\n    }\n    if a > 9 {\n        return\
    \ true\n    }\n    if a > 36 {\n        return true\n    }\n    if a > 9 {\n \
    \       return true\n    }\n    if a > 36 {\n        return true\n    }\n    if\
    \ a > 9 {\n        return true\n    }\n    if a > 36 {\n        return true\n\
    \    }\n    if a > 9 {\n        return true\n    }\n    if a > 36 {\n        return\
    \ true\n    }\n    if a > 9 {\n        return true\n    }\n    if a > 36 {\n \
    \       return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy6nioai7.swift:181:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpy6nioai7.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpy6nioai7.swift:158:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpy6nioai7.swift:162:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a > 180 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return true\n    }\n   \
    \ if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return true\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return true\n    }\n    if a ==\
    \ 15 {\n        return true\n    }\n    if a == 16 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n       \
    \ return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a ==\
    \ 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n  \
    \  }\n    if a == 22 {\n        return true\n    }\n    if a == 23 {\n       \
    \ return true\n    }\n    if a == 24 {\n        return true\n    }\n    if a ==\
    \ 25 {\n        return true\n    }\n    if a == 26 {\n        return true\n  \
    \  }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n       \
    \ return true\n    }\n    if a == 29 {\n        return true\n    }\n    if a ==\
    \ 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 32 {\n        return true\n    }\n    if a == 33 {\n       \
    \ return true\n    }\n    if a == 34 {\n        return true\n    }\n    if a ==\
    \ 35 {\n        return true\n    }\n    if a == 36 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 38 {\n       \
    \ return true\n    }\n    if a == 39 {\n        return true\n    }\n    if a ==\
    \ 40 {\n        return true\n    }\n    if a == 41 {\n        return true\n  \
    \  }\n    if a == 42 {\n        return true\n    }\n    if a == 43 {\n       \
    \ return true\n    }\n    if a == 44 {\n        return true\n    }\n    if a ==\
    \ 45 {\n        return true\n    }\n    if a == 46 {\n        return true\n  \
    \  }\n    if a == 47 {\n        return true\n    }\n    if a == 48 {\n       \
    \ return true\n    }\n    if a == 49 {\n        return true\n    }\n    if a ==\
    \ 50 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaesfx5b1.swift:196:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpaesfx5b1.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpaesfx5b1.swift:177:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64 && a % 1 == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphak01wyp/tmphak01wyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e3f40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e3f104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e3f104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e3f1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphak01wyp                        0x0000558bbff332b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1e3f5f9460 __libc_start_main +
    245

    6    tmphak01wyp                        0x0000558bbff32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a <= 1 {\n        return true\n    }\n    if a <= 3 {\n        return true\n\
    \    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 9 {\n       \
    \ return true\n    }\n    if a <= 12 {\n        return true\n    }\n    if a <=\
    \ 15 {\n        return true\n    }\n    if a <= 18 {\n        return true\n  \
    \  }\n    if a <= 21 {\n        return true\n    }\n    if a <= 24 {\n       \
    \ return true\n    }\n    if a <= 27 {\n        return true\n    }\n    if a <=\
    \ 30 {\n        return true\n    }\n    if a <= 33 {\n        return true\n  \
    \  }\n    if a <= 36 {\n        return true\n    }\n    if a <= 39 {\n       \
    \ return true\n    }\n    if a <= 42 {\n        return true\n    }\n    if a <=\
    \ 45 {\n        return true\n    }\n    if a <= 48 {\n        return true\n  \
    \  }\n    if a <= 51 {\n        return true\n    }\n    if a <= 54 {\n       \
    \ return true\n    }\n    if a <= 57 {\n        return true\n    }\n    if a <=\
    \ 60 {\n        return true\n    }\n    if a <= 63 {\n        return true\n  \
    \  }\n    if a <= 66 {\n        return true\n    }\n    if a <= 69 {\n       \
    \ return true\n    }\n    if a <= 72 {\n        return true\n    }\n    if a <=\
    \ 75 {\n        return true\n    }\n    if a <= 78 {\n        return true\n  \
    \  }\n    if a <= 81 {\n        return true\n    }\n    if a <= 84 {\n       \
    \ return true\n    }\n    if a <= 87 {\n        return true\n    }\n    if a <=\
    \ 90 {\n        return true\n    }\n    if a <= 93 {\n        return true\n  \
    \  }\n    if a <= 96 {\n        return true\n    }\n    if a <= 99 {\n       \
    \ return true\n    }\n    if a <= 102 {\n        return true\n    }\n    if a\
    \ <= 105 {\n        return true\n    }\n    if a <= 108 {\n        return true\n\
    \    }\n    if a <= 111 {\n        return true\n    }\n    if a <= 114 {\n   \
    \     return true\n    }\n    if a <= 117 {\n        return true\n    }\n    if\
    \ a <= 120 {\n        return true\n    }\n    if a <= 123 {\n        return true\n\
    \    }\n    if a <= 126 {\n        return true\n    }\n    if a <= 129 {\n   \
    \     return true\n    }\n    if a <= 132 {\n        return true\n    }\n    if\
    \ a <= 135 {\n        return true\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsdy3rbnm.swift:182:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpsdy3rbnm.swift:18:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpsdy3rbnm.swift:163:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= -1 && a <= 64\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpoknz0byb/tmpoknz0byb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64665ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64662e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64662e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64662e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoknz0byb                        0x00005576d5a0f227 <unavailable> + 4647

    5    libc.so.6                          0x00002b64667d8460 __libc_start_main +
    245

    6    tmpoknz0byb                        0x00005576d5a0ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a % a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7wptzh1k/tmp7wptzh1k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8404901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84045f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84045f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84045f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wptzh1k                        0x0000558f8210f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8404aed460 __libc_start_main +
    245

    6    tmp7wptzh1k                        0x0000558f8210eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824832
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 1 && a <= 9\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpwv_xrf34/tmpwv_xrf34.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e88cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385e583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385e583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385e5827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv_xrf34                        0x000055880a606227 <unavailable> + 4647

    5    libc.so.6                          0x00002b385ea78460 __libc_start_main +
    245

    6    tmpwv_xrf34                        0x000055880a605e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824832
