name: HumanEval_48_is_palindrome
language: swift
prompt: "\n/// Checks if given string is a palindrome\n/// >>> is_palindrome(text:\
  \ \"\")\n/// true\n/// >>> is_palindrome(text: \"aba\")\n/// true\n/// >>> is_palindrome(text:\
  \ \"aaaaa\")\n/// true\n/// >>> is_palindrome(text: \"zbcd\")\n/// false\nfunc is_palindrome(text:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text:\
  \ \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text:\
  \ \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text:\
  \ \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)"
completions: ["    var reversed = \"\"\n    for char in text {\n        reversed =\
    \ reversed.appending(char)\n    }\n    return text == reversed", "    if text\
    \ == \"\" {\n        return true\n    }\n    var reversed = \"\"\n    for char\
    \ in text {\n        reversed = reversed + String(char)\n    }\n    return text\
    \ == reversed", "    if text == \"\" {\n        return true\n    }\n    var reversedText\
    \ = String()\n    var startIndex = 0\n    var endIndex = text.count - 1\n    while\
    \ startIndex < endIndex {\n        reversedText.append(text[startIndex])\n   \
    \     startIndex += 1\n        endIndex -= 1\n    }\n    return text == reversedText",
  "    if text == \"\" {\n        return true\n    }\n    var reversed = \"\"\n  \
    \  var i = 0\n    for c in text {\n        reversed = reversed + String(c)\n \
    \       i += 1\n    }\n    return text == reversed", "    if text == \"\" {\n\
    \        return true\n    }\n    var reversed = \"\"\n    var i = 0\n    for char\
    \ in text {\n        reversed = reversed + String(char)\n    }\n    return text\
    \ == reversed", "    if text == \"\" {\n        return true\n    }\n    var reversedText\
    \ = String()\n    var i = 0\n    for char in text {\n        reversedText += String(char)\n\
    \        i += 1\n    }\n    return text == reversedText", "    if text == \"\"\
    \ {\n        return true\n    }\n    var i = 0\n    var j = text.count - 1\n \
    \   while i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i += 1\n        j -= 1\n    }\n    return true", "    if text\
    \ == \"\" {\n        return true\n    }\n    var left = 0\n    var right = text.count\
    \ - 1\n    var middle = text.count / 2\n    while left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left += 1\n \
    \       right -= 1\n    }\n    return true", "    if text == \"\" {\n        return\
    \ true\n    }\n    var left = 0\n    var right = text.count - 1\n    var middle\
    \ = text.count / 2\n    while left < right {\n        if text[left] != text[right]\
    \ {\n            return false\n        }\n        left += 1\n        right -=\
    \ 1\n    }\n    return true", "    if text == \"\" { return true }\n    var left\
    \ = 0\n    var right = text.count - 1\n    var middle = text.count / 2\n    while\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true", "    if\
    \ text == \"\" {\n        return true\n    }\n    var reversed = \"\"\n    for\
    \ index in 0..<text.count {\n        reversed = reversed + String(text[index])\n\
    \    }\n    return text == reversed", "    if text == \"\" {\n        return true\n\
    \    }\n\n    var left = 0\n    var right = text.count - 1\n\n    while left <\
    \ right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n\n        left += 1\n        right -= 1\n    }\n\n    return true",
  "    if text == \"\" {\n        return true\n    }\n    var reversed = \"\"\n  \
    \  for index in 0..<text.count {\n        reversed = reversed + String(text[index])\n\
    \    }\n    return text == reversed", "    if text == \"\" {\n        return true\n\
    \    }\n    var left = 0\n    var right = text.count - 1\n    var middle = text.count\
    \ / 2\n    while left < right {\n        if text[left] != text[right] {\n    \
    \        return false\n        }\n        left += 1\n        right -= 1\n    }\n\
    \    return true", "    if text == \"\" {\n        return true\n    }\n    var\
    \ reversed = String()\n    var start = text.startIndex\n    var end = text.endIndex\n\
    \    while start < end {\n        reversed.append(text.substring(start, end))\n\
    \        start = text.index(start, offsetBy: -1)\n        end = text.index(end,\
    \ offsetBy: -1)\n    }\n    return text == reversed", "    if text == \"\" { return\
    \ true }\n    var reversed = \"\"\n    for char in text {\n        reversed =\
    \ reversed.appending(char)\n    }\n    return text == reversed", "    if text\
    \ == \"\" {\n        return true\n    }\n\n    var reversed = \"\"\n    var i\
    \ = 0\n    var j = text.count - 1\n\n    while i < j {\n        reversed = reversed\
    \ + text[i]\n        i += 1\n        j -= 1\n    }\n\n    return text == reversed",
  "    let reversed = text.characters.reversed()\n    return text == reversed", " \
    \   if text == \"\" {\n        return true\n    }\n    var reversedText = String()\n\
    \    var reversedTextIndex = 0\n    for char in text {\n        reversedText +=\
    \ String(char)\n        reversedTextIndex += 1\n    }\n    if text == reversedText\
    \ {\n        return true\n    }\n    return false", "    let length = text.characters.count\n\
    \    if length < 2 {\n        return true\n    }\n    var i = 0\n    var j = length\
    \ - 1\n    while i < length / 2 {\n        if text[i] != text[j] {\n         \
    \   return false\n        }\n        i += 1\n        j -= 1\n    }\n    return\
    \ true"]
stop_tokens:
- "\n}"
