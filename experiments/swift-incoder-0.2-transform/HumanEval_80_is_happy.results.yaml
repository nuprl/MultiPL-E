language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var last: Character?\n    var lastCount:\
    \ Int = 0\n    for c in s.characters {\n        if last == nil {\n           \
    \ last = c\n            lastCount = 1\n        } else {\n            if c == last\
    \ {\n                lastCount += 1\n            } else {\n                if\
    \ lastCount > 3 {\n                    return false\n                }\n     \
    \           last = c\n                lastCount = 1\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9izgxt84.swift:28:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgnt6rxsq.swift:19:50: error: value of type 'String' has no member\
    \ 'isDistinct'\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n\
    \                                               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for c in s.characters {\n\
    \        if last != nil {\n            if last == c {\n                return\
    \ false\n            }\n        }\n        last = c\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2t24kbr0.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n        for\
    \ index in 0..<s.count {\n            if s[index] != s[index+1] {\n          \
    \      return false\n            }\n        }\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn4rl52bs.swift:24:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if s[index]\
    \ != s[index+1] {\n               ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpn4rl52bs.swift:24:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if s[index] != s[index+1] {\n                           ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfs2xxs4k.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 &&\n        allSatisfyPredicate(s.characters.enumerated().map\
    \ { (index, char) in\n            return index == 3 && char != s[index + 1] &&\
    \ char != s[index + 2] && char != s[index + 3]\n        })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp88_gob2_.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp88_gob2_.swift:21:9:\
    \ error: cannot find 'allSatisfyPredicate' in scope\n        allSatisfyPredicate(s.characters.enumerated().map\
    \ { (index, char) in\n        ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp88_gob2_.swift:20:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return len\
    \ >= 3 &&\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 && s.characters.reduce(true) { (result, char) -> Bool in\n     \
    \   let index = s.startIndex.advancedBy(char.unicodeScalars.count - 1)\n     \
    \   return !result.contains(index)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_jqvexoh.swift:20:34: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n        let index = s.startIndex.advancedBy(char.unicodeScalars.count\
    \ - 1)\n                    ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0etevq5s.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters.dropLast()\
    \ {\n        if char != lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp98znkfwh.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp98znkfwh.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp98znkfwh.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var last: Character?\n    for\
    \ c in s {\n        if last == c {\n            return false\n        }\n    \
    \    last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpsabbk23m/tmpsabbk23m.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc137adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc134a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc134a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc134a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsabbk23m                        0x000055e76827e888 <unavailable> + 6280

    5    libc.so.6                          0x00002adc13999460 __libc_start_main +
    245

    6    tmpsabbk23m                        0x000055e76827e049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3(s.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ztchzqm.swift:19:28: error: cannot find 'is_distinct_3' in scope\n\
    \    return s.count >= 3 && is_distinct_3(s.characters)\n                    \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgnt6rxsq.swift:19:50: error: value of type 'String' has no member\
    \ 'isDistinct'\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n\
    \                                               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0etevq5s.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n        return\
    \ true\n    }\n    if s.count < 3 {\n        return false\n    }\n    var lastChar\
    \ = s[0]\n    for index in 1..<s.count {\n        if s[index] != lastChar {\n\
    \            return false\n        }\n        lastChar = s[index]\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6mowqtdy.swift:28:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp6mowqtdy.swift:30:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp6mowqtdy.swift:33:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last == c {\n            return false\n        }\n        last = c\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprmh8pwet.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    while i < len {\n        if s.characters[i]\
    \ != s.characters[j] {\n            return false\n        }\n        i += 1\n\
    \        j += 1\n        k += 1\n        if k == 3 {\n            i = 0\n    \
    \        j = 0\n            k = 0\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp68784r4p.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp68784r4p.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s.characters[i] != s.characters[j] {\n\
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp68784r4p.swift:27:14: error: 'characters' is\
    \ unavailable: Please use String directly\n        if s.characters[i] != s.characters[j]\
    \ {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp68784r4p.swift:27:31: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s.characters[i]\
    \ != s.characters[j] {\n                              ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp68784r4p.swift:27:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        if s.characters[i]\
    \ != s.characters[j] {\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3(s.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ztchzqm.swift:19:28: error: cannot find 'is_distinct_3' in scope\n\
    \    return s.count >= 3 && is_distinct_3(s.characters)\n                    \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else if letter == letter {\n            count += 1\n        } else\
    \ {\n            return false\n        }\n    }\n    return count >= 3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpein0v4n4/tmpein0v4n4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86ef01fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86eed16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86eed16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86eed157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpein0v4n4                        0x000055e94ebc1551 <unavailable> + 5457

    5    libc.so.6                          0x00002b86ef20b460 __libc_start_main +
    245

    6    tmpein0v4n4                        0x000055e94ebc0ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for c in s.characters {\n\
    \        if last != nil && last != c {\n            return false\n        }\n\
    \        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4spsg0ex.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for char in\
    \ s.dropFirst() {\n        if char == lastChar {\n            return false\n \
    \       }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp395k13zm.swift:26:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkt6zdfb.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:30:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters[0..<len] {\n\
    \        if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcn7xv5_o.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcn7xv5_o.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpcn7xv5_o.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpcn7xv5_o.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character? = nil\n    for char in s.characters\
    \ {\n        if char != lastChar {\n            lastChar = char\n        } else\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl8lp40ij.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp801qfpnz.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpler_428k.swift:19:29: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count > 3 && s.isHappy()\n                         \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3_consecutive(s.characters)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpone5a9f3.swift:19:28: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count >= 3 && is_distinct_3_consecutive(s.characters)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.length\n    if len < 3 {\n        return false\n    }\n    var count\
    \ = 0\n    for c in s {\n        if c == s[count] {\n            count += 1\n\
    \        } else {\n            count = 0\n        }\n        if count == 3 {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzdyr3lu0.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpzdyr3lu0.swift:25:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if c == s[count] {\n                ^~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for index in\
    \ 1..<len {\n        if s[index] != lastChar {\n            return false\n   \
    \     }\n        lastChar = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnhb2mira.swift:26:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpnhb2mira.swift:28:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpnhb2mira.swift:31:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgnxv6fhm.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n        for\
    \ index in 0..<3 {\n            if s.characters[index] != s.characters[index +\
    \ 1] {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpor8y33yn.swift:24:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if s.characters[index]\
    \ != s.characters[index + 1] {\n               ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpor8y33yn.swift:24:18:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if s.characters[index] != s.characters[index + 1] {\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpor8y33yn.swift:24:39:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if s.characters[index] != s.characters[index\
    \ + 1] {\n                                      ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpor8y33yn.swift:24:41:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if s.characters[index] != s.characters[index + 1] {\n                      \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastLetter = s[0]\n    for letter in s.dropFirst() {\n\
    \        if letter != lastLetter {\n            return false\n        }\n    \
    \    lastLetter = letter\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsoq3cx45.swift:25:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastLetter\
    \ = s[0]\n                     ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    var lastCount: Int = 0\n    for char in s.characters\
    \ {\n        if char == last {\n            lastCount += 1\n        } else {\n\
    \            last = char\n            lastCount = 1\n        }\n        if lastCount\
    \ > 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw0bn5gb7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpw0bn5gb7.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true) { ($0 && $1) || ($0 && is_distinct($1,\
    \ $2)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyrrjsjx9.swift:19:77: error: cannot find 'is_distinct' in scope\n\
    \    return s.count >= 3 && s.characters.reduce(true) { ($0 && $1) || ($0 && is_distinct($1,\
    \ $2)) }\n                                                                   \
    \         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastLetter = s[0]\n    for letter in s.dropFirst() {\n\
    \        if letter == lastLetter {\n            return false\n        }\n    \
    \    lastLetter = letter\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2s0etu9q.swift:25:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastLetter\
    \ = s[0]\n                     ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.suffix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfhneunzb.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfhneunzb.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.suffix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp801qfpnz.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ is_happy(s.characters.map(String.init))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpkpr0at_6.swift:19:21: error: missing argument label 's:' in call\n\
    \    return is_happy(s.characters.map(String.init))\n                    ^\n \
    \                   s: \n/tmp/tmpkpr0at_6.swift:19:34: error: cannot convert value\
    \ of type '[String]' to expected argument type 'String'\n    return is_happy(s.characters.map(String.init))\n\
    \                                 ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var prev: Character?\n    for c in s.characters\
    \ {\n        if prev == nil {\n            prev = &c\n            continue\n \
    \       }\n        if prev == &c {\n            return false\n        }\n    \
    \    prev = &c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpigz70pn9.swift:27:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpigz70pn9.swift:29:18:\
    \ error: cannot assign value of type 'Character' to type 'Character?'\n      \
    \      prev = &c\n                 ^\n/tmp/tmpigz70pn9.swift:29:20: error: '&'\
    \ may only be used to pass an argument to inout parameter\n            prev =\
    \ &c\n                   ^\n/tmp/tmpigz70pn9.swift:32:20: error: '&' used with\
    \ non-inout argument of type 'Optional<Character>'\n        if prev == &c {\n\
    \                   ^~\n                   \n/tmp/tmpigz70pn9.swift:32:20: error:\
    \ cannot pass immutable value as inout argument: 'c' is a 'let' constant\n   \
    \     if prev == &c {\n                   ^~\n/tmp/tmpigz70pn9.swift:35:14: error:\
    \ cannot assign value of type 'Character' to type 'Character?'\n        prev =\
    \ &c\n             ^\n/tmp/tmpigz70pn9.swift:35:16: error: '&' may only be used\
    \ to pass an argument to inout parameter\n        prev = &c\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5q1sqy0.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5q1sqy0.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    var isHappy = true\n    for char in\
    \ s.characters.dropLast() {\n        if char != lastChar {\n            isHappy\
    \ = false\n            break\n        }\n        lastChar = char\n    }\n    return\
    \ isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppi55nvt0.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppi55nvt0.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmppi55nvt0.swift:25:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        } else {\n            count = 0\n        }\n        if\
    \ count == 3 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpwi0o128s/tmpwi0o128s.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a6881cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a68513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a68513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a685127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwi0o128s                        0x000055cdd8a7636d <unavailable> + 4973

    5    libc.so.6                          0x00002b0a68a08460 __libc_start_main +
    245

    6    tmpwi0o128s                        0x000055cdd8a75ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last == c {\n            return false\n        }\n        last = c\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprmh8pwet.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9h08o7kk.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp9h08o7kk.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp9h08o7kk.swift:30:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3\n        && allSatisfying(_ =>\
    \ s.characters.count % 3 == 0, s.characters)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpc5jbu4ur.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc5jbu4ur.swift:21:12:\
    \ error: cannot find 'allSatisfying' in scope\n        && allSatisfying(_ => s.characters.count\
    \ % 3 == 0, s.characters)\n           ^~~~~~~~~~~~~\n/tmp/tmpc5jbu4ur.swift:21:28:\
    \ error: cannot find operator '=>' in scope\n        && allSatisfying(_ => s.characters.count\
    \ % 3 == 0, s.characters)\n                           ^~\n/tmp/tmpc5jbu4ur.swift:21:26:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        && allSatisfying(_ => s.characters.count % 3 == 0, s.characters)\n  \
    \                       ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ is_happy_helper(s.characters.map(String.init))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uijglm_.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.characters.map(String.init))\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters[0..<(len -\
    \ 2)] {\n        if char == lastChar! {\n            return false\n        }\n\
    \        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4hbobkr1.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4hbobkr1.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp4hbobkr1.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<(len - 2)] {\n            \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript<R>(bounds: R)\
    \ -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmp4hbobkr1.swift:24:19: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in s.characters[0..<(len - 2)] {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4hbobkr1.swift:25:28:\
    \ error: cannot force unwrap value of non-optional type 'String.Element' (aka\
    \ 'Character')\n        if char == lastChar! {\n                   ~~~~~~~~^\n\
    \                           \n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && is_distinct_letters(s)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuzyq9gj8.swift:19:48: error: cannot find 'is_distinct_letters'\
    \ in scope\n    return s.count >= 3 && s.count % 3 == 0 && is_distinct_letters(s)\n\
    \                                               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    let chars = s.characters\n    var lastChar\
    \ = chars.last\n    for char in chars.dropLast() {\n        if char == lastChar.first\
    \ {\n            return false\n        }\n        lastChar = char\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpohw0aib1.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpohw0aib1.swift:29:29:\
    \ error: value of type 'String.Element?' (aka 'Optional<Character>') has no member\
    \ 'first'\n        if char == lastChar.first {\n                   ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    let mut seen = Set<String>()\n    for\
    \ i in 0..<len {\n        if seen.contains(s[i]) {\n            return false\n\
    \        }\n        seen.insert(s[i])\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7swx3pf.swift:26:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpe7swx3pf.swift:26:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpe7swx3pf.swift:26:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpe7swx3pf.swift:28:12: error: cannot\
    \ find 'seen' in scope\n        if seen.contains(s[i]) {\n           ^~~~\n/tmp/tmpe7swx3pf.swift:31:9:\
    \ error: cannot find 'seen' in scope\n        seen.insert(s[i])\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for c in s.characters {\n\
    \        if last == nil || last != c {\n            last = c\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7qkaeahm.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfs2xxs4k.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ is_happy_helper(s.characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0yxj1fsi.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.characters)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for char in\
    \ s.dropFirst() {\n        if char == lastChar {\n            return false\n \
    \       }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp395k13zm.swift:26:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true) { (result, c) in\n        return result\
    \ || s.characters.reduce(true) { (result, c) in\n            return result ||\
    \ c == c\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz02e2id4.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, c) in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpz02e2id4.swift:20:28: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result || s.characters.reduce(true)\
    \ { (result, c) in\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        }\n        if count >= 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpj13e0ymf/tmpj13e0ymf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb801f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb7fee7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb7fee7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb7fee67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj13e0ymf                        0x00005587808ea36d <unavailable> + 4973

    5    libc.so.6                          0x00002abb803dc460 __libc_start_main +
    245

    6    tmpj13e0ymf                        0x00005587808e9ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5q1sqy0.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5q1sqy0.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var distinctLetters = [String]()\n    for i in 0..<len {\n        if let c\
    \ = s.character(at: i) {\n            if distinctLetters.contains(c) {\n     \
    \           return false\n            }\n            distinctLetters.append(c)\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk1vvq5_3.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpk1vvq5_3.swift:25:22:\
    \ error: value of type 'String' has no member 'character'\n        if let c =\
    \ s.character(at: i) {\n                   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5q1sqy0.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5q1sqy0.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaf0hb38z.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  let mut seen = Set<String>()\n    for &c in s.characters {\n        if seen.contains(&c)\
    \ {\n            return false\n        }\n        seen.insert(c)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7pe7vyoq.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmp7pe7vyoq.swift:23:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmp7pe7vyoq.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmp7pe7vyoq.swift:24:9: error: expected\
    \ pattern\n    for &c in s.characters {\n        ^\n/tmp/tmp7pe7vyoq.swift:24:12:\
    \ error: expected '{' to start the body of for-each loop\n    for &c in s.characters\
    \ {\n           ^\n/tmp/tmp7pe7vyoq.swift:19:17: error: 'characters' is unavailable:\
    \ Please use String directly\n    let len = s.characters.count\n             \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp7pe7vyoq.swift:24:9:\
    \ error: '&' may only be used to pass an argument to inout parameter\n    for\
    \ &c in s.characters {\n        ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n        return\
    \ true\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n    \
    \    if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpin7x7d2_.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true) { (acc, c) in\n        return acc\
    \ && s.characters.contains(c)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyc_52dae.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (acc, c) in\n                             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpyc_52dae.swift:20:25: error: 'characters'\
    \ is unavailable: Please use String directly\n        return acc && s.characters.contains(c)\n\
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ is_happy_helper(s.characters.map(String.init))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uijglm_.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.characters.map(String.init))\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        }\n    }\n    return count >= 3 && count == s.count/3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp0f_4ur8x/tmp0f_4ur8x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d64eb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d64bafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d64baf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d64bae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f_4ur8x                        0x000056529835959b <unavailable> + 5531

    5    libc.so.6                          0x00002b9d650a4460 __libc_start_main +
    245

    6    tmp0f_4ur8x                        0x00005652983590e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.length\n    if len < 3 {\n        return false\n    }\n    var lastChar\
    \ = s[0]\n    for index in 1..<len {\n        if s[index] != lastChar {\n    \
    \        return false\n        }\n        lastChar = s[index]\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbjme3y5z.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpbjme3y5z.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 &&\n        allSatisfyPredicate(s.characters.enumerated().map {\
    \ (index, char) in\n            return index == 3 && char != char\n        })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ylzrd8c.swift:20:9: error: cannot find 'allSatisfyPredicate' in\
    \ scope\n        allSatisfyPredicate(s.characters.enumerated().map { (index, char)\
    \ in\n        ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar: Character?\n    var lastCharCount: Int = 0\n    for char in s.characters\
    \ {\n        if char == lastChar! {\n            lastCharCount += 1\n        }\
    \ else {\n            lastChar = char\n            lastCharCount = 1\n       \
    \ }\n    }\n    return lastCharCount >= 3 && lastCharCount <= len\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpip8f7p1e.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpip8f7p1e.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for index in\
    \ 1..<len {\n        if s[index] != lastChar {\n            return false\n   \
    \     }\n        lastChar = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnhb2mira.swift:26:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpnhb2mira.swift:28:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpnhb2mira.swift:31:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    let len = s.count\n    if len <\
    \ 3 {\n        return true\n    }\n    var last: Character? = nil\n    for c in\
    \ s.characters {\n        if last != nil {\n            if last == c {\n     \
    \           return false\n            }\n        }\n        last = c\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvlhb_alh.swift:27:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for\
    \ char in s.dropFirst() {\n        if char == lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy9xvqsll.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter + letter {\n            count\
    \ += 1\n        } else if letter == letter + letter + letter {\n            count\
    \ += 1\n        } else {\n            return false\n        }\n    }\n    return\
    \ count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn10h6t4y.swift:23:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpn10h6t4y.swift:25:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpn10h6t4y.swift:25:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014194
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    let mut seen = Set<String>()\n    for\
    \ i in 0..<len {\n        if seen.contains(s[i]) {\n            return false\n\
    \        }\n        seen.insert(s[i])\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7swx3pf.swift:26:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpe7swx3pf.swift:26:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpe7swx3pf.swift:26:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpe7swx3pf.swift:28:12: error: cannot\
    \ find 'seen' in scope\n        if seen.contains(s[i]) {\n           ^~~~\n/tmp/tmpe7swx3pf.swift:31:9:\
    \ error: cannot find 'seen' in scope\n        seen.insert(s[i])\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5q1sqy0.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5q1sqy0.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 &&\n        allSatisfyPredicate(s.characters.enumerated().map {\
    \ (index, char) -> Bool in\n            return index == 3 && char != char\n  \
    \      })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmd8_6p9v.swift:20:9: error: cannot find 'allSatisfyPredicate' in\
    \ scope\n        allSatisfyPredicate(s.characters.enumerated().map { (index, char)\
    \ -> Bool in\n        ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ c in s {\n        if last != nil && last! == c {\n            lastCount++\n\
    \        } else {\n            lastCount = 1\n            last = c\n        }\n\
    \    }\n    return lastCount >= 3 && lastCount % 3 == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnwuvns1_.swift:29:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp801qfpnz.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastLetter: Character?\n    for letter in s.characters\
    \ {\n        if lastLetter == letter {\n            return false\n        }\n\
    \        lastLetter = letter\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphfth7r8j.swift:26:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykc6sfvy.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpykc6sfvy.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpykc6sfvy.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpykc6sfvy.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if last != nil\
    \ {\n            if char != last! {\n                return false\n          \
    \  }\n        } else {\n            last = char\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgjriyl8h.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgjriyl8h.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last == nil {\n            last = c\n            continue\n        }\n \
    \       if last != c {\n            return false\n        }\n        last = nil\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcffymh59.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character? = nil\n    var lastCount: Int = 0\n    for char in s.characters\
    \ {\n        if char == last! {\n            lastCount++\n        } else {\n \
    \           lastCount = 1\n            last = char\n        }\n        if lastCount\
    \ > 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp83v5c19_.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp83v5c19_.swift:25:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp83v5c19_.swift:27:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else if letter == letter {\n            count += 1\n        } else\
    \ {\n            return false\n        }\n    }\n    return count >= 3 && count\
    \ == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpugv7gim4/tmpugv7gim4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e26555c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e2624cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e2624c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e2624b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpugv7gim4                        0x00005564d2eca5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b8e26741460 __libc_start_main +
    245

    6    tmpugv7gim4                        0x00005564d2eca049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014192
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        }\n    }\n    return count >= 3 && count == s.count / 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp5ox25r44/tmp5ox25r44.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c4c8bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c4c5b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c4c5b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c4c5b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ox25r44                        0x000055d4f063759b <unavailable> + 5531

    5    libc.so.6                          0x00002b4c4caa8460 __libc_start_main +
    245

    6    tmp5ox25r44                        0x000055d4f06370e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 && is_distinct_3_consecutive(s.characters)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqvm1zhna.swift:19:27: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count > 3 && is_distinct_3_consecutive(s.characters)\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true) { (result, c) in\n        return result\
    \ || s.characters.contains(c)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0fzdp_29.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, c) in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0fzdp_29.swift:20:28: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result || s.characters.contains(c)\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character? = nil\n    for char in s.characters\
    \ {\n        if char == lastChar! {\n            return false\n        }\n   \
    \     lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6a9gs_x.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 && s.count % 3 == 0 && s.isDistinctFrom(s.prefix(3))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpadddbrok.swift:19:49: error: value of type 'String' has no member\
    \ 'isDistinctFrom'\n    return s.count > 3 && s.count % 3 == 0 && s.isDistinctFrom(s.prefix(3))\n\
    \                                              ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    var isHappy = true\n    for char in\
    \ s.characters[0..<len] {\n        if char == lastChar {\n            isHappy\
    \ = false\n            break\n        }\n        lastChar = char\n    }\n    return\
    \ isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ehor91_.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7ehor91_.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7ehor91_.swift:25:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmp7ehor91_.swift:25:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3_consecutive(s.characters)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpone5a9f3.swift:19:28: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count >= 3 && is_distinct_3_consecutive(s.characters)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpler_428k.swift:19:29: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count > 3 && s.isHappy()\n                         \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character? = nil\n    for c in s.characters {\n        if last !=\
    \ nil {\n            if last == c {\n                return false\n          \
    \  }\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm48s8s3i.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm48s8s3i.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character? = nil\n    for char in s.characters\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpu0ox7s8n.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n        let\
    \ chars = s.characters\n        let set = Set(chars)\n        return !set.hasSubsets(of:\
    \ chars)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp56y9701k.swift:23:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        let chars = s.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp56y9701k.swift:25:21:\
    \ error: value of type 'Set<String.Element>' (aka 'Set<Character>') has no member\
    \ 'hasSubsets'\n        return !set.hasSubsets(of: chars)\n                ~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var i = 0\n    var j = 0\n    while i < len {\n        if s.characters[i] !=\
    \ s.characters[j] {\n            return false\n        }\n        i += 1\n   \
    \     j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpszapfx_l.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpszapfx_l.swift:26:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s.characters[i] != s.characters[j] {\n\
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpszapfx_l.swift:26:14: error: 'characters' is\
    \ unavailable: Please use String directly\n        if s.characters[i] != s.characters[j]\
    \ {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpszapfx_l.swift:26:31: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s.characters[i]\
    \ != s.characters[j] {\n                              ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpszapfx_l.swift:26:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        if s.characters[i]\
    \ != s.characters[j] {\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3_consecutive(s.characters)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpone5a9f3.swift:19:28: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count >= 3 && is_distinct_3_consecutive(s.characters)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ count = 0\n    for letter in s {\n        if letter == letter {\n          \
    \  count += 1\n        }\n    }\n    return count >= 3 && count == s.count/3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp0f_4ur8x/tmp0f_4ur8x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d64eb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d64bafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d64baf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d64bae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f_4ur8x                        0x000056529835959b <unavailable> + 5531

    5    libc.so.6                          0x00002b9d650a4460 __libc_start_main +
    245

    6    tmp0f_4ur8x                        0x00005652983590e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var lastChar: Character? = nil\n\
    \    var lastCount: Int = 0\n    for char in s.characters {\n        if char ==\
    \ lastChar {\n            lastCount++\n        } else {\n            lastCount\
    \ = 1\n            lastChar = char\n        }\n        if lastCount > 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp38377sxp.swift:24:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp38377sxp.swift:26:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character?\n    for char in s.characters {\n\
    \        if char == lastChar! {\n            return false\n        }\n       \
    \ lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpkcyb2dk6.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for c in s.characters {\n\
    \        if last == c {\n            return false\n        }\n        last = c\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9ug2hwlf.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ is_happy_helper(s.characters.map({ $0 }), s.characters.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0qau7kiq.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.characters.map({ $0 }), s.characters.count)\n  \
    \         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    let lastLetter = s[len-1]\n    let firstLetter\
    \ = s[0]\n    if lastLetter == firstLetter {\n        return is_happy(s.substringToIndex(s.startIndex.advancedBy(1)))\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy1xsbxsm.swift:26:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    let lastLetter\
    \ = s[len-1]\n                     ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpy1xsbxsm.swift:27:23: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    let firstLetter = s[0]\n                      ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpy1xsbxsm.swift:29:25: error:\
    \ missing argument label 's:' in call\n        return is_happy(s.substringToIndex(s.startIndex.advancedBy(1)))\n\
    \                        ^\n                        s: \n/tmp/tmpy1xsbxsm.swift:29:27:\
    \ error: value of type 'String' has no member 'substringToIndex'\n        return\
    \ is_happy(s.substringToIndex(s.startIndex.advancedBy(1)))\n                 \
    \       ~ ^~~~~~~~~~~~~~~~\n/tmp/tmpy1xsbxsm.swift:29:57: error: value of type\
    \ 'String.Index' has no member 'advancedBy'\n        return is_happy(s.substringToIndex(s.startIndex.advancedBy(1)))\n\
    \                                           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkt6zdfb.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:30:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 &&\n        allSatisfy((0..<s.count).map({ s[$0] != s[$0] }))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwesj4o8l.swift:20:9: error: cannot find 'allSatisfy' in scope\n\
    \        allSatisfy((0..<s.count).map({ s[$0] != s[$0] }))\n        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  let chars = Array(s.characters)\n    let uniqueChars = chars.reduce(into: [String](),\
    \ {$0[$0] = 1})\n    return uniqueChars.count == chars.count && uniqueChars.count\
    \ == len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgru5b28j.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgru5b28j.swift:23:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = Array(s.characters)\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpgru5b28j.swift:24:57: error: no exact\
    \ matches in call to subscript \n    let uniqueChars = chars.reduce(into: [String](),\
    \ {$0[$0] = 1})\n                                                        ^\n/tmp/tmpgru5b28j.swift:24:57:\
    \ note: found candidate with type '(Int) -> @lvalue String'\n    let uniqueChars\
    \ = chars.reduce(into: [String](), {$0[$0] = 1})\n                           \
    \                             ^\n/tmp/tmpgru5b28j.swift:24:57: note: found candidate\
    \ with type '(Range<Int>) -> @lvalue ArraySlice<String>'\n    let uniqueChars\
    \ = chars.reduce(into: [String](), {$0[$0] = 1})\n                           \
    \                             ^\n/tmp/tmpgru5b28j.swift:24:57: note: found candidate\
    \ with type '((UnboundedRange_) -> ()) -> @lvalue ArraySlice<String>'\n    let\
    \ uniqueChars = chars.reduce(into: [String](), {$0[$0] = 1})\n               \
    \                                         ^\n/tmp/tmpgru5b28j.swift:24:54: error:\
    \ contextual closure type '(inout [String], String.Element) throws -> ()' (aka\
    \ '(inout Array<String>, Character) throws -> ()') expects 2 arguments, but 1\
    \ was used in closure body\n    let uniqueChars = chars.reduce(into: [String](),\
    \ {$0[$0] = 1})\n                                                     ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0etevq5s.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true, { (acc, c) in\n        return acc\
    \ && is_distinct(s.characters.prefix(3), c)\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnk0dnx8j.swift:20:23: error: cannot find 'is_distinct' in scope\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n              \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last == nil {\n            last = c\n            continue\n        }\n \
    \       if last != c {\n            return false\n        }\n        last = nil\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcffymh59.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.isDistinctFrom(s.prefix(3))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uveal6c.swift:19:30: error: value of type 'String' has no member\
    \ 'isDistinctFrom'\n    return s.count >= 3 && s.isDistinctFrom(s.prefix(3))\n\
    \                           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmdy6brrn.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmdy6brrn.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmdy6brrn.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpmdy6brrn.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkt6zdfb.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:30:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3\n        && s.characters.enumerated().forEach\
    \ { index, element in\n            let index2 = index + 1\n            let index3\
    \ = index2 + 1\n            let index4 = index3 + 1\n            let index5 =\
    \ index4 + 1\n            let index6 = index5 + 1\n            let index7 = index6\
    \ + 1\n            let index8 = index7 + 1\n            let index9 = index8 +\
    \ 1\n            let index10 = index9 + 1\n            let index11 = index10 +\
    \ 1\n            let index12 = index11 + 1\n            let index13 = index12\
    \ + 1\n            let index14 = index13 + 1\n            let index15 = index14\
    \ + 1\n            let index16 = index15 + 1\n            let index17 = index16\
    \ + 1\n            let index18 = index17 + 1\n            let index19 = index18\
    \ + 1\n            let index20 = index19 + 1\n            let index21 = index20\
    \ + 1\n            let index22 = index21 + 1\n            let index23 = index22\
    \ + 1\n            let index24 = index23 + 1\n            let index25 = index24\
    \ + 1\n            let index26 = index25 + 1\n            let index27 = index26\
    \ + 1\n            let index28 = index27 + 1\n            let index29 = index28\
    \ + 1\n            let index30 = index29 + 1\n            let index31 = index30\
    \ + 1\n            let index32 = index31 + 1\n            let index33 = index32\
    \ + 1\n            let index34 = index33 + 1\n            let index35 = index34\
    \ + 1\n            let index36 = index35 + 1\n            let index37 = index36\
    \ + 1\n            let index38 = index37 + 1\n            let index39 = index38\
    \ + 1\n            let index40 = index39 + 1\n            let index41 = index40\
    \ + 1\n            let index42 = index41 + 1\n            let index43 = index42\
    \ + 1\n            let index44 = index43 + 1\n            let index45 = index44\
    \ + 1\n            let index46 = index45 + 1\n            let index47 = index46\
    \ + 1\n            let index48 = index47 + 1\n            let index49 = index48\
    \ + 1\n            let index50 = index49 + 1\n            let index51 = index50\
    \ + 1\n            let index52 = index51 + 1\n            let index53 = index52\
    \ + 1\n            let index54 = index53 + 1\n            let index55 = index54\
    \ + 1\n            let index56 = index55 + 1\n            let index57 = index56\
    \ + 1\n            let index58 = index57 + 1\n            let index59 = index58\
    \ + 1\n            let index60 = index59 + 1\n            let index61 = index60\
    \ + 1\n            let index62 = index61 + 1\n            let index63 = index62\
    \ + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb9ngp7fh.swift:106:41: error: expected '}' at end of brace statement\n\
    assert(is_happy(s: \"iopaxioi\") == false)\n                                 \
    \       ^\n/tmp/tmpb9ngp7fh.swift:18:34: note: to match this opening '{'\nfunc\
    \ is_happy(s: String) -> Bool {\n                                 ^\n/tmp/tmpb9ngp7fh.swift:19:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    let len\
    \ = s.characters.count\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb9ngp7fh.swift:21:38: error: cannot convert value of\
    \ type '()' to expected argument type 'Bool'\n        && s.characters.enumerated().forEach\
    \ { index, element in\n                                     ^\n/tmp/tmpb9ngp7fh.swift:87:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character? = nil\n    for char in s.characters\
    \ {\n        if char == lastChar! {\n            return false\n        }\n   \
    \     lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6a9gs_x.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var count = 0\n    for c in s.characters {\n        if c == s[count] {\n  \
    \          count += 1\n        } else {\n            count = 0\n        }\n  \
    \      if count == 3 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpljrspaca.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpljrspaca.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpljrspaca.swift:25:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c == s[count] {\n                ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0etevq5s.swift:19:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s[0]\n    for char in s.characters {\n        if char != lastChar\
    \ {\n            return false\n        }\n        lastChar = char\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2zk7icbb.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2zk7icbb.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2zk7icbb.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp801qfpnz.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && s.characters.reduce(true) { (prev, cur)\
    \ -> Bool in\n        guard prev == false else { return false }\n        return\
    \ prev && s.characters.contains(cur)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp83s9t5j8.swift:19:50: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.count % 3 == 0 && s.characters.reduce(true)\
    \ { (prev, cur) -> Bool in\n                                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp83s9t5j8.swift:21:26:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ prev && s.characters.contains(cur)\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 &&\n        allSatisfy((0..<s.count).map { s[$0] == s[$0] })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy5uagngx.swift:20:9: error: cannot find 'allSatisfy' in scope\n\
    \        allSatisfy((0..<s.count).map { s[$0] == s[$0] })\n        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    var last: Character?\n    for char in\
    \ s.characters {\n        if char == last {\n            return false\n      \
    \  }\n        last = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeookhxvt.swift:27:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char != last\
    \ {\n            last = char\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbgpjo749.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbgpjo749.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykc6sfvy.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpykc6sfvy.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpykc6sfvy.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpykc6sfvy.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if last == nil\
    \ {\n            last = char\n            continue\n        }\n        if char\
    \ != last! {\n            return false\n        }\n        last = nil\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ztyikko.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7ztyikko.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    while i < len {\n        if s.characters[i]\
    \ != s.characters[j] {\n            return false\n        }\n        i += 1\n\
    \        j += 1\n        k += 1\n        if k == 3 {\n            i = 0\n    \
    \        j = 0\n            k = 0\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp68784r4p.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp68784r4p.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s.characters[i] != s.characters[j] {\n\
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp68784r4p.swift:27:14: error: 'characters' is\
    \ unavailable: Please use String directly\n        if s.characters[i] != s.characters[j]\
    \ {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp68784r4p.swift:27:31: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s.characters[i]\
    \ != s.characters[j] {\n                              ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp68784r4p.swift:27:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        if s.characters[i]\
    \ != s.characters[j] {\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true, { (acc, c) in\n        return acc\
    \ && is_distinct(s.characters.prefix(3), c)\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnk0dnx8j.swift:20:23: error: cannot find 'is_distinct' in scope\n\
    \        return acc && is_distinct(s.characters.prefix(3), c)\n              \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var prev = \"\"\n    var cur = \"\"\n    for c in s.characters {\n        if\
    \ prev == \"\" {\n            prev = cur\n        } else {\n            if cur\
    \ != prev {\n                return false\n            }\n        }\n        cur\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyye5ugcg.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyye5ugcg.swift:25:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyye5ugcg.swift:33:15: error: cannot assign value of\
    \ type 'Character' to type 'String'\n        cur = c\n              ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.length\n    if len < 3 {\n        return false\n    }\n    var last:\
    \ Character?\n    for char in s.characters {\n        if char == last {\n    \
    \        return false\n        }\n        last = char\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ehtt560.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp_ehtt560.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ is_happy_helper(s.characters.map(String.init))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uijglm_.swift:19:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.characters.map(String.init))\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var distinctCount = 0\n    for index in 0..<len {\n        if s[index] != s[index+1]\
    \ {\n            distinctCount++\n        }\n    }\n    return distinctCount >=\
    \ 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwsjch23p.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwsjch23p.swift:25:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[index] != s[index+1] {\n         \
    \  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpwsjch23p.swift:25:24: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[index] != s[index+1] {\n                       ^~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwsjch23p.swift:26:26:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  distinctCount++\n                         ^~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var last: Character?\n    for char in s.characters {\n        if char == last\
    \ {\n            return false\n        }\n        last = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdjllr9_7.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdjllr9_7.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.length\n    if len < 3 {\n        return false\n    }\n    var lastChar:\
    \ Character?\n    for char in s.characters {\n        if char == lastChar! {\n\
    \            return false\n        }\n        lastChar = char\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2fge413s.swift:19:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp2fge413s.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var distinctLetters = [String]()\n    for letter in s.characters {\n      \
    \  if !distinctLetters.contains(letter) {\n            distinctLetters.append(letter)\n\
    \        }\n    }\n    return distinctLetters.count == len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc2d6al8o.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc2d6al8o.swift:24:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for letter\
    \ in s.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpc2d6al8o.swift:25:38: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        if !distinctLetters.contains(letter)\
    \ {\n                                     ^\n/tmp/tmpc2d6al8o.swift:26:36: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            distinctLetters.append(letter)\n                                \
    \   ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    var lastCount: Int = 0\n \
    \   for c in s.characters {\n        if last == nil {\n            last = c\n\
    \            lastCount = 1\n        } else if c == last {\n            lastCount\
    \ += 1\n        } else {\n            if lastCount > 3 {\n                return\
    \ false\n            }\n            last = c\n            lastCount = 1\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp09zs5j2g.swift:27:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  let mut seen = Set<String>()\n    for c in s.characters {\n        if seen.contains(c)\
    \ {\n            return false\n        }\n        seen.insert(c)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi6tae4lu.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpi6tae4lu.swift:23:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpi6tae4lu.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpi6tae4lu.swift:19:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi6tae4lu.swift:24:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi6tae4lu.swift:25:12:\
    \ error: cannot find 'seen' in scope\n        if seen.contains(c) {\n        \
    \   ^~~~\n/tmp/tmpi6tae4lu.swift:28:9: error: cannot find 'seen' in scope\n  \
    \      seen.insert(c)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgnt6rxsq.swift:19:50: error: value of type 'String' has no member\
    \ 'isDistinct'\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinct\n\
    \                                               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykc6sfvy.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpykc6sfvy.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpykc6sfvy.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpykc6sfvy.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count == 3 {\n        for\
    \ index in 0..<3 {\n            if s.index(after: index) != s.index(before: index)\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprub22eu2.swift:24:31: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n            if s.index(after: index)\
    \ != s.index(before: index) {\n                              ^\n/tmp/tmprub22eu2.swift:24:57:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \            if s.index(after: index) != s.index(before: index) {\n          \
    \                                              ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters.dropLast()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtyamus2.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwtyamus2.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpwtyamus2.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last == nil {\n            last = c\n            continue\n        }\n \
    \       if last != c {\n            return false\n        }\n        last = nil\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcffymh59.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    while i < len {\n        if s[i]\
    \ == s[j] {\n            i += 1\n            j += 1\n            k = 0\n     \
    \   } else {\n            k += 1\n            if k == 3 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2_6sh393.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2_6sh393.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2_6sh393.swift:27:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && s.isDistinctFrom(s.prefix(3))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaew9aaz5.swift:19:50: error: value of type 'String' has no member\
    \ 'isDistinctFrom'\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinctFrom(s.prefix(3))\n\
    \                                               ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3(s.chars)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprit_t0uw.swift:19:28: error: cannot find 'is_distinct_3' in scope\n\
    \    return s.count >= 3 && is_distinct_3(s.chars)\n                         \
    \  ^~~~~~~~~~~~~\n/tmp/tmprit_t0uw.swift:19:44: error: value of type 'String'\
    \ has no member 'chars'\n    return s.count >= 3 && is_distinct_3(s.chars)\n \
    \                                        ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && is_distinct_3_consecutive(s.chars)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi7dcrxv0.swift:19:28: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count >= 3 && is_distinct_3_consecutive(s.chars)\n  \
    \                         ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi7dcrxv0.swift:19:56:\
    \ error: value of type 'String' has no member 'chars'\n    return s.count >= 3\
    \ && is_distinct_3_consecutive(s.chars)\n                                    \
    \                 ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgnxv6fhm.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastLetter = s[0]\n    for letter in s.dropFirst() {\n\
    \        if letter == lastLetter {\n            return false\n        }\n    \
    \    lastLetter = letter\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2s0etu9q.swift:25:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastLetter\
    \ = s[0]\n                     ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last\n    var lastCharIndex = s.characters.count\
    \ - 1\n    var isHappy = true\n    for index in 0..<len {\n        let currentChar\
    \ = s.characters[index]\n        if lastChar == currentChar {\n            lastCharIndex\
    \ = index\n        } else {\n            if lastCharIndex - index != 3 {\n   \
    \             isHappy = false\n                break\n            }\n        \
    \    lastChar = currentChar\n            lastCharIndex = index\n        }\n  \
    \  }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyvm7hd04.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyvm7hd04.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpyvm7hd04.swift:24:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var lastCharIndex = s.characters.count\
    \ - 1\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyvm7hd04.swift:27:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ currentChar = s.characters[index]\n                          ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyvm7hd04.swift:27:29:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ currentChar = s.characters[index]\n                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ c in s.characters {\n        if last == nil || last! != c {\n            last\
    \ = c\n            lastCount = 0\n        }\n        lastCount++\n    }\n    return\
    \ lastCount >= 3 && lastCount % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzb_ijmxr.swift:27:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzb_ijmxr.swift:32:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        lastCount++\n\
    \                 ^~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  let mut seen = Set<String>()\n    for c in s.characters {\n        if seen.contains(c)\
    \ {\n            return false\n        }\n        seen.insert(c)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi6tae4lu.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpi6tae4lu.swift:23:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpi6tae4lu.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpi6tae4lu.swift:19:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi6tae4lu.swift:24:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi6tae4lu.swift:25:12:\
    \ error: cannot find 'seen' in scope\n        if seen.contains(c) {\n        \
    \   ^~~~\n/tmp/tmpi6tae4lu.swift:28:9: error: cannot find 'seen' in scope\n  \
    \      seen.insert(c)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true, {$0 && $1 == $2}) == true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuj5xh3ve.swift:19:54: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 3 were used in closure body\n    return s.count >= 3 && s.characters.reduce(true,\
    \ {$0 && $1 == $2}) == true\n                                                \
    \     ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaf0hb38z.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykc6sfvy.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpykc6sfvy.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpykc6sfvy.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpykc6sfvy.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for\
    \ char in s.dropFirst() {\n        if char == lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy9xvqsll.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.isDistinctFrom(s.prefix(3))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uveal6c.swift:19:30: error: value of type 'String' has no member\
    \ 'isDistinctFrom'\n    return s.count >= 3 && s.isDistinctFrom(s.prefix(3))\n\
    \                           ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var count = 0\n    for c in s.characters {\n        if c == s[count] {\n  \
    \          count += 1\n        } else {\n            count = 0\n        }\n  \
    \      if count == 3 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpljrspaca.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpljrspaca.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpljrspaca.swift:25:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c == s[count] {\n                ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkt6zdfb.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:30:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    let chars = s.characters\n    var lastChar\
    \ = chars.last\n    for char in chars.dropLast() {\n        if char == lastChar\
    \ {\n            return false\n        }\n        lastChar = char\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpczbkc1uq.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.count % 3 == 0 && s.isDistinctFrom(s.prefix(3))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaew9aaz5.swift:19:50: error: value of type 'String' has no member\
    \ 'isDistinctFrom'\n    return s.count >= 3 && s.count % 3 == 0 && s.isDistinctFrom(s.prefix(3))\n\
    \                                               ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var last: Character?\n    var\
    \ lastCount: Int = 0\n    for c in s {\n        if last == nil || last! != c {\n\
    \            last = c\n            lastCount = 1\n        } else {\n         \
    \   lastCount++\n        }\n    }\n    return lastCount >= 3 && lastCount != s.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjebh2zvr.swift:29:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    let len = s.count\n    if len\
    \ < 3 {\n        return false\n    }\n    let mut seen = Set<String>()\n    for\
    \ i in 0..<len {\n        if let c = s[i]{\n            if seen.contains(&c) {\n\
    \                return false\n            }\n            seen.insert(c)\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpirj06kfx.swift:26:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpirj06kfx.swift:26:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpirj06kfx.swift:26:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpirj06kfx.swift:28:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if let c = s[i]{\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpirj06kfx.swift:29:16: error: cannot\
    \ find 'seen' in scope\n            if seen.contains(&c) {\n               ^~~~\n\
    /tmp/tmpirj06kfx.swift:29:30: error: cannot pass immutable value as inout argument:\
    \ 'c' is a 'let' constant\n            if seen.contains(&c) {\n              \
    \               ^~\n/tmp/tmpirj06kfx.swift:32:13: error: cannot find 'seen' in\
    \ scope\n            seen.insert(c)\n            ^~~~\n/tmp/tmpirj06kfx.swift:28:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Character'\n\
    \        if let c = s[i]{\n           ^       ~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count >= 3 && s.characters.reduce(true) { (result, c) in\n        return result\
    \ && s.characters.contains(c)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp033m5xmn.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count >= 3 && s.characters.reduce(true) {\
    \ (result, c) in\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp033m5xmn.swift:20:28: error: 'characters'\
    \ is unavailable: Please use String directly\n        return result && s.characters.contains(c)\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for\
    \ char in s.dropFirst() {\n        if char != lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptq5jlr9c.swift:22:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmdy6brrn.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmdy6brrn.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmdy6brrn.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpmdy6brrn.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaf0hb38z.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5q1sqy0.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5q1sqy0.swift:20:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters.dropLast()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtyamus2.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwtyamus2.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpwtyamus2.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters.dropLast()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtyamus2.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwtyamus2.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpwtyamus2.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var last: Character?\n    for\
    \ c in s.characters {\n        if last == nil {\n            last = c\n      \
    \      continue\n        }\n        if last != c {\n            return false\n\
    \        }\n        last = nil\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppj4o6lga.swift:23:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters[0..<len] {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmdy6brrn.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmdy6brrn.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmdy6brrn.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpmdy6brrn.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last != nil {\n            if c == last! {\n                return false\n\
    \            }\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcp03wm8c.swift:26:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character?\n    var lastCharCount: Int = 0\n\
    \    for char in s.characters {\n        if char == lastChar! {\n            lastCharCount\
    \ += 1\n        } else {\n            lastCharCount = 1\n            lastChar\
    \ = char\n        }\n        if lastCharCount > 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9tbqu3d.swift:27:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst() {\n   \
    \     if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpftgoweg5.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ len = s.characters.count\n    if len < 3 {\n        return false\n    }\n  \
    \  var lastChar = s.characters.last!\n    for char in s.characters[0..<len] {\n\
    \        if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcn7xv5_o.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcn7xv5_o.swift:23:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpcn7xv5_o.swift:24:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpcn7xv5_o.swift:24:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ s.count > 3 && s.count % 3 == 0 && s.isDistinct\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkpm4gb05.swift:19:49: error: value of type 'String' has no member\
    \ 'isDistinct'\n    return s.count > 3 && s.count % 3 == 0 && s.isDistinct\n \
    \                                             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014192
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.isEmpty {\n        return false\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzkt6zdfb.swift:25:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] != lastChar {\n           ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzkt6zdfb.swift:30:20: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        lastChar = s[index]\n                   ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
