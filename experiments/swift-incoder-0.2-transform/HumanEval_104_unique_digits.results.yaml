language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(at: index)\n        }\n        index++\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpetf2egas.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3f2hkf_8/tmp3f2hkf_8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd627b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd624a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd624a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd624a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f2hkf_8                        0x000056075dbd367c <unavailable> + 5756

    5    libc.so.6                          0x00002acd6299d460 __libc_start_main +
    245

    6    tmp3f2hkf_8                        0x000056075dbd3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b72b4e0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72b4b06561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72b4b06286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72b4b0613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72b4b05bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b72b4c07c1d <unavailable> + 2489373

    6    tmprj2v8muu                        0x00005569d1419f40 <unavailable> + 8000

    7    tmprj2v8muu                        0x00005569d141977c <unavailable> + 6012

    8    libc.so.6                          0x00002b72b4ffb460 __libc_start_main +
    245

    9    tmprj2v8muu                        0x00005569d1419459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnoiv0wmk.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var i = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            evenDigit.append(element)\n        } else {\n\
    \            result.append(element)\n        }\n    }\n    for element in evenDigit\
    \ {\n        if result.contains(element) {\n            result.remove(at: result.index(of:\
    \ element))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj1_hddlc.swift:23:38: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: element))\n    \
    \                                 ^\n/tmp/tmpj1_hddlc.swift:23:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: element))\n                     \
    \                ^\n                                                        ??\
    \ <#default value#>\n/tmp/tmpj1_hddlc.swift:23:38: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: element))\n                                     ^\n       \
    \                                                !\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    var evenDigit = false\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            evenDigit = true\n        }\n\
    \        if evenDigit {\n            result.append(element)\n        }\n     \
    \   evenDigit = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8eig5z0c/tmp8eig5z0c.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae8514c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae820bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae820b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae820a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8eig5z0c                        0x0000558dad12967c <unavailable> + 5756

    5    libc.so.6                          0x00002aaae8700460 __libc_start_main +
    245

    6    tmp8eig5z0c                        0x0000558dad129279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.insert(element)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpob_sne6k/tmpob_sne6k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba01d4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba01d1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba01d1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba01d1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob_sne6k                        0x0000558fffe937ac <unavailable> + 6060

    5    libc.so.6                          0x00002ba01d6a2460 __libc_start_main +
    245

    6    tmpob_sne6k                        0x0000558fffe933a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            continue\n       \
    \ }\n        for num2 in x {\n            if num2 == num {\n                continue\n\
    \            }\n            if num2 % 2 == 0 {\n                continue\n   \
    \         }\n            if num2 % num == 0 {\n                result.append(num2)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpedxn50cv/tmpedxn50cv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f0df7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f0aeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f0aee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f0aed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedxn50cv                        0x000055660813e67c <unavailable> + 5756

    5    libc.so.6                          0x00002ab5f0fe3460 __libc_start_main +
    245

    6    tmpedxn50cv                        0x000055660813e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: Int = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigit += 1\n        } else {\n            if evenDigit\
    \ == 0 {\n                result.append(element)\n            } else {\n     \
    \           evenDigit = 0\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmewdtblr/tmpmewdtblr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb6a976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb6a66db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb6a66d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb6a66c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmewdtblr                        0x000055dfadb4362c <unavailable> + 5676

    5    libc.so.6                          0x00002acb6ab62460 __libc_start_main +
    245

    6    tmpmewdtblr                        0x000055dfadb43229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01421a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0141e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0141e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0141e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0141c9e7ec <unavailable> + 186348

    6    tmpjp9j1nen                        0x000055779480fbfe <unavailable> + 7166

    7    tmpjp9j1nen                        0x000055779480f59c <unavailable> + 5532

    8    libc.so.6                          0x00002b0142394460 __libc_start_main +
    245

    9    tmpjp9j1nen                        0x000055779480f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for element in x {\n     \
    \   if element % 2 == 0 {\n            even.append(element)\n        } else {\n\
    \            odd.append(element)\n        }\n    }\n    for element in even {\n\
    \        if !contains(result, element) {\n            result.append(element)\n\
    \        }\n    }\n    for element in odd {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9udgdycd.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmp9udgdycd.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, element)\
    \ {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for num in x {\n        let digit = num % 10\n        if !result.contains(digit)\
    \ {\n            result.insert(digit)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpg8ag91n_/tmpg8ag91n_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57db6a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57db39db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57db39d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57db39c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8ag91n_                        0x000055a1af30080c <unavailable> + 6156

    5    libc.so.6                          0x00002b57db892460 __libc_start_main +
    245

    6    tmpg8ag91n_                        0x000055a1af300409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp45k8omun.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e % e == 0 {\n                    result.append(n)\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqgaxf0eq/tmpqgaxf0eq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad34c862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad34c559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad34c559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad34c5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgaxf0eq                        0x00005575e3ec767c <unavailable> + 5756

    5    libc.so.6                          0x00002ad34ca4e460 __libc_start_main +
    245

    6    tmpqgaxf0eq                        0x00005575e3ec7279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = last * 10 + n % 10\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = n % 10\n\
    \        }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfb_1euif/tmpfb_1euif.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf723b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf720a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf720a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf720a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb_1euif                        0x000055c4012a667c <unavailable> + 5756

    5    libc.so.6                          0x00002acf7259d460 __libc_start_main +
    245

    6    tmpfb_1euif                        0x000055c4012a6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if !contains(result, n) {\n\
    \                result.append(n)\n            }\n        }\n    }\n    for n\
    \ in even {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpio55z0l8.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmpio55z0l8.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n    \
    \        lastDigit = n % 10\n        } else {\n            if lastDigit != 0 {\n\
    \                result.append(lastDigit)\n            }\n            lastDigit\
    \ = n % 10\n        }\n    }\n    if lastDigit != 0 {\n        result.append(lastDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnmpjp5d1/tmpnmpjp5d1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add00525c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add0021cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add0021c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add0021b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmpjp5d1                        0x000055f679a4967c <unavailable> + 5756

    5    libc.so.6                          0x00002add00711460 __libc_start_main +
    245

    6    tmpnmpjp5d1                        0x000055f679a49279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit = x.last!\n    for i in x {\n        if i % lastDigit == 0\
    \ {\n            continue\n        }\n        result.append(i)\n        lastDigit\
    \ = i % 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfexz6xb6/tmpfexz6xb6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15647ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15644d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15644d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15644d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfexz6xb6                        0x0000562968ce471c <unavailable> + 5916

    5    libc.so.6                          0x00002b15649c9460 __libc_start_main +
    245

    6    tmpfexz6xb6                        0x0000562968ce4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for num in x {\n        if num % 2 == 0 {\n           \
    \ last = num\n        } else {\n            if last > 0 {\n                result.insert(last,\
    \ num)\n            }\n            last = 0\n        }\n    }\n    if last > 0\
    \ {\n        result.insert(last, num)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxiibd9xo.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, num)\n                \
    \       ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpxiibd9xo.swift:24:29:\
    \ error: cannot find 'num' in scope\n        result.insert(last, num)\n      \
    \                      ^~~\n/tmp/tmpxiibd9xo.swift:24:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(last, num)\n    \
    \           ^\n/tmp/tmpxiibd9xo.swift:24:16: note: found candidate with type '(__owned\
    \ Int, Int) -> ()'\n        result.insert(last, num)\n               ^\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for num in x {\n        if num % 2 == 0 {\n     \
    \       even.append(num)\n        } else {\n            result.append(num)\n \
    \       }\n    }\n    for num in even {\n        result.remove(at: result.index(of:\
    \ num))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpw871epa3.swift:21:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: num))\n            \
    \                     ^\n/tmp/tmpw871epa3.swift:21:34: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: num))\n                                 ^\n               \
    \                                 ?? <#default value#>\n/tmp/tmpw871epa3.swift:21:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: num))\n                  \
    \               ^\n                                               !\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_u0o1u8h/tmp_u0o1u8h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab39497bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab394672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab394672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3946717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_u0o1u8h                        0x0000559e5029576c <unavailable> + 5996

    5    libc.so.6                          0x00002ab394b67460 __libc_start_main +
    245

    6    tmp_u0o1u8h                        0x0000559e50295369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpan10y1ze/tmpan10y1ze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b224de92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b224db89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b224db89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b224db887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan10y1ze                        0x000055847880367c <unavailable> + 5756

    5    libc.so.6                          0x00002b224e07e460 __libc_start_main +
    245

    6    tmpan10y1ze                        0x0000558478803279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    var evenDigit = false\n    for element in x {\n      \
    \  if element % 2 == 0 {\n            evenDigit = true\n        }\n        if\
    \ evenDigit {\n            result[index] = element\n            index++\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpium_9kok.swift:20:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    for _ in x {\n        if i % 2 == 0 {\n   \
    \         result.append(x[j])\n            j += 1\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyq1rcz06/tmpyq1rcz06.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea9dccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea9ac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea9ac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea9ac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq1rcz06                        0x00005600db0b96cc <unavailable> + 5836

    5    libc.so.6                          0x00002b4ea9fb8460 __libc_start_main +
    245

    6    tmpyq1rcz06                        0x00005600db0b92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01421a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0141e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0141e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0141e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0141c9e7ec <unavailable> + 186348

    6    tmpjp9j1nen                        0x000055779480fbfe <unavailable> + 7166

    7    tmpjp9j1nen                        0x000055779480f59c <unavailable> + 5532

    8    libc.so.6                          0x00002b0142394460 __libc_start_main +
    245

    9    tmpjp9j1nen                        0x000055779480f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    result.sort()\n    even.sort()\n    for n in even {\n        if result.contains(n)\
    \ {\n            result.remove(n)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpwsvz1jl_.swift:24:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(n)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwl__us3t/tmpwl__us3t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0945797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094548eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094548e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094548d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl__us3t                        0x0000563e2709667c <unavailable> + 5756

    5    libc.so.6                          0x00002b0945983460 __libc_start_main +
    245

    6    tmpwl__us3t                        0x0000563e27096279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       evenDigitCount++\n        }\n    }\n    for n in x {\n        if n % 2\
    \ == 0 && evenDigitCount > 0 {\n            result.append(n)\n            evenDigitCount--\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxkq1bnzg.swift:15:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenDigitCount++\n                       \
    \   ^~\n/tmp/tmpxkq1bnzg.swift:21:27: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            evenDigitCount--\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            continue\n\
    \        }\n        for index in result {\n            if element == index {\n\
    \                continue\n            }\n            if element % index == 0\
    \ {\n                result.remove(at: index)\n                break\n       \
    \     }\n        }\n        result.append(element)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpuhvl2k0s/tmpuhvl2k0s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fe2781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fe2478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fe2478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fe24777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhvl2k0s                        0x000055ba04f236dc <unavailable> + 5852

    5    libc.so.6                          0x00002b2fe296d460 __libc_start_main +
    245

    6    tmpuhvl2k0s                        0x000055ba04f232d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            if evenDigitCount == 0 {\n   \
    \             result.append(element)\n            }\n        } else {\n      \
    \      evenDigitCount = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpphe68y9g/tmpphe68y9g.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769614fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7695e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7695e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7695e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphe68y9g                        0x00005556731ff67c <unavailable> + 5756

    5    libc.so.6                          0x00002b769633b460 __libc_start_main +
    245

    6    tmpphe68y9g                        0x00005556731ff279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append()\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_azfgl90.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmp_azfgl90.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    var evenDigit = false\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            evenDigit = true\n        }\n\
    \        if evenDigit {\n            result.append(element)\n        }\n    }\n\
    \    for element in result {\n        if element % 2 != 0 {\n            result.remove(at:\
    \ j)\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp57auzf2n/tmp57auzf2n.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5839d37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5839a2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5839a2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5839a2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57auzf2n                        0x0000561d628216dc <unavailable> + 5852

    5    libc.so.6                          0x00002b5839f23460 __libc_start_main +
    245

    6    tmp57auzf2n                        0x0000561d628212d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = last * 10 + n % 10\n        } else {\n            if last > 0 {\n \
    \               result.append(last)\n            }\n            last = n % 10\n\
    \        }\n    }\n    if last > 0 {\n        result.append(last)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpaxhucdsx/tmpaxhucdsx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ea6dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62ea3d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62ea3d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62ea3d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxhucdsx                        0x00005631057d467c <unavailable> + 5756

    5    libc.so.6                          0x00002b62ea8cb460 __libc_start_main +
    245

    6    tmpaxhucdsx                        0x00005631057d4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        let digits = String(n.digits).sorted()\n        if\
    \ digits.count > 1 {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0r563bn_.swift:13:31: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = String(n.digits).sorted()\n                 \
    \           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5f31dkqh.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for digits in evenDigits {\n                if element == digits {\n     \
    \               break\n                }\n            }\n            if !result.contains(element)\
    \ && !result.contains(digits) {\n                result.append(element)\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpaa4ep4u0.swift:22:62: error: cannot find 'digits' in scope\n  \
    \          if !result.contains(element) && !result.contains(digits) {\n      \
    \                                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 == 0 {\n      \
    \      result.remove(at: i)\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0ao3i8wf/tmp0ao3i8wf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe35fdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe35cd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe35cd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe35cd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ao3i8wf                        0x0000562cea1446dc <unavailable> + 5852

    5    libc.so.6                          0x00002afe361c8460 __libc_start_main +
    245

    6    tmp0ao3i8wf                        0x0000562cea1442d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n  \
    \      }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0mi31q87/tmp0mi31q87.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8d0758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8d044fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8d044f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8d044e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0mi31q87                        0x0000562c18e9779c <unavailable> + 6044

    5    libc.so.6                          0x00002af8d0944460 __libc_start_main +
    245

    6    tmp0mi31q87                        0x0000562c18e97399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            continue\n        }\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpr78z4ojk/tmpr78z4ojk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3902795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390248cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390248c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390248b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr78z4ojk                        0x0000564a742456ec <unavailable> + 5868

    5    libc.so.6                          0x00002b3902981460 __libc_start_main +
    245

    6    tmpr78z4ojk                        0x0000564a742452e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if evenDigits.contains(n)\
    \ == false {\n                result.append(n)\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpaolz0eqm/tmpaolz0eqm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c71633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c7132ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c7132a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c713297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaolz0eqm                        0x000055ab921eb6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b8c7181f460 __libc_start_main +
    245

    6    tmpaolz0eqm                        0x000055ab921eb2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       evenDigitCount += 1\n        } else {\n            if evenDigitCount >\
    \ 0 {\n                result.sort()\n            }\n            evenDigitCount\
    \ = 0\n            result.append(n)\n        }\n    }\n    if evenDigitCount >\
    \ 0 {\n        result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp__ax1wr4/tmp__ax1wr4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b65fd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b65ccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b65ccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b65cca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__ax1wr4                        0x00005634ce45f79c <unavailable> + 6044

    5    libc.so.6                          0x00002b0b661c0460 __libc_start_main +
    245

    6    tmp__ax1wr4                        0x00005634ce45f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for i in x {\n        if i % 2 == 0 {\n\
    \            evenDigits.append(i)\n        } else {\n            if !contains(evenDigits,\
    \ i) {\n                result.append(i)\n            }\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv4a183jr.swift:18:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for num in x {\n        if num % 2 == 0 {\n \
    \           lastDigit = num\n        } else {\n            if lastDigit != 0 {\n\
    \                result.append(lastDigit)\n            }\n            lastDigit\
    \ = 0\n        }\n    }\n    if lastDigit != 0 {\n        result.append(lastDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyg4zinpj/tmpyg4zinpj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c8683fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c86536b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c86536988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c865357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyg4zinpj                        0x000055c0e45f767c <unavailable> + 5756

    5    libc.so.6                          0x00002b1c86a2b460 __libc_start_main +
    245

    6    tmpyg4zinpj                        0x000055c0e45f7279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(n)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwl__us3t/tmpwl__us3t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0945797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094548eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094548e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094548d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl__us3t                        0x0000563e2709667c <unavailable> + 5756

    5    libc.so.6                          0x00002b0945983460 __libc_start_main +
    245

    6    tmpwl__us3t                        0x0000563e27096279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n    \
    \        lastDigit = n % 10\n        } else {\n            if lastDigit != 0 {\n\
    \                result.append((lastDigit * 10) + n)\n            }\n        \
    \    lastDigit = 0\n        }\n    }\n    if lastDigit != 0 {\n        result.append((lastDigit\
    \ * 10) + n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjxych7f9.swift:24:42: error: cannot find 'n' in scope\n       \
    \ result.append((lastDigit * 10) + n)\n                                      \
    \   ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var evenDigitCount = 0\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n  \
    \          evenDigitCount += 1\n        }\n    }\n    for element in evenDigit\
    \ {\n        if element == 0 {\n            continue\n        }\n        if evenDigitCount\
    \ > 0 {\n            if element > evenDigit[evenDigitCount - 1] {\n          \
    \      result.append(element)\n            }\n        } else {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmsybhxyq/tmpmsybhxyq.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2698b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2695afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2695af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2695ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmsybhxyq                        0x00005573cf8336cc <unavailable> + 5836

    5    libc.so.6                          0x00002af269aa4460 __libc_start_main +
    245

    6    tmpmsybhxyq                        0x00005573cf8332c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(at: index)\n        }\n        index++\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk4wfsdpz.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp45k8omun.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(result, n) {\n  \
    \          result.append(n)\n        }\n    }\n    for n in odd {\n        if\
    \ !contains(result, n) {\n            result.append(n)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsqq2pbq_.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, n) {\n            ^~~~~~~~\n/tmp/tmpsqq2pbq_.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(evenDigits,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnj78fqmo.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            continue\n\
    \        }\n        for index in 0..<result.count {\n            if element ==\
    \ result[index] {\n                break\n            }\n        }\n        result.append(element)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpj9shbypw/tmpj9shbypw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a665eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a662e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a662e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a662e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj9shbypw                        0x000055ea9209081c <unavailable> + 6172

    5    libc.so.6                          0x00002b0a667da460 __libc_start_main +
    245

    6    tmpj9shbypw                        0x000055ea92090419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            result.insert(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpr6ldyn45/tmpr6ldyn45.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ac722c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28ac419b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28ac419988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28ac4187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6ldyn45                        0x00005628bce257ac <unavailable> + 6060

    5    libc.so.6                          0x00002b28ac90e460 __libc_start_main +
    245

    6    tmpr6ldyn45                        0x00005628bce253a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp45k8omun.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            continue\n        }\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpr78z4ojk/tmpr78z4ojk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3902795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390248cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390248c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390248b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr78z4ojk                        0x0000564a742456ec <unavailable> + 5868

    5    libc.so.6                          0x00002b3902981460 __libc_start_main +
    245

    6    tmpr78z4ojk                        0x0000564a742452e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if lastDigit % 2 == 0 {\n\
    \            lastDigit = n\n        } else {\n            if lastDigit != 0 {\n\
    \                result.append(lastDigit)\n            }\n            lastDigit\
    \ = n\n        }\n    }\n    if lastDigit != 0 {\n        result.append(lastDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpt8uadhht/tmpt8uadhht.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586848fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5868186b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5868186988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58681857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt8uadhht                        0x0000559ce382e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b586867b460 __libc_start_main +
    245

    6    tmpt8uadhht                        0x0000559ce382e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if !contains(result, n) {\n\
    \                result.append(n)\n            }\n        }\n    }\n    return\
    \ even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprf0orxm3.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        if result.contains(n) {\n            result.remove(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpo06pwgji.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptl41x20x/tmptl41x20x.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535fdacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b535faa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b535faa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b535faa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl41x20x                        0x0000556d9346567c <unavailable> + 5756

    5    libc.so.6                          0x00002b535ff98460 __libc_start_main +
    245

    6    tmptl41x20x                        0x0000556d93465279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append()\n        }\n    }\n    for n in evenDigit {\n    \
    \    if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp947s43aj.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 10 == 0 {\n            continue\n        }\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpr78z4ojk/tmpr78z4ojk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3902795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390248cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390248c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390248b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr78z4ojk                        0x0000564a742456ec <unavailable> + 5868

    5    libc.so.6                          0x00002b3902981460 __libc_start_main +
    245

    6    tmpr78z4ojk                        0x0000564a742452e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            continue\n       \
    \ }\n        var index = result.index(of: num)\n        if index == nil {\n  \
    \          result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp0qs58yh/tmpp0qs58yh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08c9073c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08c8d6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08c8d6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08c8d697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0qs58yh                        0x000056354efeb6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b08c925f460 __libc_start_main +
    245

    6    tmpp0qs58yh                        0x000056354efeb2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpt7s817y3/tmpt7s817y3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbfb66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbf85db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbf85d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbf85c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7s817y3                        0x000055b1db03671c <unavailable> + 5916

    5    libc.so.6                          0x00002adbbfd52460 __libc_start_main +
    245

    6    tmpt7s817y3                        0x000055b1db036319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgwpv1fd_.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for num in x {\n        if num % 2 == 0 {\n     \
    \       even.append(num)\n        } else {\n            for e in even {\n    \
    \            if num == e {\n                    break\n                }\n   \
    \         }\n            if !result.contains(num) {\n                result.append(num)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkctappuk/tmpkctappuk.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0094ce9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00949e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00949e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00949df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkctappuk                        0x00005606663bc6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b0094ed5460 __libc_start_main +
    245

    6    tmpkctappuk                        0x00005606663bc2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigitCount = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigitCount += 1\n        } else {\n            if\
    \ evenDigitCount > 0 {\n                result.append(element)\n            }\n\
    \            evenDigitCount = 0\n        }\n    }\n    if evenDigitCount > 0 {\n\
    \        result.append(element)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpm57wabmc.swift:24:23: error: cannot find 'element' in scope\n \
    \       result.append(element)\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for num in x {\n        if num % 2 == 0 {\n\
    \            last = num\n        } else {\n            if last != 0 {\n      \
    \          result.append(last)\n            }\n            last = 0\n        }\n\
    \    }\n    if last != 0 {\n        result.append(last)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_c49u2zr/tmp_c49u2zr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba408bd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4088ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4088cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4088cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c49u2zr                        0x000055e169fd662c <unavailable> + 5676

    5    libc.so.6                          0x00002ba408dc1460 __libc_start_main +
    245

    6    tmp_c49u2zr                        0x000055e169fd6229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqoev5pmj.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if i % 2 == 0 {\n            result.append(num)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpkp7ls7u5/tmpkp7ls7u5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9064645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b906433cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b906433c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b906433b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkp7ls7u5                        0x00005630596cc67c <unavailable> + 5756

    5    libc.so.6                          0x00002b9064831460 __libc_start_main +
    245

    6    tmpkp7ls7u5                        0x00005630596cc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    \n    for i in x {\n        if i % 2 == 0 {\n\
    \            evenDigit.append(i)\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    \n    for i in evenDigit {\n        result.remove(i)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpl8rdwqgg.swift:23:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(i)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1q0joeuk/tmp1q0joeuk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b271244fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2712146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2712146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27121457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q0joeuk                        0x00005623d011176c <unavailable> + 5996

    5    libc.so.6                          0x00002b271263b460 __libc_start_main +
    245

    6    tmp1q0joeuk                        0x00005623d0111369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_u0o1u8h/tmp_u0o1u8h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab39497bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab394672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab394672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3946717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_u0o1u8h                        0x0000559e5029576c <unavailable> + 5996

    5    libc.so.6                          0x00002ab394b67460 __libc_start_main +
    245

    6    tmp_u0o1u8h                        0x0000559e50295369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            continue\n       \
    \ }\n        for num2 in result {\n            if num2 % 2 == 0 {\n          \
    \      continue\n            }\n            if num == num2 {\n               \
    \ continue\n            }\n            if num2 > num {\n                break\n\
    \            }\n        }\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp95n7xqvu/tmp95n7xqvu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c42a3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c42731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c42731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c427307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95n7xqvu                        0x00005642bed2d67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4c42c26460 __libc_start_main +
    245

    6    tmp95n7xqvu                        0x00005642bed2d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    break\n                }\n\
    \            }\n            if !result.contains(n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9p07u60x/tmp9p07u60x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b158571fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1585416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1585416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15854157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p07u60x                        0x000055ab3cfb06ec <unavailable> + 5868

    5    libc.so.6                          0x00002b158590b460 __libc_start_main +
    245

    6    tmp9p07u60x                        0x000055ab3cfb02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigit) {\n                result.append(n)\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmtbkob05.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigit) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            evenDigit.append(element)\n        } else {\n            result.append(element)\n\
    \        }\n    }\n    for element in evenDigit {\n        result.remove(at: result.index(of:\
    \ element))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpti_tsioj.swift:21:34: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        result.remove(at: result.index(of: element))\n        \
    \                         ^\n/tmp/tmpti_tsioj.swift:21:34: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result.remove(at:\
    \ result.index(of: element))\n                                 ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmpti_tsioj.swift:21:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: result.index(of: element))\n              \
    \                   ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpan10y1ze/tmpan10y1ze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b224de92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b224db89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b224db89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b224db887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan10y1ze                        0x000055847880367c <unavailable> + 5756

    5    libc.so.6                          0x00002b224e07e460 __libc_start_main +
    245

    6    tmpan10y1ze                        0x0000558478803279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_u0o1u8h/tmp_u0o1u8h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab39497bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab394672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab394672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3946717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_u0o1u8h                        0x0000559e5029576c <unavailable> + 5996

    5    libc.so.6                          0x00002ab394b67460 __libc_start_main +
    245

    6    tmp_u0o1u8h                        0x0000559e50295369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba74cf71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba74cc68561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba74cc68286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba74cc6813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba74cc67bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba74ca677ec <unavailable> + 186348

    6    tmphvs2w8_g                        0x00005603e9047bfe <unavailable> + 7166

    7    tmphvs2w8_g                        0x00005603e904759c <unavailable> + 5532

    8    libc.so.6                          0x00002ba74d15d460 __libc_start_main +
    245

    9    tmphvs2w8_g                        0x00005603e9047279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01421a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0141e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0141e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0141e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0141c9e7ec <unavailable> + 186348

    6    tmpjp9j1nen                        0x000055779480fbfe <unavailable> + 7166

    7    tmpjp9j1nen                        0x000055779480f59c <unavailable> + 5532

    8    libc.so.6                          0x00002b0142394460 __libc_start_main +
    245

    9    tmpjp9j1nen                        0x000055779480f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n    \
    \        lastDigit = n % 10\n        } else {\n            if lastDigit != 0 {\n\
    \                result.append(lastDigit)\n            }\n            lastDigit\
    \ = n % 10\n        }\n    }\n    if lastDigit != 0 {\n        result.append(lastDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpnmpjp5d1/tmpnmpjp5d1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add00525c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add0021cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add0021c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add0021b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmpjp5d1                        0x000055f679a4967c <unavailable> + 5756

    5    libc.so.6                          0x00002add00711460 __libc_start_main +
    245

    6    tmpnmpjp5d1                        0x000055f679a49279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 == 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6k6if9mc/tmp6k6if9mc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b931945dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9319154b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9319154988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93191537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6k6if9mc                        0x00005636deede76c <unavailable> + 5996

    5    libc.so.6                          0x00002b9319649460 __libc_start_main +
    245

    6    tmp6k6if9mc                        0x00005636deede369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for element in x {\n        if element % 2\
    \ == 0 {\n            last = element\n        } else {\n            if last !=\
    \ 0 {\n                result.append(last)\n            }\n            last =\
    \ element\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpygu4kjhu/tmpygu4kjhu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3da2914c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3da260bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3da260b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3da260a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygu4kjhu                        0x00005615b9abc62c <unavailable> + 5676

    5    libc.so.6                          0x00002b3da2b00460 __libc_start_main +
    245

    6    tmpygu4kjhu                        0x00005615b9abc229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1q0joeuk/tmp1q0joeuk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b271244fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2712146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2712146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27121457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q0joeuk                        0x00005623d011176c <unavailable> + 5996

    5    libc.so.6                          0x00002b271263b460 __libc_start_main +
    245

    6    tmp1q0joeuk                        0x00005623d0111369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpan10y1ze/tmpan10y1ze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b224de92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b224db89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b224db89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b224db887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan10y1ze                        0x000055847880367c <unavailable> + 5756

    5    libc.so.6                          0x00002b224e07e460 __libc_start_main +
    245

    6    tmpan10y1ze                        0x0000558478803279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    for element in result\
    \ {\n        if element % 2 == 0 {\n            result.remove(at: index)\n   \
    \     }\n        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnojrtwps.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpr21mcc7w/tmpr21mcc7w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c9b2d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9afc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c9afc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c9afc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr21mcc7w                        0x000055eeb4e6f74c <unavailable> + 5964

    5    libc.so.6                          0x00002b7c9b4bc460 __libc_start_main +
    245

    6    tmpr21mcc7w                        0x000055eeb4e6f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: Int = 0\n    var evenDigitCount: Int = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            evenDigitCount++\n      \
    \  } else {\n            evenDigitCount = 0\n        }\n        if evenDigitCount\
    \ > 0 {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvp16yi1a.swift:16:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenDigitCount++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgwpv1fd_.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       result.append(n)\n            evenDigitCount++\n        }\n    }\n   \
    \ if evenDigitCount == 0 {\n        return result\n    }\n    for n in x {\n \
    \       if n % 2 == 0 {\n            result.removeAll({ $0 % 2 == 0 })\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppis5_y1p.swift:16:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenDigitCount++\n                       \
    \   ^~\n/tmp/tmppis5_y1p.swift:24:20: error: no exact matches in call to instance\
    \ method 'removeAll'\n            result.removeAll({ $0 % 2 == 0 })\n        \
    \           ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(where:)')\n    @inlinable public mutating\
    \ func removeAll(where shouldBeRemoved: (Self.Element) throws -> Bool) rethrows\n\
    \                                    ^\nSwift.RangeReplaceableCollection:2:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(where:)')\n\
    \    @inlinable public mutating func removeAll(where shouldBeRemoved: (Self.Element)\
    \ throws -> Bool) rethrows\n                                    ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n  \
    \          result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpq9yctu2a/tmpq9yctu2a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeddb19bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeddae92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeddae92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeddae917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9yctu2a                        0x000055c4b6a7067c <unavailable> + 5756

    5    libc.so.6                          0x00002aeddb387460 __libc_start_main +
    245

    6    tmpq9yctu2a                        0x000055c4b6a70279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n  \
    \          result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpq9yctu2a/tmpq9yctu2a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeddb19bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeddae92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeddae92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeddae917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9yctu2a                        0x000055c4b6a7067c <unavailable> + 5756

    5    libc.so.6                          0x00002aeddb387460 __libc_start_main +
    245

    6    tmpq9yctu2a                        0x000055c4b6a70279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            continue\n\
    \        }\n        for index in 0..<result.count {\n            if element ==\
    \ result[index] {\n                continue\n            }\n            if element\
    \ < result[index] {\n                result.append(element)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp648gsimr/tmp648gsimr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b084bf2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b084bc26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b084bc26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b084bc257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp648gsimr                        0x000055a0e05ce81c <unavailable> + 6172

    5    libc.so.6                          0x00002b084c11b460 __libc_start_main +
    245

    6    tmp648gsimr                        0x000055a0e05ce419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if !contains(result, n) {\n\
    \                result.append(n)\n            }\n        }\n    }\n    for n\
    \ in even {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpio55z0l8.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmpio55z0l8.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    var oddDigits = [Int]()\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigits.append(n)\n        } else {\n\
    \            oddDigits.append(n)\n        }\n    }\n    for n in evenDigits {\n\
    \        if !contains(oddDigits, n) {\n            result.append(n)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpuiwb2k2i.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(oddDigits, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            even.append(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in even {\n        result.remove(at: i)\n     \
    \   i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6h2yeqk6/tmp6h2yeqk6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaba4456c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaba414db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaba414d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaba414c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6h2yeqk6                        0x0000561cfd1896dc <unavailable> + 5852

    5    libc.so.6                          0x00002aaba4642460 __libc_start_main +
    245

    6    tmp6h2yeqk6                        0x0000561cfd1892d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnoiv0wmk.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n    \
    \        lastDigit = n % 10\n        } else {\n            if lastDigit == 0 {\n\
    \                result.append(n)\n            } else {\n                lastDigit\
    \ = 0\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9rzkark2/tmp9rzkark2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68372ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6836ff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6836ff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6836ff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rzkark2                        0x0000555763e8667c <unavailable> + 5756

    5    libc.so.6                          0x00002b68374eb460 __libc_start_main +
    245

    6    tmp9rzkark2                        0x0000555763e86279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    while i < x.count {\n        if x[i] % 2 == 0 {\n        \
    \    result.append(x[i])\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp1g1rzcj/tmpp1g1rzcj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6d2ee5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6d2bdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6d2bdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6d2bdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1g1rzcj                        0x000055f220bd55bc <unavailable> + 5564

    5    libc.so.6                          0x00002ba6d30d1460 __libc_start_main +
    245

    6    tmpp1g1rzcj                        0x000055f220bd51b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpi1384lpk/tmpi1384lpk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75fea84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75fe77bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75fe77b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75fe77a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1384lpk                        0x000055a27283571c <unavailable> + 5916

    5    libc.so.6                          0x00002b75fec70460 __libc_start_main +
    245

    6    tmpi1384lpk                        0x000055a272835319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    break\n                }\n\
    \            }\n            if !result.contains(n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9p07u60x/tmp9p07u60x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b158571fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1585416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1585416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15854157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p07u60x                        0x000055ab3cfb06ec <unavailable> + 5868

    5    libc.so.6                          0x00002b158590b460 __libc_start_main +
    245

    6    tmp9p07u60x                        0x000055ab3cfb02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            continue\n\
    \        }\n        if result.contains(element) {\n            continue\n    \
    \    }\n        result.append(element)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp96ttvzlo/tmp96ttvzlo.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10fcef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10fcbe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10fcbe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10fcbe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96ttvzlo                        0x000055cc9085e6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b10fd0dc460 __libc_start_main +
    245

    6    tmp96ttvzlo                        0x000055cc9085e2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    \n    for num in result {\n        if num != 0 {\n    \
    \        i += 1\n        }\n    }\n    \n    for num in result {\n        if num\
    \ != 0 {\n            result.removeLast()\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpuz5qk1do/tmpuz5qk1do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b3d1f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b3ceecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b3ceec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b3ceeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuz5qk1do                        0x000056013962776c <unavailable> + 5996

    5    libc.so.6                          0x00002b1b3d3e1460 __libc_start_main +
    245

    6    tmpuz5qk1do                        0x0000560139627369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = 0\n    for num in x {\n        if num % 2 == 0 {\n      \
    \      evenDigit += 1\n        } else {\n            if evenDigit == 0 {\n   \
    \             result.append(num)\n            }\n            evenDigit = 0\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwe_7fqr_/tmpwe_7fqr_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab8f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dab5e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dab5e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dab5e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwe_7fqr_                        0x000055dd553a867c <unavailable> + 5756

    5    libc.so.6                          0x00002b7dabadc460 __libc_start_main +
    245

    6    tmpwe_7fqr_                        0x000055dd553a8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for evenDigit in evenDigits {\n                if element == evenDigit {\n\
    \                    break\n                }\n            }\n            if !contains(result,\
    \ element) {\n                result.append(element)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp41_vf45s.swift:22:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, element) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n       \
    \     result.append(n)\n        }\n    }\n    \n    for n in result {\n      \
    \  if index == 0 {\n            index = n\n        } else {\n            if n\
    \ % 2 == 0 {\n                result.insert(index, n)\n            }\n       \
    \ }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4zbe5e0z.swift:24:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(index, n)\n                 \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpt7s817y3/tmpt7s817y3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbfb66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbf85db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbf85d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbf85c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7s817y3                        0x000055b1db03671c <unavailable> + 5916

    5    libc.so.6                          0x00002adbbfd52460 __libc_start_main +
    245

    6    tmpt7s817y3                        0x000055b1db036319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqoev5pmj.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigit) {\n                result.append(n)\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmtbkob05.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigit) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgwpv1fd_.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for evenDigit in evenDigits {\n                if element == evenDigit {\n\
    \                    break\n                }\n            }\n            if !contains(result,\
    \ element) {\n                result.append(element)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp41_vf45s.swift:22:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, element) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(n)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwl__us3t/tmpwl__us3t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0945797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094548eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094548e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094548d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl__us3t                        0x0000563e2709667c <unavailable> + 5756

    5    libc.so.6                          0x00002b0945983460 __libc_start_main +
    245

    6    tmpwl__us3t                        0x0000563e27096279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for element in x {\n        if !result.contains(element % 10) {\n       \
    \     result.insert(element % 10)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp7zmtu04y/tmp7zmtu04y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cce7a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cce4a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cce4a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cce49f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zmtu04y                        0x0000555f721e080c <unavailable> + 6156

    5    libc.so.6                          0x00002b2cce995460 __libc_start_main +
    245

    6    tmp7zmtu04y                        0x0000555f721e0409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            evenDigit.append(element)\n        } else {\n            for\
    \ index in 0..<evenDigit.count {\n                if element == evenDigit[index]\
    \ {\n                    result.append(element)\n                    break\n \
    \               }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp_52kmsq/tmpp_52kmsq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe0f2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe0c24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe0c24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe0c237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp_52kmsq                        0x000055758de8e81c <unavailable> + 6172

    5    libc.so.6                          0x00002b1fe1119460 __libc_start_main +
    245

    6    tmpp_52kmsq                        0x000055758de8e419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    \n    for i in x {\n        if i % 2 == 0 {\n\
    \            evenDigit.append(i)\n        } else {\n            if !contains(evenDigit,\
    \ i) {\n                result.append(i)\n            }\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2a8vlbk5.swift:18:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigit, i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp45k8omun.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        } else {\n            even.append(n)\n        }\n\
    \    }\n    for n in even {\n        if result.contains(n) {\n            result.remove(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpo06pwgji.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01421a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0141e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0141e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0141e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0141c9e7ec <unavailable> + 186348

    6    tmpjp9j1nen                        0x000055779480fbfe <unavailable> + 7166

    7    tmpjp9j1nen                        0x000055779480f59c <unavailable> + 5532

    8    libc.so.6                          0x00002b0142394460 __libc_start_main +
    245

    9    tmpjp9j1nen                        0x000055779480f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_u0o1u8h/tmp_u0o1u8h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab39497bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab394672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab394672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3946717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_u0o1u8h                        0x0000559e5029576c <unavailable> + 5996

    5    libc.so.6                          0x00002ab394b67460 __libc_start_main +
    245

    6    tmp_u0o1u8h                        0x0000559e50295369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp1q0joeuk/tmp1q0joeuk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b271244fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2712146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2712146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27121457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q0joeuk                        0x00005623d011176c <unavailable> + 5996

    5    libc.so.6                          0x00002b271263b460 __libc_start_main +
    245

    6    tmp1q0joeuk                        0x00005623d0111369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for element in x {\n        if element % 2\
    \ == 0 {\n            last = element\n        } else {\n            if last !=\
    \ 0 {\n                result.append(last)\n            }\n            last =\
    \ element\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpygu4kjhu/tmpygu4kjhu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3da2914c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3da260bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3da260b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3da260a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygu4kjhu                        0x00005615b9abc62c <unavailable> + 5676

    5    libc.so.6                          0x00002b3da2b00460 __libc_start_main +
    245

    6    tmpygu4kjhu                        0x00005615b9abc229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num != 0 {\n          \
    \  i += 1\n        }\n    }\n    return result.sorted(by: { $0 < $1 })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpurtyugxw/tmpurtyugxw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee23df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee23aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee23aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee23aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtyugxw                        0x000055a2a78836ec <unavailable> + 5868

    5    libc.so.6                          0x00002aee23fe2460 __libc_start_main +
    245

    6    tmpurtyugxw                        0x000055a2a78832e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(result, n) {\n  \
    \          result.append(n)\n        }\n    }\n    for n in odd {\n        if\
    \ !contains(result, n) {\n            result.append(n)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpsqq2pbq_.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, n) {\n            ^~~~~~~~\n/tmp/tmpsqq2pbq_.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var evenDigitCount = 0\n    for n in x {\n \
    \       if n % 2 == 0 {\n            evenDigit.append(n)\n            evenDigitCount\
    \ += 1\n        } else {\n            if evenDigitCount == 0 {\n             \
    \   result.append(n)\n            } else {\n                let lastEvenDigit\
    \ = evenDigit[evenDigitCount - 1]\n                if lastEvenDigit % 2 == 0 {\n\
    \                    result.append(n)\n                }\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfpuqy62t/tmpfpuqy62t.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf08898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0858fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0858f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0858e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpuqy62t                        0x0000556897e446cc <unavailable> + 5836

    5    libc.so.6                          0x00002acf08a84460 __libc_start_main +
    245

    6    tmpfpuqy62t                        0x0000556897e442c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(evenDigits,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnj78fqmo.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(evenDigits, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        } else {\n            index = index\
    \ + 1\n            if index == result.count {\n                result.append(element)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpb7ka3h53/tmpb7ka3h53.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b778c238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b778bf2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b778bf2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b778bf2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7ka3h53                        0x000055607c89d6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b778c424460 __libc_start_main +
    245

    6    tmpb7ka3h53                        0x000055607c89d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpt7s817y3/tmpt7s817y3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbbfb66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbbf85db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbbf85d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbbf85c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7s817y3                        0x000055b1db03671c <unavailable> + 5916

    5    libc.so.6                          0x00002adbbfd52460 __libc_start_main +
    245

    6    tmpt7s817y3                        0x000055b1db036319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    var evenDigit = false\n    for element in x {\n      \
    \  if element % 2 == 0 {\n            evenDigit = true\n        }\n        if\
    \ evenDigit {\n            result.append(element)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz2yqyfoz/tmpz2yqyfoz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5135b01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51357f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51357f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51357f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2yqyfoz                        0x0000561a1616d67c <unavailable> + 5756

    5    libc.so.6                          0x00002b5135ced460 __libc_start_main +
    245

    6    tmpz2yqyfoz                        0x0000561a1616d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for num in x {\n        if num % 2 == 0 {\n           \
    \ last = num\n        } else {\n            if last != 0 {\n                result.insert(last,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgol29v5q.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, num)\n                \
    \       ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqoev5pmj.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n  \
    \          last = last * 10 + n\n        } else {\n            if last > 0 {\n\
    \                result.append(last)\n            }\n            last = n\n  \
    \      }\n    }\n    if last > 0 {\n        result.append(last)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpgpoifyy2/tmpgpoifyy2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b647d205c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b647cefcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b647cefc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b647cefb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpoifyy2                        0x000055ab3a1ae62c <unavailable> + 5676

    5    libc.so.6                          0x00002b647d3f1460 __libc_start_main +
    245

    6    tmpgpoifyy2                        0x000055ab3a1ae229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for element in x {\n        if element.isMultiple(2) {\n            result.insert(element)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2j19_grs.swift:13:20: error: no exact matches in call to instance\
    \ method 'isMultiple'\n        if element.isMultiple(2) {\n                  \
    \ ^\nSwift.SignedInteger:6:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(of:)')\n    @inlinable public func isMultiple(of other: Self) ->\
    \ Bool\n                           ^\nSwift.BinaryInteger:7:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(of:)')\n    @inlinable public\
    \ func isMultiple(of other: Self) -> Bool\n                           ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit = x.first!\n    var lastDigitIndex = -1\n    for index in x.indices\
    \ {\n        if lastDigit % 2 == 0 {\n            lastDigit = lastDigit / 2\n\
    \            lastDigitIndex = index\n        } else {\n            result.append(lastDigit)\n\
    \            lastDigit = lastDigit / 10\n        }\n    }\n    result.append(lastDigit)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpf7_ju7w6/tmpf7_ju7w6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1922a93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b192278ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b192278a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19227897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7_ju7w6                        0x000055e8a07c772c <unavailable> + 5932

    5    libc.so.6                          0x00002b1922c7f460 __libc_start_main +
    245

    6    tmpf7_ju7w6                        0x000055e8a07c7329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for num in x {\n        if num % 2 == 0 {\n     \
    \       even.append(num)\n        } else {\n            if !contains(result, num)\
    \ {\n                result.append(num)\n            }\n        }\n    }\n   \
    \ for num in even {\n        if !contains(result, num) {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdmfgby7s.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, num) {\n                ^~~~~~~~\n/tmp/tmpdmfgby7s.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, num) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = n / 10\n        } else {\n            if last != 0 {\n                result.insert(last,\
    \ last)\n            }\n            last = 0\n        }\n    }\n    if last !=\
    \ 0 {\n        result.insert(last, last)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxbwi9g93.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, last)\n               \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpxbwi9g93.swift:24:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(last,\
    \ last)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append()\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_azfgl90.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmp_azfgl90.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.insert(element)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpob_sne6k/tmpob_sne6k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba01d4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba01d1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba01d1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba01d1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob_sne6k                        0x0000558fffe937ac <unavailable> + 6060

    5    libc.so.6                          0x00002ba01d6a2460 __libc_start_main +
    245

    6    tmpob_sne6k                        0x0000558fffe933a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5f31dkqh.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(n)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwl__us3t/tmpwl__us3t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0945797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b094548eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b094548e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b094548d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl__us3t                        0x0000563e2709667c <unavailable> + 5756

    5    libc.so.6                          0x00002b0945983460 __libc_start_main +
    245

    6    tmpwl__us3t                        0x0000563e27096279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmps319iv4n/tmps319iv4n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae36768dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae367384b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae367384988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3673837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps319iv4n                        0x000055717f2de67c <unavailable> + 5756

    5    libc.so.6                          0x00002ae367879460 __libc_start_main +
    245

    6    tmps319iv4n                        0x000055717f2de279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            lastDigit = element\n        } else {\n            if lastDigit\
    \ != 0 {\n                result.append(lastDigit)\n            }\n          \
    \  lastDigit = 0\n        }\n    }\n    if lastDigit != 0 {\n        result.append(lastDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp5v1hxmks/tmp5v1hxmks.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab388966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab38865db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab38865d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab38865c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5v1hxmks                        0x000055fd5d1ea67c <unavailable> + 5756

    5    libc.so.6                          0x00002ab388b52460 __libc_start_main +
    245

    6    tmp5v1hxmks                        0x000055fd5d1ea279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for element in x {\n        if element % 2\
    \ == 0 {\n            evenDigits.append(element)\n        } else {\n         \
    \   for ev in evenDigits {\n                if element == ev {\n             \
    \       break\n                }\n            }\n            if result.contains(element)\
    \ {\n                continue\n            }\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdhygi20p/tmpdhygi20p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b035e9dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b035e6d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b035e6d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b035e6d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhygi20p                        0x000055822cfe76ec <unavailable> + 5868

    5    libc.so.6                          0x00002b035ebc6460 __libc_start_main +
    245

    6    tmpdhygi20p                        0x000055822cfe72e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n     \
    \       result.append(n)\n            evenDigitCount += 1\n        }\n    }\n\
    \    if evenDigitCount == 0 {\n        return result\n    }\n    for n in x {\n\
    \        if n % 2 != 0 {\n            result.append(n)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp59jgee2_/tmp59jgee2_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae637d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae637a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae637a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae637a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59jgee2_                        0x000055fe5b5e067c <unavailable> + 5756

    5    libc.so.6                          0x00002ae637f65460 __libc_start_main +
    245

    6    tmp59jgee2_                        0x000055fe5b5e0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba74cf71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba74cc68561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba74cc68286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba74cc6813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba74cc67bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba74ca677ec <unavailable> + 186348

    6    tmphvs2w8_g                        0x00005603e9047bfe <unavailable> + 7166

    7    tmphvs2w8_g                        0x00005603e904759c <unavailable> + 5532

    8    libc.so.6                          0x00002ba74d15d460 __libc_start_main +
    245

    9    tmphvs2w8_g                        0x00005603e9047279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    for k in x {\n        if i % 2 == 0 {\n   \
    \         result.append(k)\n        }\n        i += 1\n    }\n    for k in x {\n\
    \        if j == result.count {\n            result.append(k)\n        }\n   \
    \     j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwsi33fry/tmpwsi33fry.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad129847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad12953eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad12953e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad12953d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsi33fry                        0x000055ef160176dc <unavailable> + 5852

    5    libc.so.6                          0x00002ad129a33460 __libc_start_main +
    245

    6    tmpwsi33fry                        0x000055ef160172d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            even.append(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in even {\n        if result.contains(num) {\n\
    \            continue\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpf7p55_un/tmpf7p55_un.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2c96fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2c93f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2c93f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2c93f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7p55_un                        0x000055a53e1686ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac2c98ea460 __libc_start_main +
    245

    6    tmpf7p55_un                        0x000055a53e1682e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqoev5pmj.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    for element in result\
    \ {\n        if element % 2 != 0 {\n            index = result.index(element)\n\
    \            result.remove(at: index)\n            result.append(element)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpoyiugllg.swift:20:28: error: no exact matches in call to instance\
    \ method 'index'\n            index = result.index(element)\n                \
    \           ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n\
    \                           ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in evenDigit {\n        if contains(result, n) {\n            continue\n\
    \        }\n        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjmsnvj_m.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmpjmsnvj_m.swift:23:12:\
    \ error: cannot find 'contains' in scope\n        if contains(result, n) {\n \
    \          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnoiv0wmk.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01421a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0141e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0141e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0141e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0141c9e7ec <unavailable> + 186348

    6    tmpjp9j1nen                        0x000055779480fbfe <unavailable> + 7166

    7    tmpjp9j1nen                        0x000055779480f59c <unavailable> + 5532

    8    libc.so.6                          0x00002b0142394460 __libc_start_main +
    245

    9    tmpjp9j1nen                        0x000055779480f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if !contains(result, n) {\n\
    \                result.append(n)\n            }\n        }\n    }\n    return\
    \ even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprf0orxm3.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = n / 10\n        } else {\n            if last != 0 {\n                result.insert(last,\
    \ last)\n            }\n            last = 0\n        }\n    }\n    if last !=\
    \ 0 {\n        result.insert(last, last)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxbwi9g93.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, last)\n               \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpxbwi9g93.swift:24:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(last,\
    \ last)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if result.contains(n) {\n  \
    \              continue\n            }\n            result.append(n)\n       \
    \ }\n    }\n    for n in even {\n        if result.contains(n) {\n           \
    \ continue\n        }\n        result.append(n)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpc9e80vu4/tmpc9e80vu4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a30c27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a3091eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a3091e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a3091d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9e80vu4                        0x000055d12b5ff6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b1a30e13460 __libc_start_main +
    245

    6    tmpc9e80vu4                        0x000055d12b5ff2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result.append(element)\n        }\n    }\n    \n    for element in\
    \ result {\n        if element % 2 != 0 {\n            result.insert(element,\
    \ at: index)\n        }\n        index += 1\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl9d7qi1r/tmpl9d7qi1r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae808e8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae808b81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae808b81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae808b807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl9d7qi1r                        0x000055bf734936dc <unavailable> + 5852

    5    libc.so.6                          0x00002ae809076460 __libc_start_main +
    245

    6    tmpl9d7qi1r                        0x000055bf734932d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    break\n                }\n\
    \            }\n            if !result.contains(n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9p07u60x/tmp9p07u60x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b158571fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1585416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1585416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15854157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p07u60x                        0x000055ab3cfb06ec <unavailable> + 5868

    5    libc.so.6                          0x00002b158590b460 __libc_start_main +
    245

    6    tmp9p07u60x                        0x000055ab3cfb02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element in x\
    \ {\n        if element % 2 != 0 && evenDigitCount == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbm7kww4y/tmpbm7kww4y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac48007dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47fd74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac47fd74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac47fd737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm7kww4y                        0x00005614478a767c <unavailable> + 5756

    5    libc.so.6                          0x00002ac480269460 __libc_start_main +
    245

    6    tmpbm7kww4y                        0x00005614478a7279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var lastEvenDigit = 0\n    for n in x {\n        if n % 2 == 0 {\n      \
    \      lastEvenDigit = n\n        } else {\n            if lastEvenDigit != 0\
    \ {\n                result.insert(lastEvenDigit, lastEvenDigit)\n           \
    \ }\n            lastEvenDigit = 0\n        }\n    }\n    if lastEvenDigit !=\
    \ 0 {\n        result.insert(lastEvenDigit, lastEvenDigit)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpojx7cs6_.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(lastEvenDigit, lastEvenDigit)\n\
    \                       ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpojx7cs6_.swift:24:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(lastEvenDigit, lastEvenDigit)\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3f2hkf_8/tmp3f2hkf_8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd627b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd624a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd624a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd624a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f2hkf_8                        0x000056075dbd367c <unavailable> + 5756

    5    libc.so.6                          0x00002acd6299d460 __libc_start_main +
    245

    6    tmp3f2hkf_8                        0x000056075dbd3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0tgl9m4d.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    while i < x.count {\n        if x[i] % 2 == 0 {\n        \
    \    result.append(x[i])\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpp1g1rzcj/tmpp1g1rzcj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6d2ee5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6d2bdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6d2bdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6d2bdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1g1rzcj                        0x000055f220bd55bc <unavailable> + 5564

    5    libc.so.6                          0x00002ba6d30d1460 __libc_start_main +
    245

    6    tmpp1g1rzcj                        0x000055f220bd51b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978555
