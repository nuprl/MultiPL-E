language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(at: index)\n        }\n        index++\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpetf2egas.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3f2hkf_8/tmp3f2hkf_8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd627b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd624a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd624a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd624a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f2hkf_8                        0x000056075dbd367c <unavailable> + 5756

    5    libc.so.6                          0x00002acd6299d460 __libc_start_main +
    245

    6    tmp3f2hkf_8                        0x000056075dbd3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b72b4e0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72b4b06561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b72b4b06286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b72b4b0613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b72b4b05bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b72b4c07c1d <unavailable> + 2489373

    6    tmprj2v8muu                        0x00005569d1419f40 <unavailable> + 8000

    7    tmprj2v8muu                        0x00005569d141977c <unavailable> + 6012

    8    libc.so.6                          0x00002b72b4ffb460 __libc_start_main +
    245

    9    tmprj2v8muu                        0x00005569d1419459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnoiv0wmk.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    var i = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            evenDigit.append(element)\n        } else {\n\
    \            result.append(element)\n        }\n    }\n    for element in evenDigit\
    \ {\n        if result.contains(element) {\n            result.remove(at: result.index(of:\
    \ element))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpj1_hddlc.swift:23:38: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: element))\n    \
    \                                 ^\n/tmp/tmpj1_hddlc.swift:23:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: element))\n                     \
    \                ^\n                                                        ??\
    \ <#default value#>\n/tmp/tmpj1_hddlc.swift:23:38: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: element))\n                                     ^\n       \
    \                                                !\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    var evenDigit = false\n    for element in x\
    \ {\n        if element % 2 == 0 {\n            evenDigit = true\n        }\n\
    \        if evenDigit {\n            result.append(element)\n        }\n     \
    \   evenDigit = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8eig5z0c/tmp8eig5z0c.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae8514c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae820bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae820b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae820a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8eig5z0c                        0x0000558dad12967c <unavailable> + 5756

    5    libc.so.6                          0x00002aaae8700460 __libc_start_main +
    245

    6    tmp8eig5z0c                        0x0000558dad129279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.insert(element)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpob_sne6k/tmpob_sne6k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba01d4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba01d1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba01d1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba01d1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob_sne6k                        0x0000558fffe937ac <unavailable> + 6060

    5    libc.so.6                          0x00002ba01d6a2460 __libc_start_main +
    245

    6    tmpob_sne6k                        0x0000558fffe933a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for num in x {\n        if num % 2 == 0 {\n            continue\n       \
    \ }\n        for num2 in x {\n            if num2 == num {\n                continue\n\
    \            }\n            if num2 % 2 == 0 {\n                continue\n   \
    \         }\n            if num2 % num == 0 {\n                result.append(num2)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpedxn50cv/tmpedxn50cv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f0df7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f0aeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f0aee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f0aed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedxn50cv                        0x000055660813e67c <unavailable> + 5756

    5    libc.so.6                          0x00002ab5f0fe3460 __libc_start_main +
    245

    6    tmpedxn50cv                        0x000055660813e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int]\
    \ = []\n    var evenDigit: Int = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigit += 1\n        } else {\n            if evenDigit\
    \ == 0 {\n                result.append(element)\n            } else {\n     \
    \           evenDigit = 0\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmewdtblr/tmpmewdtblr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb6a976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb6a66db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb6a66d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb6a66c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmewdtblr                        0x000055dfadb4362c <unavailable> + 5676

    5    libc.so.6                          0x00002acb6ab62460 __libc_start_main +
    245

    6    tmpmewdtblr                        0x000055dfadb43229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01421a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0141e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0141e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0141e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0141c9e7ec <unavailable> + 186348

    6    tmpjp9j1nen                        0x000055779480fbfe <unavailable> + 7166

    7    tmpjp9j1nen                        0x000055779480f59c <unavailable> + 5532

    8    libc.so.6                          0x00002b0142394460 __libc_start_main +
    245

    9    tmpjp9j1nen                        0x000055779480f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for element in x {\n     \
    \   if element % 2 == 0 {\n            even.append(element)\n        } else {\n\
    \            odd.append(element)\n        }\n    }\n    for element in even {\n\
    \        if !contains(result, element) {\n            result.append(element)\n\
    \        }\n    }\n    for element in odd {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9udgdycd.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, element) {\n            ^~~~~~~~\n/tmp/tmp9udgdycd.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, element)\
    \ {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpntc0yky0.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = Set<Int>()\n\
    \    for num in x {\n        let digit = num % 10\n        if !result.contains(digit)\
    \ {\n            result.insert(digit)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpg8ag91n_/tmpg8ag91n_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57db6a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57db39db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57db39d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57db39c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8ag91n_                        0x000055a1af30080c <unavailable> + 6156

    5    libc.so.6                          0x00002b57db892460 __libc_start_main +
    245

    6    tmpg8ag91n_                        0x000055a1af300409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if !contains(odd, n) {\n     \
    \       result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp45k8omun.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(odd, n) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpsh88zk20/tmpsh88zk20.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be1873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be156ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be156a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be15697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsh88zk20                        0x000055b93932f67c <unavailable> + 5756

    5    libc.so.6                          0x00002b4be1a5f460 __libc_start_main +
    245

    6    tmpsh88zk20                        0x000055b93932f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e % e == 0 {\n                    result.append(n)\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqgaxf0eq/tmpqgaxf0eq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad34c862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad34c559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad34c559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad34c5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgaxf0eq                        0x00005575e3ec767c <unavailable> + 5756

    5    libc.so.6                          0x00002ad34ca4e460 __libc_start_main +
    245

    6    tmpqgaxf0eq                        0x00005575e3ec7279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxr2h8fhn/tmpxr2h8fhn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c25c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c22b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c22b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c22b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2h8fhn                        0x0000564b8c83679c <unavailable> + 6044

    5    libc.so.6                          0x00002ad6c27ae460 __libc_start_main +
    245

    6    tmpxr2h8fhn                        0x0000564b8c836399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824478
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15,\
    \ 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n\
    /// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = last * 10 + n % 10\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = n % 10\n\
    \        }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpfb_1euif/tmpfb_1euif.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf723b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf720a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf720a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf720a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb_1euif                        0x000055c4012a667c <unavailable> + 5756

    5    libc.so.6                          0x00002acf7259d460 __libc_start_main +
    245

    6    tmpfb_1euif                        0x000055c4012a6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824478
