language: swift
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEven() }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv2_4f7tw.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEven() }).count\n                                     ~~ ^~~~~~~~~~~\n\
    /tmp/tmpv2_4f7tw.swift:11:68: error: value of type 'Unicode.Scalar' has no member\
    \ 'isEven'\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({ $0.isEven()\
    \ }).count\n                                                                ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824642
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(index(c)) {\n            count += 1\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpjr8skrqv.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjr8skrqv.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) && isEven(index(c))\
    \ {\n           ^~~~~~~~~~~\n/tmp/tmpjr8skrqv.swift:13:30: error: cannot find\
    \ 'isEven' in scope\n        if isUppercase(c) && isEven(index(c)) {\n       \
    \                      ^~~~~~\n/tmp/tmpjr8skrqv.swift:13:37: error: cannot find\
    \ 'index' in scope\n        if isUppercase(c) && isEven(index(c)) {\n        \
    \                            ^~~~~\n"
  stdout: ''
  timestamp: 1659824642
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.characters.reduce(0) {\n        (c, i) in c +\
    \ (i % 2 == 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmph58mumnq.swift:12:24: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        (c, i) in c + (i\
    \ % 2 == 0 ? 1 : 0)\n                       ^\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpn2lr2fzh.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n        if index%2\
    \ == 0 && s[index].isUpper() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4jbik4eo.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmp4jbik4eo.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    \
    \    if index%2 == 0 && s[index].isUpper() {\n            count += 1\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp07smm4y0.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp07smm4y0.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmp07smm4y0.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3q9uyp_.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpq3q9uyp_.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) {\n   \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzpefamwf.swift:15:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpzpefamwf.swift:14:2309: note: to match this opening '('\n         \
    \   if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeSc"
  stdout: ''
  timestamp: 1659978667
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcqrmbq9n.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.characters.reduce(0) {\n        (c, i) in c +\
    \ (i % 2 == 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmph58mumnq.swift:12:24: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        (c, i) in c + (i\
    \ % 2 == 0 ? 1 : 0)\n                       ^\n"
  stdout: ''
  timestamp: 1659824645
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqn46nvz.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3q9uyp_.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpq3q9uyp_.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) {\n   \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmplaq1lczc.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzpefamwf.swift:15:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpzpefamwf.swift:14:2309: note: to match this opening '('\n         \
    \   if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeSc"
  stdout: ''
  timestamp: 1659978667
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        switch c {\n\
    \        case 'A':\n        case 'a':\n        case 'E':\n        case 'e':\n\
    \        case 'I':\n        case 'i':\n        case 'O':\n        case 'o':\n\
    \        case 'U':\n        case 'u':\n            count += 1\n        default:\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1e4byo21.swift:14:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmp1e4byo21.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmp1e4byo21.swift:15:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:16:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'E':\n   \
    \          ^~~\n             \"E\"\n/tmp/tmp1e4byo21.swift:16:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'E':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp1e4byo21.swift:17:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:18:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'I':\n   \
    \          ^~~\n             \"I\"\n/tmp/tmp1e4byo21.swift:18:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'I':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp1e4byo21.swift:19:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'O':\n   \
    \          ^~~\n             \"O\"\n/tmp/tmp1e4byo21.swift:20:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        "
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcqrmbq9n.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n        if index%2\
    \ == 0 && s[index].isUpper() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp4jbik4eo.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmp4jbik4eo.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(c.unicodeScalars.value) {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") ==\
    \ 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\n\
    assert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s:\
    \ \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp952uyaz_.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp952uyaz_.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) && isEven(c.unicodeScalars.value)\
    \ {\n           ^~~~~~~~~~~\n/tmp/tmp952uyaz_.swift:13:30: error: cannot find\
    \ 'isEven' in scope\n        if isUppercase(c) && isEven(c.unicodeScalars.value)\
    \ {\n                             ^~~~~~\n/tmp/tmp952uyaz_.swift:13:54: error:\
    \ value of type 'Character.UnicodeScalarView' (aka 'String.UnicodeScalarView')\
    \ has no member 'value'\n        if isUppercase(c) && isEven(c.unicodeScalars.value)\
    \ {\n                                    ~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcqrmbq9n.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(c - 'a') {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt5etnfyj.swift:13:41: error: single-quoted string literal found,\
    \ use '\"'\n        if isUppercase(c) && isEven(c - 'a') {\n                 \
    \                       ^~~\n                                        \"a\"\n/tmp/tmpt5etnfyj.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt5etnfyj.swift:13:12: error: cannot find 'isUppercase'\
    \ in scope\n        if isUppercase(c) && isEven(c - 'a') {\n           ^~~~~~~~~~~\n\
    /tmp/tmpt5etnfyj.swift:13:30: error: cannot find 'isEven' in scope\n        if\
    \ isUppercase(c) && isEven(c - 'a') {\n                             ^~~~~~\n/tmp/tmpt5etnfyj.swift:13:39:\
    \ error: binary operator '-' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if isUppercase(c) && isEven(c - 'a') {\n             \
    \                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp36pxs3ar.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp36pxs3ar.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpcqrmbq9n.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzpefamwf.swift:15:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpzpefamwf.swift:14:2309: note: to match this opening '('\n         \
    \   if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeSc"
  stdout: ''
  timestamp: 1659978667
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            if isEven(c - 'A') {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp57xk887y.swift:14:27: error: single-quoted string literal found,\
    \ use '\"'\n            if isEven(c - 'A') {\n                          ^~~\n\
    \                          \"A\"\n/tmp/tmp57xk887y.swift:12:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp57xk887y.swift:13:12: error: cannot find 'isUpper' in scope\n   \
    \     if isUpper(c) {\n           ^~~~~~~\n/tmp/tmp57xk887y.swift:14:16: error:\
    \ cannot find 'isEven' in scope\n            if isEven(c - 'A') {\n          \
    \     ^~~~~~\n/tmp/tmp57xk887y.swift:14:25: error: binary operator '-' cannot\
    \ be applied to operands of type 'Character' and 'String'\n            if isEven(c\
    \ - 'A') {\n                      ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEvenIndex(c) {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9ltq1t6c.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9ltq1t6c.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) && isEvenIndex(c)\
    \ {\n           ^~~~~~~\n/tmp/tmp9ltq1t6c.swift:13:26: error: cannot find 'isEvenIndex'\
    \ in scope\n        if isUpper(c) && isEvenIndex(c) {\n                      \
    \   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmplaq1lczc.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpn2lr2fzh.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.substring(idx, idx + 1).uppercased() != s.substring(idx,\
    \ idx + 1).lowercased() {\n                count += 1\n            }\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpovupb37r.swift:14:18: error: value of type 'String' has no member\
    \ 'substring'\n            if s.substring(idx, idx + 1).uppercased() != s.substring(idx,\
    \ idx + 1).lowercased() {\n               ~ ^~~~~~~~~\n/tmp/tmpovupb37r.swift:14:60:\
    \ error: value of type 'String' has no member 'substring'\n            if s.substring(idx,\
    \ idx + 1).uppercased() != s.substring(idx, idx + 1).lowercased() {\n        \
    \                                                 ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0.isUpper() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbx36g_8r.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0.isUpper() }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ && isEven(s.index(c)) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt6w5t6ii.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) && isEven(s.index(c)) {\n           ^~~~~~~\n/tmp/tmpt6w5t6ii.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(s.index(c))\
    \ {\n                         ^~~~~~\n/tmp/tmpt6w5t6ii.swift:13:41: error: missing\
    \ argument label 'of:' in call\n        if isUpper(c) && isEven(s.index(c)) {\n\
    \                                        ^\n                                 \
    \       of: \n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s[idx].isUpper() {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpri3zen11.swift:14:23: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s[idx].isUpper() {\n               ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpn2lr2fzh.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.substring(idx, idx + 1).uppercased() == \"\
    A\" {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppp4oj8cq.swift:14:18: error: value of type 'String' has no member\
    \ 'substring'\n            if s.substring(idx, idx + 1).uppercased() == \"A\"\
    \ {\n               ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n   \
    \             count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzi11icxj.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzi11icxj.swift:14:34:\
    \ error: value of type 'Character' has no member 'isUpper'\n            if s.characters[idx].isUpper()\
    \ {\n               ~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(index(c)) {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprdfyg3z9.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprdfyg3z9.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) && isEven(index(c))\
    \ {\n           ^~~~~~~\n/tmp/tmprdfyg3z9.swift:13:26: error: cannot find 'isEven'\
    \ in scope\n        if isUpper(c) && isEven(index(c)) {\n                    \
    \     ^~~~~~\n/tmp/tmprdfyg3z9.swift:13:33: error: cannot find 'index' in scope\n\
    \        if isUpper(c) && isEven(index(c)) {\n                               \
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.substring(idx, idx + 1).rangeOfString(\"AEIOU\"\
    ) != nil {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpel_r_h2k.swift:14:18: error: value of type 'String' has no member\
    \ 'substring'\n            if s.substring(idx, idx + 1).rangeOfString(\"AEIOU\"\
    ) != nil {\n               ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_73qh_3u.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp_73qh_3u.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            if isEven(c) {\n                count += 1\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvdjb2q6f.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvdjb2q6f.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n\
    /tmp/tmpvdjb2q6f.swift:14:16: error: cannot find 'isEven' in scope\n         \
    \   if isEven(c) {\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp36pxs3ar.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp36pxs3ar.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ c.isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkba9qqt0.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpkba9qqt0.swift:13:14:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper()\
    \ {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.isUpper(idx) == true {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprvlenbw2.swift:14:18: error: value of type 'String' has no member\
    \ 'isUpper'\n            if s.isUpper(idx) == true {\n               ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp36pxs3ar.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp36pxs3ar.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_73qh_3u.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp_73qh_3u.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n   \
    \     if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp8w923h2e.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp8w923h2e.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp8w923h2e.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp8w923h2e.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp8w923h2e.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmplaq1lczc.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    \
    \    if index%2 == 0 && s[index].isUpper() {\n            count += 1\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp07smm4y0.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp07smm4y0.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmp07smm4y0.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmplaq1lczc.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzpefamwf.swift:15:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpzpefamwf.swift:14:2309: note: to match this opening '('\n         \
    \   if s.unicodeScalars.contains(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeScalar(UnicodeSc"
  stdout: ''
  timestamp: 1659978667
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    \
    \    if index % 2 == 0 && s[index].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7pbyvlqn.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7pbyvlqn.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmp7pbyvlqn.swift:16:39:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index %\
    \ 2 == 0 && s[index].isUpper() {\n                             ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUppercase {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnyxo9l5c.swift:14:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if s.characters[idx].isUppercase\
    \ {\n               ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpnyxo9l5c.swift:14:18: error: 'characters'\
    \ is unavailable: Please use String directly\n            if s.characters[idx].isUppercase\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj4jkqk0f.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmpj4jkqk0f.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4jkqk0f.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmpj4jkqk0f.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmpj4jkqk0f.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n        if idx % 2 ==\
    \ 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5l52gv90.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        switch c {\n\
    \        case 'A':\n        case 'a':\n        case 'E':\n        case 'e':\n\
    \        case 'I':\n        case 'i':\n        case 'O':\n        case 'o':\n\
    \        case 'U':\n        case 'u':\n            count += 1\n        default:\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1e4byo21.swift:14:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmp1e4byo21.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmp1e4byo21.swift:15:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:16:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'E':\n   \
    \          ^~~\n             \"E\"\n/tmp/tmp1e4byo21.swift:16:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'E':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:17:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp1e4byo21.swift:17:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:18:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'I':\n   \
    \          ^~~\n             \"I\"\n/tmp/tmp1e4byo21.swift:18:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'I':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:19:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp1e4byo21.swift:19:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp1e4byo21.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'O':\n   \
    \          ^~~\n             \"O\"\n/tmp/tmp1e4byo21.swift:20:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        "
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp36pxs3ar.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp36pxs3ar.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(c.unicodeScalars.value) {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") ==\
    \ 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\n\
    assert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s:\
    \ \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp952uyaz_.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp952uyaz_.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) && isEven(c.unicodeScalars.value)\
    \ {\n           ^~~~~~~~~~~\n/tmp/tmp952uyaz_.swift:13:30: error: cannot find\
    \ 'isEven' in scope\n        if isUppercase(c) && isEven(c.unicodeScalars.value)\
    \ {\n                             ^~~~~~\n/tmp/tmp952uyaz_.swift:13:54: error:\
    \ value of type 'Character.UnicodeScalarView' (aka 'String.UnicodeScalarView')\
    \ has no member 'value'\n        if isUppercase(c) && isEven(c.unicodeScalars.value)\
    \ {\n                                    ~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
