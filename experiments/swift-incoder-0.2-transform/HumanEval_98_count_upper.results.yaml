language: swift
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEven() }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpv2_4f7tw.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEven() }).count\n                                     ~~ ^~~~~~~~~~~\n\
    /tmp/tmpv2_4f7tw.swift:11:68: error: value of type 'Unicode.Scalar' has no member\
    \ 'isEven'\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({ $0.isEven()\
    \ }).count\n                                                                ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824642
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(index(c)) {\n            count += 1\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpjr8skrqv.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjr8skrqv.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) && isEven(index(c))\
    \ {\n           ^~~~~~~~~~~\n/tmp/tmpjr8skrqv.swift:13:30: error: cannot find\
    \ 'isEven' in scope\n        if isUppercase(c) && isEven(index(c)) {\n       \
    \                      ^~~~~~\n/tmp/tmpjr8skrqv.swift:13:37: error: cannot find\
    \ 'index' in scope\n        if isUppercase(c) && isEven(index(c)) {\n        \
    \                            ^~~~~\n"
  stdout: ''
  timestamp: 1659824642
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.characters.reduce(0) {\n        (c, i) in c +\
    \ (i % 2 == 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmph58mumnq.swift:12:24: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        (c, i) in c + (i\
    \ % 2 == 0 ? 1 : 0)\n                       ^\n"
  stdout: ''
  timestamp: 1659824645
