language: swift
name: HumanEval_3_below_zero
results:
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b537ec2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537e925561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b537e925286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b537e92513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b537e924bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b537e724e83 <unavailable> + 188035

    6    tmpzrxyx269                        0x000056477e2a3acb <unavailable> + 6859

    7    tmpzrxyx269                        0x000056477e2a351d <unavailable> + 5405

    8    libc.so.6                          0x00002b537ee1a460 __libc_start_main +
    245

    9    tmpzrxyx269                        0x000056477e2a3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b083d91bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083d612561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b083d612286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b083d61213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b083d611bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b083d411e83 <unavailable> + 188035

    6    tmphei3tbag                        0x0000560024cf0acb <unavailable> + 6859

    7    tmphei3tbag                        0x0000560024cf051d <unavailable> + 5405

    8    libc.so.6                          0x00002b083db07460 __libc_start_main +
    245

    9    tmphei3tbag                        0x0000560024cf0229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b537ec2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537e925561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b537e925286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b537e92513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b537e924bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b537e724e83 <unavailable> + 188035

    6    tmpzrxyx269                        0x000056477e2a3acb <unavailable> + 6859

    7    tmpzrxyx269                        0x000056477e2a351d <unavailable> + 5405

    8    libc.so.6                          0x00002b537ee1a460 __libc_start_main +
    245

    9    tmpzrxyx269                        0x000056477e2a3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmp57a6kpov/tmp57a6kpov.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e8aaf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e8a7edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e8a7ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e8a7ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57a6kpov                        0x00005575e9c135e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b4e8ace2460 __libc_start_main +
    245

    6    tmp57a6kpov                        0x00005575e9c13279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.isEmpty ==\
    \ false else { return false }\n    var balance = operations[0]\n    for operation\
    \ in operations {\n        if balance < 0 {\n            return true\n       \
    \ }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp_ev8ag_w/tmp_ev8ag_w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab882761c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab882458b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab882458988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8824577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ev8ag_w                        0x00005572ff3b15bb <unavailable> + 5563

    5    libc.so.6                          0x00002ab88294d460 __libc_start_main +
    245

    6    tmp_ev8ag_w                        0x00005572ff3b1179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d4024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d3d1b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27d3d1b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27d3d1b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27d3d1abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b27d3b1ae83 <unavailable> + 188035

    6    tmpadu47hpu                        0x0000555edea58acb <unavailable> + 6859

    7    tmpadu47hpu                        0x0000555edea5851d <unavailable> + 5405

    8    libc.so.6                          0x00002b27d4210460 __libc_start_main +
    245

    9    tmpadu47hpu                        0x0000555edea58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { (acc, curr) -> Int in\n        acc += curr\n        return acc\n    }\n  \
    \  return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp836hfbk4.swift:11:13: error: left side of mutating operator isn't\
    \ mutable: 'acc' is a 'let' constant\n        acc += curr\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a517f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a514e8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9a514e8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9a514e813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9a514e7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9a512e7e83 <unavailable> + 188035

    6    tmpa4ho5tao                        0x0000558e8398cacb <unavailable> + 6859

    7    tmpa4ho5tao                        0x0000558e8398c51d <unavailable> + 5405

    8    libc.so.6                          0x00002b9a519dd460 __libc_start_main +
    245

    9    tmpa4ho5tao                        0x0000558e8398c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    let balance = operations.reduce(0) { $0 +\
    \ $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpyx6w9y9p/tmpyx6w9y9p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b5fdb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b5faaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b5faaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b5faa97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx6w9y9p                        0x00005588d1b5f3a4 <unavailable> + 5028

    5    libc.so.6                          0x00002b8b5ff9f460 __libc_start_main +
    245

    6    tmpyx6w9y9p                        0x00005588d1b5f039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d4024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d3d1b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27d3d1b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27d3d1b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27d3d1abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b27d3b1ae83 <unavailable> + 188035

    6    tmpadu47hpu                        0x0000555edea58acb <unavailable> + 6859

    7    tmpadu47hpu                        0x0000555edea5851d <unavailable> + 5405

    8    libc.so.6                          0x00002b27d4210460 __libc_start_main +
    245

    9    tmpadu47hpu                        0x0000555edea58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d4024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d3d1b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27d3d1b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27d3d1b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27d3d1abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b27d3b1ae83 <unavailable> + 188035

    6    tmpadu47hpu                        0x0000555edea58acb <unavailable> + 6859

    7    tmpadu47hpu                        0x0000555edea5851d <unavailable> + 5405

    8    libc.so.6                          0x00002b27d4210460 __libc_start_main +
    245

    9    tmpadu47hpu                        0x0000555edea58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ea8994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ea868b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ea868b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ea868b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ea868abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9ea848ae83 <unavailable> + 188035

    6    tmpbigkytqo                        0x000055b838c119c2 <unavailable> + 6594

    7    tmpbigkytqo                        0x000055b838c1141d <unavailable> + 5149

    8    libc.so.6                          0x00002b9ea8b80460 __libc_start_main +
    245

    9    tmpbigkytqo                        0x000055b838c11129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d4024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d3d1b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27d3d1b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27d3d1b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27d3d1abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b27d3b1ae83 <unavailable> + 188035

    6    tmpadu47hpu                        0x0000555edea58acb <unavailable> + 6859

    7    tmpadu47hpu                        0x0000555edea5851d <unavailable> + 5405

    8    libc.so.6                          0x00002b27d4210460 __libc_start_main +
    245

    9    tmpadu47hpu                        0x0000555edea58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbequma9v/tmpbequma9v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecac560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecac257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecac257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecac2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbequma9v                        0x0000565272f344f8 <unavailable> + 5368

    5    libc.so.6                          0x00002aecac74c460 __libc_start_main +
    245

    6    tmpbequma9v                        0x0000565272f33fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a517f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a514e8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9a514e8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9a514e813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9a514e7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9a512e7e83 <unavailable> + 188035

    6    tmpa4ho5tao                        0x0000558e8398cacb <unavailable> + 6859

    7    tmpa4ho5tao                        0x0000558e8398c51d <unavailable> + 5405

    8    libc.so.6                          0x00002b9a519dd460 __libc_start_main +
    245

    9    tmpa4ho5tao                        0x0000558e8398c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphpkr_3ri/tmphpkr_3ri.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4700569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4700260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4700260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470025f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpkr_3ri                        0x000056308bec9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b4700755460 __libc_start_main +
    245

    6    tmphpkr_3ri                        0x000056308bec9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard let firstOperation = operations.first\
    \ else {\n        return false\n    }\n    return firstOperation < 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmp6ls509jb/tmp6ls509jb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae9d67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae9a5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae9a5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae9a5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ls509jb                        0x0000565304c94518 <unavailable> + 5400

    5    libc.so.6                          0x00002adae9f53460 __libc_start_main +
    245

    6    tmp6ls509jb                        0x0000565304c94009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b537ec2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537e925561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b537e925286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b537e92513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b537e924bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b537e724e83 <unavailable> + 188035

    6    tmpzrxyx269                        0x000056477e2a3acb <unavailable> + 6859

    7    tmpzrxyx269                        0x000056477e2a351d <unavailable> + 5405

    8    libc.so.6                          0x00002b537ee1a460 __libc_start_main +
    245

    9    tmpzrxyx269                        0x000056477e2a3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac822a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82270e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac82270e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac82270e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac82270dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac82250de83 <unavailable> + 188035

    6    tmpgs7kj2ra                        0x000055e4bf3d29c2 <unavailable> + 6594

    7    tmpgs7kj2ra                        0x000055e4bf3d241d <unavailable> + 5149

    8    libc.so.6                          0x00002ac822c03460 __libc_start_main +
    245

    9    tmpgs7kj2ra                        0x000055e4bf3d2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d4024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d3d1b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27d3d1b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27d3d1b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27d3d1abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b27d3b1ae83 <unavailable> + 188035

    6    tmpadu47hpu                        0x0000555edea58acb <unavailable> + 6859

    7    tmpadu47hpu                        0x0000555edea5851d <unavailable> + 5405

    8    libc.so.6                          0x00002b27d4210460 __libc_start_main +
    245

    9    tmpadu47hpu                        0x0000555edea58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b537ec2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537e925561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b537e925286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b537e92513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b537e924bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b537e724e83 <unavailable> + 188035

    6    tmpzrxyx269                        0x000056477e2a3acb <unavailable> + 6859

    7    tmpzrxyx269                        0x000056477e2a351d <unavailable> + 5405

    8    libc.so.6                          0x00002b537ee1a460 __libc_start_main +
    245

    9    tmpzrxyx269                        0x000056477e2a3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3a70ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf3a405561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf3a405286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf3a40513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf3a404bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf3a204e83 <unavailable> + 188035

    6    tmpokvqwd5p                        0x000056547425d9c2 <unavailable> + 6594

    7    tmpokvqwd5p                        0x000056547425d41d <unavailable> + 5149

    8    libc.so.6                          0x00002aaf3a8fa460 __libc_start_main +
    245

    9    tmpokvqwd5p                        0x000056547425d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnbqmm8pn.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27d4024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27d3d1b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27d3d1b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27d3d1b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27d3d1abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b27d3b1ae83 <unavailable> + 188035

    6    tmpadu47hpu                        0x0000555edea58acb <unavailable> + 6859

    7    tmpadu47hpu                        0x0000555edea5851d <unavailable> + 5405

    8    libc.so.6                          0x00002b27d4210460 __libc_start_main +
    245

    9    tmpadu47hpu                        0x0000555edea58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014281
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014107
