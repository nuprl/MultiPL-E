name: HumanEval_80_is_happy
language: swift
prompt: "\n/// You are given a string s.\n/// Your task is to check if the string\
  \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
  /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n/// true\n\
  /// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n/// >>>\
  \ is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
  \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"\
  aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
  ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\"\
  ) == false)"
completions: ["    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var last: Character?\n   \
    \ var lastCount: Int = 0\n    for c in s.characters {\n        if last == nil\
    \ {\n            last = c\n            lastCount = 1\n        } else {\n     \
    \       if c == last {\n                lastCount += 1\n            } else {\n\
    \                if lastCount > 3 {\n                    return false\n      \
    \          }\n                last = c\n                lastCount = 1\n      \
    \      }\n        }\n    }\n    return true", '    return s.count >= 3 && s.count
    % 3 == 0 && s.isDistinct', "    if s.isEmpty {\n        return false\n    }\n\
    \    if s.count < 3 {\n        return false\n    }\n    var last: Character? =\
    \ nil\n    for c in s.characters {\n        if last != nil {\n            if last\
    \ == c {\n                return false\n            }\n        }\n        last\
    \ = c\n    }\n    return true", "    if s.isEmpty {\n        return false\n  \
    \  }\n    if s.count == 3 {\n        for index in 0..<s.count {\n            if\
    \ s[index] != s[index+1] {\n                return false\n            }\n    \
    \    }\n        return true\n    }\n    return false", "    if s.isEmpty {\n \
    \       return true\n    }\n    if s.count < 3 {\n        return false\n    }\n\
    \    var lastChar = s[0]\n    for char in s.dropFirst() {\n        if char !=\
    \ lastChar {\n            return false\n        }\n        lastChar = char\n \
    \   }\n    return true", "    if s.isEmpty {\n        return false\n    }\n  \
    \  if s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n  \
    \  for char in s.dropFirst() {\n        if char == lastChar {\n            return\
    \ false\n        }\n        lastChar = char\n    }\n    return true", "    let\
    \ len = s.characters.count\n    return len >= 3 &&\n        allSatisfyPredicate(s.characters.enumerated().map\
    \ { (index, char) in\n            return index == 3 && char != s[index + 1] &&\
    \ char != s[index + 2] && char != s[index + 3]\n        })", "    return s.count\
    \ > 3 && s.characters.reduce(true) { (result, char) -> Bool in\n        let index\
    \ = s.startIndex.advancedBy(char.unicodeScalars.count - 1)\n        return !result.contains(index)\n\
    \    }", '    return s.count >= 3 && s.isHappy()', "    let len = s.characters.count\n\
    \    if len < 3 {\n        return false\n    }\n    var lastChar = s.characters.last!\n\
    \    for char in s.characters.dropLast() {\n        if char != lastChar {\n  \
    \          return false\n        }\n        lastChar = char\n    }\n    return\
    \ true", "    let len = s.characters.count\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character?\n    for char in s.characters {\n        if char\
    \ == last {\n            return false\n        }\n        last = char\n    }\n\
    \    return true", "    if s.count < 3 {\n        return false\n    }\n    var\
    \ last: Character?\n    for c in s {\n        if last == c {\n            return\
    \ false\n        }\n        last = c\n    }\n    return true", '    return s.count
    >= 3 && is_distinct_3(s.characters)', '    return s.count >= 3 && s.count % 3
    == 0 && s.isDistinct', "    if s.isEmpty {\n        return false\n    }\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for\
    \ char in s.dropFirst() {\n        if char == lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true", '    return s.count
    >= 3 && s.isHappy()', "    if s.isEmpty {\n        return false\n    }\n    if\
    \ s.count == 3 {\n        return true\n    }\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for index in 1..<s.count {\n    \
    \    if s[index] != lastChar {\n            return false\n        }\n        lastChar\
    \ = s[index]\n    }\n    return true", "    if s.isEmpty {\n        return false\n\
    \    }\n    if s.count < 3 {\n        return false\n    }\n    var last: Character?\n\
    \    for c in s.characters {\n        if last == c {\n            return false\n\
    \        }\n        last = c\n    }\n    return true", "    let len = s.characters.count\n\
    \    if len < 3 {\n        return false\n    }\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    while i < len {\n        if s.characters[i] != s.characters[j]\
    \ {\n            return false\n        }\n        i += 1\n        j += 1\n   \
    \     k += 1\n        if k == 3 {\n            i = 0\n            j = 0\n    \
    \        k = 0\n        }\n    }\n    return true", '    return s.count >= 3 &&
    is_distinct_3(s.characters)']
stop_tokens:
- "\n}"
