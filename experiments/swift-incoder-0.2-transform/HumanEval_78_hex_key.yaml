name: HumanEval_78_hex_key
language: swift
prompt: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>>\
  \ hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n///\
  \ >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n\
  /// 2\nfunc hex_key(num: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
  \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
  \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
  \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
completions: ["    var count = 0\n    for char in num {\n        switch char {\n \
    \       case \"A\":\n        case \"B\":\n        case \"C\":\n        case \"\
    D\":\n        case \"E\":\n        case \"F\":\n            count += 1\n     \
    \   default:\n            break\n        }\n    }\n    return count", "    let\
    \ digits = num.characters\n    let len = digits.count\n    var count = 0\n   \
    \ var prime: Int = 0\n    var prime2: Int = 0\n    var prime3: Int = 0\n    var\
    \ prime4: Int = 0\n    var prime5: Int = 0\n    var prime6: Int = 0\n    var prime7:\
    \ Int = 0\n    var prime8: Int = 0\n    var prime9: Int = 0\n    var prime10:\
    \ Int = 0\n    var prime11: Int = 0\n    var prime12: Int = 0\n    var prime13:\
    \ Int = 0\n    var prime14: Int = 0\n    var prime15: Int = 0\n    var prime16:\
    \ Int = 0\n    var prime17: Int = 0\n    var prime18: Int = 0\n    var prime19:\
    \ Int = 0\n    var prime20: Int = 0\n    var prime21: Int = 0\n    var prime22:\
    \ Int = 0\n    var prime23: Int = 0\n    var prime24: Int = 0\n    var prime25:\
    \ Int = 0\n    var prime26: Int = 0\n    var prime27: Int = 0\n    var prime28:\
    \ Int = 0\n    var prime29: Int = 0\n    var prime30: Int = 0\n    var prime31:\
    \ Int = 0\n    var prime32: Int = 0\n    var prime33: Int = 0\n    var prime34:\
    \ Int = 0\n    var prime35: Int = 0\n    var prime36: Int = 0\n    var prime37:\
    \ Int = 0\n    var prime38: Int = 0\n    var prime39: Int = 0\n    var prime40:\
    \ Int = 0\n    var prime41: Int = 0\n    var prime42: Int = 0\n    var prime43:\
    \ Int = 0\n    var prime44: Int = 0\n    var prime45: Int = 0\n    var prime46:\
    \ Int = 0\n    var prime47: Int = 0\n    var prime48: Int = 0\n    var prime49:\
    \ Int = 0\n    var prime50: Int = 0\n    var prime51: Int = 0\n    var prime52:\
    \ Int = 0\n    var prime53: Int = 0\n    var prime54: Int = 0\n    var prime55:\
    \ Int = 0\n    var prime56: Int = 0\n    var prime57: Int = 0\n    var prime58:\
    \ Int = 0\n    var prime59: Int = 0\n    var prime60: Int = 0\n    var prime61:\
    \ Int = 0\n    var prime62: Int = 0\n    var prime63: Int = 0\n    var prime64:\
    \ Int = 0\n    var prime65: Int = 0\n    var prime66: Int = 0\n    var prime67:\
    \ Int = 0\n    var prime68: Int = 0\n    var prime69: Int = 0\n    var prime70:\
    \ Int = 0\n    var prime71: Int = 0\n    var prime72: Int", "    var hexDigits:\
    \ [String] = []\n    var hexNum: Int = 0\n    var hexDigit: Int = 0\n    var isPrime:\
    \ Bool = false\n    var isPrime2: Bool = false\n    var isPrime3: Bool = false\n\
    \    var isPrime4: Bool = false\n    var isPrime5: Bool = false\n    var isPrime6:\
    \ Bool = false\n    var isPrime7: Bool = false\n    var isPrime8: Bool = false\n\
    \    var isPrime9: Bool = false\n    var isPrime10: Bool = false\n    var isPrime11:\
    \ Bool = false\n    var isPrime12: Bool = false\n    var isPrime13: Bool = false\n\
    \    var isPrime14: Bool = false\n    var isPrime15: Bool = false\n    var isPrime16:\
    \ Bool = false\n    var isPrime17: Bool = false\n    var isPrime18: Bool = false\n\
    \    var isPrime19: Bool = false\n    var isPrime20: Bool = false\n    var isPrime21:\
    \ Bool = false\n    var isPrime22: Bool = false\n    var isPrime23: Bool = false\n\
    \    var isPrime24: Bool = false\n    var isPrime25: Bool = false\n    var isPrime26:\
    \ Bool = false\n    var isPrime27: Bool = false\n    var isPrime28: Bool = false\n\
    \    var isPrime29: Bool = false\n    var isPrime30: Bool = false\n    var isPrime31:\
    \ Bool = false\n    var isPrime32: Bool = false\n    var isPrime33: Bool = false\n\
    \    var isPrime34: Bool = false\n    var isPrime35: Bool = false\n    var isPrime36:\
    \ Bool = false\n    var isPrime37: Bool = false\n    var isPrime38: Bool = false\n\
    \    var isPrime39: Bool = false\n    var isPrime40: Bool = false\n    var isPrime41:\
    \ Bool = false\n    var isPrime42: Bool = false\n    var isPrime43: Bool = false\n\
    \    var isPrime44: Bool = false\n    var isPrime45: Bool = false\n    var isPrime46:\
    \ Bool = false\n    var isPrime47: Bool = false\n    var isPrime48: Bool = false\n\
    \    var isPrime49: Bool = false\n    var isPrime50: Bool = false\n    var isPrime51:\
    \ Bool = false\n    var isPrime52: Bool = false\n    var isPrime53: Bool = false\n\
    \    var isPrime54: Bool = false\n    var isPrime55: Bool = false\n    var ",
  "    var result = 0\n    var digits = num.characters\n    var index = 0\n    while\
    \ index < digits.count {\n        let digit = digits[index]\n        switch digit\
    \ {\n        case \"0\":\n            result += 0\n        case \"1\":\n     \
    \       result += 1\n        case \"2\":\n            result += 2\n        case\
    \ \"3\":\n            result += 3\n        case \"4\":\n            result +=\
    \ 4\n        case \"5\":\n            result += 5\n        case \"6\":\n     \
    \       result += 6\n        case \"7\":\n            result += 7\n        case\
    \ \"8\":\n            result += 8\n        case \"9\":\n            result +=\
    \ 9\n        case \"A\":\n            result += 10\n        case \"B\":\n    \
    \        result += 11\n        case \"C\":\n            result += 12\n       \
    \ case \"D\":\n            result += 13\n        case \"E\":\n            result\
    \ += 14\n        case \"F\":\n            result += 15\n        default:\n   \
    \         result += 0\n        }\n        index++\n    }\n    return result",
  "    var hex = num.characters.map { String($0, radix: 16) }\n    var primes = hex.filter\
    \ { $0.isPrime }\n    return primes.count", "    // Your code here\n    \n   \
    \ return 0", "    var nums: [Int] = []\n    for char in num.unicodeScalars {\n\
    \        if char.value > 0xFF {\n            return -1\n        }\n        nums.append(Int(char.value))\n\
    \    }\n    var result = 0\n    for num in nums {\n        if num == 2 {\n   \
    \         result += 1\n        }\n        if num == 3 {\n            result +=\
    \ 1\n        }\n        if num == 5 {\n            result += 1\n        }\n  \
    \      if num == 7 {\n            result += 1\n        }\n        if num == 11\
    \ {\n            result += 1\n        }\n        if num == 13 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    let hex = num.trimmingCharacters(in:\
    \ CharacterSet.alphanumerics.inverted)\n    let hexDigits = hex.unicodeScalars.map\
    \ { String($0) }\n    let hexDigitCount = hexDigits.count\n    let hexDigitPrimes\
    \ = hexDigits.filter { isPrime(hexDigit: $0) }\n    let hexDigitPrimeCount = hexDigitPrimes.count\n\
    \    return hexDigitPrimeCount + hexDigitCount", "    var nums = num.characters\n\
    \    var count = 0\n    for index in 0..<nums.count {\n        let hex = nums[index]\
    \ as String\n        if hex.lowercased() == \"a\" {\n            count += 1\n\
    \        } else if hex.lowercased() == \"b\" {\n            count += 1\n     \
    \   } else if hex.lowercased() == \"c\" {\n            count += 1\n        } else\
    \ if hex.lowercased() == \"d\" {\n            count += 1\n        } else if hex.lowercased()\
    \ == \"e\" {\n            count += 1\n        } else if hex.lowercased() == \"\
    f\" {\n            count += 1\n        }\n    }\n    return count", "    var result\
    \ = 0\n    var i = 0\n    var isPrime = true\n    for char in num {\n        switch\
    \ char {\n        case \"A\":\n        case \"B\":\n        case \"C\":\n    \
    \    case \"D\":\n        case \"E\":\n        case \"F\":\n            isPrime\
    \ = false\n        default:\n            break\n        }\n        if isPrime\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var nums\
    \ = num.characters\n    var numsCount = nums.count\n    var hexNumsCount = 0\n\
    \    var hexNumsPrimeCount = 0\n    var hexNumsPrimePrimeCount = 0\n    var hexNumsPrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimeCount = 0\n    var hexNumsPrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimeCount = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var hexNumsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime",
  "    var count = 0\n    var digits = \"\"\n    for c in num {\n        digits =\
    \ digits + String(c)\n    }\n    for c in digits {\n        if c >= '0' && c <=\
    \ '9' {\n            count = count + 1\n        }\n    }\n    if count >= 2 {\n\
    \        return count\n    }\n    if count >= 3 {\n        return count + 1\n\
    \    }\n    if count >= 5 {\n        return count + 2\n    }\n    if count >=\
    \ 7 {\n        return count + 3\n    }\n    if count >= 11 {\n        return count\
    \ + 4\n    }\n    if count >= 13 {\n        return count + 5\n    }\n    if count\
    \ >= 17 {\n        return count + 6\n    }\n    if count >= 19 {\n        return\
    \ count + 7\n    }\n    if count >= 21 {\n        return count + 8\n    }\n  \
    \  if count >= 23 {\n        return count + 9\n    }\n    if count >= 29 {\n \
    \       return count + 10\n    }\n    if count >= 31 {\n        return count +\
    \ 11\n    }\n    if count >= 33 {\n        return count + 12\n    }\n    if count\
    \ >= 37 {\n        return count + 13\n    }\n    if count >= 41 {\n        return\
    \ count + 14\n    }\n    if count >= 43 {\n        return count + 15\n    }\n\
    \    if count >= 47 {\n        return count + 16\n    }\n    if count >= 51 {\n\
    \        return count + 17\n    }\n    if count >= 55 {\n        return count\
    \ + 18\n    }\n    if count >= 59 {\n        return count + 19\n    }\n    if\
    \ count >= 63 {\n        return count + 20\n    }\n    if count >= 67 {\n    \
    \    return count + 21\n    }\n    if count >= 71 {\n        return count + 22\n\
    \    }\n    if count >= 73 {\n        return count + 23\n    }\n    if count >=\
    \ 79 {\n        return count + 24\n    }\n    if count >= 83 {\n        return\
    \ count + 25\n    }\n    if count >= 89 {\n        return count + 26\n    }\n\
    \    if count >= 97 {\n        return count + 27\n    }\n    if count >= 101 {\n\
    \        return count + 28\n    }\n    if count >= 103 {\n        return count\
    \ + 29\n    }\n    if count >= 107 {\n        return count + 30\n    }\n    if\
    \ count >= 109 {\n        return count + 31\n    }\n    if count >= 113 {\n  \
    \      return count + 32\n    }\n    if count >= 117 {\n        return count +\
    \ 33\n    }\n    if count >= 121 {\n        return count + 34\n    }\n    if count\
    \ >= 123 {\n        return count + 35\n    }", "    var result = 0\n    var digits\
    \ = num.characters\n    var digit = digits[0]\n    var prime = primes[digit]\n\
    \    if prime == nil {\n        return -1\n    }\n    for digit in digits {\n\
    \        result += primes[digit]\n    }\n    return result", "    let digits =\
    \ num.characters\n    var count = 0\n    var prime = 1\n    for digit in digits\
    \ {\n        if digit == \"A\" {\n            prime = 2\n        } else if digit\
    \ == \"B\" {\n            prime = 3\n        } else if digit == \"C\" {\n    \
    \        prime = 5\n        } else if digit == \"D\" {\n            prime = 7\n\
    \        } else if digit == \"E\" {\n            prime = 11\n        } else if\
    \ digit == \"F\" {\n            prime = 13\n        } else {\n            prime\
    \ = digit - 48\n        }\n        if prime > 1 {\n            count += prime\
    \ - 1\n        }\n    }\n    return count", "    var hex = num\n    var count\
    \ = 0\n    for char in hex {\n        if char >= '0' && char <= '9' {\n      \
    \      count = count + 1\n        }\n    }\n    if count % 2 == 0 {\n        return\
    \ count\n    }\n    var hex2 = hex\n    var hex3 = hex\n    var hex4 = hex\n \
    \   var hex5 = hex\n    var hex6 = hex\n    var hex7 = hex\n    var hex8 = hex\n\
    \    var hex9 = hex\n    var hex10 = hex\n    var hex11 = hex\n    var hex12 =\
    \ hex\n    var hex13 = hex\n    var hex14 = hex\n    var hex15 = hex\n    var\
    \ hex16 = hex\n    var hex17 = hex\n    var hex18 = hex\n    var hex19 = hex\n\
    \    var hex20 = hex\n    var hex21 = hex\n    var hex22 = hex\n    var hex23\
    \ = hex\n    var hex24 = hex\n    var hex25 = hex\n    var hex26 = hex\n    var\
    \ hex27 = hex\n    var hex28 = hex\n    var hex29 = hex\n    var hex30 = hex\n\
    \    var hex31 = hex\n    var hex32 = hex\n    var hex33 = hex\n    var hex34\
    \ = hex\n    var hex35 = hex\n    var hex36 = hex\n    var hex37 = hex\n    var\
    \ hex38 = hex\n    var hex39 = hex\n    var hex40 = hex\n    var hex41 = hex\n\
    \    var hex42 = hex\n    var hex43 = hex\n    var hex44 = hex\n    var hex45\
    \ = hex\n    var hex46 = hex\n    var hex47 = hex\n    var hex48 = hex\n    var\
    \ hex49 = hex\n    var hex50 = hex\n    var hex51 = hex\n    var hex52 = hex\n\
    \    var hex53 = hex\n    var hex54 = hex\n    var hex55 = hex\n    var hex56\
    \ = hex\n    var hex57 = hex\n    var hex58 = hex\n    var hex59 = hex\n    var\
    \ hex60 = hex\n    var hex61 = hex\n    var hex62 = hex\n    var hex63 = hex\n\
    \    var hex64 = hex\n    var hex65 = hex\n    var hex66 = hex\n    var hex67\
    \ = hex\n    var hex68 = hex\n    var hex69 = hex\n    var hex70 = hex\n    var\
    \ hex71 = hex\n    var hex72 = hex\n    var hex73 = hex\n    var hex74 = hex\n\
    \    var hex75 = hex\n    var hex76 = hex\n    var hex77 = hex\n    var hex78\
    \ = hex\n    var hex79 = hex\n    var hex80 = hex\n    var hex8", "    var count\
    \ = 0\n    for char in num {\n        switch char {\n        case \"A\":\n   \
    \     case \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\"\
    :\n        case \"F\":\n            count += 1\n        default:\n           \
    \ break\n        }\n    }\n    return count", "    var count = 0\n    var digits\
    \ = num.characters\n    for digit in digits {\n        if digit == \"A\" || digit\
    \ == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"\
    F\" {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in num {\n        if c >= '0' && c <= '9' {\n            count\
    \ = count * 16 + c - '0'\n        } else if c == 'A' || c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'E' || c == 'F' {\n            count = count * 16 + 10 + c\
    \ - 'A'\n        } else {\n            return -1\n        }\n    }\n    return\
    \ count", "    var sum = 0\n    for char in num {\n        sum += Int(char) -\
    \ 48\n    }\n    return sum", "    var hex = num.unicodeScalars\n    var count\
    \ = 0\n    for hex in hex {\n        switch hex {\n        case 0x30, 0x31, 0x32,\
    \ 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41:\n        case 0x42, 0x43, 0x44,\
    \ 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C:\n        case 0x4D, 0x4E, 0x4F,\
    \ 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57:\n        case 0x58, 0x59, 0x5A,\
    \ 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69:\n        case 0x6A, 0x6B,\
    \ 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75:\n        case 0x76,\
    \ 0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36:\n        case\
    \ 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49:\n  \
    \      case 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54,\
    \ 0x55:\n        case 0x56, 0x57, 0x58, 0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 0x65,\
    \ 0x66, 0x67:\n        case 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,\
    \ 0x71, 0x72, 0x73:\n        case 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x30,\
    \ 0x31, 0x32, 0x33, 0x34:\n        case 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42,\
    \ 0x43, 0x44, 0x45, 0x46, 0x47:\n        case 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,\
    \ 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53:\n        case 0x54, 0x55, 0x56, 0x57, 0x58,\
    \ 0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 0x65:\n        case 0x66, 0x67, 0x68, 0x69,\
    \ 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71:\n        case 0x72, 0x73, 0x74,\
    \ 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32:\n        case 0x33, 0x34,\
    \ 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45:\n"]
stop_tokens:
- "\n}"
