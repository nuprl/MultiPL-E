name: HumanEval_99_closest_integer
language: swift
prompt: "\n/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value:\
  \ \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n\
  /// Rounding away from zero means that if the given number is equidistant\n/// from\
  \ two integers, the one you should return is the one that is the\n/// farthest from\
  \ zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\n\
  assert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"\
  -15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value:\
  \ \"0\") == 0)"
completions: ["    let value = value.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let intValue = Int(value)\n    let closestInteger = Int((abs(intValue - intValue.truncatingRemainder(dividingBy:\
    \ 1)) + intValue.truncatingRemainder(dividingBy: 1)) / 2)\n    return closestInteger",
  "    let number = Int(value)\n    let closestInteger = Int(floor(number))\n    if\
    \ number == closestInteger {\n        return number\n    }\n    return closestInteger",
  "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let intValue = Int(value)\n    if intValue == value {\n        return intValue\n\
    \    }\n    let closestValue = intValue - intValue % 10\n    return closestValue\
    \ < 0 ? closestValue + 10 : closestValue", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let intValue = Int(value)\n    let\
    \ closestValue = intValue.round()\n    if closestValue == intValue {\n       \
    \ return intValue\n    }\n    return closestValue", "    let number = Int(value)\n\
    \    let closest = (number - number%1)\n    return closest", "    let value =\
    \ value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n    let intValue\
    \ = Int(value)\n    return intValue < 0 ? intValue + 1 : intValue", "    let value\
    \ = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n    let\
    \ intValue = Int(value)\n    return intValue.rounded(.towardZero)", "    let value\
    \ = value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.symbols.inverted)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.symbols.inverted)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n", "    let value\
    \ = value.trimmingCharacters(in: .whitespacesAndNewlines)\n    let intValue =\
    \ Int(value)\n    let closestInteger = intValue.round()\n    return closestInteger",
  "    let number = Int(value)\n    if number < 0 {\n        return -number\n    }\n\
    \    if number == 0 {\n        return 0\n    }\n    if number > 0 {\n        return\
    \ number\n    }\n    return number", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let intValue = Int(value)\n    if\
    \ intValue == value {\n        return intValue\n    }\n    let closestValue =\
    \ intValue - intValue % 10\n    return closestValue < intValue ? closestValue\
    \ : intValue", "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: ", "    let intValue = Int(value)\n   \
    \ if intValue == value {\n        return intValue\n    }\n    if intValue < 0\
    \ {\n        return -intValue\n    }\n    return intValue", "    let number =\
    \ Int(value)\n    let closest: Int = Int(number) + Int(number) / 2\n    return\
    \ closest", "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let value =\
    \ value.trimmingCharacters(in: CharacterSet.newlines)\n    let value = value.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let value = value.trimmingCharacters(in: CharacterSet.newlines)\n    let\
    \ value = value.trimmingCharacters(in: ", "    let value = value.trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n    let intValue = Int(value)\n    let\
    \ closestValue = intValue == intValue ? intValue : abs(intValue - intValue % intValue)\n\
    \    return closestValue", "    let value = value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let value = value.unicodeScalars\n        .filter({$0.value > 0})\n     \
    \   .sorted(by: { $0.value < $1.value })\n        .first!\n    return Int(value)",
  "    let value = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \    let digits = value.components(separatedBy: CharacterSet.decimalDigits)\n\
    \    let digitCount = digits.count\n    guard digitCount > 0 else {\n        return\
    \ 0\n    }\n    let closestIndex = Int(digits.first!)\n    let closestValue =\
    \ digits[closestIndex]\n    let closestDistance = distance(from: closestValue,\
    \ to: 0)\n    if closestDistance < digitCount {\n        return closestIndex\n\
    \    }\n    return closestIndex - 1", "    let number: Double = Double(value)\n\
    \    let closest: Double = ceil(number)\n    return Int(closest)", "    let value\
    \ = value.trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n    let\
    \ intValue = Int(value)\n    return intValue.rounded(.towardZero)"]
stop_tokens:
- "\n}"
