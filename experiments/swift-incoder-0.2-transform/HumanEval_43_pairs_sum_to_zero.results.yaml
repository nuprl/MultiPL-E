language: swift
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n \
    \           sum = 0\n            j += 1\n        }\n    }\n    return j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpejngtl4j/tmpejngtl4j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0b578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca0b26fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca0b26f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca0b26e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejngtl4j                        0x000055c6fb9997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aca0b764460 __libc_start_main +
    245

    6    tmpejngtl4j                        0x000055c6fb9991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        i += 1 // increment i\
    \ to skip l[i]\n        j += 1 // increment j to skip l[j]\n        if sum ==\
    \ 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpju87f8u3.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpju87f8u3.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpju87f8u3.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpju87f8u3.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        } else {\n            i += 1\n        }\n        if sum == 0 {\n\
    \            return true\n        }\n    }\n    for _ in 0..<l.count {\n     \
    \   sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            j += 1\n        }\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpy9l475yo/tmpy9l475yo.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed074e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed071e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed071e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed071df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9l475yo                        0x0000565366bc67c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aed076d5460 __libc_start_main +
    245

    6    tmpy9l475yo                        0x0000565366bc61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if i == l.count\
    \ {\n            i = 0\n            j += 1\n        }\n    }\n    return j ==\
    \ 0 && sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpw8754h81/tmpw8754h81.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d282b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d27fa9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d27fa9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d27fa87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8754h81                        0x0000563b23a967c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b2d2849e460 __libc_start_main +
    245

    6    tmpw8754h81                        0x0000563b23a961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n\
    \        } else {\n            j = i\n        }\n        if j == i {\n       \
    \     return false\n        }\n        i++\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz6cn01be.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpz6cn01be.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpz6cn01be.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i++\n        }\n    }\n    for k in l {\n        sum +=\
    \ k\n        if sum < 0 {\n            sum = 0\n        } else {\n           \
    \ j++\n        }\n    }\n    return i != j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx1p7093l.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpx1p7093l.swift:32:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       }\n        if sum < 0 {\n            j++\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc5_fl1hq.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpc5_fl1hq.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpc5_fl1hq.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpc5_fl1hq.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        if sum == 0 {\n     \
    \       return false\n        }\n        sum += l[j]\n        if sum == 0 {\n\
    \            return false\n        }\n        i++\n        j++\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_xnn96ic.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp_xnn96ic.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp_xnn96ic.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp_xnn96ic.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n    }\n    for _ in 0..<l.count\
    \ {\n        sum += l[j]\n        j += 1\n    }\n    return sum == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpavkz47rz/tmpavkz47rz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bd9ed1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bd9bc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bd9bc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bd9bc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavkz47rz                        0x0000561aff50a7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9bda0bd460 __libc_start_main +
    245

    6    tmpavkz47rz                        0x0000561aff50a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n \
    \           sum = 0\n            j += 1\n        }\n    }\n    return j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpejngtl4j/tmpejngtl4j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0b578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca0b26fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca0b26f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca0b26e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejngtl4j                        0x000055c6fb9997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aca0b764460 __libc_start_main +
    245

    6    tmpejngtl4j                        0x000055c6fb9991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        if sum > 0 {\n      \
    \      sum += l[j]\n            if sum == 0 {\n                return true\n \
    \           }\n        }\n        i += 1\n        j += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1tzj7dnc.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp1tzj7dnc.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp1tzj7dnc.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp1tzj7dnc.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if i == j {\n            if sum != 0 {\n    \
    \            return false\n            }\n        } else {\n            if sum\
    \ == 0 {\n                return false\n            }\n        }\n        i++\n\
    \        j++\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprtf7c1lk.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmprtf7c1lk.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        sum += l[j]\n       \
    \ if sum == 0 {\n            return true\n        }\n        i++\n        j++\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph0s06md1.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmph0s06md1.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmph0s06md1.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmph0s06md1.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7n_td84.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpy7n_td84.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7n_td84.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpy7n_td84.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0 && len(l) == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcs_p3oul.swift:20:24: error: cannot find 'len' in scope\n    return\
    \ sum == 0 && len(l) == 2\n                       ^~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        i++\n    }\n    for x in l {\n        j++\n \
    \       if j == i {\n            if sum == 0 {\n                return true\n\
    \            }\n        }\n        sum -= x\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1k99r813.swift:21:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmp1k99r813.swift:24:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var result\
    \ = false\n    for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n \
    \       if sum == 0 {\n            result = true\n            break\n        }\n\
    \        if sum < 0 {\n            j = j + 1\n        } else {\n            i\
    \ = i + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp90_8f0br.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp90_8f0br.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp90_8f0br.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp90_8f0br.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhffwzi7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmprhffwzi7.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n   \
    \         j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtad5d16.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpwtad5d16.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        if i == j {\n            sum += l[i]\n            i +=\
    \ 1\n        } else {\n            sum += l[j]\n            j += 1\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpzmdqx1hv/tmpzmdqx1hv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c634dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c6044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c6044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c60437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmdqx1hv                        0x000055c2ddeef7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b01c6539460 __libc_start_main +
    245

    6    tmpzmdqx1hv                        0x000055c2ddeef1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhffwzi7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmprhffwzi7.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i += 1\n        j += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpy2ajvz1t/tmpy2ajvz1t.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b456fd11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b456fa08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b456fa08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b456fa077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2ajvz1t                        0x000055daadb31474 <unavailable> + 5236

    5    libc.so.6                          0x00002b456fefd460 __libc_start_main +
    245

    6    tmpy2ajvz1t                        0x000055daadb310d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if i == j {\n            if sum != 0 {\n    \
    \            return false\n            }\n        } else {\n            if sum\
    \ == 0 {\n                return false\n            }\n        }\n        i++\n\
    \        j++\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprtf7c1lk.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmprtf7c1lk.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if i == j {\n            if sum != 0 {\n    \
    \            return false\n            }\n        } else {\n            if sum\
    \ < 0 {\n                return false\n            }\n        }\n        i +=\
    \ 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpy62z9dq9/tmpy62z9dq9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00baf59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00bac50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00bac50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00bac4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy62z9dq9                        0x0000559b355566f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b00bb145460 __libc_start_main +
    245

    6    tmpy62z9dq9                        0x0000559b355560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum > 0 {\n            i++\n        }\n  \
    \      if sum < 0 {\n            j++\n        }\n    }\n    return i == j\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6i171fle.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp6i171fle.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n\
    \        } else {\n            j = i\n        }\n        if j == i {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp64dp0l2j.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp64dp0l2j.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp64dp0l2j.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if i == j {\n            if sum != 0 {\n    \
    \            return false\n            }\n        } else {\n            if sum\
    \ == 0 {\n                return false\n            }\n        }\n        i +=\
    \ 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpk8tamfrb/tmpk8tamfrb.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b740a9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b740a6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b740a6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b740a6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8tamfrb                        0x00005586eed416f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b740aba3460 __libc_start_main +
    245

    6    tmpk8tamfrb                        0x00005586eed410d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum == 0 {\n            return false\n   \
    \     }\n    }\n    for k in l {\n        sum += k\n        if sum < 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpoauip0yv/tmpoauip0yv.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b0c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b0942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b0942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b09417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoauip0yv                        0x000055e841fe8474 <unavailable> + 5236

    5    libc.so.6                          0x00002ab6b0e37460 __libc_start_main +
    245

    6    tmpoauip0yv                        0x000055e841fe80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        if i == j {\n            sum += l[i]\n            i +=\
    \ 1\n        } else {\n            if sum == 0 {\n                return false\n\
    \            }\n            sum += l[j]\n            j += 1\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpikh3h6fb/tmpikh3h6fb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb8ed56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb8ea4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb8ea4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb8ea4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikh3h6fb                        0x000055f4f62bd544 <unavailable> + 5444

    5    libc.so.6                          0x00002aeb8ef42460 __libc_start_main +
    245

    6    tmpikh3h6fb                        0x000055f4f62bd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum == 0 {\n\
    \            sum = 1\n            j++\n        }\n    }\n    return j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8m_nicqz.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs\
    \ = false\n    for i < l.count {\n        sum += l[i]\n        if sum == 0 {\n\
    \            pairs = true\n            break\n        }\n    }\n    for j < l.count\
    \ {\n        sum += l[j]\n        if sum == 0 {\n            pairs = true\n  \
    \          break\n        }\n    }\n    return pairs\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhc6r4g9.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmprhc6r4g9.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmprhc6r4g9.swift:27:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmprhc6r4g9.swift:27:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmprhc6r4g9.swift:20:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmprhc6r4g9.swift:27:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if i == l.count\
    \ {\n            if sum == 0 {\n                return true\n            }\n \
    \           sum -= l[j]\n            j += 1\n            if j == l.count {\n \
    \               return false\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyhzn9rgq/tmpyhzn9rgq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae29e67fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae29e376b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae29e376988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae29e3757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyhzn9rgq                        0x0000556976a877c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae29e86b460 __libc_start_main +
    245

    6    tmpyhzn9rgq                        0x0000556976a871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum > 0 {\n            i++\n        }\n        if sum > 0 {\n    \
    \        j++\n        }\n    }\n    return i != j\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphs9mrye_.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmphs9mrye_.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var found\
    \ = false\n    for i < l.count {\n        sum = l[i] + l[j]\n        if sum ==\
    \ 0 {\n            found = true\n            break\n        }\n        if sum\
    \ < 0 {\n            j = j + 1\n        } else {\n            i = i + 1\n    \
    \    }\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqo1u7095.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpqo1u7095.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpqo1u7095.swift:20:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        } else {\n            i += 1\n        }\n        if sum == 0 {\n\
    \            return true\n        }\n    }\n    for _ in 0..<l.count {\n     \
    \   sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            j += 1\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp47k_ljml/tmp47k_ljml.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62361ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae623311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae623311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6233107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47k_ljml                        0x0000560bf32997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae623806460 __libc_start_main +
    245

    6    tmp47k_ljml                        0x0000560bf32991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        if sum > 0 {\n      \
    \      sum += l[j]\n            if sum == 0 {\n                return true\n \
    \           }\n        }\n        i += 1\n        j += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1tzj7dnc.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp1tzj7dnc.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp1tzj7dnc.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp1tzj7dnc.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    for _ in 0..<l.count {\n      \
    \  sum += l[j]\n        if sum == 0 {\n            return false\n        }\n \
    \       j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpxek00jr1/tmpxek00jr1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08a6cadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08a69a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08a69a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08a69a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxek00jr1                        0x000055635dcc6544 <unavailable> + 5444

    5    libc.so.6                          0x00002b08a6e99460 __libc_start_main +
    245

    6    tmpxek00jr1                        0x000055635dcc61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if sum >\
    \ 0 {\n            i++\n        }\n    }\n    for x in l {\n        sum += x\n\
    \        if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            j++\n \
    \       }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpomgdycrd.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpomgdycrd.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5347s8qa.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmp5347s8qa.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       } else {\n            j++\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff60ve93.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpff60ve93.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpff60ve93.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpff60ve93.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj7ije3sj.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpj7ije3sj.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpj7ije3sj.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj7ije3sj.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpj7ije3sj.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpj7ije3sj.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ l {\n        sum += i\n        i += 1\n    }\n    for _ in l {\n        sum\
    \ += j\n        j += 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpexf8ddj6/tmpexf8ddj6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52a98f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52a95e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52a95e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52a95e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexf8ddj6                        0x000055e6eda496f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b52a9ade460 __libc_start_main +
    245

    6    tmpexf8ddj6                        0x000055e6eda490d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n            i += 1\n        }\n        if sum > 0 {\n            sum = 0\n\
    \            j += 1\n        }\n        if i == j {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmps65ol87j/tmps65ol87j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b5e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b5b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b5b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b5b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps65ol87j                        0x000055f0bd3d77c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae6b6042460 __libc_start_main +
    245

    6    tmps65ol87j                        0x000055f0bd3d71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i += 1\n        j += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpajj8cu0v/tmpajj8cu0v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72e7c41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72e7938b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72e7938988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72e79377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajj8cu0v                        0x0000559f9c3f3474 <unavailable> + 5236

    5    libc.so.6                          0x00002b72e7e2d460 __libc_start_main +
    245

    6    tmpajj8cu0v                        0x0000559f9c3f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsqnth2xq.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpsqnth2xq.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpsqnth2xq.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if i == l.count\
    \ {\n            if sum == 0 {\n                return true\n            }\n \
    \           sum -= l[j]\n            j += 1\n            if j == l.count {\n \
    \               return false\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyhzn9rgq/tmpyhzn9rgq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae29e67fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae29e376b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae29e376988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae29e3757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyhzn9rgq                        0x0000556976a877c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae29e86b460 __libc_start_main +
    245

    6    tmpyhzn9rgq                        0x0000556976a871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ len(l) && j < len(l) {\n        sum += l[i]\n        if sum < 0 {\n        \
    \    sum = 0\n        } else {\n            sum += l[j]\n        }\n        if\
    \ sum == 0 {\n            return true\n        }\n        i++\n        j++\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmkypux9q.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < len(l) && j < len(l) {\n          ^\n/tmp/tmpmkypux9q.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < len(l)\
    \ && j < len(l) {\n          ^~\n           \n/tmp/tmpmkypux9q.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < len(l) && j < len(l) {\n   \
    \       ^\n/tmp/tmpmkypux9q.swift:19:13: error: cannot find 'len' in scope\n \
    \   for i < len(l) && j < len(l) {\n            ^~~\n/tmp/tmpmkypux9q.swift:19:27:\
    \ error: cannot find 'len' in scope\n    for i < len(l) && j < len(l) {\n    \
    \                      ^~~\n/tmp/tmpmkypux9q.swift:19:20: error: for-in loop requires\
    \ 'Bool' to conform to 'Sequence'\n    for i < len(l) && j < len(l) {\n      \
    \    ~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if i == j {\n            if sum != 0 {\n    \
    \            return false\n            }\n        } else {\n            if sum\
    \ < 0 {\n                return false\n            }\n        }\n        i++\n\
    \        j++\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk5gdv2zf.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpk5gdv2zf.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i += 1\n        j += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpajj8cu0v/tmpajj8cu0v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72e7c41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72e7938b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72e7938988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72e79377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajj8cu0v                        0x0000559f9c3f3474 <unavailable> + 5236

    5    libc.so.6                          0x00002b72e7e2d460 __libc_start_main +
    245

    6    tmpajj8cu0v                        0x0000559f9c3f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i += 1\n        j += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpy2ajvz1t/tmpy2ajvz1t.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b456fd11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b456fa08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b456fa08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b456fa077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2ajvz1t                        0x000055daadb31474 <unavailable> + 5236

    5    libc.so.6                          0x00002b456fefd460 __libc_start_main +
    245

    6    tmpy2ajvz1t                        0x000055daadb310d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       }\n        if sum < 0 {\n            j++\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc5_fl1hq.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpc5_fl1hq.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpc5_fl1hq.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpc5_fl1hq.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n \
    \           sum = 0\n            j += 1\n        }\n    }\n    return j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpejngtl4j/tmpejngtl4j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0b578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca0b26fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca0b26f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca0b26e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejngtl4j                        0x000055c6fb9997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aca0b764460 __libc_start_main +
    245

    6    tmpejngtl4j                        0x000055c6fb9991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       } else {\n            j++\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff60ve93.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpff60ve93.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpff60ve93.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpff60ve93.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        } else {\n            i += 1\n        }\n        if sum == 0 {\n\
    \            return true\n        }\n    }\n    for _ in 0..<l.count {\n     \
    \   sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            j += 1\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp47k_ljml/tmp47k_ljml.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62361ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae623311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae623311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6233107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47k_ljml                        0x0000560bf32997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae623806460 __libc_start_main +
    245

    6    tmp47k_ljml                        0x0000560bf32991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7n_td84.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpy7n_td84.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ len(l) {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n \
    \       }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    for j < len(l) {\n        sum += l[j]\n        if sum < 0 {\n           \
    \ sum = 0\n        }\n        if sum == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm05kds_0.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < len(l) {\n          ^\n/tmp/tmpm05kds_0.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < len(l) {\n      \
    \    ^~\n           \n/tmp/tmpm05kds_0.swift:28:11: error: expected 'in' after\
    \ for-each pattern\n    for j < len(l) {\n          ^\n/tmp/tmpm05kds_0.swift:28:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < len(l)\
    \ {\n          ^~\n           \n/tmp/tmpm05kds_0.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpm05kds_0.swift:19:13:\
    \ error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n/tmp/tmpm05kds_0.swift:28:11:\
    \ error: '<' is not a prefix unary operator\n    for j < len(l) {\n          ^\n\
    /tmp/tmpm05kds_0.swift:28:13: error: cannot find 'len' in scope\n    for j < len(l)\
    \ {\n            ^~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n            i += 1\n            continue\n        }\n        if sum > 0 {\n\
    \            sum = 0\n            j += 1\n            continue\n        }\n  \
    \      return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp4_jkqqmz/tmp4_jkqqmz.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3b5de3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3b5adab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3b5ada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3b5ad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_jkqqmz                        0x0000564333e6b7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba3b5fcf460 __libc_start_main +
    245

    6    tmp4_jkqqmz                        0x0000564333e6b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if sum >\
    \ 0 {\n            i++\n        }\n    }\n    for x in l {\n        sum += x\n\
    \        if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            j++\n \
    \       }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpomgdycrd.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpomgdycrd.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        } else {\n            i += 1\n        }\n        if sum == 0 {\n\
    \            return false\n        }\n    }\n    for _ in 0..<l.count {\n    \
    \    sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            j += 1\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmplh5lcyse/tmplh5lcyse.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44d57bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44d54b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44d54b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44d54b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh5lcyse                        0x000055bace0057c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b44d59aa460 __libc_start_main +
    245

    6    tmplh5lcyse                        0x000055bace0051a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == len(l)\
    \ {\n            return true\n        }\n        if j == len(l) {\n          \
    \  sum = 0\n        }\n        if sum != 0 {\n            i++\n        }\n   \
    \     if sum != 0 {\n            j++\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpko46_1x8.swift:27:17: error: cannot find 'len' in scope\n     \
    \   if i == len(l) {\n                ^~~\n/tmp/tmpko46_1x8.swift:30:17: error:\
    \ cannot find 'len' in scope\n        if j == len(l) {\n                ^~~\n\
    /tmp/tmpko46_1x8.swift:34:14: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpko46_1x8.swift:37:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7n_td84.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpy7n_td84.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum == 0 {\n            return false\n   \
    \     }\n    }\n    for x in l {\n        sum += x\n        if sum < 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp5c2qjh4u/tmp5c2qjh4u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fddecac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fddbc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fddbc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fddbc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5c2qjh4u                        0x000055e734762474 <unavailable> + 5236

    5    libc.so.6                          0x00002b0fde0b6460 __libc_start_main +
    245

    6    tmp5c2qjh4u                        0x000055e7347620d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i += 1\n        j += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpajj8cu0v/tmpajj8cu0v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72e7c41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72e7938b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72e7938988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72e79377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajj8cu0v                        0x0000559f9c3f3474 <unavailable> + 5236

    5    libc.so.6                          0x00002b72e7e2d460 __libc_start_main +
    245

    6    tmpajj8cu0v                        0x0000559f9c3f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n            i += 1\n        }\n        if sum > 0 {\n            sum = 0\n\
    \            j += 1\n        }\n        if i == j {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmps65ol87j/tmps65ol87j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b5e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b5b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b5b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b5b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps65ol87j                        0x000055f0bd3d77c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae6b6042460 __libc_start_main +
    245

    6    tmps65ol87j                        0x000055f0bd3d71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj7ije3sj.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpj7ije3sj.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpj7ije3sj.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhffwzi7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmprhffwzi7.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        }\n        if sum == 0 {\n            return true\n        }\n  \
    \      i += 1\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n      \
    \  if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n     \
    \       return true\n        }\n        j += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpeiyokt5j/tmpeiyokt5j.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e21c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e21900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e21900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e218ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeiyokt5j                        0x00005643392387c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9e21df5460 __libc_start_main +
    245

    6    tmpeiyokt5j                        0x00005643392381a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        if sum == 0 {\n     \
    \       return false\n        }\n        i++\n        j++\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp43d_fa3d.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp43d_fa3d.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp43d_fa3d.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp43d_fa3d.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ l {\n        sum += i\n        if sum < 0 {\n            sum = 0\n         \
    \   i += 1\n        }\n        if sum > 0 {\n            sum = 0\n           \
    \ j += 1\n        }\n    }\n    return j == i\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp_9bg34c8/tmp_9bg34c8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a5492c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a5189b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a5189988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a51887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9bg34c8                        0x000055b6cfbd5474 <unavailable> + 5236

    5    libc.so.6                          0x00002b07a567e460 __libc_start_main +
    245

    6    tmp_9bg34c8                        0x000055b6cfbd50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsqnth2xq.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpsqnth2xq.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpsqnth2xq.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n\
    \        }\n        if sum == 0 {\n            return true\n        }\n    }\n\
    \    for j < l.count {\n        sum += l[j]\n        if sum < 0 {\n          \
    \  sum = 0\n        }\n        if sum == 0 {\n            return false\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5vkxhqc6.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp5vkxhqc6.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp5vkxhqc6.swift:28:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmp5vkxhqc6.swift:28:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmp5vkxhqc6.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmp5vkxhqc6.swift:28:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0 && len(l) == 0 || sum > 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz8fi1kme.swift:20:24: error: cannot find 'len' in scope\n    return\
    \ sum == 0 && len(l) == 0 || sum > 0\n                       ^~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0 && len(l) == 0 || sum > 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz8fi1kme.swift:20:24: error: cannot find 'len' in scope\n    return\
    \ sum == 0 && len(l) == 0 || sum > 0\n                       ^~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        i += 1\n        sum +=\
    \ l[j]\n        j += 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpamitxc3k.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpamitxc3k.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpamitxc3k.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpamitxc3k.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0 ..< l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum\
    \ = 0\n            i += 1\n            continue\n        }\n        if sum > 0\
    \ {\n            j += 1\n            sum -= l[j]\n            if sum == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpc9w2pwsk/tmpc9w2pwsk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03b1ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03b19e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03b19e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03b19e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9w2pwsk                        0x000055f75b8067c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b03b1eda460 __libc_start_main +
    245

    6    tmpc9w2pwsk                        0x000055f75b8061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum == 0 {\n            return false\n   \
    \     }\n    }\n    for k in l {\n        sum += k\n        if sum < 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpoauip0yv/tmpoauip0yv.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b0c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b0942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b0942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b09417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoauip0yv                        0x000055e841fe8474 <unavailable> + 5236

    5    libc.so.6                          0x00002ab6b0e37460 __libc_start_main +
    245

    6    tmpoauip0yv                        0x000055e841fe80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        i += 1\n        j +=\
    \ 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoa6nuvnt.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpoa6nuvnt.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpoa6nuvnt.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpoa6nuvnt.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n            i += 1\n            continue\n        }\n        if sum > 0 {\n\
    \            sum = 0\n            j += 1\n            continue\n        }\n  \
    \      if i == j {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgd5s_khg/tmpgd5s_khg.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61f36f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61f33eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61f33ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61f33e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgd5s_khg                        0x000055ec741047c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b61f38df460 __libc_start_main +
    245

    6    tmpgd5s_khg                        0x000055ec741041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n            i += 1\n        }\n        if sum > 0 {\n            sum = 0\n\
    \            j += 1\n        }\n        if i == j {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmps65ol87j/tmps65ol87j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b5e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b5b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b5b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b5b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps65ol87j                        0x000055f0bd3d77c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae6b6042460 __libc_start_main +
    245

    6    tmps65ol87j                        0x000055f0bd3d71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        i += 1\n        sum +=\
    \ l[j]\n        j += 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpamitxc3k.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpamitxc3k.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpamitxc3k.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpamitxc3k.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n    }\n    for x\
    \ in l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n      \
    \  }\n        if sum == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp26yp3vy3/tmp26yp3vy3.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeda1329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeda1020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeda1020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeda101f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26yp3vy3                        0x000055a91b82d6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aeda1515460 __libc_start_main +
    245

    6    tmp26yp3vy3                        0x000055a91b82d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n\
    \        }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    for j < l.count {\n        sum += l[j]\n        if sum < 0 {\n          \
    \  sum = 0\n        }\n        if sum == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqljaddw6.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpqljaddw6.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpqljaddw6.swift:28:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpqljaddw6.swift:28:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpqljaddw6.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpqljaddw6.swift:28:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum > 0 {\n            if i == j {\n     \
    \           j++\n                sum = 0\n            } else {\n             \
    \   i++\n                sum = 0\n            }\n        }\n    }\n    return\
    \ i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5p4lvsf5.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                j++\n                 ^~\n/tmp/tmp5p4lvsf5.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      i++\n                 ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if sum >\
    \ 0 {\n            i++\n        }\n        if sum < 0 {\n            j++\n   \
    \     }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8shyztjq.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp8shyztjq.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj7ije3sj.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpj7ije3sj.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpj7ije3sj.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpj7ije3sj.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if j == i\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6igvtqse.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmp6igvtqse.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs\
    \ = 0\n    for i < l.count {\n        sum += l[i]\n        if sum == 0 {\n   \
    \         pairs += 1\n        }\n        if sum < 0 {\n            sum = 0\n \
    \       }\n        if sum > 0 {\n            j = i\n            i = j + 1\n  \
    \      }\n    }\n    return pairs == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj5qxdyr_.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpj5qxdyr_.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpj5qxdyr_.swift:20:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum < 0 {\n            j = j +\
    \ 1\n        } else {\n            i = i + 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeczieaui.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpeczieaui.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpeczieaui.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpeczieaui.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var found\
    \ = false\n    for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n \
    \       if sum == 0 {\n            found = true\n            break\n        }\n\
    \        if sum < 0 {\n            sum *= -1\n        }\n        i += 1\n    \
    \    j += 1\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4icazn3c.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp4icazn3c.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp4icazn3c.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp4icazn3c.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum > 0 {\n            j = i\n  \
    \          sum -= l[i]\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn9_x05ca.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpn9_x05ca.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpn9_x05ca.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       } else {\n            j++\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff60ve93.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpff60ve93.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpff60ve93.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpff60ve93.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n \
    \           sum = 0\n            j += 1\n        }\n    }\n    return j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpejngtl4j/tmpejngtl4j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0b578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca0b26fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca0b26f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca0b26e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejngtl4j                        0x000055c6fb9997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aca0b764460 __libc_start_main +
    245

    6    tmpejngtl4j                        0x000055c6fb9991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if i == l.count\
    \ {\n            break\n        }\n    }\n    for _ in 0..<l.count {\n       \
    \ sum += l[j]\n        j += 1\n        if j == l.count {\n            break\n\
    \        }\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2o8mc956/tmp2o8mc956.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dcff4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dcfc45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dcfc45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dcfc447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o8mc956                        0x000055b1f53177c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6dd013a460 __libc_start_main +
    245

    6    tmp2o8mc956                        0x000055b1f53171a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n\
    \        } else {\n            j = i\n        }\n        if j > 0 && sum == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3eguybg1.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp3eguybg1.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp3eguybg1.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum == 0 {\n            return false\n   \
    \     }\n    }\n    for k in l {\n        sum += k\n        if sum < 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpoauip0yv/tmpoauip0yv.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b0c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b0942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b0942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b09417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoauip0yv                        0x000055e841fe8474 <unavailable> + 5236

    5    libc.so.6                          0x00002ab6b0e37460 __libc_start_main +
    245

    6    tmpoauip0yv                        0x000055e841fe80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n    }\n    for _ in 0..<l.count\
    \ {\n        sum += l[j]\n        j += 1\n    }\n    return sum == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpavkz47rz/tmpavkz47rz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bd9ed1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bd9bc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bd9bc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bd9bc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavkz47rz                        0x0000561aff50a7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9bda0bd460 __libc_start_main +
    245

    6    tmpavkz47rz                        0x0000561aff50a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsqnth2xq.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpsqnth2xq.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpsqnth2xq.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs\
    \ = 0\n    for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n     \
    \   if sum == 0 {\n            pairs += 1\n        }\n        if sum < 0 {\n \
    \           sum = 0\n        }\n        if sum > 0 {\n            j += 1\n   \
    \     } else {\n            i += 1\n        }\n    }\n    return pairs == 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6csx0zz.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpj6csx0zz.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpj6csx0zz.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpj6csx0zz.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n\
    \        }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    for j < l.count {\n        sum += l[j]\n        if sum < 0 {\n          \
    \  sum = 0\n        }\n        if sum == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqljaddw6.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpqljaddw6.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpqljaddw6.swift:28:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpqljaddw6.swift:28:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpqljaddw6.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpqljaddw6.swift:28:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0 || sum == -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpn8k597me/tmpn8k597me.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c8a567c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c8a25eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c8a25e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c8a25d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8k597me                        0x0000558ca8e996f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b2c8a753460 __libc_start_main +
    245

    6    tmpn8k597me                        0x0000558ca8e990d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum == 0 {\n            return false\n   \
    \     }\n    }\n    for k in l {\n        sum += k\n        if sum != 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3iuziqd3/tmp3iuziqd3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f252b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f24fa7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f24fa7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f24fa67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3iuziqd3                        0x000055d67e87c6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b4f2549c460 __libc_start_main +
    245

    6    tmp3iuziqd3                        0x000055d67e87c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in\
    \ l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n    }\n    for x\
    \ in l {\n        sum += x\n        if sum < 0 {\n            sum = 0\n      \
    \  }\n        if sum == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp26yp3vy3/tmp26yp3vy3.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeda1329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeda1020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeda1020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeda101f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26yp3vy3                        0x000055a91b82d6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aeda1515460 __libc_start_main +
    245

    6    tmp26yp3vy3                        0x000055a91b82d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i++\n        j++\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7n_td84.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpy7n_td84.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n         \
    \   i += 1\n        }\n        if sum > 0 {\n            sum = 0\n           \
    \ j += 1\n        }\n    }\n    return i != j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpru41k0ti/tmpru41k0ti.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0cbfd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0cbcceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0cbcce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0cbccd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru41k0ti                        0x000055e94438c474 <unavailable> + 5236

    5    libc.so.6                          0x00002af0cc1c3460 __libc_start_main +
    245

    6    tmpru41k0ti                        0x000055e94438c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var result\
    \ = false\n    for _ in 0..<l.count {\n        sum += l[i]\n        if sum < 0\
    \ {\n            sum = 0\n        } else {\n            i += 1\n        }\n  \
    \      if sum == 0 {\n            result = true\n            break\n        }\n\
    \    }\n    for _ in 0..<l.count {\n        sum += l[j]\n        if sum < 0 {\n\
    \            sum = 0\n        } else {\n            j += 1\n        }\n      \
    \  if sum == 0 {\n            result = true\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmprqbhyzut/tmprqbhyzut.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e070cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e06dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e06dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e06dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqbhyzut                        0x0000562359d637c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b8e072ba460 __libc_start_main +
    245

    6    tmprqbhyzut                        0x0000562359d631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n            i += 1\n        }\n        if sum > 0 {\n            sum = 0\n\
    \            j += 1\n        }\n        if i == j {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmps65ol87j/tmps65ol87j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b5e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b5b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b5b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b5b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps65ol87j                        0x000055f0bd3d77c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae6b6042460 __libc_start_main +
    245

    6    tmps65ol87j                        0x000055f0bd3d71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhffwzi7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmprhffwzi7.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if i == l.count\
    \ {\n            sum -= l[j]\n            j += 1\n            if j == l.count\
    \ {\n                return sum == 0\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpxgqq7den/tmpxgqq7den.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f8466c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f815db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f815d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f815c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgqq7den                        0x000055f7e62a87c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ab9f8652460 __libc_start_main +
    245

    6    tmpxgqq7den                        0x000055f7e62a81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum > 0 {\n            i++\n            sum -= l[i]\n        }\n \
    \       if sum > 0 {\n            j++\n            sum -= l[j]\n        }\n  \
    \  }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcwo5_hec.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpcwo5_hec.swift:29:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n \
    \           sum = 0\n            j += 1\n        }\n    }\n    return j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpejngtl4j/tmpejngtl4j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0b578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca0b26fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca0b26f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca0b26e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejngtl4j                        0x000055c6fb9997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aca0b764460 __libc_start_main +
    245

    6    tmpejngtl4j                        0x000055c6fb9991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        }\n        if sum == 0 {\n            return false\n        }\n \
    \       i += 1\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n     \
    \   if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n    \
    \        return false\n        }\n        j += 1\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyv708qfj/tmpyv708qfj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad623273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad622f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad622f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad622f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv708qfj                        0x000056505dace544 <unavailable> + 5444

    5    libc.so.6                          0x00002ad62345f460 __libc_start_main +
    245

    6    tmpyv708qfj                        0x000056505dace1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if i == j\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpnbsddpa6/tmpnbsddpa6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b9b48ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b9b181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b9b181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b9b1807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbsddpa6                        0x00005607f9f15474 <unavailable> + 5236

    5    libc.so.6                          0x00002b9b9b676460 __libc_start_main +
    245

    6    tmpnbsddpa6                        0x00005607f9f150d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for j < l.count {\n        sum += l[j]\n        if sum\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsqnth2xq.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpsqnth2xq.swift:25:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmpsqnth2xq.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmpsqnth2xq.swift:25:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       } else {\n            j++\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff60ve93.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpff60ve93.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpff60ve93.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpff60ve93.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in\
    \ l {\n        sum += k\n        if sum == 0 {\n            return false\n   \
    \     }\n    }\n    for k in l {\n        sum += k\n        if sum != 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2rqv6m_j/tmp2rqv6m_j.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d37262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d36f59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d36f59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d36f587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rqv6m_j                        0x000055cd78f31474 <unavailable> + 5236

    5    libc.so.6                          0x00002b1d3744e460 __libc_start_main +
    245

    6    tmp2rqv6m_j                        0x000055cd78f310d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028708
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        }\n        if sum > 0 {\n            i++\n \
    \       } else {\n            j++\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff60ve93.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpff60ve93.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpff60ve93.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpff60ve93.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in\
    \ 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        } else {\n            i += 1\n        }\n        if sum == 0 {\n\
    \            return true\n        }\n    }\n    for _ in 0..<l.count {\n     \
    \   sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            j += 1\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp47k_ljml/tmp47k_ljml.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62361ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae623311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae623311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6233107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47k_ljml                        0x0000560bf32997c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae623806460 __libc_start_main +
    245

    6    tmp47k_ljml                        0x0000560bf32991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028707
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs\
    \ = 0\n    for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n     \
    \   if sum == 0 {\n            pairs += 1\n        }\n        if sum > 0 {\n \
    \           i += 1\n        }\n        if sum < 0 {\n            j += 1\n    \
    \    }\n    }\n    return pairs == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt43tm0cu.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpt43tm0cu.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpt43tm0cu.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpt43tm0cu.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvxsesp2r/tmpvxsesp2r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca6e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca6b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca6b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca6b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxsesp2r                        0x000055a8d26516f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3ca701b460 __libc_start_main +
    245

    6    tmpvxsesp2r                        0x000055a8d26510d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820733
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ l.count && j < l.count {\n        sum += l[i]\n        i += 1\n        j +=\
    \ 1\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoa6nuvnt.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpoa6nuvnt.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpoa6nuvnt.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpoa6nuvnt.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028707
