language: swift
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result += char.lowercased()\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0pt7k514.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp0pt7k514.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      let isUpper = Character(char).isUpper\n        let isLower = Character(char).isLower\n\
    \        \n        if isLetter {\n            if isUpper {\n                result\
    \ += String(Character(char).uppercased())\n            } else {\n            \
    \    result += String(Character(char).lowercased())\n            }\n        }\
    \ else {\n            result += char\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmph915jh9l.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph915jh9l.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmph915jh9l.swift:18:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let isUpper = Character(char).isUpper\n                   \
    \             ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmph915jh9l.swift:18:39: error: value of type 'Character' has no member\
    \ 'isUpper'\n        let isUpper = Character(char).isUpper\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmph915jh9l.swift:19:33: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n        let isLower = Character(char).isLower\n\
    \                                ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmph915jh9l.swift:19:39: error: value of type 'Character' has no member\
    \ 'isLower'\n        let isLower = Character(char).isLower\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmph915jh9l.swift:23:44: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n                result += String(Character(char).uppercased())\n\
    \                                           ^\n                              \
    \             extendedGraphemeClusterLiteral: \n/tmp/tmph915jh"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char\
    \ {\n            case \"A\":\n                result += \"a\"\n            case\
    \ \"B\":\n                result += \"b\"\n            case \"C\":\n         \
    \       result += \"c\"\n            case \"D\":\n                result += \"\
    d\"\n            case \"E\":\n                result += \"e\"\n            case\
    \ \"F\":\n                result += \"f\"\n            case \"G\":\n         \
    \       result += \"g\"\n            case \"H\":\n                result += \"\
    h\"\n            case \"I\":\n                result += \"i\"\n            case\
    \ \"J\":\n                result += \"j\"\n            case \"K\":\n         \
    \       result += \"k\"\n            case \"L\":\n                result += \"\
    l\"\n            case \"M\":\n                result += \"m\"\n            case\
    \ \"N\":\n                result += \"n\"\n            case \"O\":\n         \
    \       result += \"o\"\n            case \"P\":\n                result += \"\
    p\"\n            case \"Q\":\n                result += \"q\"\n            case\
    \ \"R\":\n                result += \"r\"\n            case \"S\":\n         \
    \       result += \"s\"\n            case \"T\":\n                result += \"\
    t\"\n            case \"U\":\n                result += \"u\"\n            case\
    \ \"V\":\n                result += \"v\"\n            case \"W\":\n         \
    \       result += \"w\"\n            case \"X\":\n                result += \"\
    x\"\n            case \"Y\":\n                result += \"y\"\n            case\
    \ \"Z\":\n                result += \"z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrewcaxu.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfrewcaxu.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmpfrewcaxu.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpfrewcaxu.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\": result = \"A\" + result\n\
    \        case \"b\": result = \"B\" + result\n        case \"c\": result = \"\
    C\" + result\n        case \"d\": result = \"D\" + result\n        case \"e\"\
    : result = \"E\" + result\n        case \"f\": result = \"F\" + result\n     \
    \   case \"g\": result = \"G\" + result\n        case \"h\": result = \"H\" +\
    \ result\n        case \"i\": result = \"I\" + result\n        case \"j\": result\
    \ = \"J\" + result\n        case \"k\": result = \"K\" + result\n        case\
    \ \"l\": result = \"L\" + result\n        case \"m\": result = \"M\" + result\n\
    \        case \"n\": result = \"N\" + result\n        case \"o\": result = \"\
    O\" + result\n        case \"p\": result = \"P\" + result\n        case \"q\"\
    : result = \"Q\" + result\n        case \"r\": result = \"R\" + result\n     \
    \   case \"s\": result = \"S\" + result\n        case \"t\": result = \"T\" +\
    \ result\n        case \"u\": result = \"U\" + result\n        case \"v\": result\
    \ = \"V\" + result\n        case \"w\": result = \"W\" + result\n        case\
    \ \"x\": result = \"X\" + result\n        case \"y\": result = \"Y\" + result\n\
    \        case \"z\": result = \"Z\" + result\n        default: result = char +\
    \ result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfx4gtsl3.swift:44:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        default: result = char + result\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result = char\
    \ + result\n        default:\n            result = char + result\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpektupyaf.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpektupyaf.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += String(char.lowercased())\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprgrnf_k6.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmprgrnf_k6.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    var i = 0\n    for c in s {\n        if\
    \ c.isLetter {\n            result += String(c).uppercased()\n        } else {\n\
    \            result += String(c)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpw6j5opyn/tmpw6j5opyn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d709d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d706ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d706cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d706cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6j5opyn                        0x0000561bd936f557 <unavailable> + 5463

    5    libc.so.6                          0x00002b3d70bc1460 __libc_start_main +
    245

    6    tmpw6j5opyn                        0x0000561bd936f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    p\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"r\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprxz0ipq3.swift:18:25: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            switch char.lowercaseString {\n             \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmprxz0ipq3.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmprxz0ipq3.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result += String(char.lowercased())\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzqzb_tic.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpzqzb_tic.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"a\": letter = \"A\"; break\n            case \"b\": letter\
    \ = \"B\"; break\n            case \"c\": letter = \"C\"; break\n            case\
    \ \"d\": letter = \"D\"; break\n            case \"e\": letter = \"E\"; break\n\
    \            case \"f\": letter = \"F\"; break\n            case \"g\": letter\
    \ = \"G\"; break\n            case \"h\": letter = \"H\"; break\n            case\
    \ \"i\": letter = \"I\"; break\n            case \"j\": letter = \"J\"; break\n\
    \            case \"k\": letter = \"K\"; break\n            case \"l\": letter\
    \ = \"L\"; break\n            case \"m\": letter = \"M\"; break\n            case\
    \ \"n\": letter = \"N\"; break\n            case \"o\": letter = \"O\"; break\n\
    \            case \"p\": letter = \"P\"; break\n            case \"q\": letter\
    \ = \"Q\"; break\n            case \"r\": letter = \"R\"; break\n            case\
    \ \"s\": letter = \"S\"; break\n            case \"t\": letter = \"T\"; break\n\
    \            case \"u\": letter = \"U\"; break\n            case \"v\": letter\
    \ = \"V\"; break\n            case \"w\": letter = \"W\"; break\n            case\
    \ \"x\": letter = \"X\"; break\n            case \"y\": letter = \"Y\"; break\n\
    \            case \"z\": letter = \"Z\"; break\n            default: letter =\
    \ letter\n            }\n        }\n        result += letter\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpu6gvq77v.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmpu6gvq77v.swift:19:23: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            case \"a\": letter = \"\
    A\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:20:23: error:\
    \ cannot assign to value: 'letter' is a 'let' constant\n            case \"b\"\
    : letter = \"B\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:21:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"c\": letter = \"C\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:22:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"d\": letter = \"D\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:23:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"e\": letter = \"E\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:24:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"f\": letter = \"F\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:25:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"g\": letter = \"G\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:26:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"h\": letter = \"H\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:27:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"i\": letter = \"I\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:28:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"j\": letter = \"J\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:29:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case\
    \ \"k\": letter = \"K\"; break\n                      ^~~~~~\n/tmp/tmpu6gvq77v.swift:30:23:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            case "
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            switch c.lowercaseString {\n\
    \            case \"a\": result += \"B\"; break\n            case \"b\": result\
    \ += \"a\"; break\n            case \"c\": result += \"D\"; break\n          \
    \  case \"d\": result += \"c\"; break\n            case \"e\": result += \"F\"\
    ; break\n            case \"f\": result += \"e\"; break\n            case \"g\"\
    : result += \"H\"; break\n            case \"h\": result += \"g\"; break\n   \
    \         case \"i\": result += \"J\"; break\n            case \"j\": result +=\
    \ \"i\"; break\n            case \"k\": result += \"L\"; break\n            case\
    \ \"l\": result += \"k\"; break\n            case \"m\": result += \"N\"; break\n\
    \            case \"n\": result += \"m\"; break\n            case \"o\": result\
    \ += \"P\"; break\n            case \"p\": result += \"o\"; break\n          \
    \  case \"q\": result += \"R\"; break\n            case \"r\": result += \"q\"\
    ; break\n            case \"s\": result += \"T\"; break\n            case \"t\"\
    : result += \"s\"; break\n            case \"u\": result += \"V\"; break\n   \
    \         case \"v\": result += \"u\"; break\n            case \"w\": result +=\
    \ \"X\"; break\n            case \"x\": result += \"w\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"z\"; break\n\
    \            default: result += \"\\(c)\"\n            }\n        } else {\n \
    \           result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6_xpq_fw.swift:18:22: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            switch c.lowercaseString {\n                \
    \   ~ ^~~~~~~~~~~~~~~\n/tmp/tmp6_xpq_fw.swift:48:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ c\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result = char\
    \ + result\n        default:\n            result = char + result\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpektupyaf.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpektupyaf.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n            result += c\n        } else {\n            result += char\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpa3fi3wdg.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa3fi3wdg.swift:17:20:\
    \ error: cannot find 'Char' in scope\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                   ^~~~\n/tmp/tmpa3fi3wdg.swift:17:39: error: no exact matches\
    \ in call to initializer \n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:17:39: note:\
    \ found candidate with type '(Float16) -> UInt32'\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:17:39: note:\
    \ found candidate with type '(Float) -> UInt32'\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:17:39: note:\
    \ found candidate with type '(Double) -> UInt32'\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:17:39: note:\
    \ found candidate with type '(Float80) -> UInt32'\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:17:39: note:\
    \ found candidate with type '(Builtin.Int32) -> UInt32'\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:17:39: note:\
    \ found candidate with type '(Unicode.Scalar) -> UInt32'\n        if let c = Char(UnicodeScalar(UInt32(char))).lowercased()\
    \ {\n                                      ^\n/tmp/tmpa3fi3wdg.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upperCase = char.uppercased()\n\
    \            let lowerCase = char.lowercased()\n            if upperCase != lowerCase\
    \ {\n                result += upperCase\n            } else {\n             \
    \   result += lowerCase\n            }\n        } else {\n            result +=\
    \ char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxp0zdjn6.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpxp0zdjn6.swift:26:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1).capitalized }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmptvb452c1.swift:15:54: error: value of type 'String' has no member\
    \ 'capitalized'\n    return s.characters.reduce(\"\") { $0 + String($1).capitalized\
    \ }\n                                          ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        switch letter {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpyy79vhhs.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\": result += \"A\"; break\n\
    \        case \"b\": result += \"B\"; break\n        case \"c\": result += \"\
    C\"; break\n        case \"d\": result += \"D\"; break\n        case \"e\": result\
    \ += \"E\"; break\n        case \"f\": result += \"F\"; break\n        case \"\
    g\": result += \"G\"; break\n        case \"h\": result += \"H\"; break\n    \
    \    case \"i\": result += \"I\"; break\n        case \"j\": result += \"J\";\
    \ break\n        case \"k\": result += \"K\"; break\n        case \"l\": result\
    \ += \"L\"; break\n        case \"m\": result += \"M\"; break\n        case \"\
    n\": result += \"N\"; break\n        case \"o\": result += \"O\"; break\n    \
    \    case \"p\": result += \"P\"; break\n        case \"q\": result += \"Q\";\
    \ break\n        case \"r\": result += \"R\"; break\n        case \"s\": result\
    \ += \"S\"; break\n        case \"t\": result += \"T\"; break\n        case \"\
    u\": result += \"U\"; break\n        case \"v\": result += \"V\"; break\n    \
    \    case \"w\": result += \"W\"; break\n        case \"x\": result += \"X\";\
    \ break\n        case \"y\": result += \"Y\"; break\n        case \"z\": result\
    \ += \"Z\"; break\n        default: result += char\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpdlgqztrs.swift:44:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        default: result += char\n      \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u6ozy1t.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp1u6ozy1t.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmp1u6ozy1t.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmp1u6ozy1t.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmp1u6ozy1t.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"B\"; break\n            case \"b\": result\
    \ += \"a\"; break\n            case \"c\": result += \"D\"; break\n          \
    \  case \"d\": result += \"c\"; break\n            case \"e\": result += \"F\"\
    ; break\n            case \"f\": result += \"e\"; break\n            case \"g\"\
    : result += \"H\"; break\n            case \"h\": result += \"g\"; break\n   \
    \         case \"i\": result += \"J\"; break\n            case \"j\": result +=\
    \ \"i\"; break\n            case \"k\": result += \"L\"; break\n            case\
    \ \"l\": result += \"k\"; break\n            case \"m\": result += \"N\"; break\n\
    \            case \"n\": result += \"m\"; break\n            case \"o\": result\
    \ += \"P\"; break\n            case \"p\": result += \"o\"; break\n          \
    \  case \"q\": result += \"R\"; break\n            case \"r\": result += \"q\"\
    ; break\n            case \"s\": result += \"T\"; break\n            case \"t\"\
    : result += \"s\"; break\n            case \"u\": result += \"V\"; break\n   \
    \         case \"v\": result += \"u\"; break\n            case \"w\": result +=\
    \ \"X\"; break\n            case \"x\": result += \"w\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"z\"; break\n\
    \            default: result += \"\\(char)\"; break\n            }\n        }\
    \ else {\n            result += char\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpaisvctpe.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpaisvctpe.swift:48:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result += String(c).uppercased()\n        } else {\n            result\
    \ += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprvkq1z_5/tmprvkq1z_5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd7dd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd7ac9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd7ac9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd7ac87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvkq1z_5                        0x000055f93d486557 <unavailable> + 5463

    5    libc.so.6                          0x00002b7bd7fbe460 __libc_start_main +
    245

    6    tmprvkq1z_5                        0x000055f93d486199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6moqol9t.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp6moqol9t.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp6moqol9t.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp6moqol9t.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp6moqol9t.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp6moqol9t.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp6moqol9t.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp6moqol9t.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp6moqol9t.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp6moqol9t.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp6moqol9t.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp6moqol9t.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp6moqol9t.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp6moqol9t.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp6moqol9t.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp6moqol9t.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"_\":\n        case \"$\":\n    \
    \    case \"@\":\n        case \"#\":\n        case \"+\":\n        case \"-\"\
    :\n        case \"=\":\n        case \"%\":\n        case \"*\":\n        case\
    \ \"/\":\n        case \"(\":\n        case \")\":\n        case \"[\":\n    \
    \    case \"]\":\n        case \"{\":\n        case \"}\":\n        case \"<\"\
    :\n        case \">\":\n        case \"|\":\n        case \"&\":\n        case\
    \ \"^\":\n        case \"~\":\n        case \"`\":\n        case \"!\":\n    \
    \    case \"=\":\n        case \"<=\":\n        case \">=\":\n        case \"\
    <\":\n        case \">\":\n        case \"!\":\n        case \"?\":\n        case\
    \ \"{\":\n        case \"}\":\n        case \"[\":\n        case \"]\":\n    \
    \    case \"(\":\n        case \")\":\n        case \"+\":\n        case \"-\"\
    :\n        case \"*\":\n        case \"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvy598lci.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpvy598lci.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpvy598lci.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpl79xnou3.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpl79xnou3.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpl79xnou3.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpl79xnou3.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpl79xnou3.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpl79xnou3.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpl79xnou3.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpl79xnou3.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpl79xnou3.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpl79xnou3.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpl79xnou3.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpl79xnou3.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpl79xnou3.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpl79xnou3.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpl79xnou3.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpl79xnou3.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            let upper =\
    \ char.uppercaseString\n            let lower = char.lowercaseString\n       \
    \     if upper != nil {\n                result += upper!\n            } else\
    \ {\n                result += lower!\n            }\n        } else {\n     \
    \       result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpjefrq8di.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjefrq8di.swift:18:30:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   let upper = char.uppercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpjefrq8di.swift:19:30: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            let lower = char.lowercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpjefrq8di.swift:26:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char.caseInsensitiveCompare(Character(\"\
    A\")) {\n            case .orderedAscending:\n                result += Character(\"\
    a\")\n            case .orderedSame:\n                result += char\n       \
    \     case .orderedDescending:\n                result += Character(\"A\")\n \
    \           }\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp91hqzxa0.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp91hqzxa0.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmp91hqzxa0.swift:18:25:\
    \ error: value of type 'Character' has no member 'caseInsensitiveCompare'\n  \
    \          switch char.caseInsensitiveCompare(Character(\"A\")) {\n          \
    \         ~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp91hqzxa0.swift:20:27: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           result += Character(\"a\")\n                          ^\n/tmp/tmp91hqzxa0.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmp91hqzxa0.swift:24:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += Character(\"A\")\n                          ^\n/tmp/tmp91hqzxa0.swift:27:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            let upper =\
    \ char.uppercaseString\n            let lower = char.lowercaseString\n       \
    \     if upper != \"\" {\n                result += upper\n            } else\
    \ {\n                result += lower\n            }\n        } else {\n      \
    \      result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpl5_bdn5n.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpl5_bdn5n.swift:18:30:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   let upper = char.uppercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpl5_bdn5n.swift:19:30: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            let lower = char.lowercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpl5_bdn5n.swift:26:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"a\": result = \"A\"; break\n            case \"b\": result = \"\
    b\"; break\n            case \"c\": result = \"C\"; break\n            case \"\
    d\": result = \"d\"; break\n            case \"e\": result = \"E\"; break\n  \
    \          case \"f\": result = \"f\"; break\n            case \"g\": result =\
    \ \"G\"; break\n            case \"h\": result = \"H\"; break\n            case\
    \ \"i\": result = \"I\"; break\n            case \"j\": result = \"j\"; break\n\
    \            case \"k\": result = \"K\"; break\n            case \"l\": result\
    \ = \"L\"; break\n            case \"m\": result = \"M\"; break\n            case\
    \ \"n\": result = \"N\"; break\n            case \"o\": result = \"O\"; break\n\
    \            case \"p\": result = \"P\"; break\n            case \"q\": result\
    \ = \"Q\"; break\n            case \"r\": result = \"R\"; break\n            case\
    \ \"s\": result = \"S\"; break\n            case \"t\": result = \"T\"; break\n\
    \            case \"u\": result = \"U\"; break\n            case \"v\": result\
    \ = \"V\"; break\n            case \"w\": result = \"W\"; break\n            case\
    \ \"x\": result = \"X\"; break\n            case \"y\": result = \"Y\"; break\n\
    \            case \"z\": result = \"Z\"; break\n            default: result =\
    \ char\n            }\n        } else {\n            result = char\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2ln85afq.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp2ln85afq.swift:45:31: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            default: result = char\n \
    \                             ^~~~\n/tmp/tmp2ln85afq.swift:48:22: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            result = char\n\
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbn5i2lc4.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbn5i2lc4.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   switch char.lowercaseString {\n                   ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpbn5i2lc4.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpbn5i2lc4.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1qqgo6lt.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp1qqgo6lt.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp1qqgo6lt.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp1qqgo6lt.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp1qqgo6lt.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp1qqgo6lt.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp1qqgo6lt.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp1qqgo6lt.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp1qqgo6lt.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp1qqgo6lt.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp1qqgo6lt.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp1qqgo6lt.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp1qqgo6lt.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp1qqgo6lt.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp1qqgo6lt.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp1qqgo6lt.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"d\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"f\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"m\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpug60gryq.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            switch c.caseInsensitiveCompare(\"A\") { //case insensitive compare\n\
    \            case .orderedSame, .orderedAscending:\n                result +=\
    \ \"A\"\n            case .orderedDescending:\n                result += \"a\"\
    \n            case .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .ordered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpjakf5bp6.swift:26:2070: error: expected ':' after 'case'\n    \
    \        case .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame, .orderedSame,\
    \ .orderedSame, .orderedSame, .orderedSame, .order"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let lower = char.lowercaseString\n\
    \            let upper = char.uppercaseString\n            if lower != char {\n\
    \                result += upper\n            } else {\n                result\
    \ += lower\n            }\n        } else {\n            result += char\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4_vmk9ji.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp4_vmk9ji.swift:18:30: error: value of type 'Character'\
    \ has no member 'lowercaseString'\n            let lower = char.lowercaseString\n\
    \                        ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp4_vmk9ji.swift:19:30: error:\
    \ value of type 'Character' has no member 'uppercaseString'\n            let upper\
    \ = char.uppercaseString\n                        ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp4_vmk9ji.swift:26:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0djwlp3u.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp0djwlp3u.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp0djwlp3u.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp0djwlp3u.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp0djwlp3u.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp0djwlp3u.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp0djwlp3u.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp0djwlp3u.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp0djwlp3u.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp0djwlp3u.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp0djwlp3u.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp0djwlp3u.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp0djwlp3u.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp0djwlp3u.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp0djwlp3u.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp0djwlp3u.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case .lowercase:\n  \
    \          result += String(char.uppercase)\n        case .uppercase:\n      \
    \      result += String(char.lowercase)\n        default:\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo53qcz8t.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo53qcz8t.swift:18:15:\
    \ error: type 'Character' has no member 'lowercase'\n        case .lowercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpo53qcz8t.swift:20:15: error: type 'Character'\
    \ has no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpo53qcz8t.swift:19:35: error: value of type 'Character' has no member 'uppercase'\n\
    \            result += String(char.uppercase)\n                             ~~~~\
    \ ^~~~~~~~~\n/tmp/tmpo53qcz8t.swift:21:35: error: value of type 'Character' has\
    \ no member 'lowercase'\n            result += String(char.lowercase)\n      \
    \                       ~~~~ ^~~~~~~~~\n/tmp/tmpo53qcz8t.swift:23:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        switch letter {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpyy79vhhs.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            let upperLetter =\
    \ letter.uppercased()\n            let lowerLetter = letter.lowercased()\n   \
    \         if upperLetter != letter {\n                result += upperLetter\n\
    \            } else {\n                result += lowerLetter\n            }\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7rp8s5pq.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmp7rp8s5pq.swift:20:31: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            if\
    \ upperLetter != letter {\n                              ^\n/tmp/tmp7rp8s5pq.swift:26:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upperCaseChar = char.uppercased()\n\
    \            if let index = result.index(of: upperCaseChar) {\n              \
    \  result.remove(at: index)\n                result.append(upperCaseChar)\n  \
    \          } else {\n                result.append(char)\n            }\n    \
    \    } else {\n            result.append(char)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp18tmx5ci.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp18tmx5ci.swift:19:45: error: cannot convert value\
    \ of type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \            if let index = result.index(of: upperCaseChar) {\n              \
    \                              ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      let isUpper = Character(char).isUpper\n        let isLower = Character(char).isLower\n\
    \        \n        if isLetter {\n            if isUpper {\n                result\
    \ += Character(char).uppercaseString\n            } else if isLower {\n      \
    \          result += Character(char).lowercaseString\n            } else {\n \
    \               result += char\n            }\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpm8vg76n0.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm8vg76n0.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmpm8vg76n0.swift:18:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let isUpper = Character(char).isUpper\n                   \
    \             ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpm8vg76n0.swift:18:39: error: value of type 'Character' has no member\
    \ 'isUpper'\n        let isUpper = Character(char).isUpper\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpm8vg76n0.swift:19:33: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n        let isLower = Character(char).isLower\n\
    \                                ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpm8vg76n0.swift:19:39: error: value of type 'Character' has no member\
    \ 'isLower'\n        let isLower = Character(char).isLower\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpm8vg76n0.swift:23:37: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n                result += Character(char).uppercaseString\n\
    \                                    ^\n                                    extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpm8vg76n0.swift:23:43: err"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1qqgo6lt.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp1qqgo6lt.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp1qqgo6lt.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp1qqgo6lt.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp1qqgo6lt.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp1qqgo6lt.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp1qqgo6lt.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp1qqgo6lt.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp1qqgo6lt.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp1qqgo6lt.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp1qqgo6lt.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp1qqgo6lt.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp1qqgo6lt.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp1qqgo6lt.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp1qqgo6lt.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp1qqgo6lt.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char.lowercaseString\n            }\n        } else {\n       \
    \     result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpclc46xay.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpclc46xay.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   switch char.lowercaseString {\n                   ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpclc46xay.swift:72:32:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       result += char.lowercaseString\n                          ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpclc46xay.swift:75:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter {\n            switch letter {\n \
    \           case \"A\":\n                result += \"a\"\n            case \"\
    B\":\n                result += \"b\"\n            case \"C\":\n             \
    \   result += \"c\"\n            case \"D\":\n                result += \"d\"\n\
    \            case \"E\":\n                result += \"e\"\n            case \"\
    F\":\n                result += \"f\"\n            case \"G\":\n             \
    \   result += \"g\"\n            case \"H\":\n                result += \"h\"\n\
    \            case \"I\":\n                result += \"i\"\n            case \"\
    J\":\n                result += \"j\"\n            case \"K\":\n             \
    \   result += \"k\"\n            case \"L\":\n                result += \"l\"\n\
    \            case \"M\":\n                result += \"m\"\n            case \"\
    N\":\n                result += \"n\"\n            case \"O\":\n             \
    \   result += \"o\"\n            case \"P\":\n                result += \"p\"\n\
    \            case \"Q\":\n                result += \"q\"\n            case \"\
    R\":\n                result += \"r\"\n            case \"S\":\n             \
    \   result += \"s\"\n            case \"T\":\n                result += \"t\"\n\
    \            case \"U\":\n                result += \"u\"\n            case \"\
    V\":\n                result += \"v\"\n            case \"W\":\n             \
    \   result += \"w\"\n            case \"X\":\n                result += \"x\"\n\
    \            case \"Y\":\n                result += \"y\"\n            case \"\
    Z\":\n                result += \"z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6f06dmvw.swift:72:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += letter\n     \
    \                     ^\n/tmp/tmp6f06dmvw.swift:75:23: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            result +=\
    \ letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let upper = char.uppercased()\n        let lower\
    \ = char.lowercased()\n        if upper != nil {\n            result += upper!\n\
    \        } else if lower != nil {\n            result += lower!\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_xz8sjdr.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_xz8sjdr.swift:19:18:\
    \ warning: comparing non-optional value of type 'String' to 'nil' always returns\
    \ true\n        if upper != nil {\n           ~~~~~ ^  ~~~\n/tmp/tmp_xz8sjdr.swift:20:28:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \ result += upper!\n                      ~~~~~^\n                           \n\
    /tmp/tmp_xz8sjdr.swift:21:25: warning: comparing non-optional value of type 'String'\
    \ to 'nil' always returns true\n        } else if lower != nil {\n           \
    \       ~~~~~ ^  ~~~\n/tmp/tmp_xz8sjdr.swift:22:28: error: cannot force unwrap\
    \ value of non-optional type 'String'\n            result += lower!\n        \
    \              ~~~~~^\n                           \n/tmp/tmp_xz8sjdr.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upperCaseChar = char.uppercased()\n\
    \            let lowerCaseChar = char.lowercased()\n            if char == upperCaseChar\
    \ {\n                result += lowerCaseChar\n            } else {\n         \
    \       result += upperCaseChar\n            }\n        } else {\n           \
    \ result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2loh2w6s.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp2loh2w6s.swift:20:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n           \
    \ if char == upperCaseChar {\n               ~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp2loh2w6s.swift:20:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char == upperCaseChar\
    \ {\n                    ^\n/tmp/tmp2loh2w6s.swift:26:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"j\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    p\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"r\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp8bx2lm69.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp8bx2lm69.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmp8bx2lm69.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"B\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp74gg_k0e.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp74gg_k0e.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp74gg_k0e.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp74gg_k0e.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp74gg_k0e.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp74gg_k0e.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp74gg_k0e.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp74gg_k0e.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp74gg_k0e.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp74gg_k0e.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp74gg_k0e.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp74gg_k0e.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp74gg_k0e.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp74gg_k0e.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp74gg_k0e.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp74gg_k0e.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s.characters {\n        if let c = c.unicodeScalars.first {\n         \
    \   if let upperCase = c.uppercase {\n                result += upperCase\n  \
    \          } else {\n                result += c\n            }\n        } else\
    \ {\n            result += c\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7w_14pqn.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7w_14pqn.swift:18:34:\
    \ error: value of type 'Unicode.Scalar' has no member 'uppercase'\n          \
    \  if let upperCase = c.uppercase {\n                               ~ ^~~~~~~~~\n\
    /tmp/tmp7w_14pqn.swift:21:24: error: operator function '+=' requires that 'Unicode.Scalar'\
    \ conform to 'Sequence'\n                result += c\n                       ^\n\
    Swift.RangeReplaceableCollection:4:35: note: where 'Other' = 'Unicode.Scalar'\n\
    \    @inlinable public static func += <Other>(lhs: inout Self, rhs: Other) where\
    \ Other : Sequence, Self.Element == Other.Element\n                          \
    \        ^\n/tmp/tmp7w_14pqn.swift:24:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6moqol9t.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp6moqol9t.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp6moqol9t.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp6moqol9t.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp6moqol9t.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp6moqol9t.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp6moqol9t.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp6moqol9t.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp6moqol9t.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp6moqol9t.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp6moqol9t.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp6moqol9t.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp6moqol9t.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp6moqol9t.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp6moqol9t.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp6moqol9t.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            switch c.caseInsensitiveCompare(\"\
    A\") {\n            case .orderedSame, .orderedAscending:\n                result\
    \ += \"A\"\n            case .orderedDescending:\n                result += \"\
    a\"\n            }\n        } else {\n            result += c\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp959_q826.swift:18:22: error: value of type 'Character' has no member\
    \ 'caseInsensitiveCompare'\n            switch c.caseInsensitiveCompare(\"A\"\
    ) {\n                   ~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp959_q826.swift:25:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6moqol9t.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp6moqol9t.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp6moqol9t.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp6moqol9t.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp6moqol9t.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp6moqol9t.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp6moqol9t.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp6moqol9t.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp6moqol9t.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp6moqol9t.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp6moqol9t.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp6moqol9t.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp6moqol9t.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp6moqol9t.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp6moqol9t.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp6moqol9t.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char\
    \ {\n            case \"A\":\n                result += \"a\"\n            case\
    \ \"B\":\n                result += \"b\"\n            case \"C\":\n         \
    \       result += \"c\"\n            case \"D\":\n                result += \"\
    d\"\n            case \"E\":\n                result += \"e\"\n            case\
    \ \"F\":\n                result += \"f\"\n            case \"G\":\n         \
    \       result += \"g\"\n            case \"H\":\n                result += \"\
    h\"\n            case \"I\":\n                result += \"i\"\n            case\
    \ \"J\":\n                result += \"j\"\n            case \"K\":\n         \
    \       result += \"k\"\n            case \"L\":\n                result += \"\
    l\"\n            case \"M\":\n                result += \"m\"\n            case\
    \ \"N\":\n                result += \"n\"\n            case \"O\":\n         \
    \       result += \"o\"\n            case \"P\":\n                result += \"\
    p\"\n            case \"Q\":\n                result += \"q\"\n            case\
    \ \"R\":\n                result += \"r\"\n            case \"S\":\n         \
    \       result += \"s\"\n            case \"T\":\n                result += \"\
    t\"\n            case \"U\":\n                result += \"u\"\n            case\
    \ \"V\":\n                result += \"v\"\n            case \"W\":\n         \
    \       result += \"w\"\n            case \"X\":\n                result += \"\
    x\"\n            case \"Y\":\n                result += \"y\"\n            case\
    \ \"Z\":\n                result += \"z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrewcaxu.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfrewcaxu.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmpfrewcaxu.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpfrewcaxu.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if let c = Character(char) {\n            if\
    \ c.isLetter {\n                switch c.caseStyle {\n                case .lowercase:\n\
    \                    result = c.uppercased\n                case .uppercase:\n\
    \                    result = c.lowercased\n                default:\n       \
    \             result = c\n                }\n            } else {\n          \
    \      result = c\n            }\n        } else {\n            result = char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpayc2ottx.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpayc2ottx.swift:17:30:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \      if let c = Character(char) {\n                             ^\n        \
    \                     extendedGraphemeClusterLiteral: \n/tmp/tmpayc2ottx.swift:31:22:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  result = char\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"@\":\n        case \"#\":\n    \
    \    case \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\"\
    :\n        case \"*\":\n        case \"(\":\n        case \")\":\n        case\
    \ \"+\":\n        case \"-\":\n        case \"=\":\n        case \"[\":\n    \
    \    case \"]\":\n        case \"{\":\n        case \"}\":\n        case \"\\\\\
    \":\n        case \"|\":\n        case \"?\":\n        case \"\\\"\":\n      \
    \  case \"<\":\n        case \">\":\n        case \"(\":\n        case \")\":\n\
    \        case \"[\":\n        case \"]\":\n        case \"{\":\n        case \"\
    }\":\n        case \"|\":\n        case \"?\":\n        case \"\\\"\":\n     \
    \   case \"<\":\n        case \">\":\n        case \"(\":\n        case \")\"\
    :\n        case \"+\":\n        case \"-\":\n        case \"=\":\n        case\
    \ \"*\":\n        case \"/\":\n        case \"\\\\\":\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo62sjj6c.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpo62sjj6c.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpo62sjj6c.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if let _ = char.unicodeScalars.first?.unicodeScalars.first\
    \ {\n            result += char.unicodeScalars.first?.unicodeScalars.first!\n\
    \        } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0vuxtnth.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0vuxtnth.swift:17:62:\
    \ error: type of expression is ambiguous without more context\n        if let\
    \ _ = char.unicodeScalars.first?.unicodeScalars.first {\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp0vuxtnth.swift:18:70: error: value of optional type 'String?' must be\
    \ unwrapped to a value of type 'String'\n            result += char.unicodeScalars.first?.unicodeScalars.first!\n\
    \                                                                     ^\n/tmp/tmp0vuxtnth.swift:18:70:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result += char.unicodeScalars.first?.unicodeScalars.first!\n\
    \                                                                     ^\n    \
    \                                                                   ?? <#default\
    \ value#>\n/tmp/tmp0vuxtnth.swift:18:70: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result += char.unicodeScalars.first?.unicodeScalars.first!\n\
    \                                                                     ^\n    \
    \                  (                                               )!\n/tmp/tmp0vuxtnth.swift:18:50:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \       result += char.unicodeScalars.first?.unicodeScalars.first!\n         \
    \             ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp0vuxtnth.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpaymj5smc.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpaymj5smc.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpaymj5smc.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpaymj5smc.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpaymj5smc.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpaymj5smc.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpaymj5smc.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpaymj5smc.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpaymj5smc.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpaymj5smc.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpaymj5smc.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpaymj5smc.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpaymj5smc.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpaymj5smc.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpaymj5smc.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpaymj5smc.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"d\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"f\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"m\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpug60gryq.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        switch letter {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpyy79vhhs.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbn5i2lc4.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbn5i2lc4.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   switch char.lowercaseString {\n                   ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpbn5i2lc4.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpbn5i2lc4.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            if char.lowercased()\
    \ == char {\n                result += char.uppercased()\n            } else {\n\
    \                result += char.lowercased()\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp8ys_0r_k.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp8ys_0r_k.swift:18:34: error: binary operator '=='\
    \ cannot be applied to operands of type 'String' and 'Character'\n           \
    \ if char.lowercased() == char {\n               ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp8ys_0r_k.swift:18:34:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char.lowercased() ==\
    \ char {\n                                 ^\n/tmp/tmp8ys_0r_k.swift:24:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result = \"A\"; break\n            case \"b\": result\
    \ = \"b\"; break\n            case \"c\": result = \"C\"; break\n            case\
    \ \"d\": result = \"d\"; break\n            case \"e\": result = \"E\"; break\n\
    \            case \"f\": result = \"f\"; break\n            case \"g\": result\
    \ = \"G\"; break\n            case \"h\": result = \"H\"; break\n            case\
    \ \"i\": result = \"I\"; break\n            case \"j\": result = \"J\"; break\n\
    \            case \"k\": result = \"K\"; break\n            case \"l\": result\
    \ = \"L\"; break\n            case \"m\": result = \"M\"; break\n            case\
    \ \"n\": result = \"N\"; break\n            case \"o\": result = \"O\"; break\n\
    \            case \"p\": result = \"P\"; break\n            case \"q\": result\
    \ = \"Q\"; break\n            case \"r\": result = \"R\"; break\n            case\
    \ \"s\": result = \"S\"; break\n            case \"t\": result = \"T\"; break\n\
    \            case \"u\": result = \"U\"; break\n            case \"v\": result\
    \ = \"V\"; break\n            case \"w\": result = \"W\"; break\n            case\
    \ \"x\": result = \"X\"; break\n            case \"y\": result = \"Y\"; break\n\
    \            case \"z\": result = \"Z\"; break\n            default: result =\
    \ char\n            }\n        } else {\n            result = char\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp9pc_o8gs.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp9pc_o8gs.swift:45:31: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            default: result = char\n \
    \                             ^~~~\n/tmp/tmp9pc_o8gs.swift:48:22: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            result = char\n\
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"a\": result = \"A\"; break\n            case \"b\": result = \"\
    b\"; break\n            case \"c\": result = \"C\"; break\n            case \"\
    d\": result = \"d\"; break\n            case \"e\": result = \"E\"; break\n  \
    \          case \"f\": result = \"f\"; break\n            case \"g\": result =\
    \ \"G\"; break\n            case \"h\": result = \"H\"; break\n            case\
    \ \"i\": result = \"I\"; break\n            case \"j\": result = \"J\"; break\n\
    \            case \"k\": result = \"K\"; break\n            case \"l\": result\
    \ = \"L\"; break\n            case \"m\": result = \"M\"; break\n            case\
    \ \"n\": result = \"N\"; break\n            case \"o\": result = \"O\"; break\n\
    \            case \"p\": result = \"P\"; break\n            case \"q\": result\
    \ = \"Q\"; break\n            case \"r\": result = \"R\"; break\n            case\
    \ \"s\": result = \"S\"; break\n            case \"t\": result = \"T\"; break\n\
    \            case \"u\": result = \"U\"; break\n            case \"v\": result\
    \ = \"V\"; break\n            case \"w\": result = \"W\"; break\n            case\
    \ \"x\": result = \"X\"; break\n            case \"y\": result = \"Y\"; break\n\
    \            case \"z\": result = \"Z\"; break\n            default:\n       \
    \         result.append(char)\n            }\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpc_4c4zla.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"@\":\n        case \"#\":\n    \
    \    case \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\"\
    :\n        case \"*\":\n        case \"(\":\n        case \")\":\n        case\
    \ \"+\":\n        case \"-\":\n        case \"=\":\n        case \"{\":\n    \
    \    case \"}\":\n        case \"[\":\n        case \"]\":\n        case \"\\\\\
    \":\n        case \"|\":\n        case \"?\":\n        case \"/\":\n        case\
    \ \"<\":\n        case \">\":\n        case \"(\":\n        case \"[\":\n    \
    \    case \"{\":\n        case \"}\":\n        case \"|\":\n        case \"\\\\\
    \":\n        case \"+\":\n        case \"-\":\n        case \"=\":\n        case\
    \ \"[\":\n        case \"{\":\n        case \"}\":\n        case \"(\":\n    \
    \    case \"[\":\n        case \"{\":\n        case \"}\":\n        case \"|\"\
    :\n        case \"\\\\\":\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpta9ws539.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpta9ws539.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta9ws539.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            if char.lowercased()\
    \ != char {\n                result += char.uppercased()\n            } else {\n\
    \                result += char.lowercased()\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxhnnxx9c.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpxhnnxx9c.swift:18:37: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            if char.lowercased()\
    \ != char {\n                                    ^\n/tmp/tmpxhnnxx9c.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            if c.isUppercase {\n        \
    \        result += c.lowercaseString\n            } else {\n                result\
    \ += c.uppercaseString\n            }\n        } else {\n            result +=\
    \ c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp87og89_b.swift:19:29: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n                result += c.lowercaseString\n           \
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmp87og89_b.swift:21:29: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n                result\
    \ += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n/tmp/tmp87og89_b.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s.characters {\n        switch letter {\n        case let c where\
    \ c.isLetter:\n            switch c.caseInsensitiveCompare(\"A\") { \n       \
    \     case .orderedAscending:\n                result += \"B\"\n            case\
    \ .orderedSame:\n                result += letter\n            case .orderedDescending:\n\
    \                result += \"a\"\n            }\n        case let c where c.isDigit:\n\
    \            result += String(c.digitValue)\n        default:\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpovyxhz_b.swift:16:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpovyxhz_b.swift:27:28:\
    \ error: value of type 'Character' has no member 'isDigit'\n        case let c\
    \ where c.isDigit:\n                         ~ ^~~~~~~\n/tmp/tmpovyxhz_b.swift:19:22:\
    \ error: value of type 'Character' has no member 'caseInsensitiveCompare'\n  \
    \          switch c.caseInsensitiveCompare(\"A\") { \n                   ~ ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpovyxhz_b.swift:23:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += letter\n     \
    \                     ^\n/tmp/tmpovyxhz_b.swift:28:32: error: value of type 'Character'\
    \ has no member 'digitValue'\n            result += String(c.digitValue)\n   \
    \                          ~ ^~~~~~~~~~\n/tmp/tmpovyxhz_b.swift:30:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    p\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"r\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpozawwat1.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpozawwat1.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   switch char.lowercaseString {\n                   ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpozawwat1.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpozawwat1.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"+\":\n        case \"-\":\n    \
    \    case \"/\":\n        case \"*\":\n        case \"=\":\n        case \"%\"\
    :\n        case \"!\":\n        case \"@\":\n        case \"#\":\n        case\
    \ \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\":\n    \
    \    case \"*\":\n        case \"(\":\n        case \")\":\n        case \"[\"\
    :\n        case \"]\":\n        case \"{\":\n        case \"}\":\n        case\
    \ \"<\":\n        case \">\":\n        case \"|\":\n        case \"~\":\n    \
    \    case \"`\":\n        case \"\xB4\":\n        case \"\xA8\":\n        case\
    \ \"\xA7\":\n        case \"\xB6\":\n        case \"\xB8\":\n        case \"\xBC\
    \":\n        case \"\xBD\":\n        case \"\xBE\":\n        case \"\xBC\":\n\
    \        case \"\xBD\":\n        case \"\xBE\":\n        case \"\xBC\":\n    \
    \    case \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt06mimo.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpgt06mimo.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpgt06mimo.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n        case \"0\":\n    \
    \    case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\"\
    :\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case\
    \ \"8\":\n        case \"9\":\n        case \"@\":\n        case \"#\":\n    \
    \    case \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\"\
    :\n        case \"*\":\n        case \"(\":\n        case \")\":\n        case\
    \ \"-\":\n        case \"_\":\n        case \"+\":\n        case \"=\":\n    \
    \    case \"{\":\n        case \"}\":\n        case \"[\":\n        case \"]\"\
    :\n        case \"\\\\\":\n        case \"|\":\n        case \"<\":\n        case\
    \ \">\":\n        case \"?\":\n        case \"/\":\n        case \"\\\\\":\n \
    \       case \"\\\"\":\n        case \"'\":\n        case \"<\":\n        case\
    \ \"=\":\n        case \"{\":\n        case \"}\":\n        case \"[\":\n    \
    \    case \"]\":\n        case \"(\":\n        case \")\":\n        case \"+\"\
    :\n        case \"_\":\n        case \"-\":\n        case \"=\":\n        case\
    \ \"{\":\n        case \"}\":\n        case \"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpm5h5ia93.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpm5h5ia93.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpm5h5ia93.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    p\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"r\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplq63lf1_.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplq63lf1_.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmplq63lf1_.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   switch char.lowercaseString {\n                   ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmplq63lf1_.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmplq63lf1_.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            let upper\
    \ = char.uppercased()\n            let lower = char.lowercased()\n           \
    \ if upper != nil {\n                result += upper!\n            } else {\n\
    \                result += lower!\n            }\n        } else {\n         \
    \   result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpaf7biosy.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpaf7biosy.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmpaf7biosy.swift:20:22:\
    \ warning: comparing non-optional value of type 'String' to 'nil' always returns\
    \ true\n            if upper != nil {\n               ~~~~~ ^  ~~~\n/tmp/tmpaf7biosy.swift:21:32:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \     result += upper!\n                          ~~~~~^\n                   \
    \            \n/tmp/tmpaf7biosy.swift:23:32: error: cannot force unwrap value\
    \ of non-optional type 'String'\n                result += lower!\n          \
    \                ~~~~~^\n                               \n/tmp/tmpaf7biosy.swift:26:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        switch letter {\n        case \"a\":\n            letter\
    \ = \"A\"\n        case \"b\":\n            letter = \"B\"\n        case \"c\"\
    :\n            letter = \"C\"\n        case \"d\":\n            letter = \"D\"\
    \n        case \"e\":\n            letter = \"E\"\n        case \"f\":\n     \
    \       letter = \"F\"\n        case \"g\":\n            letter = \"G\"\n    \
    \    case \"h\":\n            letter = \"H\"\n        case \"i\":\n          \
    \  letter = \"I\"\n        case \"j\":\n            letter = \"J\"\n        case\
    \ \"k\":\n            letter = \"K\"\n        case \"l\":\n            letter\
    \ = \"L\"\n        case \"m\":\n            letter = \"M\"\n        case \"n\"\
    :\n            letter = \"N\"\n        case \"o\":\n            letter = \"O\"\
    \n        case \"p\":\n            letter = \"P\"\n        case \"q\":\n     \
    \       letter = \"Q\"\n        case \"r\":\n            letter = \"R\"\n    \
    \    case \"s\":\n            letter = \"S\"\n        case \"t\":\n          \
    \  letter = \"T\"\n        case \"u\":\n            letter = \"U\"\n        case\
    \ \"v\":\n            letter = \"V\"\n        case \"w\":\n            letter\
    \ = \"W\"\n        case \"x\":\n            letter = \"X\"\n        case \"y\"\
    :\n            letter = \"Y\"\n        case \"z\":\n            letter = \"Z\"\
    \n        default:\n            letter = letter\n        }\n        result +=\
    \ letter\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprcdguozx.swift:19:13: error: cannot assign to value: 'letter' is\
    \ a 'let' constant\n            letter = \"A\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:21:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"B\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:23:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"C\"\n       \
    \     ^~~~~~\n/tmp/tmprcdguozx.swift:25:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"D\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:27:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"E\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:29:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"F\"\n       \
    \     ^~~~~~\n/tmp/tmprcdguozx.swift:31:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"G\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:33:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"H\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:35:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"I\"\n       \
    \     ^~~~~~\n/tmp/tmprcdguozx.swift:37:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"J\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:39:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"K\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:41:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"L\"\n       \
    \     ^~~~~~\n/tmp/tmprcdguozx.swift:43:13: error: cannot assign to value: 'letter'\
    \ is a 'let' constant\n            letter = \"M\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:45:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = \"N\"\n            ^~~~~~\n/tmp/tmprcdguozx.swift:47:13: error: cannot assign\
    \ to value: 'letter' is a 'let' constant\n            letter = \"O\"\n       \
    \     ^~~~~~\n/tmp/tmprcdguozx.swift:49:13: error: c"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3ov6peqq.swift:20:22: warning: comparing non-optional value of\
    \ type 'String' to 'nil' always returns true\n            if upper != nil {\n\
    \               ~~~~~ ^  ~~~\n/tmp/tmp3ov6peqq.swift:21:32: error: cannot force\
    \ unwrap value of non-optional type 'String'\n                result += upper!\n\
    \                          ~~~~~^\n                               \n/tmp/tmp3ov6peqq.swift:23:32:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \     result += lower!\n                          ~~~~~^\n                   \
    \            \n/tmp/tmp3ov6peqq.swift:26:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += char\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var res = \"\"\n    for c in s.characters {\n        if c.isLetter\
    \ {\n            res = c.isUppercase ? c.lowercased() : c.uppercased()\n     \
    \   } else {\n            res = c\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzb2mbgc0.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzb2mbgc0.swift:23:19:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  res = c\n                  ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"B\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmqpt_z7r.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpmqpt_z7r.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpmqpt_z7r.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpmqpt_z7r.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpmqpt_z7r.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpmqpt_z7r.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpmqpt_z7r.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpmqpt_z7r.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpmqpt_z7r.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpmqpt_z7r.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpmqpt_z7r.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpmqpt_z7r.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpmqpt_z7r.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpmqpt_z7r.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpmqpt_z7r.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpmqpt_z7r.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      if isLetter {\n            result += Character(char).uppercaseString\n\
    \        } else {\n            result += Character(char)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmplszhbs78.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplszhbs78.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmplszhbs78.swift:19:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            result += Character(char).uppercaseString\n           \
    \                     ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmplszhbs78.swift:19:39: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n            result += Character(char).uppercaseString\n \
    \                     ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmplszhbs78.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += Character(char)\n                      ^\n/tmp/tmplszhbs78.swift:21:33:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          result += Character(char)\n                                ^\n    \
    \                            extendedGraphemeClusterLiteral: \n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0bypkwxv.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp0bypkwxv.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp0bypkwxv.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp0bypkwxv.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp0bypkwxv.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp0bypkwxv.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp0bypkwxv.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp0bypkwxv.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp0bypkwxv.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp0bypkwxv.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp0bypkwxv.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp0bypkwxv.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp0bypkwxv.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp0bypkwxv.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp0bypkwxv.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp0bypkwxv.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbn5i2lc4.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbn5i2lc4.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   switch char.lowercaseString {\n                   ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpbn5i2lc4.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpbn5i2lc4.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6moqol9t.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp6moqol9t.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp6moqol9t.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp6moqol9t.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp6moqol9t.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp6moqol9t.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp6moqol9t.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp6moqol9t.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp6moqol9t.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp6moqol9t.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp6moqol9t.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp6moqol9t.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp6moqol9t.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp6moqol9t.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp6moqol9t.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp6moqol9t.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      if isLetter {\n            let upperCase = Character(char).uppercaseString\n\
    \            let lowerCase = Character(char).lowercaseString\n            if upperCase\
    \ == lowerCase {\n                result += upperCase\n            } else {\n\
    \                result += lowerCase\n            }\n        } else {\n      \
    \      result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkkf3ez2_.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpkkf3ez2_.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmpkkf3ez2_.swift:19:39: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n            let upperCase = Character(char).uppercaseString\n     \
    \                                 ^\n                                      extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpkkf3ez2_.swift:19:45: error: value of type 'Character' has no member\
    \ 'uppercaseString'\n            let upperCase = Character(char).uppercaseString\n\
    \                            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpkkf3ez2_.swift:20:39:\
    \ error: missing argument label 'extendedGraphemeClusterLiteral:' in call\n  \
    \          let lowerCase = Character(char).lowercaseString\n                 \
    \                     ^\n                                      extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmpkkf3ez2_.swift:20:45: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            let lowerCase = Character(char).lowercaseString\n\
    \                            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpkkf3ez2_.swift:27:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upperCaseChar = char.uppercased()\n\
    \            if char == upperCaseChar {\n                result += char\n    \
    \        } else {\n                result += upperCaseChar\n            }\n  \
    \      } else {\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ah9ug0y.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp6ah9ug0y.swift:19:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n           \
    \ if char == upperCaseChar {\n               ~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp6ah9ug0y.swift:19:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char == upperCaseChar\
    \ {\n                    ^\n/tmp/tmp6ah9ug0y.swift:20:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmp6ah9ug0y.swift:25:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpaymj5smc.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpaymj5smc.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpaymj5smc.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpaymj5smc.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpaymj5smc.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpaymj5smc.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpaymj5smc.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpaymj5smc.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpaymj5smc.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpaymj5smc.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpaymj5smc.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpaymj5smc.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpaymj5smc.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpaymj5smc.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpaymj5smc.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpaymj5smc.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s.characters {\n        if let _ = c.isLetter {\n            result +=\
    \ c.isUppercase ? c.lowercaseString : c.uppercaseString\n        } else {\n  \
    \          result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpwvo6um7v.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwvo6um7v.swift:18:41:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.isUppercase ? c.lowercaseString : c.uppercaseString\n        \
    \                              ~ ^~~~~~~~~~~~~~~\n/tmp/tmpwvo6um7v.swift:18:61:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.isUppercase ? c.lowercaseString : c.uppercaseString\n        \
    \                                                  ~ ^~~~~~~~~~~~~~~\n/tmp/tmpwvo6um7v.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpwvo6um7v.swift:17:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Bool'\n\
    \        if let _ = c.isLetter {\n           ^       ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      let isUpper = Character(char).isUpper\n        let isLower = Character(char).isLower\n\
    \        \n        if isLetter {\n            if isUpper {\n                result\
    \ += Character(char).uppercaseString\n            } else {\n                result\
    \ += Character(char).lowercaseString\n            }\n        } else {\n      \
    \      result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_gdafadb.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_gdafadb.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmp_gdafadb.swift:18:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let isUpper = Character(char).isUpper\n                   \
    \             ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp_gdafadb.swift:18:39: error: value of type 'Character' has no member\
    \ 'isUpper'\n        let isUpper = Character(char).isUpper\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_gdafadb.swift:19:33: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n        let isLower = Character(char).isLower\n\
    \                                ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp_gdafadb.swift:19:39: error: value of type 'Character' has no member\
    \ 'isLower'\n        let isLower = Character(char).isLower\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_gdafadb.swift:23:37: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n                result += Character(char).uppercaseString\n\
    \                                    ^\n                                    extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmp_gdafadb.swift:23:43: err"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"g\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpeq0dcfrv.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpeq0dcfrv.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpeq0dcfrv.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpeq0dcfrv.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpeq0dcfrv.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpeq0dcfrv.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpeq0dcfrv.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpeq0dcfrv.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpeq0dcfrv.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpeq0dcfrv.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpeq0dcfrv.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpeq0dcfrv.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpeq0dcfrv.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpeq0dcfrv.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpeq0dcfrv.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpeq0dcfrv.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter() {\n            switch c.lowercased() {\n \
    \           case \"a\": result += \"A\"; break\n            case \"b\": result\
    \ += \"B\"; break\n            case \"c\": result += \"C\"; break\n          \
    \  case \"d\": result += \"D\"; break\n            case \"e\": result += \"E\"\
    ; break\n            case \"f\": result += \"F\"; break\n            case \"g\"\
    : result += \"G\"; break\n            case \"h\": result += \"H\"; break\n   \
    \         case \"i\": result += \"I\"; break\n            case \"j\": result +=\
    \ \"J\"; break\n            case \"k\": result += \"K\"; break\n            case\
    \ \"l\": result += \"L\"; break\n            case \"m\": result += \"M\"; break\n\
    \            case \"n\": result += \"N\"; break\n            case \"o\": result\
    \ += \"O\"; break\n            case \"p\": result += \"P\"; break\n          \
    \  case \"q\": result += \"Q\"; break\n            case \"r\": result += \"R\"\
    ; break\n            case \"s\": result += \"S\"; break\n            case \"t\"\
    : result += \"T\"; break\n            case \"u\": result += \"U\"; break\n   \
    \         case \"v\": result += \"V\"; break\n            case \"w\": result +=\
    \ \"W\"; break\n            case \"x\": result += \"X\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"Z\"; break\n\
    \            default: result += c; break\n            }\n        } else {\n  \
    \          result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_5ghp_kx.swift:17:14: error: cannot call value of non-function\
    \ type 'Bool'\n        if c.isLetter() {\n             ^       ~~\n          \
    \           \n/tmp/tmp_5ghp_kx.swift:45:32: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            default: result\
    \ += c; break\n                               ^\n/tmp/tmp_5ghp_kx.swift:48:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u6ozy1t.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp1u6ozy1t.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmp1u6ozy1t.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmp1u6ozy1t.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmp1u6ozy1t.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6moqol9t.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp6moqol9t.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp6moqol9t.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp6moqol9t.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp6moqol9t.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp6moqol9t.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp6moqol9t.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp6moqol9t.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp6moqol9t.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp6moqol9t.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp6moqol9t.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp6moqol9t.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp6moqol9t.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp6moqol9t.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp6moqol9t.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp6moqol9t.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"a\":\n                result += \"A\"\n            case \"\
    b\":\n                result += \"b\"\n            case \"c\":\n             \
    \   result += \"C\"\n            case \"d\":\n                result += \"D\"\n\
    \            case \"e\":\n                result += \"E\"\n            case \"\
    f\":\n                result += \"F\"\n            case \"g\":\n             \
    \   result += \"G\"\n            case \"h\":\n                result += \"H\"\n\
    \            case \"i\":\n                result += \"I\"\n            case \"\
    j\":\n                result += \"J\"\n            case \"k\":\n             \
    \   result += \"K\"\n            case \"l\":\n                result += \"L\"\n\
    \            case \"m\":\n                result += \"M\"\n            case \"\
    n\":\n                result += \"N\"\n            case \"o\":\n             \
    \   result += \"O\"\n            case \"p\":\n                result += \"P\"\n\
    \            case \"q\":\n                result += \"Q\"\n            case \"\
    r\":\n                result += \"R\"\n            case \"s\":\n             \
    \   result += \"S\"\n            case \"t\":\n                result += \"T\"\n\
    \            case \"u\":\n                result += \"U\"\n            case \"\
    v\":\n                result += \"V\"\n            case \"w\":\n             \
    \   result += \"W\"\n            case \"x\":\n                result += \"X\"\n\
    \            case \"y\":\n                result += \"Y\"\n            case \"\
    z\":\n                result += \"Z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpacw_0x2j.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmpacw_0x2j.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += letter\n                          ^\n/tmp/tmpacw_0x2j.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u6ozy1t.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp1u6ozy1t.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmp1u6ozy1t.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmp1u6ozy1t.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmp1u6ozy1t.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ letter in s {\n        if letter.isLetter() {\n            switch letter {\n\
    \            case \"a\":\n                result += \"A\"\n            case \"\
    b\":\n                result += \"b\"\n            case \"c\":\n             \
    \   result += \"C\"\n            case \"d\":\n                result += \"D\"\n\
    \            case \"e\":\n                result += \"E\"\n            case \"\
    f\":\n                result += \"F\"\n            case \"g\":\n             \
    \   result += \"G\"\n            case \"h\":\n                result += \"H\"\n\
    \            case \"i\":\n                result += \"I\"\n            case \"\
    j\":\n                result += \"J\"\n            case \"k\":\n             \
    \   result += \"K\"\n            case \"l\":\n                result += \"L\"\n\
    \            case \"m\":\n                result += \"M\"\n            case \"\
    n\":\n                result += \"N\"\n            case \"o\":\n             \
    \   result += \"O\"\n            case \"p\":\n                result += \"P\"\n\
    \            case \"q\":\n                result += \"Q\"\n            case \"\
    r\":\n                result += \"R\"\n            case \"s\":\n             \
    \   result += \"S\"\n            case \"t\":\n                result += \"T\"\n\
    \            case \"u\":\n                result += \"U\"\n            case \"\
    v\":\n                result += \"V\"\n            case \"w\":\n             \
    \   result += \"W\"\n            case \"x\":\n                result += \"X\"\n\
    \            case \"y\":\n                result += \"Y\"\n            case \"\
    z\":\n                result += \"Z\"\n            default:\n                result\
    \ += letter\n            }\n        } else {\n            result += letter\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpacw_0x2j.swift:17:19: error: cannot call value of non-function\
    \ type 'Bool'\n        if letter.isLetter() {\n                  ^       ~~\n\
    \                          \n/tmp/tmpacw_0x2j.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += letter\n                          ^\n/tmp/tmpacw_0x2j.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    D\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"F\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    H\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"M\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    P\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"R\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpkc9pi7yu.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpkc9pi7yu.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpkc9pi7yu.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char.lowercased()\
    \ {\n            case \"a\": result += \"A\"; break\n            case \"b\": result\
    \ += \"b\"; break\n            case \"c\": result += \"C\"; break\n          \
    \  case \"d\": result += \"d\"; break\n            case \"e\": result += \"E\"\
    ; break\n            case \"f\": result += \"F\"; break\n            case \"g\"\
    : result += \"G\"; break\n            case \"h\": result += \"H\"; break\n   \
    \         case \"i\": result += \"I\"; break\n            case \"j\": result +=\
    \ \"J\"; break\n            case \"k\": result += \"K\"; break\n            case\
    \ \"l\": result += \"L\"; break\n            case \"m\": result += \"M\"; break\n\
    \            case \"n\": result += \"N\"; break\n            case \"o\": result\
    \ += \"O\"; break\n            case \"p\": result += \"P\"; break\n          \
    \  case \"q\": result += \"Q\"; break\n            case \"r\": result += \"R\"\
    ; break\n            case \"s\": result += \"S\"; break\n            case \"t\"\
    : result += \"T\"; break\n            case \"u\": result += \"U\"; break\n   \
    \         case \"v\": result += \"V\"; break\n            case \"w\": result +=\
    \ \"W\"; break\n            case \"x\": result += \"X\"; break\n            case\
    \ \"y\": result += \"Y\"; break\n            case \"z\": result += \"Z\"; break\n\
    \            default: result += char; break\n            }\n        } else {\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp8upihlcv.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp8upihlcv.swift:45:32: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n            default:\
    \ result += char; break\n                               ^\n/tmp/tmp8upihlcv.swift:48:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0bypkwxv.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp0bypkwxv.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp0bypkwxv.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp0bypkwxv.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp0bypkwxv.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp0bypkwxv.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp0bypkwxv.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp0bypkwxv.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp0bypkwxv.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp0bypkwxv.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp0bypkwxv.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp0bypkwxv.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp0bypkwxv.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp0bypkwxv.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp0bypkwxv.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp0bypkwxv.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            let upper = char.uppercased()\n\
    \            let lower = char.lowercased()\n            if upper != nil {\n  \
    \              result += upper!\n            } else {\n                result\
    \ += lower!\n            }\n        } else {\n            result += char\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u6ozy1t.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmp1u6ozy1t.swift:20:22: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n            if upper !=\
    \ nil {\n               ~~~~~ ^  ~~~\n/tmp/tmp1u6ozy1t.swift:21:32: error: cannot\
    \ force unwrap value of non-optional type 'String'\n                result +=\
    \ upper!\n                          ~~~~~^\n                               \n\
    /tmp/tmp1u6ozy1t.swift:23:32: error: cannot force unwrap value of non-optional\
    \ type 'String'\n                result += lower!\n                          ~~~~~^\n\
    \                               \n/tmp/tmp1u6ozy1t.swift:26:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0bypkwxv.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp0bypkwxv.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp0bypkwxv.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp0bypkwxv.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp0bypkwxv.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp0bypkwxv.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp0bypkwxv.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp0bypkwxv.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp0bypkwxv.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp0bypkwxv.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp0bypkwxv.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp0bypkwxv.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp0bypkwxv.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp0bypkwxv.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp0bypkwxv.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp0bypkwxv.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if let _ = c.isLetter() {\n            if let _ = c.isUpper()\
    \ {\n                result += c.lowercased()\n            } else {\n        \
    \        result += c.uppercased()\n            }\n        } else {\n         \
    \   result += c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpuaxwlyoy.swift:17:22: error: cannot call value of non-function\
    \ type 'Bool'\n        if let _ = c.isLetter() {\n                     ^     \
    \  ~~\n                             \n/tmp/tmpuaxwlyoy.swift:18:26: error: value\
    \ of type 'Character' has no member 'isUpper'\n            if let _ = c.isUpper()\
    \ {\n                       ~ ^~~~~~~\n/tmp/tmpuaxwlyoy.swift:24:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += c\n                      ^\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"d\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"f\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"h\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"j\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"m\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"p\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"r\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"w\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpx2p0_fr8.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpx2p0_fr8.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpx2p0_fr8.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpx2p0_fr8.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpx2p0_fr8.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpx2p0_fr8.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpx2p0_fr8.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpx2p0_fr8.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpx2p0_fr8.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpx2p0_fr8.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpx2p0_fr8.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpx2p0_fr8.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpx2p0_fr8.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpx2p0_fr8.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpx2p0_fr8.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpx2p0_fr8.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659978856
