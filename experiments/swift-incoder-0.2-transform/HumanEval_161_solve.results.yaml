language: swift
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result += char.lowercased()\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0pt7k514.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp0pt7k514.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0pt7k514.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        let isLetter = Character(char).isLetter\n  \
    \      let isUpper = Character(char).isUpper\n        let isLower = Character(char).isLower\n\
    \        \n        if isLetter {\n            if isUpper {\n                result\
    \ += String(Character(char).uppercased())\n            } else {\n            \
    \    result += String(Character(char).lowercased())\n            }\n        }\
    \ else {\n            result += char\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmph915jh9l.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph915jh9l.swift:17:24:\
    \ error: no exact matches in call to initializer \n        let isLetter = Character(char).isLetter\n\
    \                       ^\nSwift.Character:5:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(extendedGraphemeClusterLiteral:)')\n    @inlinable\
    \ public init(extendedGraphemeClusterLiteral value: Character)\n             \
    \         ^\nSwift.ExpressibleByExtendedGraphemeClusterLiteral:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(unicodeScalarLiteral:)')\n \
    \   public init(unicodeScalarLiteral value: Self.ExtendedGraphemeClusterLiteralType)\n\
    \           ^\n/tmp/tmph915jh9l.swift:18:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let isUpper = Character(char).isUpper\n                   \
    \             ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmph915jh9l.swift:18:39: error: value of type 'Character' has no member\
    \ 'isUpper'\n        let isUpper = Character(char).isUpper\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmph915jh9l.swift:19:33: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n        let isLower = Character(char).isLower\n\
    \                                ^\n                                extendedGraphemeClusterLiteral:\
    \ \n/tmp/tmph915jh9l.swift:19:39: error: value of type 'Character' has no member\
    \ 'isLower'\n        let isLower = Character(char).isLower\n                 \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmph915jh9l.swift:23:44: error: missing argument\
    \ label 'extendedGraphemeClusterLiteral:' in call\n                result += String(Character(char).uppercased())\n\
    \                                           ^\n                              \
    \             extendedGraphemeClusterLiteral: \n/tmp/tmph915jh"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        if char.isLetter() {\n            switch char\
    \ {\n            case \"A\":\n                result += \"a\"\n            case\
    \ \"B\":\n                result += \"b\"\n            case \"C\":\n         \
    \       result += \"c\"\n            case \"D\":\n                result += \"\
    d\"\n            case \"E\":\n                result += \"e\"\n            case\
    \ \"F\":\n                result += \"f\"\n            case \"G\":\n         \
    \       result += \"g\"\n            case \"H\":\n                result += \"\
    h\"\n            case \"I\":\n                result += \"i\"\n            case\
    \ \"J\":\n                result += \"j\"\n            case \"K\":\n         \
    \       result += \"k\"\n            case \"L\":\n                result += \"\
    l\"\n            case \"M\":\n                result += \"m\"\n            case\
    \ \"N\":\n                result += \"n\"\n            case \"O\":\n         \
    \       result += \"o\"\n            case \"P\":\n                result += \"\
    p\"\n            case \"Q\":\n                result += \"q\"\n            case\
    \ \"R\":\n                result += \"r\"\n            case \"S\":\n         \
    \       result += \"s\"\n            case \"T\":\n                result += \"\
    t\"\n            case \"U\":\n                result += \"u\"\n            case\
    \ \"V\":\n                result += \"v\"\n            case \"W\":\n         \
    \       result += \"w\"\n            case \"X\":\n                result += \"\
    x\"\n            case \"Y\":\n                result += \"y\"\n            case\
    \ \"Z\":\n                result += \"z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrewcaxu.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfrewcaxu.swift:17:17:\
    \ error: cannot call value of non-function type 'Bool'\n        if char.isLetter()\
    \ {\n                ^       ~~\n                        \n/tmp/tmpfrewcaxu.swift:72:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpfrewcaxu.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnzsyw5yw.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") { $0 + String($1)\
    \ }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\": result = \"A\" + result\n\
    \        case \"b\": result = \"B\" + result\n        case \"c\": result = \"\
    C\" + result\n        case \"d\": result = \"D\" + result\n        case \"e\"\
    : result = \"E\" + result\n        case \"f\": result = \"F\" + result\n     \
    \   case \"g\": result = \"G\" + result\n        case \"h\": result = \"H\" +\
    \ result\n        case \"i\": result = \"I\" + result\n        case \"j\": result\
    \ = \"J\" + result\n        case \"k\": result = \"K\" + result\n        case\
    \ \"l\": result = \"L\" + result\n        case \"m\": result = \"M\" + result\n\
    \        case \"n\": result = \"N\" + result\n        case \"o\": result = \"\
    O\" + result\n        case \"p\": result = \"P\" + result\n        case \"q\"\
    : result = \"Q\" + result\n        case \"r\": result = \"R\" + result\n     \
    \   case \"s\": result = \"S\" + result\n        case \"t\": result = \"T\" +\
    \ result\n        case \"u\": result = \"U\" + result\n        case \"v\": result\
    \ = \"V\" + result\n        case \"w\": result = \"W\" + result\n        case\
    \ \"x\": result = \"X\" + result\n        case \"y\": result = \"Y\" + result\n\
    \        case \"z\": result = \"Z\" + result\n        default: result = char +\
    \ result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfx4gtsl3.swift:44:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        default: result = char + result\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n            result\
    \ += \"A\"\n        case \"b\":\n            result += \"b\"\n        case \"\
    c\":\n            result += \"C\"\n        case \"d\":\n            result +=\
    \ \"D\"\n        case \"e\":\n            result += \"E\"\n        case \"f\"\
    :\n            result += \"F\"\n        case \"g\":\n            result += \"\
    G\"\n        case \"h\":\n            result += \"H\"\n        case \"i\":\n \
    \           result += \"I\"\n        case \"j\":\n            result += \"J\"\n\
    \        case \"k\":\n            result += \"K\"\n        case \"l\":\n     \
    \       result += \"L\"\n        case \"m\":\n            result += \"M\"\n  \
    \      case \"n\":\n            result += \"N\"\n        case \"o\":\n       \
    \     result += \"O\"\n        case \"p\":\n            result += \"P\"\n    \
    \    case \"q\":\n            result += \"Q\"\n        case \"r\":\n         \
    \   result += \"R\"\n        case \"s\":\n            result += \"S\"\n      \
    \  case \"t\":\n            result += \"T\"\n        case \"u\":\n           \
    \ result += \"U\"\n        case \"v\":\n            result += \"V\"\n        case\
    \ \"w\":\n            result += \"W\"\n        case \"x\":\n            result\
    \ += \"X\"\n        case \"y\":\n            result += \"Y\"\n        case \"\
    z\":\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3hbpncdd.swift:71:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result = char\
    \ + result\n        default:\n            result = char + result\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpektupyaf.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpektupyaf.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpektupyaf.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter() {\n            switch char {\n     \
    \       case \"A\":\n                result += \"a\"\n            case \"B\":\n\
    \                result += \"b\"\n            case \"C\":\n                result\
    \ += \"c\"\n            case \"D\":\n                result += \"d\"\n       \
    \     case \"E\":\n                result += \"e\"\n            case \"F\":\n\
    \                result += \"f\"\n            case \"G\":\n                result\
    \ += \"g\"\n            case \"H\":\n                result += \"h\"\n       \
    \     case \"I\":\n                result += \"i\"\n            case \"J\":\n\
    \                result += \"j\"\n            case \"K\":\n                result\
    \ += \"k\"\n            case \"L\":\n                result += \"l\"\n       \
    \     case \"M\":\n                result += \"m\"\n            case \"N\":\n\
    \                result += \"n\"\n            case \"O\":\n                result\
    \ += \"o\"\n            case \"P\":\n                result += \"p\"\n       \
    \     case \"Q\":\n                result += \"q\"\n            case \"R\":\n\
    \                result += \"r\"\n            case \"S\":\n                result\
    \ += \"s\"\n            case \"T\":\n                result += \"t\"\n       \
    \     case \"U\":\n                result += \"u\"\n            case \"V\":\n\
    \                result += \"v\"\n            case \"W\":\n                result\
    \ += \"w\"\n            case \"X\":\n                result += \"x\"\n       \
    \     case \"Y\":\n                result += \"y\"\n            case \"Z\":\n\
    \                result += \"z\"\n            default:\n                result\
    \ += char\n            }\n        } else {\n            result += char\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg79fokj.swift:17:17: error: cannot call value of non-function\
    \ type 'Bool'\n        if char.isLetter() {\n                ^       ~~\n    \
    \                    \n/tmp/tmpzg79fokj.swift:72:27: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n                result\
    \ += char\n                          ^\n/tmp/tmpzg79fokj.swift:75:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += String(char.lowercased())\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprgrnf_k6.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmprgrnf_k6.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmprgrnf_k6.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.characters.reversed().reduce(\"\
    \") { $0 + String($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpiysp4gii.swift:15:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reversed().reduce(\"\") { $0 +\
    \ String($1) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    var i = 0\n    for c in s {\n        if\
    \ c.isLetter {\n            result += String(c).uppercased()\n        } else {\n\
    \            result += String(c)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpw6j5opyn/tmpw6j5opyn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d709d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d706ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d706cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d706cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6j5opyn                        0x0000561bd936f557 <unavailable> + 5463

    5    libc.so.6                          0x00002b3d70bc1460 __libc_start_main +
    245

    6    tmpw6j5opyn                        0x0000561bd936f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            switch char.lowercaseString\
    \ {\n            case \"a\":\n                result += \"A\"\n            case\
    \ \"b\":\n                result += \"b\"\n            case \"c\":\n         \
    \       result += \"C\"\n            case \"d\":\n                result += \"\
    d\"\n            case \"e\":\n                result += \"E\"\n            case\
    \ \"f\":\n                result += \"f\"\n            case \"g\":\n         \
    \       result += \"G\"\n            case \"h\":\n                result += \"\
    h\"\n            case \"i\":\n                result += \"I\"\n            case\
    \ \"j\":\n                result += \"J\"\n            case \"k\":\n         \
    \       result += \"K\"\n            case \"l\":\n                result += \"\
    L\"\n            case \"m\":\n                result += \"m\"\n            case\
    \ \"n\":\n                result += \"N\"\n            case \"o\":\n         \
    \       result += \"O\"\n            case \"p\":\n                result += \"\
    p\"\n            case \"q\":\n                result += \"Q\"\n            case\
    \ \"r\":\n                result += \"r\"\n            case \"s\":\n         \
    \       result += \"S\"\n            case \"t\":\n                result += \"\
    T\"\n            case \"u\":\n                result += \"U\"\n            case\
    \ \"v\":\n                result += \"V\"\n            case \"w\":\n         \
    \       result += \"W\"\n            case \"x\":\n                result += \"\
    X\"\n            case \"y\":\n                result += \"Y\"\n            case\
    \ \"z\":\n                result += \"Z\"\n            default:\n            \
    \    result += char\n            }\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmprxz0ipq3.swift:18:25: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            switch char.lowercaseString {\n             \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmprxz0ipq3.swift:72:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   result += char\n                          ^\n/tmp/tmprxz0ipq3.swift:75:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659825173
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s.characters {\n        switch char {\n        case 'a':\n         \
    \   result += \"A\"\n        case 'b':\n            result += \"b\"\n        case\
    \ 'c':\n            result += \"C\"\n        case 'd':\n            result +=\
    \ \"D\"\n        case 'e':\n            result += \"E\"\n        case 'f':\n \
    \           result += \"F\"\n        case 'g':\n            result += \"G\"\n\
    \        case 'h':\n            result += \"H\"\n        case 'i':\n         \
    \   result += \"I\"\n        case 'j':\n            result += \"J\"\n        case\
    \ 'k':\n            result += \"K\"\n        case 'l':\n            result +=\
    \ \"L\"\n        case 'm':\n            result += \"M\"\n        case 'n':\n \
    \           result += \"N\"\n        case 'o':\n            result += \"O\"\n\
    \        case 'p':\n            result += \"P\"\n        case 'q':\n         \
    \   result += \"Q\"\n        case 'r':\n            result += \"R\"\n        case\
    \ 's':\n            result += \"S\"\n        case 't':\n            result +=\
    \ \"T\"\n        case 'u':\n            result += \"U\"\n        case 'v':\n \
    \           result += \"V\"\n        case 'w':\n            result += \"W\"\n\
    \        case 'x':\n            result += \"X\"\n        case 'y':\n         \
    \   result += \"Y\"\n        case 'z':\n            result += \"Z\"\n        default:\n\
    \            result += char\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvnpfw0bp.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpvnpfw0bp.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpvnpfw0bp.swift:22:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmpvnpfw0bp.swift:24:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmpvnpfw0bp.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpvnpfw0bp.swift:28:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmpvnpfw0bp.swift:30:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmpvnpfw0bp.swift:32:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmpvnpfw0bp.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmpvnpfw0bp.swift:36:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmpvnpfw0bp.swift:38:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmpvnpfw0bp.swift:40:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmpvnpfw0bp.swift:42:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmpvnpfw0bp.swift:44:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmpvnpfw0bp.swift:46:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmpvnpfw0bp.swift:48:14: error: single-quoted st"
  stdout: ''
  timestamp: 1659824624
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        switch char {\n        case \"a\":\n        case \"b\"\
    :\n        case \"c\":\n        case \"d\":\n        case \"e\":\n        case\
    \ \"f\":\n        case \"g\":\n        case \"h\":\n        case \"i\":\n    \
    \    case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"o\":\n        case \"p\":\n        case\
    \ \"q\":\n        case \"r\":\n        case \"s\":\n        case \"t\":\n    \
    \    case \"u\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n        case \"A\":\n        case\
    \ \"B\":\n        case \"C\":\n        case \"D\":\n        case \"E\":\n    \
    \    case \"F\":\n        case \"G\":\n        case \"H\":\n        case \"I\"\
    :\n        case \"J\":\n        case \"K\":\n        case \"L\":\n        case\
    \ \"M\":\n        case \"N\":\n        case \"O\":\n        case \"P\":\n    \
    \    case \"Q\":\n        case \"R\":\n        case \"S\":\n        case \"T\"\
    :\n        case \"U\":\n        case \"V\":\n        case \"W\":\n        case\
    \ \"X\":\n        case \"Y\":\n        case \"Z\":\n            result += String(char.lowercased())\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpzqzb_tic.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpzqzb_tic.swift:19:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"b\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:20:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpzqzb_tic.swift:30:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659825173
