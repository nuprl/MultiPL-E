name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return True if\
  \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>>\
  \ right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
  \ Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ["    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let\
    \ c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a", "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    \n  \
    \  return ab > bc && ac > bc", "    let ab = abs(a - b)\n    let bc = abs(b -\
    \ c)\n    let cb = abs(c - b)\n    \n    if ab > bc {\n        if ab > cb {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if bc > cb {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }", "    let a = abs(a)\n    let\
    \ b = abs(b)\n    let c = abs(c)\n    if a > b {\n        if b > c {\n       \
    \     return true\n        } else {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return true\n        } else {\n  \
    \          return false\n        }\n    }", '    return ((b - a) * (c - b) <=
    0)', "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n\
    \    let cb = abs(c - b)\n    return (ab > ac) && (ab > bc) && (ab > cb)", '    return
    ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', "    let a =\
    \ abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    return true", "    let ab = abs(b - a)\n   \
    \ let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let\
    \ bca = bc + ab\n    let abca = abc + bca\n    return abca >= bca", "    let a\
    \ = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let ab = abs(a + b)\n\
    \    let ac = abs(a + c)\n    let bc = abs(b + c)\n    let abc = ab + ac\n   \
    \ let ab2 = ab * ab\n    let ac2 = ac * ac\n    let bc2 = bc * bc\n    let bc3\
    \ = bc * c\n    let ab3 = ab * c\n    let ab4 = ab * 4\n    let ac4 = ac * 4\n\
    \    let bc5 = bc * 5\n    let bc6 = bc * 5\n    let bc7 = bc * 6\n    let bc8\
    \ = bc * 6\n    let bc9 = bc * 7\n    let bc10 = bc * 8\n    let bc11 = bc * 9\n\
    \    let bc12 = bc * 10\n    let bc13 = bc * 11\n    let bc14 = bc * 12\n    let\
    \ bc15 = bc * 13\n    let bc16 = bc * 14\n    let bc17 = bc * 15\n    let bc18\
    \ = bc * 16\n    let bc19 = bc * 17\n    let bc20 = bc * 18\n    let bc21 = bc\
    \ * 19\n    let bc22 = bc * 20\n    let bc23 = bc * 21\n    let bc24 = bc * 22\n\
    \    let bc25 = bc * 23\n    let bc26 = bc * 24\n    let bc27 = bc * 25\n    let\
    \ bc28 = bc * 26\n    let bc29 = bc * 27\n    let bc30 = bc * 28\n    let bc31\
    \ = bc * 29\n    let bc32 = bc * 30\n    let bc33 = bc * 31\n    let bc34 = bc\
    \ * 32\n    let bc35 = bc * 33\n    let bc36 = bc * 34\n    let bc37 = bc * 35\n\
    \    let bc38 = bc * 36\n    let bc39 = bc * 37\n    let bc40 = bc * 38\n    let\
    \ bc41 = bc * 39\n    let bc42 = bc * 40\n    let bc43 = bc * 41\n    let bc44\
    \ = bc * 42\n    let bc45 = bc * 43\n    let bc46 = bc * 44\n    let bc47 = bc\
    \ * 45\n    let bc48 = bc * 46\n    let bc49 = bc * 47\n    let bc50 = bc * 48\n\
    \    let bc51 = bc * 49\n    let bc52 = bc * 50\n    let bc53 = bc * 51\n    let\
    \ bc54 = bc * 52\n    let bc55 = bc * 53\n    let bc56 = bc * 54\n    let bc57\
    \ = bc * 55\n    let bc58 = ", "    let ab = abs(b - a)\n    let ac = abs(c -\
    \ a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let acbc = ac + bc\n    let abbc = ab + abc\n   \
    \ let acdbc = ac + bcd\n    let abdcb = ab + acbc\n    let acbda = ac + abdc\n\
    \    let abdca = ab + acdbc\n    let acdbb = ac + abbc\n    let abcbc = ab + acbda\n\
    \    let acbba = ac + abdca\n    let abdba = ab + acdbb\n    let acdbd = ac +\
    \ abcbc\n    let abcbd = ab + acbba\n    let acbca = ac + abdba\n    let abdca\
    \ = ab + acdbd\n    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let\
    \ acbba = ac + abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n\
    \    let abcbc = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab +\
    \ acdbb\n    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba\
    \ = ac + abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let\
    \ abcbc = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab + acdbb\n\
    \    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba = ac +\
    \ abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let abcbc\
    \ = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab + acdbb\n    let\
    \ acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba = ac + abdca\n\
    \    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let abcbc = ab +\
    \ acbba\n    let acbda = ac + abdba\n    let abdca", '    return ((a + b > c)
    && (a + c > b) && (b + c > a))', '    return ((b - a) * (c - b) <= 0)', "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb\
    \ = abs(c - b)\n    return (ab == bc && ac == cb) || (ab == cb && ac == ab)",
  '    return ((a + b > c) && (a + c > b) && (b + c > a))', "    let ab = abs(a -\
    \ b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab > bc &&\
    \ ab > cb)", '    return ((b - a) * (c - b) <= 0)', "    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }", "    if a == 0 || b\
    \ == 0 || c == 0 {\n        return false\n    }\n    if a + b > c {\n        return\
    \ false\n    }\n    if a + c > b {\n        return false\n    }\n    if b + c\
    \ > a {\n        return false\n    }\n    return true"]
stop_tokens:
- "\n}"
