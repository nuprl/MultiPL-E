name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return True if\
  \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>>\
  \ right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
  \ Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ["    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let\
    \ c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a", "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    \n  \
    \  return ab > bc && ac > bc", "    let ab = abs(a - b)\n    let bc = abs(b -\
    \ c)\n    let cb = abs(c - b)\n    \n    if ab > bc {\n        if ab > cb {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if bc > cb {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }", "    let a = abs(a)\n    let\
    \ b = abs(b)\n    let c = abs(c)\n    if a > b {\n        if b > c {\n       \
    \     return true\n        } else {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return true\n        } else {\n  \
    \          return false\n        }\n    }", '    return ((b - a) * (c - b) <=
    0)', "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n\
    \    let cb = abs(c - b)\n    return (ab > ac) && (ab > bc) && (ab > cb)", '    return
    ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', "    let a =\
    \ abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    return true", "    let ab = abs(b - a)\n   \
    \ let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let\
    \ bca = bc + ab\n    let abca = abc + bca\n    return abca >= bca", "    let a\
    \ = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let ab = abs(a + b)\n\
    \    let ac = abs(a + c)\n    let bc = abs(b + c)\n    let abc = ab + ac\n   \
    \ let ab2 = ab * ab\n    let ac2 = ac * ac\n    let bc2 = bc * bc\n    let bc3\
    \ = bc * c\n    let ab3 = ab * c\n    let ab4 = ab * 4\n    let ac4 = ac * 4\n\
    \    let bc5 = bc * 5\n    let bc6 = bc * 5\n    let bc7 = bc * 6\n    let bc8\
    \ = bc * 6\n    let bc9 = bc * 7\n    let bc10 = bc * 8\n    let bc11 = bc * 9\n\
    \    let bc12 = bc * 10\n    let bc13 = bc * 11\n    let bc14 = bc * 12\n    let\
    \ bc15 = bc * 13\n    let bc16 = bc * 14\n    let bc17 = bc * 15\n    let bc18\
    \ = bc * 16\n    let bc19 = bc * 17\n    let bc20 = bc * 18\n    let bc21 = bc\
    \ * 19\n    let bc22 = bc * 20\n    let bc23 = bc * 21\n    let bc24 = bc * 22\n\
    \    let bc25 = bc * 23\n    let bc26 = bc * 24\n    let bc27 = bc * 25\n    let\
    \ bc28 = bc * 26\n    let bc29 = bc * 27\n    let bc30 = bc * 28\n    let bc31\
    \ = bc * 29\n    let bc32 = bc * 30\n    let bc33 = bc * 31\n    let bc34 = bc\
    \ * 32\n    let bc35 = bc * 33\n    let bc36 = bc * 34\n    let bc37 = bc * 35\n\
    \    let bc38 = bc * 36\n    let bc39 = bc * 37\n    let bc40 = bc * 38\n    let\
    \ bc41 = bc * 39\n    let bc42 = bc * 40\n    let bc43 = bc * 41\n    let bc44\
    \ = bc * 42\n    let bc45 = bc * 43\n    let bc46 = bc * 44\n    let bc47 = bc\
    \ * 45\n    let bc48 = bc * 46\n    let bc49 = bc * 47\n    let bc50 = bc * 48\n\
    \    let bc51 = bc * 49\n    let bc52 = bc * 50\n    let bc53 = bc * 51\n    let\
    \ bc54 = bc * 52\n    let bc55 = bc * 53\n    let bc56 = bc * 54\n    let bc57\
    \ = bc * 55\n    let bc58 = ", "    let ab = abs(b - a)\n    let ac = abs(c -\
    \ a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let acbc = ac + bc\n    let abbc = ab + abc\n   \
    \ let acdbc = ac + bcd\n    let abdcb = ab + acbc\n    let acbda = ac + abdc\n\
    \    let abdca = ab + acdbc\n    let acdbb = ac + abbc\n    let abcbc = ab + acbda\n\
    \    let acbba = ac + abdca\n    let abdba = ab + acdbb\n    let acdbd = ac +\
    \ abcbc\n    let abcbd = ab + acbba\n    let acbca = ac + abdba\n    let abdca\
    \ = ab + acdbd\n    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let\
    \ acbba = ac + abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n\
    \    let abcbc = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab +\
    \ acdbb\n    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba\
    \ = ac + abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let\
    \ abcbc = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab + acdbb\n\
    \    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba = ac +\
    \ abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let abcbc\
    \ = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab + acdbb\n    let\
    \ acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba = ac + abdca\n\
    \    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let abcbc = ab +\
    \ acbba\n    let acbda = ac + abdba\n    let abdca", '    return ((a + b > c)
    && (a + c > b) && (b + c > a))', '    return ((b - a) * (c - b) <= 0)', "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb\
    \ = abs(c - b)\n    return (ab == bc && ac == cb) || (ab == cb && ac == ab)",
  '    return ((a + b > c) && (a + c > b) && (b + c > a))', "    let ab = abs(a -\
    \ b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab > bc &&\
    \ ab > cb)", '    return ((b - a) * (c - b) <= 0)', "    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }", "    if a == 0 || b\
    \ == 0 || c == 0 {\n        return false\n    }\n    if a + b > c {\n        return\
    \ false\n    }\n    if a + c > b {\n        return false\n    }\n    if b + c\
    \ > a {\n        return false\n    }\n    return true", '    return ((b - a) *
    (c - b) <= 0)', "    let a2 = a*a\n    let b2 = b*b\n    let c2 = c*c\n    let\
    \ det = a2 + b2 + c2\n    let det = det / 2.0\n    let a3 = a*a\n    let b3 =\
    \ b*b\n    let c3 = c*c\n    let det2 = a3 + b3 + c3\n    let det2 = det2 / 2.0\n\
    \    return det != det2", '    return ((b - a) * (c - b) <= 0)', "    let ab =\
    \ abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc =\
    \ ab + ac\n    let bcd = bc + ab\n    let abbc = abc + bc\n    let abbcd = abbc\
    \ + bcd\n    let abbcde = abbcd + abc\n    let abbcdef = abbcde + ab\n    let\
    \ abbcdefg = abbcdef + bc\n    let abbcdefgh = abbcdefg + c\n    let abbcdefghi\
    \ = abbcdefgh + b\n    let abbcdefghij = abbcdefghi + a\n    let abbcdefghijk\
    \ = abbcdefghij + ab\n    let abbcdefghijkl = abbcdefghijk + c\n    let abbcdefghijkm\
    \ = abbcdefghijk + b\n    let abbcdefghijkn = abbcdefghijk + a\n    let abbcdefghijko\
    \ = abbcdefghijk + ab\n    let abbcdefghijkp = abbcdefghijk + c\n    let abbcdefghijkq\
    \ = abbcdefghijk + b\n    let abbcdefghijkr = abbcdefghijk + a\n    let abbcdefghijks\
    \ = abbcdefghijk + ab\n    let abbcdefghijkt = abbcdefghijk + c\n    let abbcdefghijku\
    \ = abbcdefghijk + b\n    let abbcdefghijkv = abbcdefghijk + a\n    let abbcdefghijkw\
    \ = abbcdefghijk + ab\n    let abbcdefghijkx = abbcdefghijk + c\n    let abbcdefghijky\
    \ = abbcdefghijk + b\n    let abbcdefghijkz = abbcdefghijk + a\n    let abbcdefghijkaa\
    \ = abbcdefghijk + ab\n    let abbcdefghijkab = abbcdefghijk + c\n    let abbcdefghijkac\
    \ = abbcdefghijk + b\n    let abbcdefghijkad = abbcdefghijk + a\n    let abbcdefghijkae\
    \ = abbcdefghijk + ab\n    let abbcdefghijkaf = abbcdefghijk + c\n    let abbcdefghijkag\
    \ = abbc", "    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    \n    return ab == bc && ab == cb", "    let ab = abs(b - a)\n   \
    \ let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let\
    \ bcd = bc + ab\n    let acd = ac + ab\n    let abd = 0\n    let bcd = 0\n   \
    \ let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd\
    \ = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n  \
    \  let acd = 0\n    let abd", '    return ((a + b > c) && (a + c > b) && (b +
    c > a))', "    if a > b {\n        return false\n    }\n    if a > c {\n     \
    \   return false\n    }\n    if b > c {\n        return false\n    }\n    return\
    \ true", "    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n\
    \    if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a\
    \ > c {\n        return right_angle_triangle(b, c, a)\n    }\n    return true",
  '    return ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', '    return
    ((a + b > c) && (a + c > b) && (b + c > a))', '    return ((a + b > c) && (a +
    c > b) && (b + c > a))', '    return ((a + b > c) && (a + c > b) && (b + c > a))',
  '    return ((a + b > c) && (a + c > b) && (b + c > a))', "    let ab = abs(a -\
    \ b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab > bc &&\
    \ ab > cb) || (ab == bc && ab == cb)", "    let ab = a - b\n    let ac = a - c\n\
    \    let bc = b - c\n    let ad = ab + bc\n    let bd = ac + bc\n    let cd =\
    \ ac + ad\n    let abc = ab + ac\n    let bcd = bc + bd\n    let cda = ac + ad\n\
    \    let abd = ab + bd\n    let acd = ac + bd\n    let abbc = ab + bc\n    let\
    \ acbd = ac + bd\n    let abac = ab + ac\n    let bcab = bc + ac\n    let cabc\
    \ = ac + bc\n    let abbd = ab + bd\n    let acbd = ac + bd\n    let abacb = ab\
    \ + acb\n    let bcabc = bc + acb\n    let cabcd = ac + bcd\n    let abacbc =\
    \ ab + acbc\n    let bcabcd = bc + acbd\n    let cabcda = ac + bcd\n    let abacbd\
    \ = ab + acbd\n    let bcabcda = bc + acda\n    let cabcdbc = ac + bcd\n    let\
    \ abacbdcb = ab + acbdc\n    let bcabcdbc = bc + acdbc\n    let cabcdbda = ac\
    \ + bcd\n    let abacbdcba = ab + acbdcba\n    let bcabcdbdc = bc + acdbdc\n \
    \   let cabcdbdca = ac + bcd\n    let abacbdcbac = ab + acbdcbac\n    let bcabcdbdcc\
    \ = bc + acdbdcc\n    let cabcdbdcaa = ac + bcd\n    let abacbdcbacd = ab + acbdcbacd\n\
    \    let bcabcdbdccc = bc + acdbdccc\n    let cabcdbdcaab = ac + bcd\n    let\
    \ abacbdcbacdc = ab + acbdcbacdc\n    let bcabcdbdccca = bc + acdbdccca\n    let\
    \ cabcdbdcaabc = ac + bcd\n    let abacbdcbacdcb = ab + acbdcbacdcb\n    let bcabcdbdcccab\
    \ = bc + acdbdcccab\n    let cabcdbdcaabcdc = ac + bcd\n    let abacbdcbacdcbd\
    \ = ab + acbdcbacdcbd\n    let bcabcdbdcccabc = bc + acdbdcccabc\n    let cabcdbdcaabcd",
  '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    \n    return ab\
    \ >= bc && ab >= cb && ac >= cb", '    return ((b - a) * (c - b) <= 0)', "   \
    \ let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b - c)\n    return\
    \ ab == bc || ab == ac", "    let a1 = (a + b + c) / 2\n    let b1 = (a + b -\
    \ c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 == b1 && b1 == c1 && c1\
    \ == a", "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bca = bc + ab\n    let abcb = abc + bca\n\
    \    let bcbc = bc + abc\n    let acbc = ac + bcb\n    let abcca = abcc + acbc\n\
    \    let acbca = acbc + abcca\n    let abccaa = abcca + acbca\n    let acbcaa\
    \ = acbcaa + abccaa\n    let abccaa1 = abccaa + acbcaa\n    let acbcaa1 = acbcaa1\
    \ + abccaa1\n    let abccaa2 = abccaa1 + acbcaa1\n    let acbcaa2 = acbcaa2 +\
    \ abccaa2\n    let abccaa3 = abccaa2 + acbcaa2\n    let acbcaa3 = acbcaa3 + abccaa3\n\
    \    let abccaa4 = abccaa3 + acbcaa3\n    let acbcaa4 = acbcaa4 + abccaa4\n  \
    \  let abccaa5 = abccaa4 + acbcaa4\n    let acbcaa5 = acbcaa5 + abccaa5\n    let\
    \ abccaa6 = abccaa5 + acbcaa5\n    let acbcaa6 = acbcaa6 + abccaa6\n    let abccaa7\
    \ = abccaa6 + acbcaa6\n    let acbcaa7 = acbcaa7 + abccaa7\n    let abccaa8 =\
    \ abccaa7 + acbcaa7\n    let acbcaa8 = acbcaa8 + abccaa8\n    let abccaa9 = abccaa8\
    \ + acbcaa8\n    let acbcaa9 = acbcaa9 + abccaa9\n    let abccaa10 = abccaa9 +\
    \ acbcaa9\n    let acbcaa10 = acbcaa10 + abccaa10\n    let abccaa11 = abccaa10\
    \ + acbcaa10\n    let acbcaa11 = acbcaa11 + abccaa11\n    let abccaa12 = abccaa11\
    \ + acbcaa11\n    let acbcaa12 = acbcaa12 + abccaa12\n    let abccaa13 = abccaa12\
    \ + acbcaa12\n    let acbcaa13 = acbcaa13 + abccaa13\n    let abccaa14 = abccaa13\
    \ + acbca", "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > ac) && (ab > bc) && (ab > cb)",
  '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let acbc = ac + bc\n    let abbcd = ab + bcd\n  \
    \  let acdbc = ac + bcd\n    let abdab = ab + ab\n    let acdab = ac + ab\n  \
    \  let abcab = ab + ac\n    let acbab = ac + ab\n    let abdac = ab + ac\n   \
    \ let acdba = ac + ab\n    let abcabd = ab + ac\n    let acbabd = ac + ab\n  \
    \  let abdacb = ab + ac\n    let acdbab = ac + ab\n    let abcabcd = ab + ac\n\
    \    let acbabcd = ac + ab\n    let abdacbc = ab + ac\n    let acdbabc = ac +\
    \ ab\n    let abcabcdb = ab + ac\n    let acbabcdb = ac + ab\n    let abdacbca\
    \ = ab + ac\n    let acdbabca = ac + ab\n    let abcabcdbc = ab + ac\n    let\
    \ acbabcdbc = ac + ab\n    let abdacbcab = ab + ac\n    let acdbabcab = ac + ab\n\
    \    let abcabcdbcd = ab + ac\n    let acbabcdbcd = ac + ab\n    let abdacbcabd\
    \ = ab + ac\n    let acdbabcabd = ac + ab\n    let abcabcdbcda = ab + ac\n   \
    \ let acbabcdbcda = ac + ab\n    let abdacbcabdc = ab + ac\n    let acdbabcabdc\
    \ = ac + ab\n    let abcabcdbcdbb = ab + ac\n    let acbabcdbcdbb = ac + ab\n\
    \    let abdacbcabdbc = ab + ac\n    let acdbabcabdbc = ac + ab\n    let abcabcdbcdbba\
    \ = ab + ac\n    let acbabcdbcdbba = ac + ab\n    let abdacbcabdbcd = ab + ac\n\
    \    let acdbabcabdbcd = ac + ab\n    let abcabcdbcdbcab = ab + ac\n    let acbabcdbcdbcab\
    \ = ac + ab\n    let abdacbcabdbcda = ab + ac\n    let acdbabcabdbcda = ac + ",
  "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n   \
    \ let abc = ab + ac\n    let bcd = bc + ab\n    let abbc = abc + bc\n    let abbcd\
    \ = abbc + bcd\n    let abbcde = abbcd + abc\n    let abbcdef = abbcde + ab\n\
    \    let abbcdefg = abbcdef + bc\n    let abbcdefgh = abbcdefg + c\n    let abbcdefghi\
    \ = abbcdefgh + b\n    let abbcdefghij = abbcdefghi + a\n    let abbcdefghijk\
    \ = abbcdefghij + ab\n    let abbcdefghijkl = abbcdefghijk + c\n    let abbcdefghijkm\
    \ = abbcdefghijk + b\n    let abbcdefghijkn = abbcdefghijk + a\n    let abbcdefghijkno\
    \ = abbcdefghijkn + ab\n    let abbcdefghijknop = abbcdefghijkno + c\n    let\
    \ abbcdefghijknoq = abbcdefghijkno + b\n    let abbcdefghijknor = abbcdefghijkno\
    \ + a\n    let abbcdefghijknos = abbcdefghijkno + ab\n    let abbcdefghijknot\
    \ = abbcdefghijkno + c\n    let abbcdefghijknou = abbcdefghijkno + b\n    let\
    \ abbcdefghijknov = abbcdefghijkno + a\n    let abbcdefghijknow = abbcdefghijkno\
    \ + ab\n    let abbcdefghijknox = abbcdefghijkno + c\n    let abbcdefghijknoy\
    \ = abbcdefghijkno + b\n    let abbcdefghijknoz = abbcdefghijkno + a\n    let\
    \ abbcdefghijknoaa = abbcdefghijkno + ab\n    let abbcdefghijknoab = abbcdefghijkno\
    \ + c\n    let abbcdefghijknoac = abbcdefghijkno + b\n    let abbcdefghijknoad\
    \ = abbcdefghijkno + a\n    let abbcdefghijknoae = abbcdefghijk", "    if a >\
    \ b {\n        return false\n    }\n    if b > c {\n        return false\n   \
    \ }\n    if c > a {\n        return false\n    }\n    return true", '    return
    ((b - a) * (c - b) <= 0)', '    return ((a + b > c) && (a + c > b) && (b + c >
    a))', "    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a >\
    \ b {\n        if b > c {\n            return false\n        } else {\n      \
    \      return true\n        }\n    } else {\n        if c > b {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }", '    return
    ((b - a) * (c - b) <= 0)', "    let ab = abs(a - b)\n    let ac = abs(a - c)\n\
    \    let bc = abs(b - c)\n    return (ab > ac) && (ab > bc)", "    let a = abs(a)\n\
    \    let b = abs(b)\n    let c = abs(c)\n    if a > b {\n        if b > c {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if c > b {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }", '    return ((a + b > c) &&
    (a + c > b) && (b + c > a))', '    return ((a + b > c) && (a + c > b) && (b +
    c > a))', "    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let\
    \ c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a", '    return
    ((b - a) * (c - b) <= 0)', "    let ab = abs(b - a)\n    let ac = abs(c - a)\n\
    \    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return ab >= bc && ab >=\
    \ cb && ac >= cb", '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b\
    \ - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb = abs(c -\
    \ b)\n    let abc = ab + ac + bc\n    let bca = bc * ab / abc // bc is hypotenuse\n\
    \    let cba = cb * ab / abc // cb is hypotenuse\n    let acb = ac * ab / abc\
    \ // ac is hypotenuse\n    return abc >= bca * cba * acb", '    return ((b - a)
    * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', '    return ((a + b >
    c) && (a + c > b) && (b + c > a))', "    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab >= bc && ab >= cb)", "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb\
    \ = abs(c - b)\n    let abc = ab + ac + bc\n    let bcb = bc + ab\n    return\
    \ abc >= bcb", "    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc =\
    \ abs(b - c)\n    return (ab > ac) && (ab > bc)", "    let ab = abs(a - b)\n \
    \   let ac = abs(a - c)\n    let bc = abs(b - c)\n    return (ab >= ac) && (ab\
    \ >= bc)", '    return ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c -
    b) <= 0)', '    return ((b - a) * (c - b) <= 0)', '    return ((a + b > c) &&
    (a + c > b) && (b + c > a))', "    let ab = a - b\n    let ac = a - c\n    let\
    \ bc = b - c\n    return (ab + bc == ac) && (ab + ac == bc)", "    let ab = abs(b\
    \ - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb = abs(c -\
    \ b)\n    let abc = ab + ac + bc\n    let abc_ab = abc + ab\n    let abc_ac =\
    \ abc + ac\n    let abc_bc = abc + bc\n    let abc_abc = abc + abc\n    let abc_abc_ab\
    \ = abc + abc_ab\n    let abc_abc_ac = abc + abc_ac\n    let abc_abc_bc = abc\
    \ + abc_bc\n    let abc_abc_abc = abc + abc_abc\n    let abc_abc_abc_ab = abc\
    \ + abc_abc_ab\n    let abc_abc_abc_ac = abc + abc_abc_ac\n    let abc_abc_abc_bc\
    \ = abc + abc_abc_bc\n    let abc_abc_abc_abc = abc + abc_abc_abc\n    let abc_abc_abc_abc_ab\
    \ = abc + abc_abc_abc_ab\n    let abc_abc_abc_abc_ac = abc + abc_abc_abc_ac\n\
    \    let abc_abc_abc_abc_bc = abc + abc_abc_abc_bc\n    let abc_abc_abc_abc_abc\
    \ = abc + abc_abc_abc_abc\n    let abc_abc_abc_abc_abc_ab = abc + abc_abc_abc_abc_ab\n\
    \    let abc_abc_abc_abc_abc_ac = abc + abc_abc_abc_abc_ac\n    let abc_abc_abc_abc_abc_bc\
    \ = abc + abc_abc_abc_abc_bc\n    let abc_abc_abc_abc_abc_abc = abc + abc_abc_abc_abc_abc\n\
    \    let abc_abc_abc_abc_abc_abc_ab = abc + abc_abc_abc_abc_abc_ab\n    let abc_abc_abc_abc_abc_abc_ac\
    \ = abc + abc_abc_abc_abc_abc_ac\n    let abc_abc_abc_abc_abc_abc_bc = abc + abc_abc_abc_abc_abc_bc\n\
    \    let abc_abc_abc_abc_abc_abc_abc = abc + abc_abc_abc_abc_abc_abc\n    let\
    \ abc_abc_abc_abc_abc_abc_abc_ab = ", '    return ((b - a) * (c - b) <= 0)', " \
    \   let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c - a)\n  \
    \  return ab >= bc && ab >= ac", '    return ((a + b > c) && (a + c > b) && (b
    + c > a))', '    return ((a + b > c) && (a + c > b) && (b + c > a))', '    return
    ((b - a) * (c - b) <= 0)', "    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc =\
    \ abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac + bc\n    let abc_ab\
    \ = ab * ab\n    let abc_ac = ab * ac\n    let abc_bc = ab * bc \n    let abc_abc\
    \ = abc_ab + abc_ac + abc_bc\n    let abc_abc2 = abc_ab * abc_ab\n    let abc_abc3\
    \ = abc_ab * abc_ac\n    let abc_abc4 = abc_ab * abc_bc\n    let abc_abc5 = abc_abc\
    \ * abc_ab\n    let abc_abc6 = abc_abc * abc_ac\n    let abc_abc7 = abc_abc *\
    \ abc_bc\n    let abc_abc8 = abc_abc * abc_abc\n    let abc_abc9 = abc_abc * abc_abc2\n\
    \    let abc_abc10 = abc_abc * abc_abc3\n    let abc_abc11 = abc_abc * abc_abc4\n\
    \    let abc_abc12 = abc_abc * abc_abc5\n    let abc_abc13 = abc_abc * abc_abc6\n\
    \    let abc_abc14 = abc_abc * abc_abc7\n    let abc_abc15 = abc_abc * abc_abc8\n\
    \    let abc_abc16 = abc_abc * abc_abc9\n    let abc_abc17 = abc_abc * abc_abc10\n\
    \    let abc_abc18 = abc_abc * abc_abc11\n    let abc_abc19 = abc_abc * abc_abc12\n\
    \    let abc_abc20 = abc_abc * abc_abc13\n    let abc_abc21 = abc_abc * abc_abc14\n\
    \    let abc_abc22 = abc_abc * abc_abc15\n    let abc_abc23 = abc_abc * abc_abc16\n\
    \    let abc_abc24 = abc_abc * abc_abc17\n    let abc_abc25 = abc_abc * abc_abc18\n\
    \    let abc_abc26 = abc_abc * abc_abc19\n    let abc_abc27 = abc_abc * abc_abc20\n\
    \    let abc_abc28 = abc_abc * abc_abc21\n    let abc_abc29 = abc_abc * abc_abc22\n\
    \    let abc_abc30 = abc_abc * abc_abc", '    return ((a + b > c) && (a + c >
    b) && (b + c > a))', '    return ((a + b > c) && (a + c > b) && (b + c > a))',
  "    let a1 = (a + b + c) / 2\n    let b1 = (a + b - c) / 2\n    let c1 = (a - b\
    \ - c) / 2\n    return a1 == b1 && b1 == c1 && c1 == 0", '    return ((b - a)
    * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', '    return ((b - a)
    * (c - b) <= 0)', "    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    let ab\
    \ = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    if ab ==\
    \ bc {\n        return ab == ac\n    }\n    if ab == ac {\n        return ab ==\
    \ bc || ab == b\n    }\n    if ab == bc {\n        return ab == ac || ab == a\n\
    \    }\n    return ab == bc || ab == ac || ab == a", "    let ab = abs(b - a)\n\
    \    let bc = abs(c - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >=\
    \ ac", '    return ((b - a) * (c - b) <= 0)', "    let a = abs(a)\n    let b =\
    \ abs(b)\n    let c = abs(c)\n    if a > b {\n        if b > c {\n           \
    \ return true\n        } else {\n            return false\n        }\n    } else\
    \ {\n        if c > b {\n            return true\n        } else {\n         \
    \   return false\n        }\n    }", "    let a1 = b - a\n    let a2 = c - a\n\
    \    let a3 = b - c\n    let a4 = c - b\n    let a5 = b - a\n    let a6 = c -\
    \ a\n    let a7 = a - b\n    let a8 = a - c\n    let a9 = a - b\n    let a10 =\
    \ c - a\n    let a11 = a - c\n    let a12 = a - b\n    let a13 = a - a\n    let\
    \ a14 = a - a\n    let a15 = a - b\n    let a16 = a - c\n    let a17 = a - c\n\
    \    let a18 = a - b\n    let a19 = a - a\n    let a20 = a - a\n    let a21 =\
    \ a - b\n    let a22 = a - c\n    let a23 = a - c\n    let a24 = a - b\n    let\
    \ a25 = a - a\n    let a26 = a - a\n    let a27 = a - b\n    let a28 = a - c\n\
    \    let a29 = a - c\n    let a30 = a - b\n    let a31 = a - a\n    let a32 =\
    \ a - a\n    let a33 = a - b\n    let a34 = a - c\n    let a35 = a - c\n    let\
    \ a36 = a - b\n    let a37 = a - a\n    let a38 = a - a\n    let a39 = a - b\n\
    \    let a40 = a - c\n    let a41 = a - c\n    let a42 = a - b\n    let a43 =\
    \ a - a\n    let a44 = a - a\n    let a45 = a - b\n    let a46 = a - c\n    let\
    \ a47 = a - c\n    let a48 = a - b\n    let a49 = a - a\n    let a50 = a - a\n\
    \    let a51 = a - b\n    let a52 = a - c\n    let a53 = a - c\n    let a54 =\
    \ a - b\n    let a55 = a - a\n    let a56 = a - a\n    let a57 = a - b\n    let\
    \ a58 = a - c\n    let a59 = a - c\n    let a60 = a - b\n    let a61 = a - a\n\
    \    let a62 = a - a\n    let a63 = a - b\n    let a64 = a - c\n    let a65 =\
    \ a - c\n    let a66 = a - b\n    let a67 = a - a\n    let a68 = a - a\n    let\
    \ a69 = a - b\n    let a70 = a - c\n    let a71 = a - c\n    let a72 = a - b\n\
    \    let a73 = a - a\n    let a74 = a - a\n    let a75 = a - b\n    let a76 =\
    \ a - c\n    let a77 = a - c\n    let ", "    let a = abs(a)\n    let b = abs(b)\n\
    \    let c = abs(c)\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c -\
    \ a)\n    if ab == bc && ab == ac {\n        return true\n    }\n    return false",
  '    return ((b - a) * (c - b) <= 0)', '    return ((a + b > c) && (a + c > b) &&
    (b + c > a))', '    return ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c
    - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', "    if a > b {\n        return\
    \ right_angle_triangle(b, a, c)\n    }\n    if b > c {\n        return right_angle_triangle(a,\
    \ c, b)\n    }\n    if a > c {\n        return right_angle_triangle(b, c, a)\n\
    \    }\n    return true", '    return ((b - a) * (c - b) <= 0)', '    return ((b
    - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b\
    \ - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n\
    \    let bca = bc + ab\n    let abca = abc + bc\n    let acab = ac + ab\n    let\
    \ acbc = ac + bc\n    let abcb = abc + bc\n    let abcbc = abc + cb\n    let acbca\
    \ = acbc + abca\n    let acabcb = acabc+ abcbc\n    let acbcab = acbca+ abcab\n\
    \    let acbcabc = acbcab+ abcabc\n    let acbcabcd = acbcabc+ abcabcd\n    let\
    \ acbcabcd2 = acbcabcd+ abcabcd2\n    let acbcabcd2e = acbcabcd2+ abcabcd2e\n\
    \    let acbcabcd2f = acbcabcd2e+ abcabcd2f\n    let acbcabcd2g = acbcabcd2f+\
    \ abcabcd2g\n    let acbcabcd2h = acbcabcd2g+ abcabcd2h\n    let acbcabcd2i =\
    \ acbcabcd2h+ abcabcd2i\n    let acbcabcd2j = acbcabcd2i+ abcabcd2j\n    let acbcabcd2k\
    \ = acbcabcd2j+ abcabcd2k\n    let acbcabcd2l = acbcabcd2k+ abcabcd2l\n    let\
    \ acbcabcd2m = acbcabcd2l+ abcabcd2m\n    let acbcabcd2n = acbcabcd2m+ abcabcd2n\n\
    \    let acbcabcd2o = acbcabcd2n+ abcabcd2o\n    let acbcabcd2p = acbcabcd2o+\
    \ abcabcd2p\n    let acbcabcd2q = acbcabcd2p+ abcabcd2q\n    let acbcabcd2r =\
    \ acbcabcd2q+ abcabcd2r\n    let acbcabcd2s = acbcabcd2r+ abcabcd2s\n    let acbcabcd2t\
    \ = acbcabcd2s+ abcabcd2t\n    let acbcabcd2u = acbcabcd2t+ abcabcd2u\n    let\
    \ acbcabcd2v = acbcabcd2u+ abcabcd2v\n    let acbcabcd2w = ", '    return ((a
    + b > c) && (a + c > b) && (b + c > a))', '    return ((a + b > c) && (a + c >
    b) && (b + c > a))', '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b\
    \ - a)\n    let bc = abs(c - b)\n    let ac = abs(c - a)\n    return (ab > bc\
    \ && ab > ac)", '    return ((a + b > c) && (a + c > b) && (b + c > a))', '    return
    ((b - a) * (c - b) <= 0)', "    let a = abs(a)\n    let b = abs(b)\n    let c\
    \ = abs(c)\n    if a > b {\n        if b > c {\n            return true\n    \
    \    } else {\n            return false\n        }\n    } else {\n        if c\
    \ > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }", "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let\
    \ bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac + bc\n    let\
    \ bcb = bc + cb\n    let acb = ac + cb\n    return abc > bcb", "    let ab = abs(b\
    \ - a)\n    let bc = abs(c - b)\n    let ac = abs(c - a)\n    return ab >= bc\
    \ && ab >= ac", '    return ((b - a) * (c - b) <= 0)', "    if a > b {\n     \
    \   return false\n    }\n    if a > c {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == 0 || b == 0 || c == 0 {\n  \
    \      return false\n    }\n    if a == b && b == c {\n        return true\n \
    \   }\n    if a == c && c == b {\n        return true\n    }\n    if a == b ||\
    \ a == c || b == c {\n        return true\n    }\n    return false", "    let\
    \ ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc\
    \ = ab + bc\n    let bca = bc * ab\n    let cab = cb * ab\n    let acb = ab *\
    \ cb\n    let aba = ab * ab\n    let aca = acb * ab\n    let bcaa = bca * aca\n\
    \    let caba = cab * aca\n    let acab = aca * cab\n    let abca = aba * cab\n\
    \    let acba = acb * cab\n    let bcab = bca * caba\n    let cabb = cab * caba\n\
    \    let acbc = acb * bc\n    let abcaa = abca * aca\n    let acbab = acba * cab\n\
    \    let abcab = abca * caba\n    let acbba = acbc * cab\n    let abcaba = abcab\
    \ * aca\n    let acbcab = acbca * cab\n    let abcabb = abcab * caba\n    let\
    \ acbcbc = acbca * bc\n    let abcabba = abcaba * aca\n    let acbcabb = acbcab\
    \ * cab\n    let abcabbc = abcabb * caba\n    let acbcbca = acbcab * bc\n    let\
    \ abcabbca = abcabb * aca\n    let acbcbcb = acbcbc * cab\n    let abcabbcaa =\
    \ abcabbca * aca\n    let acbcbcbc = acbcbc * caba\n    let abcabbcbc = abcabbcb\
    \ * caba\n    let acbcbcbc = acbcbcb * cab\n    let abcabbcbca = abcabbcbc * aca\n\
    \    let acbcbcbcb = acbcbcbc * caba\n    let abcabbcbcbc = abcabbcbc * caba\n\
    \    let acbcbcbcbc = acbcbcbcb * cab\n    let abcabbcbcbca = abcabbcbcbc * aca\n\
    \    let acbcbcbcbcb = acbcbcbcbc * caba\n    let abcabbcbcbcbc = abcabbcbcbc\
    \ * caba\n    let acbcbcbcbcbc = acbcbcbcbc * cab\n    let abcabbcbcbcbca = abcabbcbcbcbc\
    \ * aca\n    let acbcbcbcbcbcb = acbcb", "    let a = abs(a)\n    let b = abs(b)\n\
    \    let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }", "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let\
    \ bc = abs(b - c)\n    \n    return ab == bc && ac == bc", '    return ((a + b
    > c) && (a + c > b) && (b + c > a))', '    return ((a + b > c) && (a + c > b)
    && (b + c > a))', '    return ((a + b > c) && (a + c > b) && (b + c > a))', '    return
    ((a + b > c) && (a + c > b) && (b + c > a))', '    return ((b - a) * (c - b) <=
    0)', "    let a1 = (b * b) - (4 * a * c)\n    let a2 = (b * b) - (4 * a * b)\n\
    \    let a3 = (b * b) - (4 * a * a)\n    let a4 = b * b\n    let a5 = b * b\n\
    \    let a6 = b * b\n    let a7 = b * b\n    let a8 = -b * b\n    let a9 = -b\
    \ * b\n    let a10 = -b * b\n    let a11 = -b * b\n    let a12 = -b * b\n    let\
    \ a13 = -b * b\n    let a14 = -b * b\n    let a15 = -b * b\n    let a16 = -b *\
    \ b\n    let a17 = -b * b\n    let a18 = -b * b\n    let a19 = -b * b\n    let\
    \ a20 = -b * b\n    let a21 = -b * b\n    let a22 = -b * b\n    let a23 = -b *\
    \ b\n    let a24 = -b * b\n    let a25 = -b * b\n    let a26 = -b * b\n    let\
    \ a27 = -b * b\n    let a28 = -b * b\n    let a29 = -b * b\n    let a30 = -b *\
    \ b\n    let a31 = -b * b\n    let a32 = -b * b\n    let a33 = -b * b\n    let\
    \ a34 = -b * b\n    let a35 = -b * b\n    let a36 = -b * b\n    let a37 = -b *\
    \ b\n    let a38 = -b * b\n    let a39 = -b * b\n    let a40 = -b * b\n    let\
    \ a41 = -b * b\n    let a42 = -b * b\n    let a43 = -b * b\n    let a44 = -b *\
    \ b\n    let a45 = -b * b\n    let a46 = -b * b\n    let a47 = -b * b\n    let\
    \ a48 = -b * b\n    let a49 = -b * b\n    let a50 = -b * b\n    let a51 = -b *\
    \ b\n    let a52 = -b * b\n    let a53 = -b * b\n    let a54 = -b * b\n    let\
    \ a55 = -b * b\n    let a56 = -b * b\n    let a57 = -b * b\n    let a58 = -b *\
    \ b\n    let a59 = -b * b\n    let a60 = -b * b\n    let a61 = -b * b\n    let\
    \ a62 = -b * b\n    let a63 = -b * b\n    let a64 = -b * b\n    let a65 = -b *\
    \ b\n    let a66 = -b * b\n    let a67 = -b * b\n    let a68 = -b * b\n    let\
    \ a69 = -b * b\n    let a70 = -b * b\n    let a71 = -b * b\n    let a72 = -b *\
    \ b\n    let a73 = -b * b\n    let a74 = -b * b\n    let a75 = -b * b\n    let ",
  '    return ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', " \
    \   let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n  \
    \  let abc = ab + ac + bc\n    return abc >= bc && abc >= ac", "    let ab = abs(a\
    \ - b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return ab >= bc\
    \ && ab >= cb", '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b - a)\n\
    \    let bc = abs(c - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >=\
    \ ac", '    return ((a + b > c) && (a + c > b) && (b + c > a))', "    let a1 =\
    \ (a + b + c) / 2\n    let b1 = (a + b - c) / 2\n    let c1 = (a - b - c) / 2\n\
    \    return a1 == b1 && b1 == c1 && c1 == a", "    let ab = abs(b - a)\n    let\
    \ bc = abs(c - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac",
  "    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n   \
    \ return (ab > bc && ab > cb) || (bc > ab && bc > cb) || (cb > ab && cb > bc)",
  "    let ab = a - b\n    let bc = b - c\n    let ac = a - c\n    return ab > 0 &&\
    \ bc > 0 && ac > 0", '    return ((b - a) * (c - b) <= 0)', '    return ((a +
    b > c) && (a + c > b) && (b + c > a))', "    let ab = abs(b - a)\n    let bc =\
    \ abs(c - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac", '    return
    ((b - a) * (c - b) <= 0)', '    return ((a + b > c) && (a + c > b) && (b + c >
    a))', '    return ((b - a) * (c - b) <= 0)', "    let ab = abs(b - a)\n    let\
    \ ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc = ab + ac + bc\n    return\
    \ abc > a * c", "    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc\
    \ = abs(b - c)\n    if ab > ac && ab > bc {\n        return true\n    }\n    return\
    \ false", '    return ((b - a) * (c - b) <= 0)', '    return ((a + b > c) && (a
    + c > b) && (b + c > a))', "    let ab = abs(a - b)\n    let bc = abs(b - c)\n\
    \    let cb = abs(c - b)\n    return (ab > bc && ab > cb)", '    return ((b -
    a) * (c - b) <= 0)', '    return ((a + b > c) && (a + c > b) && (b + c > a))',
  "    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let c1 = (c + a\
    \ + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a", '    return ((b - a)
    * (c - b) <= 0)', '    return ((a + b > c) && (a + c > b) && (b + c > a))', " \
    \   let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c - a)\n  \
    \  return ab >= bc && ab >= ac", "    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b) / 2\n    let c1 = (a + c) / 2\n    let a2 = (b + c + a) / 2\n    let b2\
    \ = (b + c) / 2\n    let c2 = (b + a) / 2\n    let a3 = (a2 + b2 + c2) / 2\n \
    \   let b3 = (a2 + b2 + a) / 2\n    let c3 = (a2 + c2 + a) / 2\n    let a4 = (a3\
    \ + b3 + c3) / 2\n    let b4 = (a3 + b3 + a4) / 2\n    let c4 = (a3 + c4 + a3)\
    \ / 2\n    let a5 = (a4 + b5 + c5) / 2\n    let b5 = (a4 + b5 + a5) / 2\n    let\
    \ c5 = (a4 + c5 + a4) / 2\n    let a6 = (a5 + b6 + c6) / 2\n    let b6 = (a5 +\
    \ b6 + a6) / 2\n    let c6 = (a5 + c6 + a5) / 2\n    let a7 = (a6 + b7 + c7) /\
    \ 2\n    let b7 = (a6 + b7 + a7) / 2\n    let c7 = (a6 + c7 + a6) / 2\n    let\
    \ a8 = (a7 + b8 + c8) / 2\n    let b8 = (a7 + b8 + a8) / 2\n    let c8 = (a7 +\
    \ c8 + a7) / 2\n    let a9 = (a8 + b9 + c9) / 2\n    let b9 = (a8 + b9 + a9) /\
    \ 2\n    let c9 = (a8 + c9 + a8) / 2\n    let a10 = (a9 + b10 + c10) / 2\n   \
    \ let b10 = (a9 + b10 + a10) / 2\n    let c10 = (a9 + c10 + a9) / 2\n    let a11\
    \ = (a10 + b11 + c11) / 2\n    let b11 = (a10 + b11 + a11) / 2\n    let c11 =\
    \ (a10 + c11 + a10) / 2\n    let a12 = (a11 + b12 + c12) / 2\n    let b12 = (a11\
    \ + b12 + a12) / 2\n    let c12 = (a11 + c12 + a11) / 2\n    let a13 = (a12 +\
    \ b13 + c13) / 2\n    let b13 = (a12 + b13 + a13) / 2\n    let c13 = (a12 + c13\
    \ + a12) / 2\n    let a14 = (a13 + b14 + c14) / 2\n    let b14 = (a13 + b14 +\
    \ a14) / 2\n    let c14 = (a13 + c14 + a13) / 2\n    let a15 = (a14 + b15 + c15)\
    \ / 2\n    let b15 = (a14 + b15 + a15) / 2\n    let c15 = (a14 + c15 + a14) /\
    \ 2\n    let a16 = (a15 + b16 + c16) / 2\n    let b16 = (a15 + b16 + a16) / 2\n\
    \    let c16 = (a15 + ", "    let ab = a - b\n    let ac = a - c\n    let bc =\
    \ b - c\n    let ad = ab + bc\n    let bd = ac + bc\n    let cd = ac + ad\n  \
    \  let abc = ab + ac\n    let bcd = bc + bd\n    let cda = cd + ad\n    let adb\
    \ = ad + bd\n    let bdc = bd + cd\n    let cdb = cd + bd\n    let abdc = ab +\
    \ bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd\
    \ = bd + cd + ad\n    let cdab = cd + ab + bd\n    let abdc = ab + bc + cd\n \
    \   let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd = bd +\
    \ cd + ad\n    let cdab = cd + ab + bd\n    let abdc = ab + bc + cd\n    let acdb\
    \ = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd = bd + cd + ad\n \
    \   let cdab = cd + ab + bd\n    let abdc = ab + bc + cd\n    let acdb = ac +\
    \ ad + bd\n    let adcb = ad + cd + bd\n    let bdcd = bd + cd + ad\n    let cdab\
    \ = cd + ab + bd\n    let abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n \
    \   let adcb = ad + cd + bd\n    let bdcd = bd + cd + ad\n    let cdab = cd +\
    \ ab + bd\n    let abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb\
    \ = ad + cd + bd\n    let bdcd = bd + cd + ad\n    let cdab = cd + ab + bd\n \
    \   let abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad +\
    \ cd + bd\n    let bdcd = bd + cd + ad\n    let cdab = cd + ab + bd\n    let abdc\
    \ = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n \
    \   let bdcd = bd + cd + ad\n    let cdab = cd + ab + bd\n    let abdc = ab +\
    \ bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd\
    \ = bd + cd + ", "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc\
    \ = abs(b - c)\n    let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc\
    \ + bc\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcab = abc +\
    \ ab\n    let abcbc = abc + bc\n    let acbca = ac + bca + ab\n    let acabc =\
    \ ac + abc + ab\n    let acbcab = ac + bca + abc + ab\n    let acabca = ac + abc\
    \ + abc + ab\n    let acbcabc = ac + bca + abc + abc + ab\n    let acabcab = ac\
    \ + abc + abc + abc + ab\n    let acbcabcd = ac + bca + abc + abc + abc + ab\n\
    \    let acabcabd = ac + abc + abc + abc + abc + ab\n    let acbcabcde = ac +\
    \ bca + abc + abc + abc + abc + ab\n    let acabcabde = ac + abc + abc + abc +\
    \ abc + abc + ab\n    let acbcabcdef = ac + bca + abc + abc + abc + abc + abc\
    \ + ab\n    let acabcabdef = ac + abc + abc + abc + abc + abc + abc + ab\n   \
    \ let acbcabcdefg = ac + bca + abc + abc + abc + abc + abc + abc + ab\n    let\
    \ acabcabdefg = ac + abc + abc + abc + abc + abc + abc + abc + ab\n    let acbcabcdefgh\
    \ = ac + bca + abc + abc + abc + abc + abc + abc + abc + ab\n    let acabcabdefgh\
    \ = ac + abc + abc + abc + abc + abc + abc + abc + abc + ab\n    let acbcabcdefghi\
    \ = ac + bca + abc + abc + abc + abc + abc + abc + abc + abc + ab\n    let acabcabdefghi\
    \ = ac + abc + abc + abc + abc + abc + abc + abc + abc + abc + ab\n    let acbcabcdefghij\
    \ = ac + bca + abc + abc + abc + abc + abc + abc + abc + abc + abc + ab\n    let\
    \ acabcabdefghij = ac + abc + abc + abc + abc + abc + abc + abc + abc + abc +\
    \ abc + abc + ab\n    let acbcabcdefgh", "    let ab = abs(a - b)\n    let bc\
    \ = abs(b - c)\n    let cb = abs(c - b)\n    return (ab >= bc) && (ab >= cb)",
  "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n   \
    \ let abc = ab + ac\n    let bcd = bc + ab\n    return abc > bcd", "    let ab\
    \ = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb =\
    \ abs(c - b)\n    return ab >= ac && ab >= bc && ab >= cb", "    let a = abs(a)\n\
    \    let b = abs(b)\n    let c = abs(c)\n    \n    if a == 0 || b == 0 || c ==\
    \ 0 {\n        return false\n    }\n    \n    let discriminant = b*b - 4*a*c\n\
    \    \n    if discriminant < 0 {\n        return false\n    }\n    \n    let root\
    \ = (-b + sqrt(discriminant)) / (2*a)\n    \n    if root < 0 {\n        return\
    \ false\n    }\n    \n    return true", '    return ((b - a) * (c - b) <= 0)',
  '    return ((b - a) * (c - b) <= 0)', "    let a = abs(a)\n    let b = abs(b)\n\
    \    let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }", "    let ab = a - b\n    let bc = b - c\n    let ac = a -\
    \ c\n    return (ab * bc == ac * ab)", '    return ((b - a) * (c - b) <= 0)',
  "    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if a > b {\n  \
    \      if b > c {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if c > b {\n            return false\n\
    \        } else {\n            return true\n        }\n    }", '    return ((a
    + b > c) && (a + c > b) && (b + c > a))', '    return ((a + b > c) && (a + c >
    b) && (b + c > a))', '    return ((a + b > c) && (a + c > b) && (b + c > a))',
  '    return ((b - a) * (c - b) <= 0)', "    let a1 = (a + b + c) / 2\n    let b1\
    \ = (a + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 * b1 * c1 < 0",
  "    let a1 = (a + b + c) / 2\n    let b1 = (a + b) / 2\n    let c1 = (a + c) /\
    \ 2\n    let a2 = (b + c + a) / 2\n    let b2 = (b + c) / 2\n    let c2 = (b +\
    \ a) / 2\n    let a3 = (a2 + b2 + c2) / 2\n    let b3 = (a2 + b2) / 2\n    let\
    \ c3 = (a2 + c2 + a) / 2\n    let a4 = (b2 + c2 + b) / 2\n    let b4 = (b2 + c)\
    \ / 2\n    let c4 = (b + a) / 2\n    let a5 = (a3 + b3 + c3) / 2\n    let b5 =\
    \ (a3 + b3) / 2\n    let c5 = (a3 + c3 + a) / 2\n    let a6 = (b3 + c3 + b) /\
    \ 2\n    let b6 = (b3 + c) / 2\n    let c6 = (b + a) / 2\n    let a7 = (a4 + b5\
    \ + c6) / 2\n    let b7 = (a4 + b5) / 2\n    let c7 = (a4 + c6 + a) / 2\n    let\
    \ a8 = (b5 + c6 + b5) / 2\n    let b8 = (b5 + c6) / 2\n    let c8 = (b5 + a) /\
    \ 2\n    let a9 = (a6 + b7 + c8) / 2\n    let b9 = (a6 + b7) / 2\n    let c9 =\
    \ (a6 + c8 + a) / 2\n    let a10 = (b7 + c8 + b7) / 2\n    let b10 = (b7 + c8)\
    \ / 2\n    let c10 = (b7 + a) / 2\n    let a11 = (a8 + b9 + c10) / 2\n    let\
    \ b11 = (a8 + b9) / 2\n    let c11 = (a8 + c10 + a) / 2\n    let a12 = (b9 + c10\
    \ + b9) / 2\n    let b12 = (b9 + c10) / 2\n    let c12 = (b9 + a) / 2\n    let\
    \ a13 = (a10 + b11 + c12) / 2\n    let b13 = (a10 + b11) / 2\n    let c13 = (a10\
    \ + c12 + a) / 2\n    let a14 = (b11 + c12 + b11) / 2\n    let b14 = (b11 + c12)\
    \ / 2\n    let c14 = (b11 + a) / 2\n    let a15 = (a12 + b13 + c14) / 2\n    let\
    \ b15 = (a12 + b13) / 2\n    let c15 = (a12 + c14 + a) / 2\n    let a16 = (b13\
    \ + c14 + b13) / 2\n    let b16 = (b13 + c14) / 2\n    let c16 = (b13 + a) / 2\n\
    \    let a17 = (a14 + b15 + c16) / 2\n    let b17 = (a14 + b15) / 2\n    let c17\
    \ = (a14 + c16 + a) / 2\n    let a18 = (b15 + c16 + b15) / 2\n    let b18 = (b15\
    \ + c16", '    return ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b)
    <= 0)', "    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c\
    \ - a)\n    return ab >= bc && ab >= ac", "    let ab = abs(a - b)\n    let ac\
    \ = abs(a - c)\n    let bc = abs(b - c)\n    let abc = ab + ac + bc\n    return\
    \ abc > a * a + b * b + c * c", '    return ((a + b > c) && (a + c > b) && (b
    + c > a))', '    return ((b - a) * (c - b) <= 0)', '    return ((a + b > c) &&
    (a + c > b) && (b + c > a))', "    let a1 = abs(a)\n    let b1 = abs(b)\n    let\
    \ c1 = abs(c)\n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n   \
    \ if a1 == c1 {\n        return false\n    }\n    if b1 == c1 {\n        return\
    \ false\n    }\n    if a1 == b1 {\n        return false\n    }\n    if b1 == a\
    \ {\n        return false\n    }\n    if c1 == a {\n        return false\n   \
    \ }\n    if c1 == b {\n        return false\n    }\n    return true", '    return
    ((a + b > c) && (a + c > b) && (b + c > a))', "    let a1 = (a + b + c) / 2\n\
    \    let b1 = (a + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 ==\
    \ b1 && b1 == c1 && c1 == a", "    let a = abs(a)\n    let b = abs(b)\n    let\
    \ c = abs(c)\n    let s = (a+b+c)/2\n    let t = (a+b+c)/2\n    let u = (a+b+c)/2\n\
    \    let v = (b+c)/2\n    return s == t && s == u && s == v", "    let ab = abs(b\
    \ - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let cb = abs(c -\
    \ b)\n    return (ab == bc && ac == cb) || (ab == cb && ac == ab)", "    let ab\
    \ = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc\
    \ = ab + bc + cb\n    return abc <= 1", "    if a == 0 || b == 0 || c == 0 {\n\
    \        return false\n    }\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n\
    \    let bc = abs(b - c)\n    let ad = abs(a - d)\n    let bd = abs(b - d)\n \
    \   let cd = abs(c - d)\n    let abc = ab + ac\n    let bcd = bc + bd\n    let\
    \ cda = cd + ad\n    let abd = 0\n    let cdb = 0\n    let adc = 0\n    let bdc\
    \ = 0\n    let cdc = 0\n    if abc > bcd && abc > cda && abc > abd && abc > cdb\
    \ && abc > cdc {\n        return true\n    }\n    if bcd > abc && bcd > cda &&\
    \ bcd > abd && bcd > cdb && bcd > cdc {\n        return true\n    }\n    if cda\
    \ > abc && cda > bcd && cda > abd && cda > cdb && cda > cdc {\n        return\
    \ true\n    }\n    if abd > abc && abd > bcd && abd > cda && abd > cdb && abd\
    \ > cdc {\n        return true\n    }\n    if cdb > abc && cdb > bcd && cdb >\
    \ abd && cdb > cda && cdb > cdc {\n        return true\n    }\n    if cd > abc\
    \ && cd > bcd && cd > abd && cd > cda && cd > cdb && cd > cdc {\n        return\
    \ true\n    }\n    return false", "    let ab = a - b\n    let bc = b - c\n  \
    \  let cb = c - b\n    let abc = ab * cb\n    let acb = ac * cb\n    let bcb =\
    \ bc * cb\n    let abbc = ab * bc\n    let acbc = ac * bc\n    let bcbc = bc *\
    \ bc\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc *\
    \ bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * b", "    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > bc && ab > cb)", '    return
    ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <= 0)', '    return
    ((b - a) * (c - b) <= 0)', '    return ((a + b > c) && (a + c > b) && (b + c >
    a))', "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b -\
    \ c)\n    let cb = abs(c - b)\n    return (ab > ac) && (ab > bc) && (ab > cb)",
  "    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a + b\
    \ > c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true", " \
    \   let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n  \
    \  let abc = ab + ac\n    let bcd = bc + ab\n    let abdc = ab + bc\n    let bda\
    \ = bcd + ab\n    let cdab = ac + ab\n    let cdbb = bc + ab\n    let cdbd = bc\
    \ + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let cdab = ac\
    \ + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc + bcd\n    let abdc = ab\
    \ + cdbd\n    let bda = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb = bc\
    \ + abdc\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda = bcd\
    \ + abdc\n    let cdab = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc\
    \ + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let cdab = ac\
    \ + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc + bcd\n    let abdc = ab\
    \ + cdbd\n    let bda = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb = bc\
    \ + abdc\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda = bcd\
    \ + abdc\n    let cdab = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc\
    \ + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let cdab = ac\
    \ + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc + bcd\n    let abdc = ab\
    \ + cdbd\n    let bda = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb = bc\
    \ + abdc\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda = bcd\
    \ + abdc\n    let cdab = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc\
    \ + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let ", "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc\
    \ = ab + ac\n    let bcd = bc + ab\n    let abdc = ab + bc\n    let acbc = ac\
    \ + bc\n    let abdab = ab + ab\n    let acbca = ac + ac\n    let bcdaa = bc +\
    \ da\n    let abdac = ab + ac\n    let acdbb = ac + bc\n    let abdabc = ab +\
    \ abc\n    let acbcab = ac + cab\n    let bcdaab = bc + daa\n    let abdacb =\
    \ ab + acb\n    let acdbcb = ac + bcb\n    let abdabcb = ab + abcd\n    let acbcabc\
    \ = ac + cabc\n    let bcdaabb = bc + daab\n    let abdacbc = ab + acbc\n    let\
    \ acdbcbc = ac + bcbc\n    let abdabcbb = ab + abcdab\n    let acbcabcb = ac +\
    \ cabcb\n    let bcdaabbb = bc + daabb\n    let abdacbcbc = ab + acbcbc\n    let\
    \ acdbcbcb = ac + bcbcb\n    let abdabcbbc = ab + abcdabc\n    let acbcabcbc =\
    \ ac + cabcbc\n    let bcdaabbbc = bc + daabbb\n    let abdacbcbcb = ab + acbcbcb\n\
    \    let acdbcbcbc = ac + bcbcbc\n    let abdabcbbcb = ab + abcdabcb\n    let\
    \ acbcabcbcb = ac + cabcbcb\n    let bcdaabbbcb = bc + daabbbc\n    let abdacbcbcbc\
    \ = ab + acbcbcbc\n    let acdbcbcbcb = ac + bcbcbcb\n    let abdabcbbcbc = ab\
    \ + abcdabcbb\n    let acbcabcbcbc = ac + cabcbcbc\n    let bcdaabbbcbc = bc +\
    \ daabbbcb\n    let abdacbcbcbcb = ab + acbcbcbcb\n    let acdbcbcbcbc = ac +\
    \ bcbcbcbc\n    let abdabcbbcbcb = ab + abcdabcbbc\n    let acbcabcbcbcb = ac\
    \ + cabcbcbcb\n    let bcdaabbbcbcb = bc + daabbbcbc\n    let abdacbcbcb", '    return
    ((a + b > c) && (a + c > b) && (b + c > a))', '    return ((b - a) * (c - b) <=
    0)', "    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let ad\
    \ = abs(a - d)\n    let bd = abs(b - d)\n    let cd = abs(c - d)\n    let abc\
    \ = ab + ac\n    let bca = bc + ad\n    let acb = ac + bc\n    let abcd = abc\
    \ + bcd\n    let abbc = ab + bc\n    let acbd = ac + bd\n    let abcdb = abc +\
    \ bcd\n    let abcbd = abc + bcd\n    let abcab = abc + cab\n    let abcbc = abc\
    \ + cbc\n    let abcabd = abc + cabd\n    let abcabcd = abc + cabcd\n    let abcabcdb\
    \ = abc + cabcdb\n    let abcabcdbd = abc + cabcdbd\n    let abcabcdbcd = abc\
    \ + cabcdbcd\n    let abcabcdbcdb = abc + cabcdbcdb\n    let abcabcdbcdbd = abc\
    \ + cabcdbcdbd\n    let abcabcdbcdbcd = abc + cabcdbcdbcd\n    let abcabcdbcdbcdb\
    \ = abc + cabcdbcdbcdb\n    let abcabcdbcdbcdbd = abc + cabcdbcdbcdbd\n    let\
    \ abcabcdbcdbcdbcd = abc + cabcdbcdbcdbcd\n    let abcabcdbcdbcdbcdb = abc + cabcdbcdbcdbcdb\n\
    \    let abcabcdbcdbcdbcdbd = abc + cabcdbcdbcdbcdbd\n    let abcabcdbcdbcdbcdbcd\
    \ = abc + cabcdbcdbcdbcdbcd\n    let abcabcdbcdbcdbcdbcdb = abc + cabcdbcdbcdbcdbcdb\n\
    \    let abcabcdbcdbcdbcdbcdbd = abc + cabcdbcdbcdbcdbcdbd\n    let abcabcdbcdbcdbcdbcdbcd\
    \ = abc + cabcdbcdbcdbcdbcdbcd\n    let abcabcdbcdbcdbcdbcdbcdb = abc + cabcdbcdbcdbcdbcdbcdb\n\
    \    let abcabcdbcdbcdbcdbcdbc", '    return ((a + b > c) && (a + c > b) && (b
    + c > a))', "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bca = bc + ab\n    let abcb = abc + bca\n\
    \    let abcc = abc + abcb // abcc = ab + abc + ab + abc + ab\n    let abccc =\
    \ abc + abcc\n    let abcccb = abccc + abcc\n    let abcccba = abccc + abcccb\n\
    \    let abcccbac = abccca + abcccb // abcccba = ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab\n    let abcccbacb = abcccbac + abcccb // abcccbacb = ab + abc\
    \ + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\n   \
    \ let abcccbacba = abcccbacc + abcccb // abcccbacba = ab + abc + ab + abc + ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\
    \ + abc + ab\n    let abcccbacbacb = abcccbacbac + abcccb // abcccbacbacb = ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\n    let abcccbacbacba\
    \ = abcccbacbacc + abcccb // abcccbacbacba = ab + abc + ab + abc + ab + abc +\
    \ ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc +\
    \ ab + abc + ab + abc + ab + abc + ab + abc + ab\n    let abcccbacbacbacb = abcccbacbacbac\
    \ + abcccb // abcccbacbacbacb = ab + abc + ab + abc + ab + abc + ab + abc + ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\n    let abcc",
  "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n   \
    \ let abc = ab + ac + bc\n    if abc > 0 {\n        return abc >= bc && abc >=\
    \ ac\n    } else {\n        return abc < bc && abc < ac\n    }", "    let a1 =\
    \ b - a\n    let a2 = c - a\n    let b1 = c - b\n    let b2 = a - b\n    let c1\
    \ = a - c\n    let c2 = b - a\n    let det = a1 * b2 - a2 * b1\n    if det ==\
    \ 0 {\n        return false\n    }\n    let s = b1 * c2 - b2 * c1\n    if s ==\
    \ 0 {\n        return false\n    }\n    let t = c1 * a2 - a1 * a2\n    if t ==\
    \ 0 {\n        return false\n    }\n    let u = det / s\n    return u >= 0 &&\
    \ u <= 1"]
stop_tokens:
- "\n}"
