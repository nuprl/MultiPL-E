name: HumanEval_0_has_close_elements
language: swift
prompt: "\n/// Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0,\
  \ 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8,\
  \ 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
  \ [Double], threshold: Double) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
  \ 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
  \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
  \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
completions: ["    if numbers.isEmpty {\n        return false\n    }\n    var min:\
    \ Double? = nil\n    var max: Double? = nil\n    for number in numbers {\n   \
    \     if min == nil || number < min {\n            min = number\n        }\n \
    \       if max == nil || number > max {\n            max = number\n        }\n\
    \    }\n    if max == nil {\n        return true\n    }\n    if min == nil {\n\
    \        return false\n    }\n    return abs(max! - min!) < threshold", "    if\
    \ numbers.isEmpty {\n        return false\n    }\n    let sortedNumbers = numbers.sorted()\n\
    \    let firstNumber = sortedNumbers[0]\n    let lastNumber = sortedNumbers.last!\n\
    \    return abs(firstNumber - lastNumber) < threshold", "    let sortedNumbers\
    \ = numbers.sorted()\n    if sortedNumbers.count < 2 {\n        return false\n\
    \    }\n    let firstNumber = sortedNumbers[0]\n    let lastNumber = sortedNumbers.last!\n\
    \    return abs(firstNumber - lastNumber) < threshold", "    var distances = numbers.map\
    \ { abs($0 - threshold) }\n    distances.sort()\n    return distances.last < distances.first",
  "    if numbers.isEmpty {\n        return false\n    }\n    var min: Double = numbers.first!\n\
    \    var max: Double = numbers.last!\n    for number in numbers {\n        if\
    \ number < min {\n            min = number\n        }\n        if number > max\
    \ {\n            max = number\n        }\n    }\n    if max - min < threshold\
    \ {\n        return false\n    }\n    return true", "    if numbers.isEmpty {\n\
    \        return false\n    }\n    var closest = Double.greatestFiniteMagnitude\n\
    \    var closestIndex = 0\n    for index in 0..<numbers.count {\n        let currentNumber\
    \ = numbers[index]\n        if currentNumber == closest {\n            continue\n\
    \        }\n        let distance = abs(currentNumber - closest)\n        if distance\
    \ < threshold {\n            closest = currentNumber\n            closestIndex\
    \ = index\n        }\n    }\n    return closestIndex != numbers.count - 1", " \
    \   if numbers.isEmpty {\n        return false\n    }\n    if numbers.count ==\
    \ 1 {\n        return true\n    }\n    var closest = numbers[0]\n    for number\
    \ in numbers {\n        if abs(number - closest) < threshold {\n            return\
    \ true\n        }\n        closest = number\n    }\n    return false", "    let\
    \ sortedNumbers = numbers.sorted()\n    let firstElement = sortedNumbers[0]\n\
    \    let lastElement = sortedNumbers.last!\n    let firstElementIndex = sortedNumbers.firstIndex(of:\
    \ firstElement)\n    let lastElementIndex = sortedNumbers.firstIndex(of: lastElement)\n\
    \    if firstElementIndex == lastElementIndex {\n        return false\n    }\n\
    \    let firstElementDistance = sortedNumbers[firstElementIndex] - firstElement\n\
    \    let lastElementDistance = lastElement - sortedNumbers[lastElementIndex]\n\
    \    return abs(firstElementDistance) < abs(lastElementDistance) && abs(firstElementDistance)\
    \ < threshold", "    var min: Double = Double.greatestFiniteMagnitude\n    var\
    \ max: Double = Double.leastFiniteMagnitude\n    for number in numbers {\n   \
    \     if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    if min == max {\n \
    \       return false\n    }\n    for number in numbers {\n        if number -\
    \ threshold < min {\n            return false\n        }\n        if number +\
    \ threshold > max {\n            return false\n        }\n    }\n    return true",
  "    let sortedNumbers = numbers.sorted()\n    let sortedThreshold = numbers.sorted(by:\
    \ { $0 < $1 })\n    if sortedNumbers.count < sortedThreshold.count {\n       \
    \ return false\n    }\n    for i in 0..<sortedNumbers.count {\n        if sortedNumbers[i]\
    \ > sortedThreshold[i] {\n            return true\n        }\n    }\n    return\
    \ false", "    if numbers.isEmpty {\n        return false\n    }\n    var min:\
    \ Double?\n    var max: Double?\n    for number in numbers {\n        if min ==\
    \ nil {\n            min = number\n        } else {\n            min = min(number,\
    \ min)\n        }\n        if max == nil {\n            max = number\n       \
    \ } else {\n            max = max(number, max)\n        }\n    }\n    return min\
    \ != nil && max != nil && abs(min - max) < threshold", "    if numbers.isEmpty\
    \ {\n        return false\n    }\n    if numbers.count == 1 {\n        return\
    \ true\n    }\n    var min: Double?\n    var max: Double?\n    for number in numbers\
    \ {\n        if min == nil || number < min {\n            min = number\n     \
    \   }\n        if max == nil || number > max {\n            max = number\n   \
    \     }\n    }\n    if max == nil {\n        return false\n    }\n    if min ==\
    \ nil {\n        return true\n    }\n    if max! - min! < threshold {\n      \
    \  return false\n    }\n    return true", "    guard numbers.count > 0 else {\n\
    \        return false\n    }\n    guard numbers.count <= 2 else {\n        return\
    \ false\n    }\n    guard numbers.count >= numbers.count * 2 else {\n        return\
    \ false\n    }\n    guard numbers.count >= 2 else {\n        return false\n  \
    \  }\n    guard numbers.count <= numbers.count * 2 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= numbers.count * 2 else {\n        return false\n    }\n\
    \    guard numbers.count >= 2 else {\n        return false\n    }\n    guard numbers.count\
    \ <= numbers.count * 2 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= numbers.count\
    \ * 2 else {\n        return false\n    }\n    guard numbers.count >= 2 else {\n\
    \        return false\n    }\n    guard numbers.count <= numbers.count * 2 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= numbers.count * 2 else {\n\
    \        return false\n    }\n    guard numbers.count >= 2 else {\n        return\
    \ false\n    }\n    guard numbers.count <= numbers.count * 2 else {\n        return\
    \ false\n    }\n    guard numbers.count >= 2 else {\n        return false\n  \
    \  }\n    guard numbers.count <= numbers.count * 2 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= numbers.count * 2 else {\n        return false\n    }\n\
    \    guard numbers.count >= 2 else {\n        return false\n    }\n    guard numbers.count\
    \ <= numbers.count * 2 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= numbers.count\
    \ * 2 else {\n        return false\n    }\n    guard numbers.count >= 2 else {\n\
    \        return false\n    }\n    guard numbers.count <= numbers.count * 2 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= numbers.count * 2 else {\n\
    \        return false\n    }\n    guard numbers.count >= 2 else {\n        return\
    \ false\n    }\n    guard numbers.count <= numbers.count * 2 else {\n        return\
    \ false\n    }\n    guard numbers.count >= 2 else {\n        return false\n  \
    \  }\n    guard numbers.count <= numbers.count * 2 else {\n        return false\n\
    \    }\n    gu", "    if numbers.isEmpty {\n        return false\n    }\n    if\
    \ numbers.count == 1 {\n        return true\n    }\n    var min: Double? = nil\n\
    \    var max: Double? = nil\n    for number in numbers {\n        if min == nil\
    \ || number < min! {\n            min = number\n        }\n        if max == nil\
    \ || number > max! {\n            max = number\n        }\n    }\n    if max ==\
    \ nil {\n        return false\n    }\n    if min == nil {\n        return true\n\
    \    }\n    return abs(max! - min!) < threshold", "    guard numbers.count > 0\
    \ else {\n        return false\n    }\n    guard numbers.count <= 10 else {\n\
    \        return false\n    }\n    guard numbers.count >= 2 else {\n        return\
    \ false\n    }\n    guard numbers.count <= 10 else {\n        return false\n \
    \   }\n    guard numbers.count >= 2 else {\n        return false\n    }\n    guard\
    \ numbers.count <= 10 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= 10 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= 10 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= 10 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= 10 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= 10 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= 10 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= 10 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= 10 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= 10 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= 10 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= 10 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= 10 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {\n        return false\n    }\n    guard numbers.count <= 10 else\
    \ {\n        return false\n    }\n    guard numbers.count >= 2 else {\n      \
    \  return false\n    }\n    guard numbers.count <= 10 else {\n        return false\n\
    \    }\n    guard numbers.count >= 2 else {\n        return false\n    }\n   \
    \ guard numbers.count <= 10 else {\n        return false\n    }\n    guard numbers.count\
    \ >= 2 else {", "    let sortedNumbers = numbers.sorted(by: <)\n    if sortedNumbers.count\
    \ < 2 {\n        return false\n    }\n    let first = sortedNumbers[0]\n    let\
    \ last = sortedNumbers.last!\n    return abs(first - last) < threshold", "   \
    \ if numbers.isEmpty {\n        return false\n    }\n\n    let sortedNumbers =\
    \ numbers.sorted()\n    let closestTo = sortedNumbers.firstIndex({ $0 < threshold\
    \ })\n    let closestToIndex = sortedNumbers.firstIndex({ $0 >= threshold })\n\
    \n    if closestToIndex == closestTo {\n        return true\n    }\n\n    return\
    \ closestToIndex < closestTo", "    if numbers.isEmpty {\n        return false\n\
    \    }\n    if numbers.count == 1 {\n        return true\n    }\n    if numbers.count\
    \ == 2 {\n        return abs(numbers[0] - numbers[1]) < threshold\n    }\n   \
    \ let sortedNumbers = numbers.sorted()\n    var left = 0\n    var right = sortedNumbers.count\
    \ - 1\n    while left < right {\n        let middle = left + (right - left) /\
    \ 2\n        let middleValue = sortedNumbers[middle]\n        if middleValue <\
    \ threshold {\n            right = middle\n        } else {\n            left\
    \ = middle + 1\n        }\n    }\n    return left < right", "    if numbers.isEmpty\
    \ {\n        return false\n    }\n    var first: Double?\n    var second: Double?\n\
    \    for number in numbers {\n        if first == nil {\n            first = number\n\
    \            continue\n        }\n        if second == nil {\n            second\
    \ = number\n            continue\n        }\n        if abs(number - first) <\
    \ abs(number - second) {\n            first = nil\n        } else {\n        \
    \    second = nil\n        }\n    }\n    return first != nil && second != nil\
    \ && abs(first - second) < threshold", "    let sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count {\n        for j in (i + 1)..<sortedNumbers.count\
    \ {\n            if abs(sortedNumbers[i] - sortedNumbers[j]) > (threshold * abs(sortedNumbers[i]))\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false"]
stop_tokens:
- "\n}"
