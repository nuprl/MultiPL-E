name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in a list, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var pile = [Int]()\n    var level = 0\n    var stones = 0\n   \
    \ while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile.append(n)\n\
    \        n -= n % 2 == 0 ? 2 : 3\n        level++\n    }\n    return pile", " \
    \   var stones = [0]\n    var level = 0\n    while stones.count < n {\n      \
    \  if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n        n /= 2\n\
    \        level += 1\n    }\n    return stones", "    var pile = [Int]()\n    var\
    \ count = 0\n    for _ in 0..<n {\n        pile.append(count)\n        count +=\
    \ 1\n    }\n    if n % 2 == 0 {\n        pile = pile.append(pile[pile.count -\
    \ 1] + 2)\n    } else {\n        pile = pile.append(pile[pile.count - 1] + 1)\n\
    \    }\n    return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n   \
    \     result.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n        }\n        n = n / 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        level++\n       \
    \ result.append(stones)\n        n = stones\n    }\n    return result", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n    }\n    return pile",
  "    var stones = [0]\n    if n % 2 == 1 {\n        stones.append(n)\n    }\n  \
    \  for _ in 1..(n/2) {\n        stones.append(stones.last! + 2)\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n/2)\n        }\n    }\n    return\
    \ result", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n  \
    \  var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n         \
    \   pile[level] = stones\n            stones += 2\n        } else {\n        \
    \    pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile = pile.append(n)\n\
    \    if n % 2 == 1 {\n        pile = pile.append(n)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n     \
    \       stones /= 2\n        } else {\n            pile.append(stones)\n     \
    \       stones /= 2\n            pile.append(stones)\n            stones /= 2\n\
    \        }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var level = 0\n    var stone = 0\n    while stone < n {\n        if n % 2\
    \ == 0 {\n            stones.append(stone)\n            stone = 0\n        } else\
    \ {\n            stone += 2\n        }\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n \
    \       pile = append(pile, n / 2)\n    } else {\n        pile = append(pile,\
    \ n / 2)\n        pile = append(pile, n / 2)\n    }\n    return pile", "    var\
    \ result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n    }\n   \
    \ for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n  \
    \      } else {\n            result.append(n/2)\n        }\n        n = n/2\n\
    \    }\n    return result", "    var stones = [Int]()\n    var currentLevel =\
    \ 0\n    var nextLevel = Int(n/2)\n    if n % 2 == 0 {\n        nextLevel = nextLevel\
    \ + 1\n    }\n    for _ in 0..<n {\n        stones.append(nextLevel)\n       \
    \ if nextLevel%2 == 0 {\n            nextLevel = nextLevel + 1\n        } else\
    \ {\n            nextLevel = nextLevel - 1\n        }\n    }\n    return stones",
  "    var stones = [0]\n    var level = 1\n    for _ in 0..<n {\n        stones.append(level++)\n\
    \        if n % 2 == 0 {\n            stones.append(level++)\n        }\n    \
    \    n /= 2\n    }\n    return stones"]
stop_tokens:
- "\n}"
