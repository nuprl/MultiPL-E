name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in a list, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var pile = [Int]()\n    var level = 0\n    var stones = 0\n   \
    \ while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile.append(n)\n\
    \        n -= n % 2 == 0 ? 2 : 3\n        level++\n    }\n    return pile", " \
    \   var stones = [0]\n    var level = 0\n    while stones.count < n {\n      \
    \  if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n        n /= 2\n\
    \        level += 1\n    }\n    return stones", "    var pile = [Int]()\n    var\
    \ count = 0\n    for _ in 0..<n {\n        pile.append(count)\n        count +=\
    \ 1\n    }\n    if n % 2 == 0 {\n        pile = pile.append(pile[pile.count -\
    \ 1] + 2)\n    } else {\n        pile = pile.append(pile[pile.count - 1] + 1)\n\
    \    }\n    return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n   \
    \     result.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n        }\n        n = n / 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        level++\n       \
    \ result.append(stones)\n        n = stones\n    }\n    return result", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n    }\n    return pile",
  "    var stones = [0]\n    if n % 2 == 1 {\n        stones.append(n)\n    }\n  \
    \  for _ in 1..(n/2) {\n        stones.append(stones.last! + 2)\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n/2)\n        }\n    }\n    return\
    \ result", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n  \
    \  var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n         \
    \   pile[level] = stones\n            stones += 2\n        } else {\n        \
    \    pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile = pile.append(n)\n\
    \    if n % 2 == 1 {\n        pile = pile.append(n)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n     \
    \       stones /= 2\n        } else {\n            pile.append(stones)\n     \
    \       stones /= 2\n            pile.append(stones)\n            stones /= 2\n\
    \        }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var level = 0\n    var stone = 0\n    while stone < n {\n        if n % 2\
    \ == 0 {\n            stones.append(stone)\n            stone = 0\n        } else\
    \ {\n            stone += 2\n        }\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n \
    \       pile = append(pile, n / 2)\n    } else {\n        pile = append(pile,\
    \ n / 2)\n        pile = append(pile, n / 2)\n    }\n    return pile", "    var\
    \ result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n    }\n   \
    \ for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n  \
    \      } else {\n            result.append(n/2)\n        }\n        n = n/2\n\
    \    }\n    return result", "    var stones = [Int]()\n    var currentLevel =\
    \ 0\n    var nextLevel = Int(n/2)\n    if n % 2 == 0 {\n        nextLevel = nextLevel\
    \ + 1\n    }\n    for _ in 0..<n {\n        stones.append(nextLevel)\n       \
    \ if nextLevel%2 == 0 {\n            nextLevel = nextLevel + 1\n        } else\
    \ {\n            nextLevel = nextLevel - 1\n        }\n    }\n    return stones",
  "    var stones = [0]\n    var level = 1\n    for _ in 0..<n {\n        stones.append(level++)\n\
    \        if n % 2 == 0 {\n            stones.append(level++)\n        }\n    \
    \    n /= 2\n    }\n    return stones", "    var stones = [Int]()\n    var level\
    \ = 0\n    while n != 0 {\n        if n % 2 == 0 {\n            stones.append(n)\n\
    \            n /= 2\n        } else {\n            stones.append(n * 2)\n    \
    \        n /= 2\n        }\n        level++\n    }\n    return stones", "    var\
    \ pile = [Int]()\n    var i = 0\n    while i < n {\n        if i % 2 == 0 {\n\
    \            pile.append(i)\n        } else {\n            pile.append(i + 1)\n\
    \        }\n        i += 1\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var stones = 0\n    var level = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -= n %\
    \ 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n    return pile", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones > 0\
    \ {\n        if stones % 2 == 0 {\n            pile[level] = stones\n        \
    \    stones /= 2\n        } else {\n            pile[level] = stones\n       \
    \     stones /= 2\n            pile[level + 1] = stones\n            stones /=\
    \ 2\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 0\n    while n > 0 {\n        pile.append(n)\n        n = n % 2\
    \ == 0 ? n / 2 : 3 * n + 1\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n        pile.append(count)\n\
    \        count += 1\n    }\n    if n % 2 == 0 {\n        pile = pile.map { $0\
    \ + $1 }\n    }\n    return pile", "    var stones = [0]\n    var level = 0\n\
    \    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.count\
    \ + 1)\n            n /= 2\n        } else {\n            stones.append(stones.count\
    \ + 2)\n            n /= 2\n        }\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        pile[level] = stones\n        if n%2 == 0 {\n            stones\
    \ += 2\n        } else {\n            stones += 1\n        }\n        n /= 2\n\
    \        level++\n    }\n    return pile", "    var result = [Int]()\n    var\
    \ currentLevel = Int(n)\n    var nextLevel = Int(n)\n    if n % 2 == 1 {\n   \
    \     nextLevel = Int(n) + 1\n    }\n    for _ in 0..<nextLevel {\n        result.append(currentLevel)\n\
    \        currentLevel = currentLevel * 2\n    }\n    return result", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        pile[level] = stones\n        stones += (n % 2 == 0) ? 1 : 2\n  \
    \      n /= 2\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         pile[level+1] = stones\n            stones /= 2\n        }\n       \
    \ level += 2\n    }\n    return pile", "    var pile = [Int]()\n    var level\
    \ = 1\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile = append(pile, stones)\n            stones += 2\n        } else\
    \ {\n            pile = append(pile, stones)\n            stones += 3\n      \
    \  }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n\
    \    if n % 2 == 0 {\n        pile.append(n / 2)\n    } else {\n        pile.append(n\
    \ / 2 + 1)\n    }\n    return pile", "    var stones = [Int]()\n    var level\
    \ = 0\n    var stone = 0\n    while stone < n {\n        if n % 2 == 0 {\n   \
    \         stones.append(stone)\n            stone += 2\n        } else {\n   \
    \         stones.append(stone)\n            stone += 3\n        }\n        level++\n\
    \    }\n    return stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n)\n\
    \    }\n    return pile", "    var stones = [Int]()\n    var levels = [Int]()\n\
    \    var currentLevel = 0\n    var currentStones = 0\n    var currentLevelStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            stones.append(currentStones)\n\
    \            levels.append(currentLevel)\n            currentLevel += 1\n    \
    \        currentStones = 0\n        } else {\n            currentStones += 2\n\
    \        }\n        n -= 1\n    }\n    stones.append(currentStones)\n    levels.append(currentLevel)\n\
    \    return stones", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    if n % 2\
    \ == 0 {\n        result.append(n)\n    }\n    for _ in 1...n {\n        if n\
    \ % 2 == 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ * 2)\n        }\n    }\n    return result", "    var pile = [Int]()\n    var\
    \ count = 0\n    for _ in 0..<n {\n        pile.append(count)\n        count +=\
    \ 1\n    }\n    if n % 2 == 0 {\n        pile.append(pile[pile.count-1] + 2)\n\
    \    } else {\n        pile.append(pile[pile.count-1])\n    }\n    return pile",
  "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n  \
    \  } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile", "    var result = [Int]()\n    var level = 0\n    var stones = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n    \
    \    } else {\n            stones += 1\n        }\n        level++\n        result.append(stones)\n\
    \        n = stones\n    }\n    return result", "    var result = [Int]()\n  \
    \  var currentLevel = Int(n)\n    var nextLevel = Int(n)\n    if n % 2 == 1 {\n\
    \        nextLevel = Int(n) + 1\n    }\n    for _ in 0..<nextLevel {\n       \
    \ result.append(currentLevel)\n        currentLevel = currentLevel * 2\n     \
    \   if currentLevel > n {\n            currentLevel = Int(n) + 1\n        }\n\
    \    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            pile.append(level + 1)\n \
    \           n /= 2\n        } else {\n            pile.append(level + 2)\n   \
    \         n /= 2\n        }\n        level += 1\n    }\n    return pile", "  \
    \  var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones > 0\
    \ {\n        pile.append(stones)\n        if stones % 2 == 1 {\n            stones\
    \ /= 2\n        } else {\n            stones /= 2\n            level++\n     \
    \   }\n    }\n    return pile", "    var result = [Int]()\n    var currentLevel\
    \ = 0\n    var currentStones = 0\n    for _ in 0..<n {\n        if n % 2 == 0\
    \ {\n            currentStones += 2\n        } else {\n            currentStones\
    \ += 1\n        }\n        result.append(currentStones)\n        n -= currentStones\n\
    \        currentLevel += 1\n        currentStones = 0\n    }\n    return result",
  "    var pile = [Int]()\n    var i = 0\n    while i < n {\n        if n % 2 == 0\
    \ {\n            pile.append(n)\n            i += 2\n        } else {\n      \
    \      pile.append(n - 1)\n            i += 2\n        }\n    }\n    return pile",
  "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n  \
    \  }\n    for _ in 1...n {\n        pile = pile.append(n)\n    }\n    return pile",
  "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n  \
    \  } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones > 0\
    \ {\n        if stones % 2 == 1 {\n            pile = append(pile, stones)\n \
    \           stones /= 2\n        } else {\n            pile = append(pile, stones)\n\
    \            stones /= 2\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n+1)\n\
    \    }\n    return pile", "    var stones = [0]\n    var level = 1\n    var pile\
    \ = [Int]()\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(stones[level])\n\
    \            stones.append(stones[level+1])\n            level += 1\n        }\
    \ else {\n            pile.append(stones[level])\n            stones.append(stones[level+1])\n\
    \            level += 1\n            stones.append(stones[level])\n          \
    \  level += 1\n        }\n    }\n    return pile", "    var result = [Int]()\n\
    \    if n % 2 == 1 {\n        result.append(n)\n    }\n    for _ in 1...n {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n        }\n        n =\
    \ n / 2\n    }\n    return result", "    var pile = [Int]()\n    pile = append(pile,\
    \ n / 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    } else\
    \ {\n        pile = append(pile, n / 2)\n        pile = append(pile, n / 2)\n\
    \    }\n    return pile", "    var result = [Int]()\n    var currentLevel = Int()\n\
    \    var currentStones = Int()\n    for _ in 0..<n {\n        if n % 2 == 0 {\n\
    \            currentStones += 2\n        } else {\n            currentStones +=\
    \ 1\n        }\n        currentLevel += 1\n        result.append(currentStones)\n\
    \        n = currentLevel\n    }\n    return result", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var nLevels = n\n    var nStones = n\n    while nStones % 2 == 0 {\n       \
    \ nStones /= 2\n    }\n    while nStones % 2 == 0 {\n        pile.append(nStones)\n\
    \        nStones /= 2\n    }\n    while nStones % 2 != 0 {\n        pile.append(nStones)\n\
    \        nStones *= 2\n    }\n    return pile", "    var stones = [0]\n    if\
    \ n % 2 == 1 {\n        stones.append(stones.last! + 2)\n    }\n    for _ in 1...n\
    \ {\n        stones.append(stones.last! + 2)\n    }\n    return stones", "   \
    \ var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ stones = [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n    } else\
    \ {\n        var even = make_a_pile(n: n / 2)\n        var odd = make_a_pile(n:\
    \ n / 2)\n        stones.append(odd.count)\n        stones.append(even.count)\n\
    \    }\n    return stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        var even = n + n\n        var\
    \ odd = even + even\n        pile = pile.append(odd)\n        pile = pile.append(even)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    while\
    \ n > 0 {\n        pile.append(level)\n        level += (n % 2 == 0) ? 1 : -1\n\
    \        n = n / 2\n    }\n    return pile", "    var pile = [Int]()\n    if n\
    \ % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        var even =\
    \ n / 2\n        var odd = n - even\n        pile = pile.append(even)\n      \
    \  pile = pile.append(odd)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        pile.append(stones)\n\
    \        stones = stones % 2 == 0 ? stones / 2 : stones / 2 + 1\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0\
    \ {\n            pile = pile.append(n)\n        } else {\n            pile = pile.append(n\
    \ % 2)\n        }\n        n = n / 2\n    }\n    return pile", "    var pile =\
    \ [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n   \
    \     if n % 2 == 0 {\n            pile[level] = stones\n            stones +=\
    \ 2\n        } else {\n            pile[level] = stones\n            stones +=\
    \ 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    while n > 0 {\n        pile.append(level)\n        n -=\
    \ level\n        level += (n % 2 == 0) ? 1 : 2\n    }\n    return pile", "   \
    \ var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n   \
    \ }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var i = 0\n    while i\
    \ < n {\n        if i % 2 == 0 {\n            pile.append(i)\n        }\n    \
    \    i += 2\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n   \
    \         pile[level] = stones\n            stones += 2\n        } else {\n  \
    \          pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var stones = [0]\n    var level = 0\n    var stones_in_level\
    \ = 0\n    while stones_in_level < n {\n        if n % 2 == 0 {\n            stones_in_level\
    \ += stones[level]\n        } else {\n            stones_in_level += stones[level\
    \ + 1]\n        }\n        stones[level] += 1\n        level += 1\n    }\n   \
    \ return stones", "    var pile = [Int]()\n    var level = 1\n    var stones =\
    \ n\n    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile", " \
    \   var stones = [Int]()\n    var level = 0\n    var stones_in_level = 0\n   \
    \ while stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level += 1\n    }\n    return\
    \ stones", "    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2 ==\
    \ 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ + 2)\n        }\n        n = result[n]\n    }\n    return result", "    var\
    \ pile = [Int]()\n    var level = 0\n    while level < n {\n        if n % 2 ==\
    \ 0 {\n            pile.append(level + 1)\n            n /= 2\n        } else\
    \ {\n            pile.append(level + 1)\n            n /= 2\n            n -=\
    \ 1\n        }\n        level += 1\n    }\n    return pile", "    var stones =\
    \ [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 == 0\
    \ {\n            stones.append(stones.count + 1)\n        } else {\n         \
    \   stones.append(stones.count + 2)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var nLevels = n\n   \
    \ var nStones = n\n    var nNextOdd = 0\n    var nNextEven = 0\n    while nLevels\
    \ > 0 {\n        if nNextOdd > 0 {\n            pile.append(nNextOdd)\n      \
    \      nNextOdd = nNextOdd - nStones\n        }\n        if nNextEven > 0 {\n\
    \            pile.append(nNextEven)\n            nNextEven = nNextEven - nStones\n\
    \        }\n        nStones = nStones * 2\n        nLevels = nLevels - 1\n   \
    \ }\n    return pile", "    var stones = [Int]()\n    var level = 0\n    while\
    \ level < n {\n        if n % 2 == 0 {\n            stones.append(n)\n       \
    \ } else {\n            stones.append(2 * stones[level] + stones[level + 1])\n\
    \        }\n        level += 2\n    }\n    return stones", "    var result = [Int]()\n\
    \    var currentLevel = 0\n    var currentStones = 0\n    for _ in 0..<n {\n \
    \       if n % 2 == 0 {\n            currentStones += 2\n        } else {\n  \
    \          currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = n / 2\n    }\n    return result", "  \
    \  var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile = append(pile,\
    \ level)\n        n -= level\n        level += (n % 2 == 0) ? 1 : 2\n    }\n \
    \   return pile", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile =\
    \ pile.append(n)\n    } else {\n        var even = make_a_pile(n: n / 2)\n   \
    \     pile = pile.append(even)\n        pile = pile.append(n / 2)\n    }\n   \
    \ return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 1\n    var stones = n\n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile = append(pile, stones)\n            stones /= 2\n\
    \        } else {\n            pile = append(pile, stones)\n            stones\
    \ /= 2\n            stones /= 2\n        }\n        level++\n    }\n\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n  \
    \      pile.append(n / 2)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 0\n    while n > 0 {\n        pile.append(level)\n        n -= level\
    \ % 2 == 0 ? 2 : 3\n        level += 1\n    }\n    return pile", "    var stones\
    \ = [Int]()\n    var levels = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    var nextLevel = n - 1\n    var nextStones = n - 1\n    var currentLevelStones\
    \ = n - 1\n    var currentLevelStonesNext = n - 1\n    var currentLevelStonesNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNext = n - 1\n    var\
    \ currentLevelStonesNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n  \
    \  var currentLevelStonesNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n\
    \ - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n    var\
    \ currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext\
    \ = n - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n\
    \ - 1\n    var currentLevelStonesNextNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevelStonesNextNextNextNextNextNextNextNextNextNext = n - 1\n\
    \    var currentLevel", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    while level < n {\n \
    \       pile.append(level)\n        if level % 2 == 0 {\n            level +=\
    \ 2\n        } else {\n            level += 3\n        }\n    }\n    return pile",
  "    var result = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            result.append(stones)\n        \
    \    stones += 2\n        } else {\n            result.append(stones)\n      \
    \      stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ result", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    var level = 0\n    while level < n {\n        if\
    \ n % 2 == 0 {\n            result.append(n)\n            n /= 2\n        } else\
    \ {\n            result.append(n)\n            n /= 2\n            n += 1\n  \
    \      }\n        level += 1\n    }\n    return result", "    var pile = [Int]()\n\
    \    var level = 0\n    while n > 0 {\n        pile.append(level)\n        level\
    \ += (n % 2 == 0) ? 1 : -1\n        n /= 2\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile.append(stones)\n            stones\
    \ += 2\n        } else {\n            pile.append(stones)\n            stones\
    \ += 3\n        }\n        n /= 2\n        level++\n    }\n    return pile", " \
    \   var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result", "    var pile = [Int]()\n\
    \    var level = 1\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   pile.append(level)\n            n /= 2\n        } else {\n            pile.append(level\
    \ + 1)\n            n /= 2\n        }\n        level += 1\n    }\n    return pile",
  "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n \
    \   var level = 0\n    while level < n {\n        if n % 2 == 0 {\n          \
    \  stones.append(n)\n            n /= 2\n        } else {\n            n /= 2\n\
    \            stones.append(n)\n        }\n        level++\n    }\n    return stones",
  "    var stones = [Int]()\n    var stonesCount = 0\n    if n % 2 == 0 {\n      \
    \  stonesCount = n\n    } else {\n        stonesCount = n * 3\n    }\n    for\
    \ _ in 0..<stonesCount {\n        stones.append(stonesCount)\n        stonesCount\
    \ += 1\n    }\n    return stones", "    var stones = [0]\n    var level = 0\n\
    \    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        n /= 2\n        level += 1\n    }\n    return stones", "    var\
    \ pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n\
    \    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n  \
    \  }\n    return pile", "    var pile = [Int]()\n    var level = 1\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones > 0\
    \ {\n        pile[level] = stones\n        stones = stones % 2 == 0 ? stones /\
    \ 2 : stones / 2 + 1\n        level++\n    }\n    return pile", "    var result\
    \ = [Int]()\n    var currentLevel = [0]\n    var currentStones = 0\n    for _\
    \ in 0..<n {\n        if n % 2 == 0 {\n            currentLevel.append(currentStones)\n\
    \            currentStones = 0\n        } else {\n            currentStones +=\
    \ 2\n        }\n        n -= 1\n    }\n    result.append(currentLevel)\n    return\
    \ result", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        var nextEven = n + 2\n        while nextEven > 0 {\n  \
    \          result.append(nextEven)\n            nextEven -= 2\n        }\n   \
    \ }\n    return result", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n  \
    \  while n != 0 {\n        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n\
    \        level++\n    }\n    return pile", "    var result = [Int]()\n    var\
    \ level = 0\n    var stones = n\n    while stones > 0 {\n        if stones % 2\
    \ == 0 {\n            result.append(stones)\n            stones /= 2\n       \
    \ } else {\n            result.append(stones)\n            stones /= 2\n     \
    \       stones += 1\n        }\n        level += 1\n    }\n    return result",
  "    var result = [Int]()\n    var currentLevel = 0\n    var currentStones = 0\n\
    \    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones += 2\n\
    \        } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = n / 2\n    }\n    return result", "  \
    \  var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        let n = Int.random(in: 1...n)\n        if\
    \ n % 2 == 0 {\n            result.append(n)\n        }\n    }\n    return result",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n    } else\
    \ {\n        pile = pile.append(n).append(n / 2)\n    }\n    for _ in 1...n {\n\
    \        pile = pile.append(n / 2)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var currentLevel = n - 1\n    var nextLevel = n - 1\n    var nextOdd = 0\n\
    \    var nextEven = 0\n    for _ in 0..<n {\n        pile.append(currentLevel)\n\
    \        if n % 2 == 0 {\n            nextEven = nextEven + 1\n        } else\
    \ {\n            nextOdd = nextOdd + 1\n        }\n        currentLevel = nextLevel\n\
    \        nextLevel = nextOdd + nextEven\n    }\n    return pile", "    var stones\
    \ = [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones.last! + 2)\n        } else {\n       \
    \     stones.append(stones.last! + 1)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n  \
    \      pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n /\
    \ 2 + 1)\n    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0\
    \ {\n        pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    while\
    \ level < n {\n        pile.append(level)\n        level += (level % 2 == 0) ?\
    \ 1 : 2\n    }\n    return pile", "    var pile = [Int]()\n    var level = 1\n\
    \    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1 {\n  \
    \          pile.append(stones)\n            stones /= 2\n        } else {\n  \
    \          pile.append(stones)\n            stones /= 2\n            pile.append(stones)\n\
    \            stones /= 2\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var nLevels = n\n    var currentLevel = 0\n    while nLevels\
    \ > 0 {\n        if nLevels % 2 == 0 {\n            pile.append(nLevels)\n   \
    \         nLevels /= 2\n        } else {\n            pile.append(nLevels + 1)\n\
    \            nLevels /= 2\n        }\n        currentLevel++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 1\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n   \
    \         stones += 2\n        } else {\n            pile.append(stones)\n   \
    \         stones += 3\n        }\n        level += 1\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n        pile[level]\
    \ = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n * 2)\n        }\n    }\n    return\
    \ result", "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n   \
    \     pile.append(level)\n        n -= level\n        level += (n % 2 == 0) ?\
    \ 1 : 2\n    }\n    return pile", "    var result = [Int]()\n    if n % 2 == 0\
    \ {\n        for _ in 0..<n {\n            result.append(n)\n        }\n    }\
    \ else {\n        for _ in 0..<n {\n            result.append(n + 1)\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    var level = 0\n\
    \    while level < n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \            n /= 2\n        } else {\n            result.append(n)\n        \
    \    n /= 2\n            n += n / 2\n        }\n        level += 1\n    }\n  \
    \  return result", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        } else {\n            pile = pile.append(n - 1)\n        }\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 0\n    var stones =\
    \ 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var currentLevel = 0\n    var nextLevel = n + 1 //\
    \ +1 because we start at 1\n    if n % 2 == 0 {\n        nextLevel = nextLevel\
    \ + 1 // +1 because we start at 1\n    }\n    for _ in 0..<n {\n        pile.append(nextLevel)\n\
    \        if nextLevel % 2 == 0 {\n            nextLevel = nextLevel + 1 // +1\
    \ because we start at 1\n        } else {\n            nextLevel = nextLevel -\
    \ 1 // -1 because we start at 0\n        }\n    }\n    return pile", "    var\
    \ result = [Int]()\n    var currentLevel = 0\n    var currentStones = 0\n    for\
    \ _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones += 2\n    \
    \    } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = currentLevel\n    }\n    return result",
  "    var pile = [Int]()\n    var level = 0\n    while level < n {\n        pile.append(level\
    \ + 1)\n        level = level + 2\n    }\n    return pile", "    var stones =\
    \ [1]\n    var levels = [0]\n    var result = [Int]()\n    for _ in 0..<n {\n\
    \        stones.append(stones.last! + stones.last!)\n        levels.append(levels.last!\
    \ + 1)\n    }\n    for _ in 0..<n {\n        result.append(stones[levels[levels.last!]]\
    \ - stones[levels[levels.last!] - 1])\n        levels.append(levels[levels.last!]\
    \ - 1)\n    }\n    return result", "    var pile = [Int]()\n    var nLevels =\
    \ n\n    var nStones = n\n    var nNextOdd = 0\n    var nNextEven = 0\n    while\
    \ nLevels > 0 {\n        if nNextOdd > nNextEven {\n            pile.append(nNextOdd)\n\
    \            nNextOdd = nNextOdd + nNextEven\n        } else {\n            pile.append(nNextEven)\n\
    \            nNextEven = nNextEven + nNextOdd\n        }\n        nLevels = nLevels\
    \ - 1\n    }\n    return pile", "    var pile = [Int]()\n    var level = 1\n \
    \   var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n        \
    \    pile.append(stones)\n            stones += 2\n        } else {\n        \
    \    pile.append(stones)\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 0 {\n            pile = append(pile, stones)\n\
    \            stones = stones / 2\n        } else {\n            pile = append(pile,\
    \ stones)\n            stones = stones / 2\n            pile = append(pile, stones)\n\
    \            stones = stones / 2\n        }\n        level++\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    var level = 0\n    var stones_in_level\
    \ = n\n    while stones_in_level > 0 {\n        if stones_in_level % 2 == 1 {\n\
    \            stones.append(stones_in_level)\n            stones_in_level -= stones_in_level\
    \ / 2\n        } else {\n            stones.append(stones_in_level)\n        \
    \    stones_in_level -= stones_in_level / 2 + 1\n        }\n        level++\n\
    \    }\n    return stones", "    var result = [Int]()\n    var currentLevel =\
    \ Int()\n    var nextLevel = Int()\n    for _ in 0..<n {\n        nextLevel =\
    \ n % 2 == 0 ? nextLevel + 2 : nextLevel + 1\n        result.append(nextLevel)\n\
    \        n = n / 2\n    }\n    return result", "    var pile = [Int]()\n    var\
    \ nLevels = n\n    var nStones = n\n    var nNextOdd = 0\n    var nNextEven =\
    \ 0\n    while nStones > 0 {\n        if nNextOdd > nNextEven {\n            pile.append(nNextOdd)\n\
    \            nNextOdd = nNextOdd * 2 + 1\n        } else {\n            pile.append(nNextEven)\n\
    \            nNextEven = nNextEven * 2 + 1\n        }\n        nStones = nStones\
    \ - 1\n    }\n    return pile", "    var pile = [Int]()\n    var level = 1\n \
    \   var stones = n\n    while stones > 0 {\n        if stones % 2 == 0 {\n   \
    \         pile.append(stones)\n            stones /= 2\n        } else {\n   \
    \         pile.append(stones)\n            stones /= 2\n            pile.append(stones)\n\
    \            stones /= 2\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n      \
    \  pile = append(pile, n / 2)\n    } else {\n        pile = append(pile, n / 2\
    \ + n / 2)\n    }\n    return pile", "    var pile = [Int]()\n    if n % 2 ==\
    \ 0 {\n        pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var i = 0\n    while i < n {\n        if\
    \ n % 2 == 1 {\n            pile.append(n)\n            i += 2\n        } else\
    \ {\n            pile.append(n)\n            i += 3\n        }\n    }\n    return\
    \ pile", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var pile = [Int]()\n    var level\
    \ = 0\n    while level < n {\n        pile.append(level + 1)\n        if n % 2\
    \ == 0 {\n            pile.append(level + 2)\n        }\n        level += 3\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ nextLevel = n + 1 // +1 because we start counting at 1\n    var nextLevelOdd\
    \ = nextLevel % 2 == 0\n    var nextLevelEven = nextLevel % 2 == 1\n    if nextLevelOdd\
    \ { // if n is odd\n        pile = append(pile, nextLevel)\n        level += 1\n\
    \    }\n    if nextLevelEven { // if n is even\n        pile = append(pile, nextLevel)\n\
    \        level += 1\n    }\n    for _ in 1...level {\n        if nextLevelOdd\
    \ { // if n is odd\n            nextLevel = nextLevel + 2\n        } else if nextLevelEven\
    \ { // if n is even\n            nextLevel = nextLevel + 3\n        } else {\n\
    \            break\n        }\n        if nextLevel > n { // if next level is\
    \ greater than n\n            break\n        }\n        if nextLevel % 2 == 0\
    \ { // if next level is even\n            pile = append(pile, nextLevel)\n   \
    \         level += 1\n        } else { // if next level is odd\n            pile\
    \ = append(pile, nextLevel)\n            level += 1\n        }\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var result = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            result.append(stones)\n        \
    \    stones += 2\n        } else {\n            result.append(stones)\n      \
    \      stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ result", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var nLevels = n\n    var nStones = 0\n    while nLevels\
    \ > 0 {\n        if nStones % 2 == 0 {\n            pile.append(nStones)\n   \
    \     }\n        nStones += 1\n        nLevels -= 1\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n     \
    \       stones /= 2\n        } else {\n            pile.append(stones)\n     \
    \       stones /= 2\n            pile.append(stones)\n            stones /= 2\n\
    \        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    if n % 2 == 1 {\n        pile = pile.append(n)\n    }\n    for _ in 0..<n\
    \ / 2 {\n        pile = pile.append(pile.popLast() + 1)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var currentLevel = n - 1\n    var nextLevel = currentLevel\n    if n % 2\
    \ == 0 {\n        nextLevel = nextLevel + 1\n    }\n    for _ in 0..<n {\n   \
    \     pile.append(nextLevel)\n        if nextLevel % 2 == 0 {\n            nextLevel\
    \ = nextLevel + 1\n        } else {\n            nextLevel = nextLevel - 1\n \
    \       }\n    }\n    return pile", "    var pile = [Int]()\n    pile = append(pile,\
    \ n / 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n   \
    \ return pile", "    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \        } else {\n            stones.append(stones.count + 2)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones", "    var result = [Int]()\n\
    \    for _ in 0..<n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 1)\n        }\n        n /= 2\n\
    \    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        let n = n - 1\n        let\
    \ nextOdd = (n + 1) & 1\n        let nextEven = n >> 1\n        pile = pile.append(nextOdd)\n\
    \        pile = pile.append(nextEven)\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var result =\
    \ [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in\
    \ 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n        } else\
    \ {\n            result.append(n + 2)\n        }\n    }\n    return result", " \
    \   var stones = [0]\n    for _ in 0..<n {\n        if n % 2 == 0 {\n        \
    \    stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 1)\n        }\n        n /= 2\n    }\n    return stones", "    var result\
    \ = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n    }\n    for _ in\
    \ 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \        n = n * 3 + 1\n    }\n    return result", "    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 1 {\n        pile.append(pile[n/2] + 1)\n\
    \    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n    var\
    \ stones_in_level = 0\n    var next_odd_stones = 0\n    var next_even_stones =\
    \ 0\n    while stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(next_even_stones)\n\
    \            next_even_stones = 0\n        } else {\n            stones.append(next_odd_stones)\n\
    \            next_odd_stones = 0\n        }\n        stones_in_level += 1\n  \
    \      n /= 2\n    }\n    stones.append(stones_in_level)\n    return stones",
  "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n  \
    \  }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n\
    \    }\n    return pile", "    var stones = [0]\n    if n % 2 == 0 {\n       \
    \ stones = stones + [n / 2]\n    } else {\n        stones = stones + [n / 2] +\
    \ [n / 2]\n    }\n    return stones", "    var pile = [Int]()\n    var level =\
    \ 1\n    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1 {\n\
    \            pile.append(stones)\n            stones = stones / 2\n        } else\
    \ {\n            pile.append(stones)\n            stones = stones / 2\n      \
    \      pile.append(stones)\n            stones = stones / 2\n        }\n     \
    \   level++\n    }\n    return pile", "    var result = [Int]()\n    if n % 2\
    \ == 0 {\n        result.append(n)\n    }\n    for _ in 1...n {\n        if n\
    \ % 2 == 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ / 2)\n        }\n        n = n / 2\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in\
    \ 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n        } else\
    \ {\n            result.append(n / 2)\n        }\n    }\n    return result", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ stones = [Int]()\n    var level = 0\n    while level < n {\n        if n % 2\
    \ == 0 {\n            stones.append(n)\n            n /= 2\n        } else {\n\
    \            n /= 2\n            stones.append(n)\n        }\n        level++\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    while\
    \ n != 0 {\n        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n       \
    \ level++\n    }\n    return pile", "    var pile = [Int]()\n    var level = 1\n\
    \    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1 {\n  \
    \          pile.append(stones)\n            stones /= 2\n        } else {\n  \
    \          pile.append(stones)\n            stones /= 2\n            pile.append(stones)\n\
    \            stones /= 2\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var nextLevel = 0\n    var nextOdd\
    \ = 0\n    var nextEven = 0\n    for _ in 0..<n {\n        if level % 2 == 0 {\n\
    \            nextEven = nextEven + 1\n        } else {\n            nextOdd =\
    \ nextOdd + 1\n        }\n        pile.append(nextOdd)\n        pile.append(nextEven)\n\
    \        level = level + 1\n        nextLevel = nextLevel + 1\n        nextOdd\
    \ = nextOdd + 1\n        nextEven = nextEven + 1\n    }\n    return pile", " \
    \   var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n\
    \        pile = append(pile, n / 2)\n    }\n    return pile", "    var pile =\
    \ [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n   \
    \     if n % 2 == 0 {\n            pile[level] = stones\n            stones +=\
    \ 2\n        } else {\n            pile[level] = stones\n            stones +=\
    \ 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        stones += (n % 2 == 0) ? 1 : -1\n        n /= 2\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n    \
    \    pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 0\n    while level\
    \ < n {\n        pile.append(level + 1)\n        if n % 2 == 0 {\n           \
    \ pile.append(level + 2)\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 ==\
    \ 0 {\n        pile.append(pile[n/2] + pile[n/2+1] + pile[n/2+2])\n    } else\
    \ {\n        pile.append(pile[n/2] + pile[n/2+1] + pile[n/2+2])\n    }\n    return\
    \ pile", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result"]
stop_tokens:
- "\n}"
