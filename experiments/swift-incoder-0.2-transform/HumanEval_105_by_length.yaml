name: HumanEval_105_by_length
language: swift
prompt: "\n/// Given an array of integers, sort the integers that are between 1 and\
  \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
  \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
  \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty array:\n\
  /// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the array has any\
  \ strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n/// [\"One\"]\n\
  func by_length(arr: [Int]) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\
  \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
  ])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
  \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
  , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\",\
  \ \"Four\"])"
completions: ["    if arr.isEmpty() {\n        return []\n    }\n    var result =\
    \ [String]()\n    var last = 0\n    for num in arr {\n        if num > 9 {\n \
    \           last = num\n        } else {\n            if last == 0 {\n       \
    \         result.append(String(num))\n            } else {\n                result.append(String(last))\n\
    \                result.append(String(num))\n            }\n            last =\
    \ 0\n        }\n    }\n    if last > 0 {\n        result.append(String(last))\n\
    \    }\n    return result", "    var result = [String]()\n    if arr.isEmpty {\n\
    \        return result\n    }\n    let maxLength = max(arr.count, 0)\n    for\
    \ i in 0..<maxLength {\n        let index = arr.index(i, offsetBy: 1)\n      \
    \  if index == i {\n            result.append(arr[i])\n            continue\n\
    \        }\n        let digit = arr[index] - 1\n        let name = digitToName(digit)\n\
    \        result.append(name)\n    }\n    return result", "    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result: [String] = []\n    var last: Int\
    \ = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        if last == 0 {\n            last = num\n            continue\n\
    \        }\n        if last == num {\n            continue\n        }\n      \
    \  result.append(\"One\")\n        last = 0\n    }\n    if last != 0 {\n     \
    \   result.append(\"One\")\n    }\n    return result", "    if arr.isEmpty {\n\
    \        return []\n    }\n    let digits = arr.map { String($0) }\n    let reversed\
    \ = digits.reversed()\n    let ones = reversed.filter { $0 % 10 == 0 }\n    let\
    \ tens = reversed.filter { $0 % 10 == 1 }\n    let hundreds = reversed.filter\
    \ { $0 % 10 == 2 }\n    let thousands = reversed.filter { $0 % 10 == 3 }\n   \
    \ let ten_thousands = reversed.filter { $0 % 10 == 4 }\n    let hundred_thousands\
    \ = reversed.filter { $0 % 10 == 5 }\n    let thousand_thousands = reversed.filter\
    \ { $0 % 10 == 6 }\n    let million = reversed.filter { $0 % 10 == 7 }\n    let\
    \ billion = reversed.filter { $0 % 10 == 8 }\n    let trillion = reversed.filter\
    \ { $0 % 10 == 9 }\n    let one_to_nine = reversed.filter { $0 % 10 != 0 }\n \
    \   let ten_to_nine = reversed.filter { $0 % 10 != 1 }\n    let hundred_to_nine\
    \ = reversed.filter { $0 % 10 != 2 }\n    let thousand_to_nine = reversed.filter\
    \ { $0 % 10 != 3 }\n    let million_to_nine = reversed.filter { $0 % 10 != 4 }\n\
    \    let billion_to_nine = reversed.filter { $0 % 10 != 5 }\n    let trillion_to_nine\
    \ = reversed.filter { $0 % 10 != 6 }\n    let one_to_nine_hundred = reversed.filter\
    \ { $0 % 10 != 7 }\n    let ten_to_nine_hundred = reversed.filter { $0 % 10 !=\
    \ 8 }\n    let hundred_to_nine_hundred = reversed.filter { $0 % 10 != 9 }\n  \
    \  let thousand_to_nine_hundred = reversed.filter { $0 % 10 != 10 }\n    let million_to_nine_hundred\
    \ = reversed.filter { $0 % 10 != 11 }\n    let billion_to_nine_hundred = reversed.filter\
    \ { $0 % 10 != 12 }\n    let trillion_to_nine_hundred = reversed.filter { $0 %\
    \ 10 != 13 }\n    let one_to_nine_thousand = reversed.filter { $0 % 10 != 14 }\n\
    \    let ten_to_nine_thousand = reversed.filter { $0 % 10 != 15 }\n    let hundred_to_nine_thousand\
    \ = ", "    guard !arr.isEmpty else { return [] }\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n\
    \        }\n        if i == 0 {\n            result.append(String(format: \"%@\"\
    , n))\n        } else {\n            result.append(String(format: \"%@%@\", result[i-1],\
    \ n))\n        }\n        i += 1\n    }\n    return result", "    var result =\
    \ [String]()\n    if arr.isEmpty {\n        return result\n    }\n    let min\
    \ = min(arr)\n    let max = max(arr)\n    var i = 0\n    for number in arr {\n\
    \        if number >= min && number <= max {\n            result.append(name[number])\n\
    \        } else {\n            result.append(name[min])\n        }\n        i\
    \ += 1\n    }\n    return result", "    if arr.isEmpty {\n        return []\n\
    \    }\n    var result: [String] = []\n    var last = 0\n    for num in arr {\n\
    \        if num > 9 {\n            last = num\n        } else {\n            let\
    \ digit = num - last\n            result.append(digits[digit])\n        }\n  \
    \  }\n    return result.reversed()", "    guard !arr.isEmpty else { return []\
    \ }\n    let min = 1\n    let max = 9\n    var result = [String]()\n    for n\
    \ in arr {\n        let index = min + n - 1\n        result.append(names[index])\n\
    \    }\n    return result.reversed()", "    guard arr.count > 0 else { return\
    \ [] }\n    var result = [String]()\n    var i = 0\n    for n in arr {\n     \
    \   if n < 1 || n > 9 {\n            continue\n        }\n        if i == 0 {\n\
    \            result.append(String(format: \"%d\\\"\", n))\n        } else {\n\
    \            result.append(String(format: \"%d\\\"\", n - 1))\n        }\n   \
    \     i += 1\n    }\n    result.reverse()\n    for n in result {\n        if n\
    \ != \"0\" && n != \"1\" {\n            return result\n        }\n    }\n    return\
    \ result", "    var result = [String]()\n    if arr.isEmpty {\n        return\
    \ result\n    }\n    let min = min(arr)\n    let max = max(arr)\n    var i = 0\n\
    \    while i < arr.count {\n        if arr[i] >= min && arr[i] <= max {\n    \
    \        result.append(name[arr[i]])\n            i += 1\n        } else {\n \
    \           i += 1\n        }\n    }\n    return result", "    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        } else if num > max {\n            max = num\n        }\n\
    \    }\n    for num in arr {\n        if num == min {\n            result.append(\"\
    One\")\n        } else if num == max {\n            result.append(\"Nine\")\n\
    \        } else {\n            result.append(String(num))\n        }\n    }\n\
    \    return result.reverse()", "    if arr.isEmpty() {\n        return []\n  \
    \  }\n    var result = [String]()\n    var i = 0\n    for n in arr {\n       \
    \ if n < 1 || n > 9 {\n            continue\n        }\n        if i == 0 {\n\
    \            result.append(String(n - 1))\n        } else {\n            result.append(String(n\
    \ - 1))\n            result.append(String(arr[i] - 1))\n        }\n        i +=\
    \ 1\n    }\n    return result", "    if arr.isEmpty {\n        return arr\n  \
    \  }\n    var result = [String]()\n    var i = 0\n    for num in arr {\n     \
    \   if num < 1 || num > 9 {\n            continue\n        }\n        result.append(name[num])\n\
    \    }\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result.append(name[num])\n    }\n    return result", "   \
    \ var result = [String]()\n    if arr.isEmpty {\n        return result\n    }\n\
    \    let maxLength = max(arr.count, 9)\n    for index in 0..<maxLength {\n   \
    \     let digit = arr[index]\n        let name = digitToName(digit)\n        if\
    \ name != nil {\n            result.append(name!)\n        }\n    }\n    if maxLength\
    \ > 9 {\n        result.reverse()\n    }\n    return result", "    if arr.isEmpty\
    \ {\n        return []\n    }\n    var result = [String]()\n    var i = 0\n  \
    \  for n in arr {\n        if n >= 1 && n <= 9 {\n            result.append(name[n])\n\
    \        } else {\n            result.append(String(format: \"%@\", n))\n    \
    \    }\n        i += 1\n    }\n    return result", "    var result = [String]()\n\
    \    var index = 0\n    for number in arr {\n        if number >= 1 && number\
    \ <= 9 {\n            result[index] = String(number)\n            index++\n  \
    \      }\n    }\n    if index == 0 {\n        return result\n    }\n    for number\
    \ in arr {\n        if number >= 1 && number <= 9 {\n            result[index]\
    \ = String(number)\n            index++\n        }\n    }\n    return result",
  "    if arr.isEmpty {\n        return []\n    }\n    var result = [String]()\n \
    \   var i = 0\n    for num in arr {\n        if num > 9 {\n            i += 10\n\
    \        }\n        result.append(name[num])\n    }\n    result.reverse()\n  \
    \  for num in arr {\n        if num > 9 {\n            i += 10\n        }\n  \
    \      result.append(name[num])\n    }\n    return result", "    if arr.isEmpty\
    \ {\n        return []\n    }\n    var result = [String]()\n    var current =\
    \ 0\n    var last = 0\n    for current < arr.count {\n        if current == last\
    \ {\n            result.append(arr[current])\n        } else {\n            if\
    \ arr[current] == 1 {\n                result.append(ones[current])\n        \
    \    } else if arr[current] == 2 {\n                result.append(twos[current])\n\
    \            } else if arr[current] == 3 {\n                result.append(threes[current])\n\
    \            } else if arr[current] == 4 {\n                result.append(fours[current])\n\
    \            } else if arr[current] == 5 {\n                result.append(fives[current])\n\
    \            } else if arr[current] == 6 {\n                result.append(sixs[current])\n\
    \            } else if arr[current] == 7 {\n                result.append(sevens[current])\n\
    \            } else if arr[current] == 8 {\n                result.append(eights[current])\n\
    \            } else if arr[current] == 9 {\n                result.append(nines[current])\n\
    \            }\n        }\n        last = current\n        current++\n    }\n\
    \    return result", "    if arr.isEmpty {\n        return []\n    }\n    var\
    \ result = [String]()\n    var i = 0\n    for num in arr {\n        if num > 0\
    \ && num < 10 {\n            result.append(name[num])\n        } else {\n    \
    \        result.append(name[num])\n        }\n    }\n    for num in arr {\n  \
    \      if num > 0 && num < 10 {\n            result.append(name[num])\n      \
    \  } else {\n            result.append(name[num])\n        }\n    }\n    return\
    \ result", "    if arr.isEmpty {\n        return []\n    }\n    var result = [String]()\n\
    \    var last = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n   \
    \         continue\n        }\n        var index = last + num - 1\n        result[index]\
    \ = names[index][num]\n        last = index\n    }\n    return result"]
stop_tokens:
- "\n}"
