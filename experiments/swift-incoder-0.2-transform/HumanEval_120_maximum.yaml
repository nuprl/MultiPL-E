name: HumanEval_120_maximum
language: swift
prompt: "\n/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n/// >>>\
  \ maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
  \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
  \ [Int], k: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4,\
  \ -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0,\
  \ 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3],\
  \ k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7)\
  \ == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
  \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
  \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
  assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
completions: ["    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var maxArr = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<k {\n        if arr[index] > maxArr[index] {\n            maxArr[index]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxArr",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for (_, v) in arr.enumerated()\
    \ {\n        if v > max[k-1] {\n            max[k-1] = v\n        }\n    }\n \
    \   return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to arr.count\")\n    \n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    \n    for index in 0..<arr.count {\n        if arr[index] > max[index]\
    \ {\n            max[index] = arr[index]\n        }\n    }\n    \n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max[index] {\n            max[index] = arr[index]\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var maxArr = [Int]()\n    var\
    \ maxIndex = -1\n    \n    for i in 0..<k {\n        if arr[i] > maxArr[i] {\n\
    \            maxArr[i] = arr[i]\n            maxIndex = i\n        }\n    }\n\
    \    \n    for i in 0..<k {\n        if arr[i] > maxArr[i] {\n            maxArr[i]\
    \ = arr[i]\n            maxIndex = i\n        }\n    }\n    \n    return maxArr",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var maxArr = [Int]()\n    for _ in 0..<k {\n        maxArr.append(arr[0])\n\
    \        arr.remove(at: 0)\n    }\n    for num in arr {\n        if num > maxArr[k-1]\
    \ {\n            maxArr[k-1] = num\n        }\n    }\n    return maxArr", "  \
    \  precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n   \
    \     max[index] = max(arr[index], max[index])\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var result\
    \ = arr\n    for _ in 0..k-1 {\n        result = result.maxElement()\n    }\n\
    \    return result", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex = 0\n\
    \    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    \n    var maxArr = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        maxArr[i] = max(arr[i], maxArr[i])\n\
    \    }\n    \n    return maxArr", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k must\
    \ be less than or equal to the length of arr\")\n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1\
    \ {\n        result = result.maxElement()\n    }\n    return result", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of arr\")\n   \
    \ \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for i in 0..<k {\n\
    \        if arr[i] > max[maxIndex] {\n            max[maxIndex] = arr[i]\n   \
    \         maxIndex = i\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of the array\"\
    )\n    \n    var max = [Int](repeating: -Int.max, count: k)\n    \n    for i in\
    \ 0..<k {\n        if arr[i] > max[i] {\n            max[i] = arr[i]\n       \
    \ }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"k must\
    \ be less than or equal to the length of arr\")\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[index] {\n            maxIndex = index\n            max = [arr[index]]\n\
    \        } else if arr[index] == max[index] {\n            max.append(arr[index])\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int]()\n    for\
    \ x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n   \
    \ }\n    for x in arr {\n        if x == max[0] {\n            for y in max {\n\
    \                if y > x {\n                    max[1] = y\n                \
    \    break\n                }\n            }\n        }\n    }\n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: -1000, count: k)\n    for element in arr {\n\
    \        max[element > max[element.count-1]?element.count-1:element.count] = element\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to the length of arr\")\n    \n    var max\
    \ = [Int](repeating: 0, count: k)\n    \n    for i in 0..<arr.count {\n      \
    \  if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n        }\n    }\n \
    \   \n    return max", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n    for\
    \ index in 0..<k {\n        if arr[index] > max[maxIndex] {\n            maxIndex\
    \ = index\n        }\n    }\n    max[maxIndex] = arr[k]\n    return max", "  \
    \  precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int]()\n    \n    for index in 0..<k {\n        if arr[index]\
    \ > max[index] {\n            max = [Int](max[index], arr[index])\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    var max = 0\n    var index = 0\n    for element in arr {\n\
    \        if element > max {\n            max = element\n        }\n        if\
    \ index == k {\n            result[index] = max\n            index = 0\n     \
    \   } else {\n            result[index] = element\n            index += 1\n  \
    \      }\n    }\n    return result", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n \
    \   }\n    return max", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to the length of arr\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n    \
    \        max[index] = arr[index]\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to the length of arr\")\n    var\
    \ max = [Int](repeating: 0, count: k)\n    for (_, v) in arr.enumerated() {\n\
    \        if v > max[k-1] {\n            max[k-1] = v\n        }\n    }\n    return\
    \ max", "    if k > len(arr) {\n        return arr\n    }\n    \n    var max =\
    \ [Int]()\n    \n    for index in 0..<k {\n        if arr[index] > max[0] {\n\
    \            max[0] = arr[index]\n        }\n    }\n    \n    for index in 1..<k\
    \ {\n        if arr[index] > max[index] {\n            max[index] = arr[index]\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    \n    var max = [Int]()\n\
    \    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n      \
    \      max = [Int](max[index], arr[index])\n        } else {\n            max\
    \ = [Int](arr[index], max[index])\n        }\n    }\n    \n    return max", " \
    \   precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n   \
    \     max[index] = max(arr[index], max[index])\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n      \
    \  if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var result\
    \ = Array<Int>(repeating: 0, count: k)\n    var max = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max {\n            max = arr[index]\n        }\n\
    \    }\n    for index in 0..<k {\n        result[index] = max\n    }\n    return\
    \ result", "    precondition(k <= arr.count, \"k should be less than or equal\
    \ to arr.count\")\n    var max = [Int]()\n    for index in 0..<k {\n        if\
    \ arr[index] > max[index] {\n            max = [Int](max[index], arr[index])\n\
    \        } else {\n            max = [Int](arr[index], max[index])\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -1000, count:\
    \ k)\n    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex\
    \ = maxIndex + 1\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var result\
    \ = Array<Int>(repeating: 0, count: k)\n    var max = 0\n    var maxIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max {\n           \
    \ max = arr[index]\n            maxIndex = index\n        }\n    }\n    result[maxIndex]\
    \ = max\n    return result", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", "    if k > arr.count {\n        return arr\n \
    \   }\n    \n    var result = [Int]()\n    var max = 0\n    \n    for element\
    \ in arr {\n        if element > max {\n            max = element\n        }\n\
    \    }\n    \n    for element in arr {\n        if element == max {\n        \
    \    result.append(element)\n        }\n    }\n    \n    return result[k..<arr.count]",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n        }\n\
    \    }\n    \n    return max", "    if k <= 0 || k > arr.count {\n        return\
    \ []\n    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > max[maxIndex] {\n            maxIndex\
    \ = index\n            max = [arr[index]]\n        } else if arr[index] == max[maxIndex]\
    \ {\n            max.append(arr[index])\n        }\n    }\n    \n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: -Int.max, count: k)\n    for (_, v) in arr.enumerated()\
    \ {\n        if v > max[k-1] {\n            max[k-1] = v\n        }\n    }\n \
    \   return max", "    precondition(k > 0, \"k must be positive\")\n    precondition(arr.count\
    \ > 0, \"arr must have at least one element\")\n    precondition(k <= arr.count,\
    \ \"k must be less than or equal to the number of elements\")\n    \n    var max\
    \ = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            max[index] = arr[index]\n        }\n    }\n    return max", "   \
    \ precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int]()\n    for index in 0..<k {\n        if arr[index]\
    \ > max[index] {\n            max = [Int](max[index], arr[index])\n        } else\
    \ {\n            max = max[index..<arr.count]\n        }\n    }\n    return max",
  "    precondition(k <= arr.count, \"k must be less than or equal to the length of\
    \ arr\")\n    var maxArr = [Int]()\n    for x in arr {\n        if x > maxArr[k]\
    \ {\n            maxArr[k] = x\n        }\n    }\n    return maxArr", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: -1000, count: k)\n    for index in 0..<k {\n        max[index]\
    \ = max(arr[index], max[index])\n    }\n    return max", "    precondition(k <=\
    \ arr.count, \"k should be less than or equal to arr.count\")\n    \n    var max\
    \ = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n        if\
    \ arr[index] > max[index] {\n            maxIndex = index\n            max = [arr[index]]\n\
    \        } else if arr[index] == max[index] {\n            max.append(arr[index])\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    for index in 0..<arr.count {\n        if arr[index] >\
    \ max[index] {\n            max[index] = arr[index]\n        }\n    }\n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    for index in\
    \ 0..<arr.count {\n        if arr[index] > max[index] {\n            max[index]\
    \ = arr[index]\n        }\n    }\n    return max", "    precondition(k > 0, \"\
    k must be positive\")\n    precondition(arr.count >= k, \"k must be less than\
    \ or equal to the length of the array\")\n    var max = [Int]()\n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = arr\n   \
    \ for _ in 0..<k {\n        result = result.maxElement()\n    }\n    return result",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n   \
    \     if arr[index] > max[maxIndex] {\n            maxIndex = index\n        }\n\
    \    }\n    max[maxIndex] = arr[k]\n    return max", "    precondition(k > 0,\
    \ \"k should be positive\")\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for (_, v) in arr.enumerated() {\n        max[k % (k + 1)] = v\n   \
    \     k += 1\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr\
    \ {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n   \
    \ }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n   \
    \     }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n         \
    \   max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n\
    \            max[0] = x\n        }\n    }\n    for x in arr {\n        if x >\
    \ max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n   \
    \     if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = ",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of arr\")\n   \
    \ var max = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n        max[index]\
    \ = max(arr[index], max[index])\n    }\n    return max", "    precondition(k <=\
    \ arr.count, \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count {\n     \
    \   if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int]()\n    for x in arr {\n        if max < x {\n            max = x\n \
    \       }\n    }\n    return max", "    precondition(k <= arr.count, \"k must\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    for x in arr {\n        if x < max[0] {\n            max[0] =\
    \ x\n        }\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0,\
    \ count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        let maxIndex = arr.index(max{$0 > $1})\
    \ + i\n        max[i] = arr[maxIndex]\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n      \
    \  if arr[index] > max[index] {\n            maxIndex = index\n            max\
    \ = [arr[index]]\n        } else if arr[index] == max[index] {\n            max.append(arr[index])\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<arr.count {\n        if arr[index] > max[k-1]\
    \ {\n            max[k-1] = arr[index]\n        }\n    }\n    return max", " \
    \   precondition(k <= arr.count, \"k should be less than or equal to the length\
    \ of arr\")\n    var max = [Int](repeating: 0, count: k)\n    for x in arr {\n\
    \        if x > max[k-1] {\n            max[k-1] = x\n        }\n    }\n    return\
    \ max", "    precondition(k <= arr.count, \"k must be less than or equal to the\
    \ length of the array\")\n    var max = [Int](repeating: 0, count: k)\n    for\
    \ index in 0..<k {\n        max[index] = max(arr[index], max[index])\n    }\n\
    \    return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to the length of arr\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: 0, count: k)\n    for (_, v) in arr.enumerated() {\n    \
    \    if v > max[k-1] {\n            max[k-1] = v\n        }\n    }\n    return\
    \ max", "    precondition(k > 0, \"k must be positive\")\n    precondition(arr.count\
    \ > 0, \"arr must not be empty\")\n    precondition(k <= arr.count, \"k must be\
    \ less than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    for (_, v) in arr.enumerated() {\n        max[min(k, arr.count\
    \ - 1)] = max(max[min(k, arr.count - 1)], v)\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n      \
    \  if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    \n    return max", "    if\
    \ k < 0 || k > arr.count {\n        return []\n    }\n    var result = arr\n \
    \   for _ in 0..<k {\n        result = result.sorted(by: {$0 > $1})\n    }\n \
    \   return result", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1 {\n    \
    \    result = result.maxElement()\n    }\n    return result", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int]()\n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            max = [Int](max[index], arr[index])\n        }\n    }\n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > max[index] {\n            maxIndex\
    \ = index\n            max = [arr[index]]\n        } else if arr[index] == max[index]\
    \ {\n            max.append(arr[index])\n        }\n    }\n    \n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max[index] {\n            max[index] = arr[index]\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n\
    \    }\n    \n    return max", "    precondition(k > 0, \"k should be positive\"\
    )\n    precondition(k <= arr.count, \"k should be less than or equal to length\
    \ of array\")\n    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            maxIndex = index\n    \
    \        max = [arr[index]]\n        } else if arr[index] == max[index] {\n  \
    \          max.append(arr[index])\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n      \
    \  if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int]()\n    for x in arr {\n        if x > max[0] {\n            max[0] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n         \
    \   max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n\
    \            max[0] = x\n        }\n    }\n    for x in arr {\n        if x >\
    \ max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n   \
    \     if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n         \
    \   max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n\
    \            max[0] = x\n        }\n    }\n    for x in arr {\n        if x >\
    \ max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n   \
    \     if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = ", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            maxIndex = index\n        }\n    }\n    \n    for index in 0..<k\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \        }\n    }\n    \n    return max", "    if k == 0 || k > arr.count {\n\
    \        return []\n    }\n    \n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] >\
    \ max[k-1] {\n            max[k-1] = arr[i]\n            maxIndex = k - 1\n  \
    \      }\n    }\n    \n    return max", "    precondition(k > 0, \"k should be\
    \ positive\")\n    precondition(arr.count > 0, \"arr should be non-empty\")\n\
    \    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k\
    \ {\n        let maxIndex = arr.index(max{$0 > arr[i]})\n        max[i] = arr[maxIndex]\n\
    \        \n        if maxIndex == arr.count - 1 {\n            break\n       \
    \ }\n        \n        arr.remove(at: maxIndex)\n    }\n    \n    return max",
  "    if k < 0 || k > arr.count {\n        return []\n    }\n    var max = [Int]()\n\
    \    for index in 0..<k {\n        if arr[index] > max[index] {\n            max\
    \ = [Int](max[index], arr[index])\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to the length of arr\")\n    \n\
    \    var max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n\
    \        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max", "    if\
    \ k == 0 || k > len(arr) {\n        return arr\n    }\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[maxIndex] {\n            maxIndex = index\n        }\n    }\n    \n    for\
    \ index in 0..<k {\n        max[maxIndex] = arr[index]\n        maxIndex += 1\n\
    \    }\n    \n    return max", "    if k > arr.count {\n        return arr\n \
    \   }\n    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n\
    \        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to the length of arr\")\n    var\
    \ max = [Int]()\n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            max = [Int](max[index], arr[index])\n        }\n    }\n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ the length of arr\")\n    \n    var max = [Int]()\n    var maxIndex = 0\n  \
    \  \n    for index in 0..<k {\n        if arr[index] > max[index] {\n        \
    \    maxIndex = index\n            max = [arr[index]]\n        } else if arr[index]\
    \ == max[index] {\n            max.append(arr[index])\n        }\n    }\n    \n\
    \    return max", "    precondition(k <= arr.count, \"k must be less than or equal\
    \ to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    var maxIndex\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max,\
    \ count: k)\n    for x in arr {\n        if max[k-1] < x {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    for x in arr {\n        if x > max[k-1] {\n          \
    \  max[k-1] = x\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k must be less than or equal to arr.count\")\n    var max = [Int]()\n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to the length of arr\")\n    \n    var max\
    \ = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k {\n        if arr[i]\
    \ > max[i] {\n            max[i] = arr[i]\n        }\n    }\n    \n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > max[index] {\n            maxIndex\
    \ = index\n            max = [arr[index]]\n        } else if arr[index] == max[index]\
    \ {\n            max.append(arr[index])\n        }\n    }\n    \n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n   \
    \     if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ > 0, \"k must be positive\")\n    precondition(arr.count > 0, \"arr must not\
    \ be empty\")\n    precondition(k <= arr.count, \"k must be less than or equal\
    \ to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    for i in 0..<k\
    \ {\n        max[i] = max(arr[i], max[i])\n    }\n    return max", "    if k >\
    \ arr.count {\n        return []\n    }\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<k {\n        max[index] = arr[index]\n    }\n    for\
    \ index in k..<arr.count {\n        if arr[index] > max[k-1] {\n            max[k-1]\
    \ = arr[index]\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ -Int.max, count: k)\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[k-1] {\n            max[k-1] = arr[index]\n        }\n    }\n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    \n    var max = [Int]()\n    \n    for index in 0..<k {\n\
    \        let maxIndex = arr.index(of: -Int.max)!\n        \n        if maxIndex\
    \ == index {\n            continue\n        }\n        \n        max.append(arr[maxIndex])\n\
    \        \n        if maxIndex < index {\n            arr.remove(at: maxIndex)\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to the length of arr\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    for x in arr {\n        if x > max[k-1] {\n          \
    \  max[k-1] = x\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k must be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<arr.count {\n        if arr[index] > max[index]\
    \ {\n            max[index] = arr[index]\n        }\n    }\n    return max", " \
    \   precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    for\
    \ index in 0..<arr.count {\n        if arr[index] > max[maxIndex] {\n        \
    \    max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n   \
    \ }\n    return max", "    precondition(k <= arr.count, \"k must be less than\
    \ or equal to the length of the array\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    \n    return max", "    if k > arr.count {\n    \
    \    return []\n    }\n    \n    var max = [Int](repeating: -Int.max, count: k)\n\
    \    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] >\
    \ max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex =\
    \ maxIndex + 1\n        }\n    }\n    \n    return max", "    if k == 0 || k >\
    \ len(arr) {\n        return []\n    }\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max", "    if k == 0 || k > arr.count {\n        return arr\n\
    \    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    \n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    for i in 0..<k\
    \ {\n        max[i] = max(arr[i], max[i])\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of arr\")\n   \
    \ var max = [Int](repeating: 0, count: k)\n    for index in 0..<arr.count {\n\
    \        if arr[index] > max[index] {\n            max[index] = arr[index]\n \
    \       }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k must be\
    \ less than or equal to the length of arr\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    var max = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in arr\
    \ {\n        if element == max {\n            result[result.index(of: element)]\
    \ = element\n        }\n    }\n    return result", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    for (_, v) in arr.enumerated() {\n        max[k] = max(max[k],\
    \ v)\n    }\n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0,\
    \ count: k)\n    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n      \
    \  if arr[i] > max[maxIndex] {\n            max[maxIndex] = arr[i]\n         \
    \   maxIndex = maxIndex + 1\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    \n    for index\
    \ in 0..<arr.count {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    \n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    \n    var max = [Int](repeating: 0, count: k)\n    \n    for\
    \ i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n    \n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var max = [Int]()\n    for x in arr {\n        if x > max[k]\
    \ {\n            max = [Int](repeatElement(max[k], k))\n        }\n        max[k]\
    \ = x\n    }\n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<k {\n        let element = arr[index]\n        if element\
    \ > max[index] {\n            max[index] = element\n        }\n    }\n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ the length of arr\")\n    var max = [Int](repeating: -1000, count: k)\n    var\
    \ maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k-1\
    \ {\n        result = result.sorted { $0 > $1 }\n    }\n    return result", " \
    \   precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int](repeating: -1000, count: k)\n    \n    for i in 0..<k\
    \ {\n        max[i] = max(arr[i], max[i])\n    }\n    \n    return max", "   \
    \ precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: -1000, count: k)\n    for x in arr {\n     \
    \   if x < max[0] {\n            max[0] = x\n        }\n        if x > max[k-1]\
    \ {\n            max[k-1] = x\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n        max[index]\
    \ = max(arr[index], max[index])\n    }\n    return max", "    precondition(k <=\
    \ arr.count, \"k must be less than or equal to the length of arr\")\n    var max\
    \ = [Int](repeating: 0, count: k)\n    for x in arr {\n        if x > max[k-1]\
    \ {\n            max[k-1] = x\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of arr\")\n   \
    \ var max = [Int](repeating: 0, count: k)\n    for i in 0..<k {\n        let maxIndex\
    \ = arr.index(of: max(arr))\n        max[i] = arr[maxIndex]\n        arr.remove(at:\
    \ maxIndex)\n    }\n    return max", "    if k == 0 || k > len(arr) {\n      \
    \  return []\n    }\n    \n    var max = [Int](repeating: 0, count: k)\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [Int](repeating: arr[index],\
    \ count: k)\n        }\n    }\n    \n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to the length of arr\")\n    \n    var max\
    \ = [Int]()\n    var maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    \n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ -Int.max, count: k)\n    for x in arr {\n        if x > max[k-1] {\n       \
    \     max[k-1] = x\n        }\n    }\n    return max", "    precondition(k > 0,\
    \ \"k should be positive\")\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x < max[k] {\n            max[k] = x\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k must be\
    \ less than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr\
    \ {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[0] {\n            for y in max {\n          \
    \      if x > y {\n                    max[0] = y\n                    break\n\
    \                }\n            }\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int](repeating: -Int.max, count: k)\n    for element in arr {\n     \
    \   if element > max[k-1] {\n            max[k-1] = element\n        }\n    }\n\
    \    return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to arr.count\")\n    var result = arr\n    for _ in 0..<k {\n        result\
    \ = result.max()\n    }\n    return result", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int]()\n  \
    \  var maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            maxIndex = index\n            max = [Int](repeating: arr[index],\
    \ count: k)\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ -1000, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    var maxIndex = 0\n    \n    for index in 0..<arr.count {\n\
    \        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to the length of arr\")\n    var\
    \ max = [Int](repeating: -Int.max, count: k)\n    for x in arr {\n        if max[k-1]\
    \ < x {\n            max[k-1] = x\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ maxArr = [Int]()\n    \n    for index in 0..<k {\n        if arr[index] > maxArr[index]\
    \ {\n            maxArr[index] = arr[index]\n        }\n    }\n    \n    return\
    \ maxArr", "    precondition(k <= arr.count, \"k should be less than or equal\
    \ to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    for element\
    \ in arr {\n        if element > max[k-1] {\n            max[k-1] = element\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var maxArr = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > maxArr[index]\
    \ {\n            maxArr[index] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    \n    return maxArr", "    precondition(k <= arr.count, \"\
    k must be less than or equal to arr.count\")\n    var max = [Int](repeating: 0,\
    \ count: k)\n    for x in arr {\n        if x < max[0] {\n            max[0] =\
    \ x\n        }\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n\
    \    }\n    return max", "    if k == 0 || k > arr.count {\n        return arr\n\
    \    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    \n    return\
    \ max", "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    \n    var max = [Int]()\n    \n    for index in 0..<k {\n\
    \        let max = arr[index]\n        for index in 0..<arr.count {\n        \
    \    if arr[index] > max {\n                max = arr[index]\n            }\n\
    \        }\n        \n        max.sort()\n        \n        max = [max] + max\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0,\
    \ count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var max = [Int]()\n    for index in\
    \ 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    for x in arr {\n        if x > max[k-1] {\n          \
    \  max[k-1] = x\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int]()\n\
    \    for index in 0..<k {\n        if arr[index] > max[index] {\n            max\
    \ = [Int](max[index], arr[index])\n        } else {\n            max = [Int](arr[index],\
    \ max[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    var max = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max {\n            max = arr[index]\n        }\n    }\n    for\
    \ index in 0..<arr.count {\n        if arr[index] == max {\n            result[index]\
    \ = max\n        }\n    }\n    return result", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        let index = arr.index(of:\
    \ max(arr))\n        max[i] = arr[index]\n        arr.remove(at: index)\n    }\n\
    \    \n    return max", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    var\
    \ maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[index] {\n            maxIndex = index\n            max = [arr[index]]\n\
    \        } else if arr[index] == max[index] {\n            max.append(arr[index])\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int]()\n    for\
    \ index in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k must be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        max[index] = max(arr[index],\
    \ max[index])\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ -1000, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(max[i], arr[i])\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        let max = max(arr[index], max[index])\n\
    \    }\n    return max", "    if k > len(arr) {\n        return nil\n    }\n \
    \   \n    var max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    \n\
    \    for i in 0..<k {\n        if arr[i] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[i]\n            maxIndex = i\n        }\n    }\n    \n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n   \
    \     if arr[index] > max[index] {\n            max[index] = arr[index]\n    \
    \    }\n    }\n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max,\
    \ count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var result = arr\n    for\
    \ _ in 0..<k {\n        result = result.maxElement()\n    }\n    return result",
  "    precondition(k <= arr.count, \"k must be less than or equal to the length of\
    \ arr\")\n    var max = [Int](repeating: 0, count: k)\n    for x in arr {\n  \
    \      if x < max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n    }\n\
    \    return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to the length of arr\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int]()\n  \
    \  var maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr\
    \ {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[k] {\n            max[k] = x\n        }\n   \
    \ }\n    return max", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    for\
    \ x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = Array(repeating: 0, count: k)\n\
    \    var max = 0\n    for element in arr {\n        if element > max {\n     \
    \       max = element\n        }\n    }\n    for element in arr {\n        if\
    \ element == max {\n            result[element - max] = element\n        }\n \
    \   }\n    return result", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for i in 0..<k {\n        if arr[i] > max[i] {\n            max[i] =\
    \ arr[i]\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k must be less than or equal to arr.count\")\n    var max = [Int]()\n    for\
    \ index in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = max[index..<arr.count]\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count {\n \
    \       if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: -1000, count: k)\n    for x in arr {\n        if x > max[k-1]\
    \ {\n            max[k-1] = x\n        }\n    }\n    return max", "    precondition(k\
    \ < arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int]()\n    var maxIndex = 0\n    \n    for i in 0..<k {\n        if\
    \ arr[i] > max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    \n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int]()\n\
    \    for index in 0..<k {\n        if arr[index] > max[index] {\n            max\
    \ = [Int](max[index], arr[index])\n        } else {\n            max = [Int](arr[index],\
    \ max[index])\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int]()\n  \
    \  for index in 0..<k {\n        if arr[index] > max[index] {\n            max\
    \ = [Int](repeatElement(arr[index], k))\n        }\n    }\n    return max", " \
    \   precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int]()\n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            max = [Int](repeatElement(arr[index], k))\n        }\n    }\n\
    \    return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    for\
    \ element in arr {\n        if element > max[k-1] {\n            max[k-1] = element\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to the length of arr\")\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    \n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[index] {\n            max[index] = arr[index]\n        }\n    }\n    \n\
    \    return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to arr.count\")\n    \n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[k-1] {\n   \
    \         max[k-1] = arr[i]\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n        if arr[index]\
    \ > max[index] {\n            maxIndex = index\n            max = [arr[index]]\n\
    \        } else if arr[index] == max[index] {\n            max.append(arr[index])\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k\
    \ {\n        result = result.maxElement()\n    }\n    return result", "    if\
    \ k == 0 || k > arr.count {\n        return []\n    }\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n   \
    \     if arr[i] > max[maxIndex] {\n            max[maxIndex] = arr[i]\n      \
    \      maxIndex = maxIndex + 1\n        }\n    }\n    \n    return max", "   \
    \ if k == 0 || k > len(arr) {\n        return []\n    }\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    \n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int]()\n\
    \    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n      \
    \      max = [Int](repeatElement(arr[index], k))\n        }\n    }\n    \n   \
    \ return max"]
stop_tokens:
- "\n}"
