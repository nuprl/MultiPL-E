name: HumanEval_120_maximum
language: swift
prompt: "\n/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n/// >>>\
  \ maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
  \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
  \ [Int], k: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4,\
  \ -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0,\
  \ 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3],\
  \ k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7)\
  \ == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
  \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
  \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
  assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
completions: ["    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var maxArr = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<k {\n        if arr[index] > maxArr[index] {\n            maxArr[index]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxArr",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for (_, v) in arr.enumerated()\
    \ {\n        if v > max[k-1] {\n            max[k-1] = v\n        }\n    }\n \
    \   return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to arr.count\")\n    \n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    \n    for index in 0..<arr.count {\n        if arr[index] > max[index]\
    \ {\n            max[index] = arr[index]\n        }\n    }\n    \n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max[index] {\n            max[index] = arr[index]\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var maxArr = [Int]()\n    var\
    \ maxIndex = -1\n    \n    for i in 0..<k {\n        if arr[i] > maxArr[i] {\n\
    \            maxArr[i] = arr[i]\n            maxIndex = i\n        }\n    }\n\
    \    \n    for i in 0..<k {\n        if arr[i] > maxArr[i] {\n            maxArr[i]\
    \ = arr[i]\n            maxIndex = i\n        }\n    }\n    \n    return maxArr",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var maxArr = [Int]()\n    for _ in 0..<k {\n        maxArr.append(arr[0])\n\
    \        arr.remove(at: 0)\n    }\n    for num in arr {\n        if num > maxArr[k-1]\
    \ {\n            maxArr[k-1] = num\n        }\n    }\n    return maxArr", "  \
    \  precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n   \
    \     max[index] = max(arr[index], max[index])\n    }\n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var result\
    \ = arr\n    for _ in 0..k-1 {\n        result = result.maxElement()\n    }\n\
    \    return result", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex = 0\n\
    \    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    \n    var maxArr = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        maxArr[i] = max(arr[i], maxArr[i])\n\
    \    }\n    \n    return maxArr", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k must\
    \ be less than or equal to the length of arr\")\n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max", "    precondition(k <= arr.count, \"k should be\
    \ less than or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1\
    \ {\n        result = result.maxElement()\n    }\n    return result", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of arr\")\n   \
    \ \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for i in 0..<k {\n\
    \        if arr[i] > max[maxIndex] {\n            max[maxIndex] = arr[i]\n   \
    \         maxIndex = i\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to the length of the array\"\
    )\n    \n    var max = [Int](repeating: -Int.max, count: k)\n    \n    for i in\
    \ 0..<k {\n        if arr[i] > max[i] {\n            max[i] = arr[i]\n       \
    \ }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"k must\
    \ be less than or equal to the length of arr\")\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[index] {\n            maxIndex = index\n            max = [arr[index]]\n\
    \        } else if arr[index] == max[index] {\n            max.append(arr[index])\n\
    \        }\n    }\n    \n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    var max = [Int]()\n    for\
    \ x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n   \
    \ }\n    for x in arr {\n        if x == max[0] {\n            for y in max {\n\
    \                if y > x {\n                    max[1] = y\n                \
    \    break\n                }\n            }\n        }\n    }\n    return max"]
stop_tokens:
- "\n}"
