name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the list l.\n/// >>> median(l: [3, 1,\
  \ 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
  \ median(l: [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    var l = l.sorted()\n    if l.count < 2 {\n        return Double(l.first!)\n\
    \    }\n    var mid = l.count / 2\n    return Double(l[mid])", "    var n = l.count\n\
    \    if n < 2 {\n        return Double(l.first!)\n    }\n    var m = Double(l.first!)\n\
    \    for x in l.dropFirst() {\n        if x < m {\n            m = x\n       \
    \ }\n    }\n    return m", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return Double(l.last! + l.first!) / Double(l.count - 1)\n    } else {\n\
    \        return Double(l.first!)\n    }", "    let sorted = l.sorted()\n    if\
    \ sorted.count % 2 == 1 {\n        return sorted[(sorted.count - 1) / 2]\n   \
    \ }\n    return (sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) /\
    \ 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ Double(l.count / 2)\n    }\n    return Double(0)", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count\
    \ / 2]) / 2.0\n    }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) /\
    \ 2.0", "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n       \
    \ return Double(sorted[(sorted.count - 1) / 2] + sorted[sorted.count / 2])\n \
    \   } else {\n        return Double(sorted[(sorted.count - 1) / 2 - 1] + sorted[sorted.count\
    \ / 2 - 1])\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n    \
    \    return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    let n = l.count\n  \
    \  if n < 1 {\n        return Double.nan\n    }\n    let mid = n / 2\n    let\
    \ left = l[0 ..< mid]\n    let right = l[mid..<n]\n    let median = median(left)\n\
    \    if median.isNaN || median.isInfinite {\n        return median\n    }\n  \
    \  return median.doubleValue + median(right)", "    let n = l.count\n    if n\
    \ < 1 {\n        return Double.nan\n    }\n    let mid = n / 2\n    let leftMedian\
    \ = median(l.prefix(mid))\n    let rightMedian = median(l.suffix(mid))\n    return\
    \ Double(leftMedian) + Double(rightMedian) / Double(n)", "    var sortedList =\
    \ l.sorted()\n    if sortedList.count % 2 == 0 {\n        return sortedList[sortedList.count\
    \ / 2]\n    }\n    return sortedList[sortedList.count / 2 - 1] + sortedList[sortedList.count\
    \ / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return l[0]", "    var n = l.count\n    if n < 1 {\n      \
    \  return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for v in l[1..] {\n        if v < low {\n\
    \            low = v\n        }\n        if v > high {\n            high = v\n\
    \        }\n    }\n    return (high + low) / 2", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n\
    \        return l[(l.count / 2)]\n    }", "    var l = l\n    l.sort()\n    if\
    \ l.count > 1 {\n        return Double(l.last! + l.first!) / Double(l.count -\
    \ 1)\n    }\n    return l.first!", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1)\
    \ / 2 - 1]) / 2\n    }", "    var n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var mid = n\
    \ / 2\n    var left = l[:mid]\n    var right = l[mid:]\n    var m1 = median(left)\n\
    \    var m2 = median(right)\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return l[0]", "    var sortedList = l\n    sortedList.sort()\n\
    \    return sortedList[Int(sortedList.count / 2)]", "    var l = l.sorted()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0", "    var l = l\n   \
    \ l.sort()\n    return l[(l.count - 1) / 2]", "    let n = l.count\n    if n <\
    \ 1 {\n        return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.last! + l.first!) / Double(l.count\
    \ - 1)\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n  \
    \  if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]",
  "    var n = l.count\n    if n == 0 {\n        return 0\n    }\n    if n % 2 ==\
    \ 0 {\n        return l[n/2]\n    }\n    return (l[n/2-1] + l[n/2])/2", "    var\
    \ l = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l[l.count /\
    \ 2 - 1] + l[l.count / 2]) / 2.0\n    }\n    return Double(l[l.count / 2 - 1]\
    \ + l[l.count / 2 - 1]) / 2.0", "    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2]) / 2.0\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / 2.0\n    }\n    return Double(l.first!)", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    let sorted = l.sorted()\n \
    \   if sorted.isEmpty {\n        return Double.nan\n    }\n    let mid = sorted.count\
    \ / 2\n    return sorted[mid]", "    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid])", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n \
    \       return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] +\
    \ l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)",
  "    let count = l.count\n    if count < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = count / 2\n    let left = l[..mid]\n    let right = l[mid..<count]\n\
    \    return Double(median(left) + median(right)) / 2", "    var n = l.count\n\
    \    if n < 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n     \
    \   return l[n/2]\n    }\n    var mid = n / 2\n    var left = l[mid]\n    var\
    \ right = l[mid+1]\n    if left < right {\n        return left\n    }\n    return\
    \ right", "    var n = l.count\n    if n < 1 {\n        return Double.nan\n  \
    \  }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var low = l[0]\n\
    \    var high = l[n-1]\n    for index in 1..(n-1)/2 {\n        if l[index] > high\
    \ {\n            high = l[index]\n        } else if l[index] < low {\n       \
    \     low = l[index]\n        }\n    }\n    return (high + low)/2.0", "    var\
    \ l = l.sorted()\n    if l.count < 2 {\n        return l[0]\n    }\n    var mid\
    \ = l.count / 2\n    return Double(l[mid]) + Double(l[mid-1]) / 2", "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) /\
    \ 2 - 1]) / 2\n    }", '    return median(l, Double(0))', '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2]\
    \ + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n    if l.count <=\
    \ 1 {\n        return l[0]\n    }\n    return Double(l[l.count / 2]) + Double(l[(l.count\
    \ - 1) / 2]) / 2.0", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n    \
    \    return Double(l[l.count / 2])\n    } else {\n        return (Double(l[l.count\
    \ / 2 - 1]) + Double(l[l.count / 2])) / 2\n    }", "    var n = l.count\n    if\
    \ n < 2 {\n        return Double(l.first!)\n    }\n    var mid = n / 2\n    var\
    \ left = l[0 ..< mid]\n    var right = l[mid..<n]\n    return median(left) + median(right)\
    \ / 2", "    let n = l.count\n    if n < 1 {\n        return 0\n    }\n    let\
    \ mid = n / 2\n    let left = l[0 ..< mid]\n    let right = l[mid..<n]\n    return\
    \ median(left) + median(right) / 2", '    return l.sorted().reduce(0.0, { $0 +
    Double($1) })', "    var n = l.count\n    if n < 2 {\n        return l[0]\n  \
    \  }\n    var mid = n / 2\n    var m1 = median(l[0 ..< mid])\n    var m2 = median(l[mid..<n])\n\
    \    return m1 + (m2 - m1) / (n - 1)", "    var l = l.sorted()\n    if l.count\
    \ <= 1 {\n        return l[0]\n    }\n    return Double(l.count / 2) + l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var n = l.count\n    if n\
    \ < 2 {\n        return Double(l.first!)\n    }\n    var mid = Double(l.first!)\n\
    \    var low = Double(l.first!)\n    var high = Double(l.first!)\n    for x in\
    \ l {\n        if x < low {\n            low = x\n        } else if x > high {\n\
    \            high = x\n        } else {\n            mid = (low + high) / 2\n\
    \        }\n    }\n    return mid", "    var l = l.sorted()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n    if\
    \ l.count % 2 == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2])\
    \ / 2.0\n    }\n    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var sortedList = l\n    sortedList.sort()\n\
    \    return sortedList[Int(ceil(Double(sortedList.count) / 2.0))]", "    var l\
    \ = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l[l.count / 2\
    \ - 1] + l[l.count / 2]) / 2\n    }\n    return Double(l[l.count / 2] + l[l.count\
    \ / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n  \
    \      return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0", "    let n = l.count\n\
    \    if n < 2 {\n        return Double(l.first!)\n    }\n    let mid = n / 2\n\
    \    let leftMedian = median(l.prefix(mid))\n    let rightMedian = median(l.suffix(mid))\n\
    \    return Double(leftMedian) + Double(rightMedian) / 2.0", "    var l = l\n\
    \    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return Double(l[(l.count - 1) / 2] + l[(l.count - 1) /\
    \ 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l[l.count\
    \ / 2])\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n \
    \   if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    let n = l.count\n\
    \    let m = n / 2\n    if n % 2 == 1 {\n        return l[m]\n    }\n    let low\
    \ = l[m]\n    let high = l[n - 1]\n    return (high - low) / 2.0", "    var l\
    \ = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return Double(0)", "    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n    var mid\
    \ = Double(n / 2)\n    var left = l[0 ..< mid]\n    var right = l[mid..<n]\n \
    \   return median(left) + median(right) / 2.0", "    var n = l.count\n    if n\
    \ < 2 {\n        return l[0]\n    }\n    var mid = n / 2\n    var m1 = median(l[0\
    \ ..< mid])\n    var m2 = median(l[mid..<n])\n    return m1 + (m2 - m1) * Double(mid)\
    \ / Double(n)", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return Double(0)", "    let n = l.count\n \
    \   if n < 2 {\n        return Double(l.first!)\n    }\n    let mid = n / 2\n\
    \    let left = median(l[0..<mid])\n    let right = median(l[mid..<n])\n    return\
    \ left + right / 2", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return Double(l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n    if l.count\
    \ % 2 == 1 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.last!\
    \ + l.first!) / 2.0", "    var l = l\n    l.sort()\n    if l.count > 1 {\n   \
    \     return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]", "    var sortedList\
    \ = l\n    sortedList.sort()\n    return sortedList[Int(sortedList.count / 2)]",
  "    let count = l.count\n    if count < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = count / 2\n    let left = l.prefix(mid)\n    let right =\
    \ l.suffix(mid)\n    return median(left) + median(right) / 2.0", "    var l =\
    \ l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / 2.0\n    }\n    return l.first!", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "   \
    \ var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    let sorted =\
    \ l.sorted()\n    if sorted.count < 2 {\n        return Double(sorted[0])\n  \
    \  }\n    let mid = sorted.count / 2\n    return Double(sorted[mid])", "    var\
    \ l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last! + l.first!)\
    \ / Double(l.count - 1)\n    }\n    return l.first!", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.last! + l.first!) / Double(l.count\
    \ - 1)\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n  \
    \  if l.count % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n\
    \        return l[(l.count / 2)]\n    }", "    var l = l\n    l.sort()\n    if\
    \ l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    var n = l.count\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return l[0]\n    }\n    if n % 2 == 0 {\n   \
    \     return median(l[1..<(n / 2)])\n    }\n    return median(l[(n / 2)..<n])",
  "    var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if n\
    \ == 1 {\n        return l[0]\n    }\n    var m = Double.nan\n    for x in l {\n\
    \        if Double.isNaN(m) || x < m {\n            m = x\n        }\n    }\n\
    \    return m", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n    \
    \    return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count > 1 {\n  \
    \      return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2].doubleValue) / 2\n\
    \    }\n    return l[0]", "    var l = l.sorted()\n    if l.count < 2 {\n    \
    \    return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])",
  "    let sorted = l.sorted()\n    if sorted.isEmpty {\n        return Double.nan\n\
    \    }\n    let mid = sorted.count / 2\n    return Double(sorted[mid])", "   \
    \ var l = l\n    l.sort()\n    if l.count > 1 {\n        return (l[0] + l[l.count\
    \ - 1]) / 2\n    }\n    return l[0]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n   \
    \ }\n    return l.first!", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var l = l.sorted()\n    if l.count < 2 {\n        return Double(l.first!)\n\
    \    }\n    var mid = l.count / 2\n    return Double(l[mid])", "    var n = l.count\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n\
    \    }\n    if n % 2 == 0 {\n        return median(l.prefix(n / 2)) + median(l.suffix(n\
    \ / 2))\n    }\n    return median(l.suffix(n / 2))", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    if l.count % 2 == 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1]\
    \ + l[mid])/2", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return\
    \ Double(l.first! + l.last!) / 2.0\n    }\n    return Double(l.first! + l.last!)\
    \ / 2.0", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return Double(l.count)", "    var l = l\n    l.sort()\n   \
    \ if l.count > 1 {\n        return Double(l.sortedLastIndex()) / Double(l.count)\n\
    \    }\n    return Double(l.sortedLastIndex())", "    var l = l.sorted()\n   \
    \ if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    let n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = n / 2\n    let left = l[..<mid]\n    let right = l[mid..<n]\n\
    \    return median(left) + median(right) / 2", "    let count = l.count\n    if\
    \ count < 2 {\n        return Double(l.first!)\n    }\n    let mid = count / 2\n\
    \    let left = median(l[0..<mid])\n    let right = median(l[mid..<count])\n \
    \   return left + right / 2", "    var l = l\n    l.sort()\n    if l.count > 1\
    \ {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!", "    var n = l.count\n    if n < 2 {\n        return l[0]\n\
    \    }\n    var mid = n / 2\n    var low = l[mid]\n    var high = l[n - 1]\n \
    \   if low == high {\n        return low\n    }\n    if low > high {\n       \
    \ return median(l.subarray(0, mid))\n    }\n    return median(l.subarray(mid +\
    \ 1, n - 1))", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n     \
    \   return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2", "    let n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = n / 2\n    let left = median(l[0..<mid])\n    let right\
    \ = median(l[mid..<n])\n    return left + right / 2.0", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count - 1) / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    }\n    return sorted[sorted.count / 2]", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n    return l.first!",
  "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var n = l.count\n\
    \    if n < 1 {\n        return 0\n    }\n    if n % 2 == 0 {\n        return\
    \ l[n/2]\n    }\n    return Double(l[n/2] + l[n/2-1]) / 2", "    var l = l\n \
    \   l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n    return l.first!",
  "    var l = l.sorted()\n    if l.count < 2 {\n        return l[0]\n    }\n    var\
    \ mid = l.count / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    }\n\
    \    return Double(l[mid-1] + l[mid])/2", "    var n = l.count\n    if n < 2 {\n\
    \        return Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for\
    \ x in l.dropFirst() {\n        if x < m {\n            m = x\n        }\n   \
    \ }\n    return m", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var n = l.count\n  \
    \  if n < 1 {\n        return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n\
    \    }\n    return l[n/2-1] + l[n/2]", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    let count = l.count\n    if\
    \ count < 2 {\n        return Double(l.first!)\n    }\n    let mid = count / 2\n\
    \    let leftMedian = median(l.prefix(mid))\n    let rightMedian = median(l.suffix(mid))\n\
    \    return Double(leftMedian) + Double(rightMedian) / 2.0", "    let n = l.count\n\
    \    if n < 1 {\n        return 0\n    }\n    let mid = n / 2\n    let leftMedian\
    \ = median(l[0..<mid])\n    let rightMedian = median(l[mid..<n])\n    return Double(leftMedian)\
    \ + Double(rightMedian) / 2", "    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n    let right\
    \ = l[mid..<n]\n    return Double(left.reduce(0.0, +) / Double(left.count) + right.reduce(0.0,\
    \ +) / Double(right.count))", "    var l = l\n    l.sort()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n   \
    \ if l.count > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return\
    \ l[0]", "    let sorted = l.sorted()\n    if sorted.count < 2 {\n        return\
    \ Double(sorted[0])\n    }\n    let middle = sorted.count / 2\n    return Double(sorted[middle])",
  "    var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if n\
    \ % 2 == 0 {\n        return l.sorted()[n / 2]\n    }\n    return l.sorted()[(n\
    \ - 1) / 2]", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var\
    \ l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l.sorted()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ l[(l.count - 1) / 2] + l[l.count / 2 - 1]", "    var n = l.count\n    if n <\
    \ 2 {\n        return Double(l.first!)\n    }\n    var mid = n / 2\n    var left\
    \ = l.subarray(0, mid)\n    var right = l.subarray(mid)\n    return median(left)\
    \ + median(right) / 2.0", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if\
    \ l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    let count = l.count\n    if\
    \ count < 2 {\n        return Double(l.first!)\n    }\n    let middle = count\
    \ / 2\n    let left = l[0 ..< middle]\n    let right = l[middle ..< count]\n \
    \   let median = median(left)\n    if median.isNaN {\n        return median\n\
    \    }\n    return median.max(median(right))", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n\
    \    return l.first!", "    let n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n    let right = l.suffix(mid)\n\
    \    return median(left) + median(right) / 2.0", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", " \
    \   var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return Double(l.last!\
    \ + l.first!) / 2.0\n    }\n    return Double(l.last! + l.first!)", "    var n\
    \ = l.count\n    if n < 2 {\n        return l[0]\n    }\n    var mid = n / 2\n\
    \    var m1 = median(l[0...mid])\n    var m2 = median(l[mid...n])\n    return\
    \ (m1 + m2) / 2", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', " \
    \   var l = l\n    l.sort()\n    if l.count > 0 {\n        return Double(l.last!)\
    \ / Double(l.count)\n    }\n    return Double(0)", "    var n = l.count\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n  \
    \  }\n    if n % 2 == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    return\
    \ median(l[(n - 1) / 2..<n])", "    var n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    var m = Double(l.count)\n    var sum = 0\n    for x in l {\n \
    \       sum += x\n    }\n    var x = sum / Double(n)\n    var y = Double(l.count)\n\
    \    for x in l {\n        y -= x\n    }\n    return x / y", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    var n = l.count\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return l[0]\n    }\n    var m = Double(0)\n \
    \   var m1 = Double(0)\n    var m2 = Double(0)\n    for x in l {\n        m =\
    \ (m + x) / 2\n        m1 = (m1 + m) / 2\n        m2 = (m2 + m) / 2\n    }\n \
    \   return m", "    var n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    var mid = n / 2\n    var low = Double(l.first!)\n    var high = Double(l.last!)\n\
    \    if low == high {\n        return low\n    }\n    if low > high {\n      \
    \  high = low\n        mid = mid - 1\n    }\n    if mid % 2 == 0 {\n        return\
    \ median(l[mid..<(n - 1)])\n    }\n    return median(l[mid..<(n - 1)])", "   \
    \ var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1)\
    \ / 2]\n    }\n    return l[0]", "    var n = l.count\n    if n == 0 {\n     \
    \   return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n % 2\
    \ == 0 {\n        return median(l[1..<(n - 1)])\n    }\n    return median(l[1..<(n\
    \ - 1)], l[(n - 1)..<n])", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return Double(l.count / 2)\n    }\n    return Double(l.first!)", "  \
    \  var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l[l.count\
    \ / 2])\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n \
    \   if l.count > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n\
    \    return l.first!", "    var l = l\n    l.sort()\n    return l[(l.count - 1)\
    \ / 2]", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var n = l.count\n    if n < 1 {\n        return 0\n    }\n    var\
    \ m = Double(l.count)\n    var sum = 0\n    for x in l {\n        sum += x\n \
    \   }\n    for x in l {\n        m = (sum - x) / Double(n)\n    }\n    return\
    \ m", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var\
    \ l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n    }\n    var mid\
    \ = l.count / 2\n    return l[mid]", "    var l = l.sorted()\n    if l.count %\
    \ 2 == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2\n \
    \   }\n    return Double(l[l.count / 2 - 1] + l[l.count / 2 - 1]) / 2", "    var\
    \ n = l.count\n    if n < 2 {\n        return Double(l.first!)\n    }\n    var\
    \ m = Double(l.first!)\n    for x in l.dropFirst() {\n        if x < m {\n   \
    \         m = x\n        }\n    }\n    return m", "    var n = l.count\n    if\
    \ n < 2 {\n        return Double(l.first!)\n    }\n    if n % 2 == 0 {\n     \
    \   return median(l: l.prefix(l.count / 2))\n    }\n    return median(l: l.suffix(l.count\
    \ / 2))", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2]\
    \ + l[l.count / 2 - 1]) / 2", "    var l = l\n    l.sort()\n    if l.count > 0\
    \ {\n        return Double(l[l.count / 2])\n    }\n    return 0", "    var l =\
    \ l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last! + l.first!)\
    \ / Double(l.count - 1)\n    }\n    return Double(l.first!)", "    var sortedList\
    \ = l.sorted()\n    if sortedList.count % 2 == 0 {\n        return sortedList[(sortedList.count\
    \ / 2) - 1]\n    } else {\n        return sortedList[(sortedList.count / 2)]\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n  \
    \  if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    let n = l.count\n\
    \    if n < 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n     \
    \   let mid = n / 2\n        return Double(l.sorted(by: <).first!) + Double(l.sorted(by:\
    \ >).first!) / Double(mid)\n    }\n    let mid = n / 2\n    return Double(l.sorted(by:\
    \ <).last!) + Double(l.sorted(by: >).last!) / Double(mid)", "    var n = l.count\n\
    \    if n < 2 {\n        return Double(l.first!)\n    }\n    var mid = n / 2\n\
    \    var low = l[mid]\n    var high = l[n - 1]\n    if low < high {\n        return\
    \ low\n    }\n    return high", "    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var n =\
    \ l.count\n    if n < 2 {\n        return Double(l.first!)\n    }\n    var mid\
    \ = n / 2\n    var left = l[mid..<n]\n    var right = l[..<mid]\n    return median(left)\
    \ + median(right) / 2.0", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2]\
    \ - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0", "    var l =\
    \ l\n    l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2",
  "    var n = l.count\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return l[0]\n    }\n    if n % 2 == 0 {\n        return median(l[1..<(n\
    \ - 1)])\n    }\n    let mid = n / 2\n    return median(l[mid..<(n - mid)])",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return l[0]", "    var n = l.count\n    if n < 1 {\n   \
    \     return 0\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n   \
    \ var low = l[0]\n    var high = l[0]\n    for i in 1..n {\n        if l[i] <\
    \ low {\n            low = l[i]\n        }\n        if l[i] > high {\n       \
    \     high = l[i]\n        }\n    }\n    return ((high - low) / Double(n)).rounded(.toNearestOrAwayFromZero)",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] - l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return Double(l[(l.count\
    \ - 1) / 2] + l[l.count / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n  \
    \  if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return l[0]", "    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    } else {\n  \
    \      return sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 -\
    \ 1]\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }"]
stop_tokens:
- "\n}"
