name: HumanEval_98_count_upper
language: swift
prompt: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
  \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
  \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
  \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\")\
  \ == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
completions: ['    return s.unicodeScalars.filter({ $0.isUppercase }).filter({ $0.isEven()
    }).count', "    var count = 0\n    for c in s.characters {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for idx in 0..<s.count {\n        if idx % 2 == 0 && s[idx].isUpper()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in s.characters {\n        if isUppercase(c) && isEven(index(c))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in s {\n        if isUpper(c) {\n            count += 1\n   \
    \     }\n    }\n    return count", "    var count = 0\n    for i := 0; i < len(s);\
    \ i += 2 {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U' {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for c in s {\n        if isUpper(c) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for i :=\
    \ 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'a' {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ c in s.characters {\n        if isUpper(c) {\n            count += 1\n     \
    \   }\n    }\n    return count", "    var count = 0\n    for c in s {\n      \
    \  if isUpper(c) {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for c in s.characters {\n        if isUpper(c) {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for i := 0; i < len(s); i += 2 {\n        if s[i] == 'A' || s[i] == 'a' {\n\
    \            count += 1\n        }\n    }\n    return count", '    return s.unicodeScalars.filter({
    $0.isUppercase }).filter({ $0.isEvenIndex }).count', "    var count = 0\n    for\
    \ c in s {\n        if isUpper(c) {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in s.characters {\n        if isUpper(c) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for c in\
    \ s.characters {\n        if isUpper(c) {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for index in 0..<s.count {\n        if s[index].isUpper() {\n     \
    \       count += 1\n        }\n    }\n    return count", "    return s.characters.reduce(0)\
    \ {\n        (c, i) in c + (i % 2 == 0 ? 1 : 0)\n    }"]
stop_tokens:
- "\n}"
