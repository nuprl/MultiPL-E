name: HumanEval_22_filter_integers
language: swift
prompt: "\n/// Filter given list of any python values only for integers\n/// >>> filter_integers(values:\
  \ [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\"\
  , [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc\
  \ filter_integers(values: [AnyHashable]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable])\
  \ == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
  \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
  \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
completions: ["    var result: [Int] = []\n    for value in values {\n        if let\
    \ value = value as? Int {\n            result.append(value)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for value in values {\n  \
    \      if let value = value as? Int {\n            result.append(value)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    for value in\
    \ values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for v in\
    \ values {\n        if let i = Int(v) {\n            result.append(i)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    for value in values\
    \ {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for value\
    \ in values {\n        if let int = Int(value) {\n            result.append(int)\n\
    \        }\n    }\n    return result", "    return values.filter {\n        switch\
    \ $0 {\n        case let x where x is Int:\n            return true\n        default:\n\
    \            return false\n        }\n    }", "    var result = [Int]()\n    for\
    \ value in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var filtered = [Int]()\n    for value\
    \ in values {\n        if let intValue = value as? Int {\n            filtered.append(intValue)\n\
    \        }\n    }\n    return filtered", "    var filtered = [Int]()\n    for\
    \ v in values {\n        if let i = Int(v) {\n            filtered.append(i)\n\
    \        }\n    }\n    return filtered", "    var result = [Int]()\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for value\
    \ in values {\n        if let value = value as? Int {\n            result.append(value)\n\
    \        }\n    }\n    return result", '    return values.filter({ $0 is Int }).map({
    $0 as! Int })']
stop_tokens:
- "\n}"
