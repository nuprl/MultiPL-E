name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 ?\
    \ \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name.substring(to: dot_index)\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.prefix(2)\n    let first_letter = first_letter?.prefix(1)\n\
    \    if dot_index == nil || dot_index! >= file_name.count {\n        return \"\
    No\"\n    }\n    if dot_index! < 3 || first_letter == nil || first_letter! >=\
    \ 'a' || first_letter! < 'z' {\n        return \"No\"\n    }\n    if first_letter!\
    \ >= 'a' && first_letter! < 'z' || first_letter! >= 'A' && first_letter! < 'Z'\
    \ {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased()\
    \ != \"txt\" &&\n        file_name.substring(from: dot_index!).lowercased() !=\
    \ \"exe\" &&\n        file_name.substring(from: dot_index!).lowercased() != \"\
    dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "\tlet file_name =\
    \ file_name.lowercased()\n\tlet dot_index = file_name.firstIndex(of: \".\")\n\t\
    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_", "    let\
    \ regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\")\n  \
    \  let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if matches.count == 0 {\n        return \"\
    No\"\n    }\n    if matches.count > 1 {\n        return \"No\"\n    }\n    if\
    \ matches.count == 1 && matches[0].rangeAt(0).location != 0 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "\tlet pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n\tlet regex = try! NSRegularExpression(pattern: pattern)\n\tlet result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \t\n\tif let match = result {\n\t\tif match.numberOfRanges == 0 {\n\t\t\treturn\
    \ \"No\"\n\t\t}\n\t\t\n\t\tlet range = match.rangeAt(0)\n\t\tlet start = range.location\n\
    \t\tlet end = range.location + range.length\n\t\t\n\t\tlet substring = file_name[start..<end]\n\
    \t\t\n\t\tif substring.hasPrefix(\".\") {\n\t\t\treturn \"No\"\n\t\t}\n\t\t\n\t\
    \tif substring.hasSuffix(\"txt\") || substring.hasSuffix(\"exe\") || substring.hasSuffix(\"\
    dll\") {\n\t\t\treturn \"Yes\"\n\t\t}\n\t\t\n\t\treturn \"No\"\n\t}\n\t\n\treturn\
    \ \"No\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasPrefix(\"\
    a\") &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    txt\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    exe\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    dll\")", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).lowercased()\
    \ == \"exe\" ||\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).lowercased()\
    \ == \"dll\" ||\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).lowercased()\
    \ == \"txt\"\n        ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{0,3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        file_name.substring(with: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first >= 'a'\
    \ &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first <=\
    \ 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first !=\
    \ '_' &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first !=\
    \ '-' &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first !=\
    \ '\\\\' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '/' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '\\'' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '\"' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '<' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '>' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '?' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '\\'' &&\n        file_name.substring(with: regex.firstMatch", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let first_letter = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = first_letter?.lowercased()\n    let letters = [\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    let letter = first_letter?.lowercased()\n\
    \    if dot_index == 0 || dot_index == file_name.count - 1 || first_letter ==\
    \ nil || first_letter == \"\" || letter == nil || letter == \"\" {\n        return\
    \ \"No\"\n    }\n    if letters.contains(letter!) {\n        return \"Yes\"\n\
    \    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let file_name = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.symbols)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-zA-Z]+$\", options: [])\n    let range = NSRange(location: 0, length: file_name.utf8.count)\n\
    \    return regex.firstMatch(in: file_name, options: [], range: range)?.rangeAt(0)\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n  \
    \  let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let first_letter\
    \ = file_name.substring(from: dot_index)\n    let letters = first_letter..<first_letter\
    \ + first_letter.count\n    let valid_letters = letters.contains(where: { $0.isLetter\
    \ })\n    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index =\
    \ dot_index != nil ? dot_index! : 0\n    let last_letter = file_name.substring(to:\
    \ dot_index)\n    let valid_last_letter = last_letter == \"txt\" || last_letter\
    \ == \"exe\" || last_letter == \"dll\"\n    if valid_letters && valid_last_letter\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.characters.count\n\
    \    if file_name <= 3 {\n        return \"No\"\n    }\n    if dot_index == 0\
    \ {\n        return \"No\"\n    }\n    if dot_index == file_name.characters.count\
    \ - 1 {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index).lowercased()\
    \ != \"exe\" {\n        return \"No\"\n    }\n    if file_name.substring(from:\
    \ dot_index).lowercased() != \"dll\" {\n        return \"No\"\n    }\n    if file_name.substring(from:\
    \ dot_index).lowercased() != \"txt\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(upTo:\
    \ dot_index)\n    let first_letter = first_letter!\n    let last_letter = file_name.suffix(from:\
    \ dot_index)\n    let last_letter = last_letter!\n    let letters = first_letter..<last_letter\n\
    \    let letters = letters.filter({$0 >= 'a' && $0 <= 'z'})\n    let letters =\
    \ letters.filter({$0 >= 'A' && $0 <= 'Z'})\n    let letters = letters.filter({$0\
    \ != '_'})\n    let letters = letters.filter({$0 != '-'})\n    let letters = letters.filter({$0\
    \ != '0'})\n    let letters = letters.filter({$0 != '1'})\n    let letters = letters.filter({$0\
    \ != '2'})\n    let letters = letters.filter({$0 != '3'})\n    let letters = letters.filter({$0\
    \ != '4'})\n    let letters = letters.filter({$0 != '5'})\n    let letters = letters.filter({$0\
    \ != '6'})\n    let letters = letters.filter({$0 != '7'})\n    let letters = letters.filter({$0\
    \ != '8'})\n    let letters = letters.filter({$0 != '9'})\n    let letters = letters.filter({$0\
    \ != 'a'})\n    let letters = letters.filter({$0 != 'b'})\n    let letters = letters.filter({$0\
    \ != 'c'})\n    let letters = letters.filter({$0 != 'd'})\n    let letters = letters.filter({$0\
    \ != 'e'})\n    let letters = letters.filter({$0 != 'f'})\n    let letters = letters.filter({$0\
    \ != 'g'})\n    let letters = letters.filter({$0 != 'h'})\n    let letters = letters.filter({$0\
    \ != 'i'})\n    let letters = letters.filter({$0 != 'j'})\n    let letters = letters.filter({$0\
    \ != 'k'})\n    let letters = letters.filter({$0 != 'l'})\n    let letters = letters.filter({$0\
    \ != 'm'})\n    let letters = letters.filter({$0 != 'n'})\n    let letters = letters.filter({$0\
    \ != 'o'})\n    let letters = letters.filter({$0 != 'p'})\n    let letters = letters.filter({$0\
    \ != 'q'})\n    let letters = letters.filter({$0 != 'r'})\n    let letters = letters.filter",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let last_letter = file_name.suffix(dot_index)\n    let first_letter = first_letter?.lowercased()\n\
    \    let last_letter = last_letter?.lowercased()\n    \n    if dot_index == nil\
    \ || dot_index! >= file_name.count {\n        return \"No\"\n    }\n    \n   \
    \ if dot_index! < 3 || dot_index! > file_name.count - 2 {\n        return \"No\"\
    \n    }\n    \n    if first_letter == nil || first_letter!.count < 1 || first_letter!.count\
    \ > 3 {\n        return \"No\"\n    }\n    \n    if last_letter == nil || last_letter!.count\
    \ < 1 || last_letter!.count > 3 {\n        return \"No\"\n    }\n    \n    if\
    \ first_letter! != nil && first_letter!.count != 3 || last_letter! != nil && last_letter!.count\
    \ != 3 {\n        return \"No\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 1 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 2 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 3 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 4 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 5 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 6 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 7 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 8 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 9 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 10 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 11 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 12 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 13 {\n        return \"Yes\"\n    }\n", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let file_name = file_name.substring(from: 0)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.tri"]
stop_tokens:
- "\n}"
