name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 ?\
    \ \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name.substring(to: dot_index)\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.prefix(2)\n    let first_letter = first_letter?.prefix(1)\n\
    \    if dot_index == nil || dot_index! >= file_name.count {\n        return \"\
    No\"\n    }\n    if dot_index! < 3 || first_letter == nil || first_letter! >=\
    \ 'a' || first_letter! < 'z' {\n        return \"No\"\n    }\n    if first_letter!\
    \ >= 'a' && first_letter! < 'z' || first_letter! >= 'A' && first_letter! < 'Z'\
    \ {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased()\
    \ != \"txt\" &&\n        file_name.substring(from: dot_index!).lowercased() !=\
    \ \"exe\" &&\n        file_name.substring(from: dot_index!).lowercased() != \"\
    dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "\tlet file_name =\
    \ file_name.lowercased()\n\tlet dot_index = file_name.firstIndex(of: \".\")\n\t\
    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \tlet dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n\tlet dot_index = dot_", "    let\
    \ regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\")\n  \
    \  let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if matches.count == 0 {\n        return \"\
    No\"\n    }\n    if matches.count > 1 {\n        return \"No\"\n    }\n    if\
    \ matches.count == 1 && matches[0].rangeAt(0).location != 0 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "\tlet pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n\tlet regex = try! NSRegularExpression(pattern: pattern)\n\tlet result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \t\n\tif let match = result {\n\t\tif match.numberOfRanges == 0 {\n\t\t\treturn\
    \ \"No\"\n\t\t}\n\t\t\n\t\tlet range = match.rangeAt(0)\n\t\tlet start = range.location\n\
    \t\tlet end = range.location + range.length\n\t\t\n\t\tlet substring = file_name[start..<end]\n\
    \t\t\n\t\tif substring.hasPrefix(\".\") {\n\t\t\treturn \"No\"\n\t\t}\n\t\t\n\t\
    \tif substring.hasSuffix(\"txt\") || substring.hasSuffix(\"exe\") || substring.hasSuffix(\"\
    dll\") {\n\t\t\treturn \"Yes\"\n\t\t}\n\t\t\n\t\treturn \"No\"\n\t}\n\t\n\treturn\
    \ \"No\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasPrefix(\"\
    a\") &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    txt\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    exe\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    dll\")", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).lowercased()\
    \ == \"exe\" ||\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).lowercased()\
    \ == \"dll\" ||\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).lowercased()\
    \ == \"txt\"\n        ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{0,3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        file_name.substring(with: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first >= 'a'\
    \ &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first <=\
    \ 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first !=\
    \ '_' &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first !=\
    \ '-' &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first !=\
    \ '\\\\' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '/' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '\\'' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '\"' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '<' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '>' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '?' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ != '\\'' &&\n        file_name.substring(with: regex.firstMatch", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let first_letter = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = first_letter?.lowercased()\n    let letters = [\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    let letter = first_letter?.lowercased()\n\
    \    if dot_index == 0 || dot_index == file_name.count - 1 || first_letter ==\
    \ nil || first_letter == \"\" || letter == nil || letter == \"\" {\n        return\
    \ \"No\"\n    }\n    if letters.contains(letter!) {\n        return \"Yes\"\n\
    \    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let file_name = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.symbols)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    let file", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-zA-Z]+$\", options: [])\n    let range = NSRange(location: 0, length: file_name.utf8.count)\n\
    \    return regex.firstMatch(in: file_name, options: [], range: range)?.rangeAt(0)\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n  \
    \  let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let first_letter\
    \ = file_name.substring(from: dot_index)\n    let letters = first_letter..<first_letter\
    \ + first_letter.count\n    let valid_letters = letters.contains(where: { $0.isLetter\
    \ })\n    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index =\
    \ dot_index != nil ? dot_index! : 0\n    let last_letter = file_name.substring(to:\
    \ dot_index)\n    let valid_last_letter = last_letter == \"txt\" || last_letter\
    \ == \"exe\" || last_letter == \"dll\"\n    if valid_letters && valid_last_letter\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.characters.count\n\
    \    if file_name <= 3 {\n        return \"No\"\n    }\n    if dot_index == 0\
    \ {\n        return \"No\"\n    }\n    if dot_index == file_name.characters.count\
    \ - 1 {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index).lowercased()\
    \ != \"exe\" {\n        return \"No\"\n    }\n    if file_name.substring(from:\
    \ dot_index).lowercased() != \"dll\" {\n        return \"No\"\n    }\n    if file_name.substring(from:\
    \ dot_index).lowercased() != \"txt\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(upTo:\
    \ dot_index)\n    let first_letter = first_letter!\n    let last_letter = file_name.suffix(from:\
    \ dot_index)\n    let last_letter = last_letter!\n    let letters = first_letter..<last_letter\n\
    \    let letters = letters.filter({$0 >= 'a' && $0 <= 'z'})\n    let letters =\
    \ letters.filter({$0 >= 'A' && $0 <= 'Z'})\n    let letters = letters.filter({$0\
    \ != '_'})\n    let letters = letters.filter({$0 != '-'})\n    let letters = letters.filter({$0\
    \ != '0'})\n    let letters = letters.filter({$0 != '1'})\n    let letters = letters.filter({$0\
    \ != '2'})\n    let letters = letters.filter({$0 != '3'})\n    let letters = letters.filter({$0\
    \ != '4'})\n    let letters = letters.filter({$0 != '5'})\n    let letters = letters.filter({$0\
    \ != '6'})\n    let letters = letters.filter({$0 != '7'})\n    let letters = letters.filter({$0\
    \ != '8'})\n    let letters = letters.filter({$0 != '9'})\n    let letters = letters.filter({$0\
    \ != 'a'})\n    let letters = letters.filter({$0 != 'b'})\n    let letters = letters.filter({$0\
    \ != 'c'})\n    let letters = letters.filter({$0 != 'd'})\n    let letters = letters.filter({$0\
    \ != 'e'})\n    let letters = letters.filter({$0 != 'f'})\n    let letters = letters.filter({$0\
    \ != 'g'})\n    let letters = letters.filter({$0 != 'h'})\n    let letters = letters.filter({$0\
    \ != 'i'})\n    let letters = letters.filter({$0 != 'j'})\n    let letters = letters.filter({$0\
    \ != 'k'})\n    let letters = letters.filter({$0 != 'l'})\n    let letters = letters.filter({$0\
    \ != 'm'})\n    let letters = letters.filter({$0 != 'n'})\n    let letters = letters.filter({$0\
    \ != 'o'})\n    let letters = letters.filter({$0 != 'p'})\n    let letters = letters.filter({$0\
    \ != 'q'})\n    let letters = letters.filter({$0 != 'r'})\n    let letters = letters.filter",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let last_letter = file_name.suffix(dot_index)\n    let first_letter = first_letter?.lowercased()\n\
    \    let last_letter = last_letter?.lowercased()\n    \n    if dot_index == nil\
    \ || dot_index! >= file_name.count {\n        return \"No\"\n    }\n    \n   \
    \ if dot_index! < 3 || dot_index! > file_name.count - 2 {\n        return \"No\"\
    \n    }\n    \n    if first_letter == nil || first_letter!.count < 1 || first_letter!.count\
    \ > 3 {\n        return \"No\"\n    }\n    \n    if last_letter == nil || last_letter!.count\
    \ < 1 || last_letter!.count > 3 {\n        return \"No\"\n    }\n    \n    if\
    \ first_letter! != nil && first_letter!.count != 3 || last_letter! != nil && last_letter!.count\
    \ != 3 {\n        return \"No\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 1 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 2 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 3 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 4 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 5 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 6 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 7 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 8 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 9 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 10 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 11 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 12 {\n        return \"Yes\"\n    }\n    \n    if dot_index! == dot_index!.count\
    \ - 13 {\n        return \"Yes\"\n    }\n", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let file_name = file_name.substring(from: 0)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.tri", "    \n    // 1. There should not be\
    \ more than three digits ('0'-'9') in the file's name.\n    if file_name.count\
    \ > 3 {\n        return \"No\"\n    }\n    \n    // 2. The file's name contains\
    \ exactly one dot '.'\n    if file_name.contains(\".\") {\n        return \"No\"\
    \n    }\n    \n    // 3. The substring before the dot should not be empty, and\
    \ it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    if let first_letter = file_name.first?.unicodeScalars.first {\n        if\
    \ first_letter.value > 64 && first_letter.value < 91 {\n            return \"\
    No\"\n        }\n    }\n    \n    // 4. The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n    \n    // 5. Return Yes if the file's\
    \ name is valid, and return No if the file's name is invalid.\n    return \"Yes\"",
  "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ <= 'z'", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ >= 'A' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).characters.first\
    \ <= 'Z'", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern, options: [])\n    let results = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if results.count > 0 {\n        let result = results[0]\n        let range\
    \ = NSRange(location: result.range.location, length: result.range.length)\n  \
    \      return String(file_name[range])\n    } else {\n        return \"No\"\n\
    \    }", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let last_letter = file_name.suffix(dot_index)\n    let first_letter = first_letter!.lowercased()\n\
    \    let last_letter = last_letter!.lowercased()\n    \n    if dot_index == 0\
    \ {\n        return first_letter == \"a\" || first_letter == \"b\" || first_letter\
    \ == \"c\" || first_letter == \"d\" || first_letter == \"e\" || first_letter ==\
    \ \"f\" || first_letter == \"g\" || first_letter == \"h\" || first_letter == \"\
    i\" || first_letter == \"j\" || first_letter == \"k\" || first_letter == \"l\"\
    \ || first_letter == \"m\" || first_letter == \"n\" || first_letter == \"o\" ||\
    \ first_letter == \"p\" || first_letter == \"q\" || first_letter == \"r\" || first_letter\
    \ == \"s\" || first_letter == \"t\" || first_letter == \"u\" || first_letter ==\
    \ \"v\" || first_letter == \"w\" || first_letter == \"x\" || first_letter == \"\
    y\" || first_letter == \"z\"\n    } else if dot_index == file_name.count - 1 {\n\
    \        return last_letter == \"txt\" || last_letter == \"exe\" || last_letter\
    \ == \"dll\"\n    } else {\n        return first_letter == \"a\" || first_letter\
    \ == \"b\" || first_letter == \"c\" || first_letter == \"d\" || first_letter ==\
    \ \"e\" || first_letter == \"f\" || first_letter == \"g\" || first_letter == \"\
    h\" || first_letter == \"i\" || first_letter == \"j\" || first_letter == \"k\"\
    \ || first_letter == \"l\" || first_letter == \"m\" || first_letter == \"n\" ||\
    \ first_letter == \"o\" || first_letter == \"p\" || first_letter == \"q\" || first_letter\
    \ == \"r\" || first_letter == \"s\" || first_letter == \"t\" || first_letter ==\
    \ \"u\" || first_letter == \"v\" || first_letter == \"w\" || first_letter == \"\
    x\" || first_letter == \"y\" || first_letter == \"z\" || last_letter == \"txt\"\
    \ || last_letter == \"exe\" || last_letter == \"dll\"\n    }", "    if file_name.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n  \
    \      return \"No\"\n    }\n    if file_name.starts(with: \"a\") || file_name.starts(with:\
    \ \"A\") {\n        return \"No\"\n    }\n    if file_name.ends(with: \"txt\"\
    ) || file_name.ends(with: \"exe\") || file_name.ends(with: \"dll\") {\n      \
    \  return \"Yes\"\n    }\n    return \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.endIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!", "    \n    // Your code here\n    \n    return \"\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name[dot_index..<file_name.endIndex]\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ < 3 || dot_index! > file_name.endIndex {\n        return \"No\"\n    }\n   \
    \ if letter_index == nil || letter_index! < letter_index!+1 || letter_index! >\
    \ letter_index!+3 {\n        return \"No\"\n    }\n    if file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    if file_name.prefix(dot_index!) != \"\
    \" {\n        return \"No\"\n    }\n    if file_name.suffix(dot_index!) != \"\
    txt\" {\n        return \"No\"\n    }\n    if file_name.prefix(letter_index!)\
    \ != \"\" {\n        return \"No\"\n    }\n    if file_name.suffix(letter_index!)\
    \ != \"exe\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index)\n    let file_name =\
    \ file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index != nil {\n  \
    \      if dot_index! < 3 {\n            return \"No\"\n        }\n        if dot_index!\
    \ > dot_index!.endIndex {\n            return \"No\"\n        }\n        if dot_index!.startIndex\
    \ < letter_index! {\n            return \"No\"\n        }\n        if dot_index!.startIndex\
    \ > letter_index!.endIndex {\n            return \"No\"\n        }\n        if\
    \ dot_index!.startIndex < letter_index! {\n            return \"No\"\n       \
    \ }\n        if dot_index!.startIndex > letter_index!.endIndex {\n           \
    \ return \"No\"\n        }\n        if dot_index!.startIndex < letter_index! {\n\
    \            return \"No\"\n        }\n        if dot_index!.startIndex > letter_index!.endIndex\
    \ {\n            return \"No\"\n        }\n        if dot_index!.startIndex <\
    \ letter_index! {\n            return \"No\"\n        }\n        if dot_index!.startIndex\
    \ > letter_index!.endIndex {\n            return \"No\"\n        }\n        if\
    \ dot_index!.startIndex < letter_index! {\n            return \"No\"\n       \
    \ }\n        if dot_index!.startIndex > letter_index!.endIndex {\n           \
    \ return \"No\"\n        }\n        if dot_index!.startIndex < letter_index! {\n\
    \            return \"No\"\n        }\n        if dot_index!.startIndex > letter_index!.endIndex\
    \ {\n            return \"No\"\n        }\n        if dot_index!.startIndex <\
    \ letter_index! {\n            return \"No\"\n        }\n        if dot_index!.startIndex\
    \ > letter_index!.endIndex {\n            return \"No\"\n        }\n        if\
    \ dot_index!.startIndex < letter_index! {\n            return \"No\"\n", "\tlet\
    \ file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \"\
    .\")\n\tlet dot_index = dot_index!\n\tlet first_letter = file_name.substring(to:\
    \ dot_index)\n\tlet first_letter = first_letter?.lowercased()\n\tlet first_letter\
    \ = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\
    \tlet first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n\tlet first_letter = first_letter?.lowercased()\n\tlet\
    \ first_letter = first_letter?.prefix(with: CharacterSet.letters)\n\tlet first_letter\
    \ = first_letter?.lowercased()\n\tlet first_letter = first_letter?.prefix(with: ",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location).hasPrefix(\"\
    a\") &&\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location).hasSuffix(\"\
    txt\") ||\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location).hasSuffix(\"\
    exe\") ||\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location).hasSuffix(\"\
    dll\")", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index + 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_", "    if file_name.count > 3 {\n\
    \        return \"No\"\n    }\n    if file_name.contains(\".\") != true {\n  \
    \      return \"No\"\n    }\n    if file_name.starts(with: \"a\") != true {\n\
    \        return \"No\"\n    }\n    if file_name.ends(with: [\"txt\", \"exe\",\
    \ \"dll\"]) != true {\n        return \"No\"\n    }\n    return \"Yes\"", "  \
    \  let pattern = \"^[0-9]{3}\\.[a-z][a-z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0\n        ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}[.][a-zA-Z][a-zA-Z0-9]*$\")\n    return regex.firstMatch(in: file_name,\
    \ options: .regularExpression) != nil ? \"Yes\" : \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name[0]\n    let file_name = file_name.hasPrefix(\"\
    0\") ? \"No\" : \"Yes\"\n    let file_name = file_name.hasSuffix(\"txt\") ? \"\
    Yes\" : \"No\"\n    let file_name = file_name.hasPrefix(\"a\") ? \"Yes\" : \"\
    No\"\n    let file_name = file_name.hasSuffix(\"exe\") ? \"Yes\" : \"No\"\n  \
    \  let file_name = file_name.hasSuffix(\"dll\") ? \"Yes\" : \"No\"\n    return\
    \ file_name", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = file_name.index(of: \"a\")\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.tri", "\tlet regex = try! NSRegularExpression(pattern: \"^[0-9]{3}[.][a-zA-Z][a-zA-Z0-9]+$\"\
    )\n\tlet result = regex.firstMatch(in: file_name, options: .regularExpression)\n\
    \tif result != nil {\n\t\treturn \"Yes\"\n\t} else {\n\t\treturn \"No\"\n\t}",
  "\tlet regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\")\n\
    \tlet range = NSRange(location: 0, length: file_name.count)\n\tlet result = regex.firstMatch(in:\
    \ file_name, options: [], range: range)\n\tif result != nil {\n\t\treturn \"Yes\"\
    \n\t}\n\treturn \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index\
    \ = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\tlet first_letter\
    \ = file_name.prefix(upTo: dot_index)\n\tlet first_letter = first_letter!\n\t\
    let valid_chars = CharacterSet.letters.union(CharacterSet(charactersIn: \"0123456789\"\
    ))\n\tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet first_letter = first_letter?.first\n\
    \tlet ", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}[a-zA-Z]{1}\\\
    .[a-zA-Z]{2,3}$\", options: [])\n    return regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length ==\
    \ 0 &&\n        file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).hasPrefix(\".\")\n        && file_name.substring(with: NSMakeRange(0,\
    \ file_name.characters.count - 1)).lowercased() == \"txt\"\n        && file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).lowercased() == \"exe\"\n  \
    \      && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).lowercased() == \"dll\"\n        && file_name.substring(with: NSMakeRange(0,\
    \ file_name.characters.count - 1)).lowercased() != \"readme\"\n        && file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).lowercased() != \"readme.txt\"\
    \n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).lowercased() != \"readme.txt.txt\"\n        && file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).lowercased() != \"readme.txt.txt.txt\"\
    \n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).lowercased() != \"readme.txt.txt.txt.txt\"\n        && file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).lowercased() != \"readme.txt.txt.txt.txt.txt\"\
    \n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).lowercased() != \"readme.txt.txt.txt.txt.txt.txt\"\n        && file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).lowercased() != \"readme.txt.txt.txt.txt.txt.txt.txt\"\
    \n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).lowercased() != \"readme.txt.txt.txt.txt.txt.txt.txt.txt\"\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).lowercased()\
    \ != \"readme.txt.txt.txt.txt.txt.txt.txt.txt.txt\"\n        && file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).lowercased() != \"readme.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt\"\
    \n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).lowercased() != \"readme.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt.txt\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0", "    let\
    \ pattern = \"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count))?.rangeAt(1).length > 0 ? \"Yes\" : \"No\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name[dot_index...dot_index+1]\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = ", "\t\
    let file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index)\n", "    \n    let file_name = file_name.lowercased()\n    \n   \
    \ let dot_index = file_name.index(of: \".\")\n    \n    if dot_index == nil {\n\
    \        return \"No\"\n    }\n    \n    let file_name = file_name[..<dot_index]\n\
    \    \n    let letter_index: Character? = file_name.index(of: Character(\"a\"\
    ))\n    \n    if letter_index == nil {\n        return \"No\"\n    }\n    \n \
    \   let letter = file_name[letter_index!]\n    \n    if letter.count != 1 {\n\
    \        return \"No\"\n    }\n    \n    if let index = file_name.index(of: \"\
    0\") {\n        let first_digit = file_name[index..<dot_index]\n        if first_digit.count\
    \ != 1 {\n            return \"No\"\n        }\n    }\n    \n    if let index\
    \ = file_name.index(of: \"9\") {\n        let last_digit = file_name[index..<dot_index]\n\
    \        if last_digit.count != 1 {\n            return \"No\"\n        }\n  \
    \  }\n    \n    if let index = file_name.index(of: \"A\") {\n        let first_letter\
    \ = file_name[index..<dot_index]\n        if first_letter.count != 1 {\n     \
    \       return \"No\"\n        }\n    }\n    \n    if let index = file_name.index(of:\
    \ \"Z\") {\n        let last_letter = file_name[index..<dot_index]\n        if\
    \ last_letter.count != 1 {\n            return \"No\"\n        }\n    }\n    \n\
    \    if let index = file_name.index(of: \"a\") {\n        let first_letter = file_name[index..<dot_index]\n\
    \        if first_letter.count != 1 {\n            return \"No\"\n        }\n\
    \    }\n    \n    if let index = file_name.index(of: \"z\") {\n        let last_letter\
    \ = file_name[index..<dot_index]\n        if last_letter.count != 1 {\n      \
    \      return \"No\"\n        }\n    }\n    \n    if let index = file_name.index(of:\
    \ \"0\") {\n        let first_digit = file_name[index..<dot_index]\n        if\
    \ first_digit.count != 1 {\n            return \"No\"\n        }\n    }\n    \n\
    \    if let index = file_name.index(of: \"9\") {\n        let last_digit = file_name[index..<dot_index]\n\
    \        if last_digit.count != 1 {\n            return \"No\"\n        }\n  \
    \  }\n    \n    if let index = file_name.index(of: \"A\") {\n        let first_letter\
    \ = file_name[index..<dot_index]\n        if first_letter.count != 1 {\n     \
    \       return \"No\"\n        }\n    }\n    \n    if let index = file_name.index(of:\
    \ \"Z\") {\n        let last_letter = file_name[index..<dot_index]\n        if\
    \ last_letter.count != 1 {\n            return \"No\"\n        }\n    }\n    \n\
    \    if let ", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[a-zA-Z]+$\", options: [])\n    let range = NSMakeRange(0, file_name.count)\n\
    \    let result = regex.firstMatch(in: file_name, options: [], range: range)\n\
    \    if result != nil {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let results =\
    \ regex.matches(in: file_name, options: [], range: NSRange(location: 0, length:\
    \ file_name.utf16.count))\n    if results.count == 0 {\n        return \"No\"\n\
    \    }\n    if results.count > 1 {\n        return \"No\"\n    }\n    if let match\
    \ = results.first {\n        let range = match.range\n        let start = range.lowerBound\n\
    \        let end = range.upperBound\n        let substr = file_name[start..<end]\n\
    \        let allowed = [\"txt\", \"exe\", \"dll\"]\n        if !substr.contains(where:\
    \ { allowed[$0] }) {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "\tlet pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\tlet regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n\tlet matches = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count))\n\t\n\tguard matches.count\
    \ == 1 else {\n\t\treturn \"No\"\n\t}\n\t\n\tlet range = matches[0].range\n\t\
    let start = range.location\n\tlet length = range.length\n\t\n\tlet substr = file_name[start..<start+length]\n\
    \t\n\tlet allowed = [\"txt\", \"exe\", \"dll\"]\n\t\n\tif !substr.contains(where:\
    \ { allowed[$0] != nil }) {\n\t\treturn \"No\"\n\t}\n\t\n\treturn \"Yes\"", "\t\
    let file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet first_letter = file_name.prefix(upTo: dot_index)\n\tlet last_letter\
    \ = file_name.suffix(from: dot_index)\n\t\n\tlet valid_characters = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\tlet valid_characters_count = valid_characters.count\n\t\n\tif dot_index ==\
    \ -1 || first_letter.count == 0 || first_letter[0] < 'a' || first_letter[0] >\
    \ 'z' || first_letter[0] < 'A' || first_letter[0] > 'Z' {\n\t\treturn \"No\"\n\
    \t}\n\t\n\tif last_letter == \"txt\" || last_letter == \"exe\" || last_letter\
    \ == \"dll\" {\n\t\treturn \"Yes\"\n\t}\n\t\n\tif dot_index != -1 && dot_index\
    \ != file_name.endIndex && dot_index != file_name.endIndex - 1 && dot_index !=\
    \ file_name.endIndex - 2 && dot_index != file_name.endIndex - 3 {\n\t\treturn\
    \ \"No\"\n\t}\n\t\n\tif dot_index != -1 && dot_index != file_name.endIndex &&\
    \ dot_index != file_name.endIndex - 1 && dot_index != file_name.endIndex - 2 &&\
    \ dot_index != file_name.endIndex - 3 && last_letter != \"txt\" && last_letter\
    \ != \"exe\" && last_letter != \"dll\" {\n\t\treturn \"No\"\n\t}\n\t\n\tif dot_index\
    \ != -1 && dot_index != file_name.endIndex && dot_index != file_name.endIndex\
    \ - 1 && dot_index != file_name.endIndex - 2 && dot_index != file_name.endIndex\
    \ - 3 && last_letter != \"txt\" && last_letter != \"exe\" && last_letter != \"\
    dll\" && first_letter != \"a\" && first_letter != \"b\" && first_letter != \"\
    c\" && first_letter != \"d\" && first_letter != \"e\" && first_letter != \"f\"\
    \ && first_letter != \"g\" && first_letter != \"h\" && first_letter != \"i\" &&\
    \ first_letter != \"j\" && first_letter != \"k\" && first_letter != \"l\" && first_letter\
    \ != \"m\" && first_letter != \"n\" && first_letter != \"o\" && first_letter !=\
    \ \"p\" && first_letter != \"q\" && first_letter != \"r\" && first_letter != \"\
    s\" && first_letter != \"t\" && first_letter != \"u\" && first_letter != \"v\"\
    \ && first_letter != \"w\" && first_letter != \"x\" && first_letter != \"y\" &&\
    \ first_letter != \"z\" {\n\t\treturn \"No\"\n\t}\n\t\n\tif dot_index != -1 &&\
    \ dot_index != file_name.endIndex && dot_index != file_name.endIndex - 1 && ",
  "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by:\
    \ 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) :\
    \ nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by:\
    \ 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) :\
    \ nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by:\
    \ 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) :\
    \ nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let file_name\
    \ = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ letter_index = file_name.index(of: \"a\")\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1", "    let file_name =\
    \ file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n   \
    \ let dot_index = dot_index!\n    let file_name = file_name.substring(from: dot_index!)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index + 1\n\
    \    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name[..<dot_index]\n    let last_letter = file_name[dot_index..<file_name.count]\n\
    \    let first_letter = first_letter?.unicodeScalars.first?.asciiString\n    let\
    \ last_letter = last_letter?.unicodeScalars.first?.asciiString\n    let letters\
    \ = first_letter! + last_letter!\n    let letters_set = Set(letters)\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = ", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSRange(location: 0, length:\
    \ file_name.utf8.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", "    let\
    \ pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1).length == 0 ? \"Yes\" : \"\
    No\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 ?\
    \ \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\n   \
    \ let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = first_letter?.lowercased()\n    let letters = first_letter?.characters\n \
    \   let letters = letters?.filter({ $0 != \"a\" && $0 != \"b\" && $0 != \"c\"\
    \ && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" && $0 != \"g\" && $0 != \"h\" &&\
    \ $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0 != \"l\" && $0 != \"m\" && $0\
    \ != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 != \"q\" && $0 != \"r\" && $0 !=\
    \ \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"v\" && $0 != \"w\" && $0 != \"\
    x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"0\" })\n    let letters = letters?.filter({ $0 != \"1\" })\n    let letters\
    \ = letters?.filter({ $0 != \"2\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"3\" })\n    let letters = letters?.filter({ $0 != \"4\" })\n    let letters\
    \ = letters?.filter({ $0 != \"5\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"6\" })\n    let letters = letters?.filter({ $0 != \"7\" })\n    let letters\
    \ = letters?.filter({ $0 != \"8\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"9\" })\n    let letters = letters?.filter({ $0 != \"a\" })\n    let letters\
    \ = letters?.filter({ $0 != \"b\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"c\" })\n    let letters = letters?.filter({ $0 != \"d\" })\n    let letters\
    \ = letters?.filter({ $0 != \"e\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"f\" })\n    let letters = letters?.filter({ $0 != \"g\" })\n    let letters\
    \ = letters?.filter({ $0 != \"h\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"i\" })\n    let letters = letters?.filter({ $0 != \"j\" })\n    let letters\
    \ = letters?.filter({ $0 != \"k\" })\n    let letters = ", "\tlet file_name =\
    \ file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ dot_index = dot_index!\n\tlet first_letter = file_name.prefix(upTo: dot_index)\n\
    \tlet first_letter = first_letter!\n\tlet first_letter = first_letter\n\tlet letters\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n\tlet letter = first_letter\n\tlet letter =\
    \ letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\
    \tlet letter = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet letter\
    \ = letter\n\tlet letter = letter\n\tlet letter = letter\n\tlet ", "    let pattern\
    \ = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).first\
    \ >= 97 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).first <= 122 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last >= 65 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last\
    \ <= 90\n        ? \"Yes\" : \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let first_letter = file_name.prefix(upTo: dot_index)\n\tlet first_letter = first_letter!\n\
    \tlet letters = first_letter...first_letter + first_letter.count\n\tlet dot_index\
    \ = file_name.index(of: \".\", in: first_letter)\n\tlet dot_index = dot_index!\n\
    \tlet last_letter = file_name.suffix(from: dot_index)\n\tlet last_letter = last_letter!\n\
    \tlet letters = letters...last_letter\n\tlet dot_index = file_name.index(of: \"\
    .\", in: last_letter)\n\tlet dot_index = dot_index!\n\tlet last_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet last_letter = last_letter!\n\tlet letters = letters...last_letter\n\
    \tlet dot_index = file_name.index(of: \".\", in: last_letter)\n\tlet dot_index\
    \ = dot_index!\n\tlet last_letter = file_name.suffix(from: dot_index)\n\tlet last_letter\
    \ = last_letter!\n\tlet letters = letters...last_letter\n\tlet dot_index = file_name.index(of:\
    \ \".\", in: last_letter)\n\tlet dot_index = dot_index!\n\tlet last_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet last_letter = last_letter!\n\tlet letters = letters...last_letter\n\
    \tlet dot_index = file_name.index(of: \".\", in: last_letter)\n\tlet dot_index\
    \ = dot_index!\n\tlet last_letter = file_name.suffix(from: dot_index)\n\tlet last_letter\
    \ = last_letter!\n\tlet letters = letters...last_letter\n\tlet dot_index = file_name.index(of:\
    \ \".\", in: last_letter)\n\tlet dot_index = dot_index!\n\tlet last_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet last_letter = last_letter!\n\tlet letters = letters...last_letter\n\
    \tlet dot_index = file_name.index(of: \".\", in: last_letter)\n\tlet dot_index\
    \ = dot_index!\n\tlet last_letter = file_name.suffix(from: dot_index)\n\tlet last_letter\
    \ = last_letter!\n\tlet letters = letters...last_letter\n\tlet dot_index = file_name.index(of:\
    \ \".\", in: last_letter)\n\tlet dot_index = dot_index!\n\tlet last_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet last_letter = last_letter", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\")\n    let matches = regex.matches(in: file_name,\
    \ range: NSRange(location: 0, length: file_name.count))\n    if matches.count\
    \ == 0 {\n        return \"No\"\n    }\n    if matches.count == 1 {\n        if\
    \ file_name[matches[0].range.lowerBound..<matches[0].range.upperBound].isEmpty{\n\
    \            return \"No\"\n        }\n    }\n    return \"Yes\"", "\tlet file_name\
    \ = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ first_letter = file_name.prefix(while: { $0.isLetter })\n\tlet last_letter =\
    \ file_name.suffix(from: dot_index)\n\tlet file_name = first_letter + last_letter\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_length = dot_index !=\
    \ nil ? dot_index!.distance(from: dot_index!.startIndex, to: dot_index!.endIndex)\
    \ : 0\n\tlet dot_length = dot_length < 2 ? 2 : dot_length\n\tlet dot_length =\
    \ dot_length < 3 ? 3 : dot_length\n\tlet dot_length = dot_length < 4 ? 4 : dot_length\n\
    \tlet dot_length = dot_length < 5 ? 5 : dot_length\n\tlet dot_length = dot_length\
    \ < 6 ? 6 : dot_length\n\tlet dot_length = dot_length < 7 ? 7 : dot_length\n\t\
    let dot_length = dot_length < 8 ? 8 : dot_length\n\tlet dot_length = dot_length\
    \ < 9 ? 9 : dot_length\n\tlet dot_length = dot_length < 10 ? 10 : dot_length\n\
    \tlet dot_length = dot_length < 11 ? 11 : dot_length\n\tlet dot_length = dot_length\
    \ < 12 ? 12 : dot_length\n\tlet dot_length = dot_length < 13 ? 13 : dot_length\n\
    \tlet dot_length = dot_length < 14 ? 14 : dot_length\n\tlet dot_length = dot_length\
    \ < 15 ? 15 : dot_length\n\tlet dot_length = dot_length < 16 ? 16 : dot_length\n\
    \tlet dot_length = dot_length < 17 ? 17 : dot_length\n\tlet dot_length = dot_length\
    \ < 18 ? 18 : dot_length\n\tlet dot_length = dot_length < 19 ? 19 : dot_length\n\
    \tlet dot_length = dot_length < 20 ? 20 : dot_length\n\tlet dot_length = dot_length\
    \ < 21 ? 21 : dot_length\n\tlet dot_length = dot_length < 22 ? 22 : dot_length\n\
    \tlet dot_length = dot_length < 23 ? 23 : dot_length\n\tlet dot_length = dot_length\
    \ < 24 ? 24 : dot_length\n\tlet dot_length = dot_length < 25 ? 25 : dot_length\n\
    \tlet dot_length = dot_length < 26 ? 26 : dot_length\n\tlet dot_length = dot_length\
    \ < 27 ? 27 : dot_length\n\tlet dot_length = dot_length < 28 ? 28 : dot_length\n\
    \tlet dot_length = dot_length < 29 ? 29 : dot_length\n\tlet dot_length = dot_length\
    \ < 30 ? 30 : dot_length\n\tlet ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_", " \
    \   let pattern = \"^[0-9]{0,3}\\.[a-zA-Z0-9]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSRange(location: 0, length: file_name.utf8.count))?.rangeAt(1).length\
    \ > 0 ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n   \
    \ let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).startIndex).hasPrefix(\"\
    a\") &&\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).startIndex).hasSuffix(\"\
    txt\") ||\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).startIndex).hasSuffix(\"\
    exe\") ||\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).startIndex).hasSuffix(\"\
    dll\")\n        ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[^.]+$\", options: [])\n    let matches = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count > 0 {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-z][a-z][a-z]$\", options:\
    \ [])\n    let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if matches.count == 0 {\n        return \"\
    No\"\n    }\n    if matches.count == 1 {\n        let range = matches[0].range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      let substring = file_name[start..<end]\n        if substring.hasPrefix(\"\
    .\") && substring.count > 1 {\n            let substring = substring[1..<substring.count-1]\n\
    \            if substring.hasPrefix(\"a\") && substring.hasPrefix(\"z\") && substring.hasPrefix(\"\
    A\") && substring.hasPrefix(\"Z\") {\n                return \"Yes\"\n       \
    \     }\n        }\n    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.characters.count > 3 ? \"No\"\
    \ : \"Yes\"\n    return file_name", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(dot_index)\n    let last_letter = file_name.suffix(dot_index)\n\
    \    let letters = first_letter..<last_letter\n    let letters_set = Set(letters)\n\
    \    let contains_dot = (dot_index != nil)\n    let contains_letter = letters_set.contains(first_letter)\n\
    \    let contains_digit = letters_set.contains(first_letter)\n    let contains_letterOrDigit\
    \ = contains_letter || contains_digit\n    let contains_letterOrDigitOrDot = contains_letterOrDigit\
    \ || contains_dot\n    if contains_letterOrDigitOrDot {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    let pattern = \"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n\
    \    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let first_letter = first_letter!\n    let first_letter = first_letter\n \
    \   let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let second_letter = file_name.suffix(dot_index)\n    let second_letter =\
    \ second_letter!\n    let second_letter = second_letter\n    let second_letter\
    \ = second_letter\n    if dot_index == nil || dot_index! < 0 || dot_index! > file_name.count\
    \ - 1 {\n        return \"No\"\n    }\n    if dot_index! == dot_index {\n    \
    \    if first_letter == \"0\" {\n            return \"No\"\n        }\n      \
    \  if first_letter == \"1\" {\n            return \"No\"\n        }\n        if\
    \ first_letter == \"2\" {\n            return \"No\"\n        }\n        if first_letter\
    \ == \"3\" {\n            return \"No\"\n        }\n        if first_letter ==\
    \ \"4\" {\n            return \"No\"\n        }\n        if first_letter == \"\
    5\" {\n            return \"No\"\n        }\n        if first_letter == \"6\"\
    \ {\n            return \"No\"\n        }\n        if first_letter == \"7\" {\n\
    \            return \"No\"\n        }\n        if first_letter == \"8\" {\n  \
    \          return \"No\"\n        }\n        if first_letter == \"9\" {\n    \
    \        return \"No\"\n        }\n        if first_letter == \"A\" {\n      \
    \      return \"No\"\n        }\n        if first_letter == \"B\" {\n        \
    \    return \"No\"\n        }\n        if first_letter == \"C\" {\n          \
    \  return \"No\"\n        }\n        if first_letter == \"D\" {\n            return\
    \ \"No\"\n        }\n        if first_letter == \"E\" {\n            return \"\
    No\"\n        }\n        if first_letter == \"F\" {\n            return \"No\"\
    \n        }\n        if first_letter == \"G\" {\n            return \"No\"\n \
    \       }\n        if first_letter == \"H\" {\n            return \"No\"\n   \
    \     }\n        if first_letter == \"I\" {\n            return \"No\"\n     \
    \   }\n        if first_letter == \"J\" {\n            return \"No\"\n       \
    \ }\n        if first_letter == \"K\" {\n            return \"No\"\n        }\n\
    \        if first_letter == \"L\" {\n            return \"No\"\n        }\n  \
    \      if first_letter == \"M\" {\n            return \"No\"\n        }\n    \
    \    if first_letter == \"N\" {\n            return \"No\"\n        }\n      \
    \  if first_letter == \"O\" {\n            return \"No\"\n        }\n        if\
    \ first_letter == \"P\" {\n            return \"No\"\n        }\n        if first_letter\
    \ == \"Q\" {\n            return \"No\"\n        }\n", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\", options: .caseInsensitive)\n    return regex.firstMatch(in:\
    \ file_name, options: .anchored, range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        file_name.components(separatedBy: \".\").first != \"\" &&\n\
    \        file_name.components(separatedBy: \".\").first!.rangeOfCharacter(from:\
    \ NSCharacterSet.letters.inverted) == nil &&\n        file_name.components(separatedBy:\
    \ \".\").last!.rangeOfCharacter(from: NSCharacterSet.letters) == nil\n       \
    \ ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).first >= 97\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).first <= 122 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last >= 65 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last\
    \ <= 90\n        ? \"Yes\"\n        : \"No\"", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n   \
    \ return regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let first_letter = file_name[dot_index..<dot_index+1]\n    let letters\
    \ = first_letter\n        .unicodeScalars\n        .filter({ $0.isLetter() })\n\
    \        .map({ $0.value })\n        .joined()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let last_letter = file_name[dot_index..<dot_index+1]\n\
    \    let last_letter = last_letter\n        .unicodeScalars\n        .filter({\
    \ $0.isLetter() })\n        .map({ $0.value })\n        .joined()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index! - 1\n    let last_letter\
    \ = file_name[dot_index..<dot_index+1]\n    let last_letter = last_letter\n  \
    \      .unicodeScalars\n        .filter({ $0.isLetter() })\n        .map({ $0.value\
    \ })\n        .joined()\n    let dot_index = file_name.index(of: \".\")\n    let\
    \ dot_index = dot_index! - 1\n    let last_letter = file_name[dot_index..<dot_index+1]\n\
    \    let last_letter = last_letter\n        .unicodeScalars\n        .filter({\
    \ $0.isLetter() })\n        .map({ $0.value })\n        .joined()\n    if dot_index\
    \ == -1 || dot_index == 0 || dot_index == 1 {\n        return \"No\"\n    }\n\
    \    if dot_index == dot_index+1 {\n        if first_letter == \"a\" || first_letter\
    \ == \"b\" || first_letter == \"c\" || first_letter == \"d\" || first_letter ==\
    \ \"e\" || first_letter == \"f\" || first_letter == \"g\" || first_letter == \"\
    h\" || first_letter == \"i\" || first_letter == \"j\" || first_letter == \"k\"\
    \ || first_letter == \"l\" || first_letter == \"m\" || first_letter == \"n\" ||\
    \ first_letter == \"o\" || first_letter == \"p\" || first_letter == \"q\" || first_letter\
    \ == \"r\" || first_letter == \"s\" || first_letter == \"t\" || first_letter ==\
    \ \"u\" || first_letter == \"v\" || first_letter == \"w\" || first_letter == \"\
    x\" || first_letter == \"y\" || first_letter == \"z\" {\n            return \"\
    Yes\"\n        }\n    }\n    if dot_index == dot_index+2 {\n        if last_letter\
    \ == \"txt\" || last_letter == \"exe\" || last_letter == \"dll\" {\n         \
    \   return \"Yes\"\n        }\n    }\n    return \"No\"", "    let file_name =\
    \ file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n   \
    \ let dot_index = dot_index!\n    let file_name = file_name.substring(from: dot_index!)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let first_letter = file_name[dot_index..<file_name.count]\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters.count)\n    let first_letter = first_letter?.prefix(with:\
    \ Character", "    let file_name = file_name.lowercased()\n    let dot_index =\
    \ file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name.prefix(dot_index)\n    let first_letter = first_letter!\n    let\
    \ second_letter = file_name.suffix(dot_index)\n    let second_letter = second_letter!\n\
    \    let first_letter = first_letter?.unicodeScalars\n    let second_letter =\
    \ second_letter?.unicodeScalars\n    let first_letter = first_letter?.first!\n\
    \    let second_letter = second_letter?.first!\n    let first_letter = first_letter?.unicodeScalars\n\
    \    let second_letter = second_letter?.unicodeScalars\n    let first_letter =\
    \ first_letter?.first!\n    let second_letter = second_letter?.first!\n    let\
    \ first_letter = first_letter?.unicodeScalars\n    let second_letter = second_letter?.unicodeScalars\n\
    \    let first_letter = first_letter?.first!\n    let second_letter = second_letter?.first!\n\
    \    let first_letter = first_letter?.unicodeScalars\n    let second_letter =\
    \ second_letter?.unicodeScalars\n    let first_letter = first_letter?.first!\n\
    \    let second_letter = second_letter?.first!\n    let first_letter = first_letter?.unicodeScalars\n\
    \    let second_letter = second_letter?.unicodeScalars\n    let first_letter =\
    \ first_letter?.first!\n    let second_letter = second_letter?.first!\n    let\
    \ first_letter = first_letter?.unicodeScalars\n    let second_letter = second_letter?.unicodeScalars\n\
    \    let first_letter = first_letter?.first!\n    let second_letter = second_letter?.first!\n\
    \    let first_letter = first_letter?.unicodeScalars\n    let second_letter =\
    \ second_letter?.unicodeScalars\n    let first_letter = first_letter?.first!\n\
    \    let second_letter = second_letter?.first!\n    let first_letter = first_letter?.unicodeScalars\n\
    \    let second_letter = second_letter?.unicodeScalars\n    let first_letter =\
    \ first_letter?.first!\n    let second_letter = second_letter?.first!\n    let\
    \ first_letter = first_letter?.unicodeScalars\n    let second_letter = second_letter?.unicodeScalars\n\
    \    let first_letter = first_letter?.first!\n    let second_letter = second_letter?.first!\n\
    \    let first_letter = first_letter?.unicodeScalars\n    let second_letter =\
    \ second_letter?.unicodeScalars\n    let first_letter = first_letter?.first!\n\
    \    let second_letter = second_letter?.first!\n    let first_letter = first_letter?.unicodeScalars\n\
    \    let second_letter = second_letter?.unicodeScalars\n    let first_letter =\
    \ first_letter?.", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let file_name = file_name.substring(from: dot_index)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.characters.count\n\
    \    let file_name = file_name.characters.count == 3 && file_name.contains(\"\
    .\") && file_name.first?.unicodeScalars.first >= 97 && file_name.first?.unicodeScalars.first\
    \ <= 122 && file_name.last?.unicodeScalars.last >= 65 && file_name.last?.unicodeScalars.last\
    \ <= 90\n    if file_name == true {\n        return \"Yes\"\n    } else {\n  \
    \      return \"No\"\n    }", "    let file_name = file_name.lowercased()\n  \
    \  let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name[dot_index..<file_name.endIndex]\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ < 1 || dot_index! > file_name.endIndex || dot_index! == file_name.endIndex {\n\
    \        return \"No\"\n    }\n    if letter_index == nil || letter_index! < 1\
    \ || letter_index! > file_name.endIndex || letter_index! == file_name.endIndex\
    \ {\n        return \"No\"\n    }\n    if file_name.count == 3 {\n        return\
    \ \"Yes\"\n    }\n    if file_name.count > 3 {\n        return \"No\"\n    }\n\
    \    if file_name.contains(\".\") {\n        return \"No\"\n    }\n    if file_name.characters.count\
    \ < 2 {\n        return \"No\"\n    }\n    if file_name.characters.count > 2 {\n\
    \        return \"No\"\n    }\n    if file_name.substring(to: dot_index!).lowercased()\
    \ != \"txt\" {\n        return \"No\"\n    }\n    if file_name.substring(from:\
    \ dot_index!).lowercased() != \"exe\" {\n        return \"No\"\n    }\n    if\
    \ file_name.substring(from: dot_index!).lowercased() != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.symbols)\n\
    \    if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name.first == \"\" {\n   \
    \     return \"No\"\n    }\n    if file_name.first != \"a\" && file_name.first\
    \ != \"b\" && file_name.first != \"c\" && file_name.first != \"d\" && file_name.first\
    \ != \"e\" && file_name.first != \"f\" && file_name.first != \"g\" && file_name.first\
    \ != \"h\" && file_name.first != \"i\" && file_name.first != \"j\" && file_name.first\
    \ != \"k\" && file_name.first != \"l\" && file_name.first != \"m\" && file_name.first\
    \ != \"n\" && file_name.first != \"o\" && file_name.first != \"p\" && file_name.first\
    \ != \"q\" && file_name.first != \"r\" && file_name.first != \"s\" && file_name.first\
    \ != \"t\" && file_name.first != \"u\" && file_name.first != \"v\" && file_name.first\
    \ != \"w\" && file_name.first != \"x\" && file_name.first != \"y\" && file_name.first\
    \ != \"z\" {\n        return \"No\"\n    }\n    if file_name.last != \"txt\" &&\
    \ file_name.last != \"exe\" && file_name.last != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    let results\
    \ = regex.matches(in: file_name, range: NSRange(location: 0, length: file_name.characters.count))\n\
    \    if !results.isEmpty {\n        let result = results.first\n        let range\
    \ = NSRange(location: result.range.location, length: result.range.length)\n  \
    \      return NSLocalizedString(\"No\", comment: \"\")\n    } else {\n       \
    \ return NSLocalizedString(\"Yes\", comment: \"\")\n    }", "    let pattern =\
    \ \"^[0-9]{0,3}\\.[a-z][a-z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let matches = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count))\n    if matches.count\
    \ == 0 {\n        return \"No\"\n    }\n    if matches.count == 1 {\n        let\
    \ range = matches[0].range\n        let start = range.lowerBound\n        let\
    \ end = range.upperBound\n        let substr = file_name[start..<end]\n      \
    \  let allowed = [\"txt\", \"exe\", \"dll\"]\n        if substr.contains(\".\"\
    ) && substr.first?.unicodeScalars.count != 0 {\n            if substr.first?.unicodeScalars.count\
    \ == 1 && substr.first?.unicodeScalars.first == 0x61 &&\n                substr.last?.unicodeScalars.count\
    \ == 1 && substr.last?.unicodeScalars.first == 0x63 {\n                return\
    \ \"Yes\"\n            }\n        }\n    }\n    return \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.tri", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index)\n    let file_name =\
    \ file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter({\
    \ $0.isLetter })\n    let letter_index = letter_index.first\n    let letter_index\
    \ = letter_index!\n    let letter_index = letter_index.advanced(by: 1)\n    let\
    \ letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}[a-zA-Z.][a-zA-Z.]+$\"\
    , options: [])\n    return regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\"\
    \ : \"No\"", "    let pattern = \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{2,4}$\"\n  \
    \  let regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.utf8.count))\n\
    \        .rangeAt(1).location == 0 ? \"Yes\" : \"No\"", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{3,4}$\")\n  \
    \  let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count))\n    \n    if result != nil {\n        let range\
    \ = NSMakeRange(result.range.location, result.range.length)\n        let file_name\
    \ = file_name.substring(with: range)\n        \n        if file_name.characters.count\
    \ == 3 {\n            if file_name.characters.first == '0' {\n               \
    \ return \"No\"\n            }\n        }\n        \n        if file_name.characters.count\
    \ > 3 {\n            return \"No\"\n        }\n        \n        if file_name.characters.first\
    \ == '.' {\n            let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z]{1}\"\
    )\n            let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count))\n            \n            if result\
    \ != nil {\n                let range = NSMakeRange(result.range.location, result.range.length)\n\
    \                let file_name = file_name.substring(with: range)\n          \
    \      \n                if file_name.characters.count == 1 {\n              \
    \      return \"No\"\n                }\n            }\n        }\n    }\n   \
    \ \n    return \"Yes\"", "    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.components(separatedBy: \".\")\n    \n    if file_name.count\
    \ < 3 {\n        return \"No\"\n    }\n    \n    if file_name.last == \"\" {\n\
    \        return \"No\"\n    }\n    \n    if file_name.last!.first < 'a' || file_name.last!.first\
    \ > 'z' {\n        return \"No\"\n    }\n    \n    if file_name.last!.last !=\
    \ \"txt\" && file_name.last!.last != \"exe\" && file_name.last!.last != \"dll\"\
    \ {\n        return \"No\"\n    }\n    \n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name[dot_index..<file_name.endIndex]\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter({\
    \ $0.isLetter })\n    let letter_index = letter_index.first\n    let letter_index\
    \ = letter_index!\n    let letter_index = letter_index.advanced(by: 1)\n    let\
    \ letter_index = letter_index.first\n    let letter_index = letter_index!\n  \
    \  let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.first\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.first",
  "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let result = regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count))\n    if result != nil\
    \ {\n        let range = NSMakeRange(result.range.location, result.range.length)\n\
    \        let file_name = file_name.substring(with: range)\n        if file_name.characters.count\
    \ == 0 {\n            return \"No\"\n        }\n        if file_name.characters.count\
    \ > 3 {\n            return \"No\"\n        }\n        if file_name.characters.first\
    \ != letter.lowercased() {\n            return \"No\"\n        }\n        if ![\"\
    exe\", \"dll\"].contains(file_name.substring(to: file_name.characters.count-1))\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n   \
    \ return \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name[dot_index..<dot_index+3]\n    let valid_letters = [\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    if dot_index\
    \ == 0 || dot_index == 0 || first_letter.isEmpty || first_letter !=  valid_letters.first\
    \ {\n        return \"No\"\n    }\n    if dot_index == dot_index+3 {\n       \
    \ return \"No\"\n    }\n    if dot_index == dot_index+4 {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n   \
    \ let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(upTo: dot_index)\n    let first_letter\
    \ = first_letter!\n    let letters = first_letter\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let last_letter = file_name.suffix(from:\
    \ dot_index)\n    let last_letter = last_letter!\n    let letters = letters +\
    \ \".\"\n    let letters = letters + last_letter\n    let letters = letters.lowercased()\n\
    \    if dot_index == 0 {\n        return letters + \"txt\"\n    }\n    if dot_index\
    \ == 1 {\n        return letters + \"exe\"\n    }\n    if dot_index == 2 {\n \
    \       return letters + \"dll\"\n    }\n    return letters + \"exe\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter!.lowercased()\n    let letters\
    \ = first_letter..<first_letter + \"z\".count\n    let letters = letters.lowercased()\n\
    \    let letters = letters.prefix(3)\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letters = letters.lowercased()\n\
    \    let letters = letters.lowercased()\n    let letter", "    let pattern = \"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count))\n    if let range = result?.range\
    \ {\n        return String(file_name[range])\n    } else {\n        return \"\
    No\"\n    }", "    let file_name = file_name.lowercased()\n    let dot_index =\
    \ file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let first_letter = file_name[dot_index..<dot_index+1]\n\
    \    let first_letter = first_letter?.unicodeScalars\n        .filter({ $0.isLetter()\
    \ })\n        .first\n    let dot_index = file_name.index(of: \".\")\n    let\
    \ dot_index = dot_index! - 1\n    let last_letter = file_name[dot_index..<dot_index+1]\n\
    \    let last_letter = last_letter?.unicodeScalars\n        .filter({ $0.isLetter()\
    \ })\n        .last\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = file_name.index(of: \".\")\n    let dot_index\
    \ = dot_", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index != dot_index!\
    \ {\n        return \"No\"\n    }\n    if letter_index != letter_index! {\n  \
    \      return \"No\"\n    }\n    if file_name.count < 3 {\n        return \"No\"\
    \n    }\n    if file_name.contains(\".\") {\n        return \"No\"\n    }\n  \
    \  if file_name.substring(from: dot_index!).isEmpty  {\n        return \"No\"\n\
    \    }\n    if file_name.substring(from: dot_index!).lowercased().first != \"\
    a\" {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().first\
    \ != \"A\" {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().first\
    \ != \"z\" {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().first\
    \ != \"Z\" {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().first\
    \ != \"0\" {\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().first\
    \ != \"9\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let dot_length = dot_index - dot_index!\n    let dot_length = dot_length!\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_", "    if file_name.count > 3 {\n        return \"\
    No\"\n    }\n    if file_name.contains(\".\") {\n        return \"No\"\n    }\n\
    \    if file_name.starts(with: \"a\") || file_name.starts(with: \"A\") {\n   \
    \     return \"No\"\n    }\n    if file_name.ends(with: \"txt\") || file_name.ends(with:\
    \ \"exe\") || file_name.ends(with: \"dll\") {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        file_name.substring(to: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let file_name\
    \ = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let letter_index = file_name.index(of: \"a\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"A\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"0\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"9\")\n    let letter_index = letter_index!\n\
    \    if dot_index != nil &&\n        dot_index! < file_name.count - 1 &&\n   \
    \     file_name[dot_index!] != \".\" &&\n        file_name[dot_index!] != \".\"\
    \ &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_index!] != \".\" &&\n        file_name[dot_index!]\
    \ != \".\" &&\n        file_name[dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(dot_index)\n    let first_letter = first_letter!\n\
    \    let first_letter = first_letter\n    let first_letter = first_letter\n  \
    \  let first_letter = first_letter\n    let first_letter = first_letter\n    let\
    \ first_letter = first_letter\n    let first_letter = first_letter\n    let first_letter\
    \ = first_letter\n    let first_letter = first_letter\n    let first_letter =\
    \ first_letter\n    let first_letter = first_letter\n    let first_letter = first_letter\n\
    \    let first_letter = first_letter\n    let first_letter = first_letter\n  \
    \  let first_letter = first_letter\n    let first_letter = first_letter\n    let\
    \ first_letter = first_letter\n    let first_letter = first_letter\n    let first_letter\
    \ = first_letter\n    let first_letter = first_letter\n    let first_letter =\
    \ first_letter\n    let first_letter = first_letter\n    let first_letter = first_letter\n\
    \    let first_letter = first_letter\n    let first_letter = first_letter\n  \
    \  let first_letter = first_letter\n    let first_letter = first_letter\n    let\
    \ first_letter = first_letter\n    let first_letter = first_letter\n    let first_letter\
    \ = first_letter\n    let first_letter = first_letter\n    let first_letter =\
    \ first_letter\n    let first_letter = first_letter\n    let first_letter = first_letter\n\
    \    let first_letter = first_letter\n    let first_letter = first_letter\n  \
    \  let first_letter = first_letter\n    let first_letter = first_letter\n    let\
    \ first_letter = first_letter\n    let first_letter = first_letter\n    let first_letter\
    \ = first_letter\n    let first_letter = first_letter\n    let first_letter =\
    \ first_letter\n    let first_letter = first_letter\n    let first_letter = first_letter\n\
    \    let first_letter = first_letter\n    let first_letter = first_letter\n  \
    \  let first_letter = first_letter\n    let first_letter = first_letter\n    let\
    \ first_letter = first_letter\n    let first_letter = first_letter\n    let first_letter\
    \ = first_letter\n    let first_letter = first_letter\n    let first_letter =\
    \ first_letter\n    let first_letter = first_letter\n    let first_letter = first_letter\n\
    \    let first_letter = first_letter\n    let first_letter = first_letter\n  \
    \  let first_letter = first_letter\n    let first_letter = first_letter\n    let\
    \ first_letter = first_letter\n    let first_letter = first_letter\n    let first_letter\
    \ = first_letter\n    let first_letter = first_letter\n    let first_letter =\
    \ first_letter\n    let first_letter = first_letter\n    let first_letter = first_letter\n\
    \    let first_letter = first_letter", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}[a-zA-Z][a-zA-Z0-9.]*$\", options: [])\n    let result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if result != nil {\n        return String(describing: result.rangeAt(1))\n\
    \    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(upTo: dot_index)\n    let first_letter\
    \ = first_letter!\n    let letters = first_letter.characters\n    let letters\
    \ = letters.filter { $0 >= 'a' && $0 <= 'z' || $0 >= 'A' && $0 <= 'Z' }\n    let\
    \ letters = letters.joined()\n    let dot_index = file_name.index(of: \".\")\n\
    \    let dot_index = dot_index!\n    let last_letter = file_name.suffix(from:\
    \ dot_index)\n    let last_letter = last_letter!\n    let letters = last_letter.characters\n\
    \    let letters = letters.filter { $0 >= 'a' && $0 <= 'z' || $0 >= 'A' && $0\
    \ <= 'Z' }\n    let letters = letters.joined()\n    if dot_index == nil || dot_index!\
    \ < 0 || dot_index! > file_name.count - 1 {\n        return \"No\"\n    }\n  \
    \  if dot_index! == dot_index {\n        if first_letter == \"\" {\n         \
    \   return \"No\"\n        }\n        if letters.count != 1 || letters.first !=\
    \ first_letter {\n            return \"No\"\n        }\n        if last_letter\
    \ == \"\" {\n            return \"No\"\n        }\n        if letters.count !=\
    \ 1 || letters.last != last_letter {\n            return \"No\"\n        }\n \
    \   } else {\n        if first_letter == \"\" {\n            return \"No\"\n \
    \       }\n        if letters.count != 1 || letters.first != first_letter {\n\
    \            return \"No\"\n        }\n        if last_letter == \"\" {\n    \
    \        return \"No\"\n        }\n        if letters.count != 1 || letters.last\
    \ != last_letter {\n            return \"No\"\n        }\n    }\n    return \"\
    Yes\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index! - 1\n\tlet\
    \ dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index!", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if results.count > 0 {\n        let match\
    \ = results.first!\n        let range = match.range\n        let start = range.lowerBound\n\
    \        let end = range.upperBound\n        let substring = file_name[start..<end]\n\
    \        if substring == \".\" {\n            let index = substring.index(substring,\
    \ offsetBy: 1)\n            if index != nil {\n                let char = substring[index!]\n\
    \                if char == \"0\" {\n                    return \"No\"\n     \
    \           }\n            }\n        }\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let letters\
    \ = first_letter?.characters\n    let letters = letters?.filter({ $0 != \"a\"\
    \ && $0 != \"b\" && $0 != \"c\" && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" &&\
    \ $0 != \"g\" && $0 != \"h\" && $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0\
    \ != \"l\" && $0 != \"m\" && $0 != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 !=\
    \ \"q\" && $0 != \"r\" && $0 != \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"\
    v\" && $0 != \"w\" && $0 != \"x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters\
    \ = letters?.filter({ $0 != \"0\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"1\" })\n    let letters = letters?.filter({ $0 != \"2\" })\n    let letters\
    \ = letters?.filter({ $0 != \"3\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"4\" })\n    let letters = letters?.filter({ $0 != \"5\" })\n    let letters\
    \ = letters?.filter({ $0 != \"6\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"7\" })\n    let letters = letters?.filter({ $0 != \"8\" })\n    let letters\
    \ = letters?.filter({ $0 != \"9\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"a\" })\n    let letters = letters?.filter({ $0 != \"b\" })\n    let letters\
    \ = letters?.filter({ $0 != \"c\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"d\" })\n    let letters = letters?.filter({ $0 != \"e\" })\n    let letters\
    \ = letters?.filter({ $0 != \"f\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"g\" })\n    let letters = letters?.filter({ $0 != \"h\" })\n    let letters\
    \ = letters?.filter({ $0 != \"i\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"j\" })\n    let letters = letters?.filter({ $0 != \"k\" })\n    let letters\
    \ = letters?", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet first_letter = file_name[..<dot_index]\n\
    \tlet last_letter = file_name[dot_index..<file_name.count]\n\tlet first_letter\
    \ = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let file_name\
    \ = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)", "    let file_name = file_name.lowercased()\n   \
    \ let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let last_letter = file_name.suffix(dot_index)\n    let first_letter = first_letter?.lowercased()\n\
    \    let last_letter = last_letter?.lowercased()\n    let letters = first_letter?.uppercased()\
    \ + last_letter?.uppercased()\n    let letters_count = letters?.count ?? 0\n \
    \   if dot_index == 0 || dot_index == file_name.count - 1 || letters_count > 3\
    \ || letters_count == 0 {\n        return \"No\"\n    }\n    if dot_index == dot_index\
    \ {\n        return \"Yes\"\n    }\n    if let first_letter = first_letter, let\
    \ last_letter = last_letter {\n        if first_letter != last_letter {\n    \
    \        return \"No\"\n        }\n    }\n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letters = CharacterSet.letters.union(.whitespacesAndNewlines)\n\
    \    let letters_set = CharacterSet(charactersIn: letters)\n    let letters_set_count\
    \ = file_name.unicodeScalars.filter({ $0.isLetter}).count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_diff = letters_set_count_max - letters_set_count_min\n\
    \    let letters_set_count_diff_min = letters_set_count_min - 1\n    let letters_set_count_diff_max\
    \ = letters_set_count_max + 1\n    let letters_set_count_diff_diff_min = letters_set_count_diff_min\
    \ - 1\n    let letters_set_count_diff_diff_max = letters_set_count_diff_max +\
    \ 1\n    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_min\
    \ - 1\n    let letters_set_count_diff_diff_max = letters_set_count_diff_diff_max\
    \ + 1\n    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\
    \ - 1\n    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\
    \ + 1\n    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\n\
    \    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\n\
    \    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\n\
    \    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\n\
    \    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\n\
    \    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\n\
    \    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\n\
    \    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\n\
    \    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\n\
    \    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\n\
    \    let letters_set_count_diff_diff_diff_min = letters_set_count_diff_diff_diff_min\n\
    \    let letters_set_count_diff_diff_diff_max = letters_set_count_diff_diff_diff_max\n\
    \    let letters_set_count_diff_diff_", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let first_letter = file_name.substring(from: dot_index!)\n\tlet first_letter =\
    \ first_letter?.lowercased()\n\tlet letters = first_letter?.characters\n\tlet\
    \ letters = letters?.filter({ $0 != \"a\" && $0 != \"b\" && $0 != \"c\" && $0\
    \ != \"d\" && $0 != \"e\" && $0 != \"f\" && $0 != \"g\" && $0 != \"h\" && $0 !=\
    \ \"i\" && $0 != \"j\" && $0 != \"k\" && $0 != \"l\" && $0 != \"m\" && $0 != \"\
    n\" && $0 != \"o\" && $0 != \"p\" && $0 != \"q\" && $0 != \"r\" && $0 != \"s\"\
    \ && $0 != \"t\" && $0 != \"u\" && $0 != \"v\" && $0 != \"w\" && $0 != \"x\" &&\
    \ $0 != \"y\" && $0 != \"z\" })\n\tlet letters = letters?.filter({ $0 != \"0\"\
    \ })\n\tlet letters = letters?.filter({ $0 != \"1\" })\n\tlet letters = letters?.filter({\
    \ $0 != \"2\" })\n\tlet letters = letters?.filter({ $0 != \"3\" })\n\tlet letters\
    \ = letters?.filter({ $0 != \"4\" })\n\tlet letters = letters?.filter({ $0 !=\
    \ \"5\" })\n\tlet letters = letters?.filter({ $0 != \"6\" })\n\tlet letters =\
    \ letters?.filter({ $0 != \"7\" })\n\tlet letters = letters?.filter({ $0 != \"\
    8\" })\n\tlet letters = letters?.filter({ $0 != \"9\" })\n\tlet letters = letters?.filter({\
    \ $0 != \"a\" })\n\tlet letters = letters?.filter({ $0 != \"b\" })\n\tlet letters\
    \ = letters?.filter({ $0 != \"c\" })\n\tlet letters = letters?.filter({ $0 !=\
    \ \"d\" })\n\tlet letters = letters?.filter({ $0 != \"e\" })\n\tlet letters =\
    \ letters?.filter({ $0 != \"f\" })\n\tlet letters = letters?.filter({ $0 != \"\
    g\" })\n\tlet letters = letters?.filter({ $0 != \"h\" })\n\tlet letters = letters?.filter({\
    \ $0 != \"i\" })\n\tlet letters = letters?.", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{3,4}$\")\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\", options: .caseInsensitive)\n    let matches = regex.matches(in:\
    \ file_name, options: .anchored, range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count == 0 {\n        return \"No\"\n    }\n    if matches.count\
    \ == 1 {\n        let range = matches[0].range\n        let start = range.lowerBound\n\
    \        let end = range.upperBound\n        let substring = file_name[start..<end]\n\
    \        if substring.hasPrefix(\"0\") || substring.hasPrefix(\"1\") || substring.hasPrefix(\"\
    2\") || substring.hasPrefix(\"3\") || substring.hasPrefix(\"4\") || substring.hasPrefix(\"\
    5\") || substring.hasPrefix(\"6\") || substring.hasPrefix(\"7\") || substring.hasPrefix(\"\
    8\") || substring.hasPrefix(\"9\") || substring.hasPrefix(\".\") || substring.hasPrefix(\"\
    _\") {\n            return \"No\"\n        }\n    }\n    return \"Yes\"", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ < 3 || dot_index! > file_name.count - 1 {\n        return \"No\"\n    }\n  \
    \  if letter_index == nil || letter_index! < 1 || letter_index! > file_name.count\
    \ - 1 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n  \
    \      if let dot_index = file_name.index(of: \".\") {\n            if dot_index\
    \ == nil || dot_index! < 1 || dot_index! > file_name.count - 1 {\n           \
    \     return \"No\"\n            }\n        }\n    }\n    if let dot_index = file_name.index(of:\
    \ \".\") {\n        if dot_index == nil || dot_index! < 1 || dot_index! > file_name.count\
    \ - 1 {\n            return \"No\"\n        }\n    }\n    if let dot_index = file_name.index(of:\
    \ \".\") {\n        if dot_index == nil || dot_index! < 1 || dot_index! > file_name.count\
    \ - 1 {\n            return \"No\"\n        }\n    }\n    if let dot_index = file_name.index(of:\
    \ \".\") {\n        if dot_index == nil || dot_index! < 1 || dot_index! > file_name.count\
    \ - 1 {\n            return \"No\"\n        }\n    }\n    if let dot_index = file_name.index(of:\
    \ \".\") {\n        if dot_index == nil || dot_index! < 1 || dot_index! > file_name.count\
    \ - 1 {\n            return \"No\"\n        }\n    }\n    if let dot_index = file_name.index(of:\
    \ \".\") {\n        if dot_index == nil || dot_index! < 1 || dot_index! > file_name.count\
    \ - 1 {\n            return \"No\"\n        }\n    }\n    if let dot_index = file_name.index(of:\
    \ \".\") {\n        if dot_index == nil || dot_index! < 1 || dot_index! > file_name.count ",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let\
    \ first_letter = file_name[dot_index..<dot_index+3]\n    let valid_characters\
    \ = CharacterSet.letters.union(.whitespaces)\n    if !valid_characters.contains(first_letter)\
    \ {\n        return \"No\"\n    }\n    if dot_index == 0 {\n        return \"\
    No\"\n    }\n    if dot_index == file_name.endIndex {\n        return \"No\"\n\
    \    }\n    if dot_index+1 == file_name.endIndex {\n        return \"No\"\n  \
    \  }\n    if dot_index+2 == file_name.endIndex {\n        return \"No\"\n    }\n\
    \    if dot_index+3 == file_name.endIndex {\n        return \"No\"\n    }\n  \
    \  if dot_index+4 == file_name.endIndex {\n        return \"No\"\n    }\n    if\
    \ dot_index+5 == file_name.endIndex {\n        return \"No\"\n    }\n    if dot_index+6\
    \ == file_name.endIndex {\n        return \"No\"\n    }\n    if dot_index+7 ==\
    \ file_name.endIndex {\n        return \"No\"\n    }\n    if dot_index+8 == file_name.endIndex\
    \ {\n        return \"No\"\n    }\n    if dot_index+9 == file_name.endIndex {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        file_name.substring(to:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location).hasPrefix(\"\
    a\") &&\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location).hasSuffix(\"\
    txt\") ||\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location).hasSuffix(\"\
    exe\") ||\n        file_name.substring(to: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location).hasSuffix(\"\
    dll\")\n        ? \"Yes\" : \"No\"", "\tlet pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n\tlet regex = try! NSRegularExpression(pattern: pattern, options: [])\n\tlet\
    \ matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n\t\n\tif matches.count == 0 {\n\t\treturn \"No\"\
    \n\t} else if matches.count == 1 {\n\t\treturn \"Yes\"\n\t} else {\n\t\treturn\
    \ \"No\"\n\t}", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let file_name\
    \ = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ letter_index = file_name.index(of: \"a\")\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter", "    let\
    \ pattern = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let matches = regex.matches(in: file_name, range: NSRange(location:\
    \ 0, length: file_name.count))\n    if matches.count == 0 {\n        return \"\
    No\"\n    }\n    if matches.count == 1 {\n        let range = matches[0].range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      let substring = file_name[start..<end]\n        let pattern = \"^[a-zA-Z]\"\
    \n        let regex = try! NSRegularExpression(pattern: pattern)\n        let\
    \ matches = regex.matches(in: substring, range: NSRange(location: 0, length: substring.count))\n\
    \        if matches.count == 0 {\n            return \"No\"\n        }\n    }\n\
    \    return \"Yes\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let result =\
    \ regex.firstMatch(in: file_name, options: [], range: NSRange(location: 0, length:\
    \ file_name.count))\n    \n    if let range = result.range, range.location ==\
    \ 0 && range.length == file_name.count {\n        return \"Yes\"\n    } else {\n\
    \        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.letters.inverted)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let file_name = file_name[0]\n   \
    \ if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.count\
    \ == 3 {\n        if file_name[0].isEmpty {\n            return \"No\"\n     \
    \   }\n        if file_name[1].isEmpty {\n            return \"No\"\n        }\n\
    \        if file_name[2].isEmpty {\n            return \"No\"\n        }\n   \
    \     if !((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z')\n            || (file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') || (file_name[1] >= 'A' && file_name[1] <= 'Z')\n            || (file_name[2]\
    \ >= 'a' && file_name[2] <= 'z') || (file_name[2] >= 'A' && file_name[2] <= 'Z'))\
    \ {\n            return \"No\"\n        }\n    }\n    return \"Yes\"", "    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters.inverted)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.alphanumerics.inverted)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.symbols.inverted)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.newlines)\n    if file_name.count == 0 || file_name.last == \"\
    exe\" || file_name.last == \"dll\" {\n        return \"No\"\n    } else {\n  \
    \      return \"Yes\"\n    }", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-z][a-z][a-z]$\", options: [])\n    let result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count))\n\
    \    if result != nil {\n        return String(describing: result.rangeAt(1))\n\
    \    } else {\n        return \"No\"\n    }", "    let pattern = \"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n  \
    \  let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count))\n    if result != nil {\n        let range = result.range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      let substring = file_name[start..<end]\n        if substring == \".\" {\n\
    \            let start = range.lowerBound\n            let end = range.upperBound\n\
    \            let substring = file_name[start..<end]\n            if substring.characters.count\
    \ == 0 {\n                return \"No\"\n            }\n        }\n    }\n   \
    \ return \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1", "  \
    \  let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.count\n\
    \    if file_name == 0 {\n        return \"No\"\n    }\n    if file_name >= 3\
    \ {\n        return \"No\"\n    }\n    if file_name.first == \"\" || file_name.first\
    \ != \"a\" || file_name.first != \"b\" || file_name.first != \"c\" || file_name.first\
    \ != \"d\" || file_name.first != \"e\" || file_name.first != \"f\" || file_name.first\
    \ != \"g\" || file_name.first != \"h\" || file_name.first != \"i\" || file_name.first\
    \ != \"j\" || file_name.first != \"k\" || file_name.first != \"l\" || file_name.first\
    \ != \"m\" || file_name.first != \"n\" || file_name.first != \"o\" || file_name.first\
    \ != \"p\" || file_name.first != \"q\" || file_name.first != \"r\" || file_name.first\
    \ != \"s\" || file_name.first != \"t\" || file_name.first != \"u\" || file_name.first\
    \ != \"v\" || file_name.first != \"w\" || file_name.first != \"x\" || file_name.first\
    \ != \"y\" || file_name.first != \"z\" {\n        return \"No\"\n    }\n    if\
    \ file_name.last != \"txt\" || file_name.last != \"exe\" || file_name.last !=\
    \ \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_length = dot_index - file_name.startIndex\n\
    \    let dot_length = dot_length!\n    \n    if dot_length > 3 {\n        return\
    \ \"No\"\n    }\n    \n    let dot_index = file_name.index(of: \".\", range: dot_index!..<dot_index!.advanced(by:\
    \ dot_length))\n    let dot_index = dot_index!\n    \n    let dot_length = dot_index\
    \ - file_name.startIndex\n    let dot_length = dot_length!\n    \n    if dot_length\
    \ == 0 {\n        return \"No\"\n    }\n    \n    let dot_index = file_name.index(of:\
    \ \".\", range: dot_index!..<dot_index!.advanced(by: dot_length))\n    let dot_index\
    \ = dot_index!\n    \n    let dot_length = dot_index - file_name.startIndex\n\
    \    let dot_length = dot_length!\n    \n    if dot_length == 0 {\n        return\
    \ \"No\"\n    }\n    \n    let dot_index = file_name.index(of: \".\", range: dot_index!..<dot_index!.advanced(by:\
    \ dot_length))\n    let dot_index = dot_index!\n    \n    let dot_length = dot_index\
    \ - file_name.startIndex\n    let dot_length = dot_length!\n    \n    if dot_length\
    \ == 0 {\n        return \"No\"\n    }\n    \n    let dot_index = file_name.index(of:\
    \ \".\", range: dot_index!..<dot_index!.advanced(by: dot_length))\n    let dot_index\
    \ = dot_index!\n    \n    let dot_length = dot_index - file_name.startIndex\n\
    \    let dot_length = dot_length!\n    \n    if dot_length == 0 {\n        return\
    \ \"No\"\n    }\n    \n    let dot_index = file_name.index(of: \".\", range: dot_index!..<dot_index!.advanced(by:\
    \ dot_length))\n    let dot_index = dot_index!\n    \n    let dot_length = dot_index\
    \ - file_name.startIndex\n    let dot_length = dot_length!\n    \n    if dot_length\
    \ == 0 {\n        return \"No\"\n    }\n    \n    let dot_index = file_name.index(of:\
    \ \".\", range: dot_index!..<dot_index!.advanced(by: dot_length))\n    let dot_index\
    \ = dot_index!\n    \n    let dot_length = dot_index - file_name.startIndex\n\
    \    let dot_length = dot_length!\n    \n    if dot_length == 0 {\n        return\
    \ \"No\"\n    }\n    \n    let dot_index = file_name.index(of: \".\", range: dot_index!..<dot_index!.advanced(by:\
    \ dot_length))\n", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ <= 'z'", "\tlet pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\tlet regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n\tlet results = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf8.count))\n\t\n\tif results.count\
    \ == 0 {\n\t\treturn \"No\"\n\t} else {\n\t\treturn \"Yes\"\n\t}", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name.prefix(dot_index)\n    let first_letter = first_letter!\n\
    \    let last_letter = file_name.suffix(dot_index)\n    let last_letter = last_letter!\n\
    \    if dot_index == 0 {\n        return \"No\"\n    }\n    if dot_index == file_name.count\
    \ - 1 {\n        return \"No\"\n    }\n    if first_letter.isEmpty {\n       \
    \ return \"No\"\n    }\n    if first_letter != \"a\" && first_letter != \"b\"\
    \ && first_letter != \"c\" && first_letter != \"d\" && first_letter != \"e\" &&\
    \ first_letter != \"f\" && first_letter != \"g\" && first_letter != \"h\" && first_letter\
    \ != \"i\" && first_letter != \"j\" && first_letter != \"k\" && first_letter !=\
    \ \"l\" && first_letter != \"m\" && first_letter != \"n\" && first_letter != \"\
    o\" && first_letter != \"p\" && first_letter != \"q\" && first_letter != \"r\"\
    \ && first_letter != \"s\" && first_letter != \"t\" && first_letter != \"u\" &&\
    \ first_letter != \"v\" && first_letter != \"w\" && first_letter != \"x\" && first_letter\
    \ != \"y\" && first_letter != \"z\" {\n        return \"No\"\n    }\n    if last_letter\
    \ != \"txt\" && last_letter != \"exe\" && last_letter != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = file_name.index(of: \"a\")\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{2,3}$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).location != 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location\
    \ != file_name.count &&\n        regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1).location != file_name.count\
    \ - 1\n        ? \"Yes\"\n        : \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet first_letter = file_name.prefix(upTo:\
    \ dot_index)\n\tlet last_letter = file_name.suffix(from: dot_index)\n\tlet valid_letters\
    \ = CharacterSet.letters.subtracting(CharacterSet(arrayLiteral: \".\"))\n\tlet\
    \ contains_only_letters = first_letter.isEmpty || first_letter.isLetter\n\tlet\
    \ contains_only_numbers = last_letter.isEmpty || last_letter.isDigit\n\tlet contains_only_dots\
    \ = dot_index != nil\n\tlet contains_only_valid_letters = valid_letters.isSuperset(of:\
    \ first_letter)\n\tlet contains_only_valid_numbers = valid_letters.isSuperset(of:\
    \ last_letter)\n\tlet contains_only_valid_dots = dot_index != nil && valid_letters.isSuperset(of:\
    \ file_name[dot_index!..<dot_index!.advanced(by: 1)])\n\tlet contains_only_valid_filenames\
    \ = contains_only_letters && contains_only_numbers && contains_only_dots && contains_only_valid_letters\
    \ && contains_only_valid_numbers\n\tlet contains_only_valid_filenames_or_not =\
    \ contains_only_valid_filenames || contains_only_valid_dots\n\tlet contains_only_valid_filenames_or_not_or_not\
    \ = contains_only_valid_filenames_or_not || contains_only_valid_numbers\n\tlet\
    \ contains_only_valid_filenames_or_not_or_not_or_not = contains_only_valid_filenames_or_not_or_not\
    \ || contains_only_valid_letters\n\tlet contains_only_valid_filenames_or_not_or_not_or_not_or_not\
    \ = contains_only_valid_filenames_or_not_or_not_or_not || contains_only_valid_numbers\n\
    \tlet contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not = contains_only_valid_filenames_or_not_or_not_or_not_or_not\
    \ || contains_only_valid_letters\n\tlet contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not_or_not\
    \ = contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not || contains_only_valid_numbers\n\
    \tlet contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not_or_not_or_not\
    \ = contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not_or_not ||\
    \ contains_only_valid_letters\n\tlet contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not_or_not_or_not_or_not\
    \ = contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not_or_not_or_not\
    \ || contains_only_valid_numbers\n\tlet contains_only_valid_filenames_or_not_or_not_or_not_or_not_or_not_or_",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name[dot_index..<dot_index+1]\n\
    \    let first_letter = first_letter?.lowercased()\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let letters_index = letters.index(of: first_letter!)\n    let letters_index\
    \ = letters_index!\n    let letters_length = letters.count\n    let letters_length\
    \ = letters_length!\n    if dot_index == nil || dot_index! >= (file_name.count\
    \ - 1) || first_letter == nil || first_letter!.count != 1 || first_letter!.first\
    \ != letters.first || letters_length != letters_index {\n        return \"No\"\
    \n    }\n    return \"Yes\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    let matches = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count > 0 {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ - 1 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 1 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 2 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 3 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 4 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 5 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 6 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 7 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 8 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ + 9 &&\n        re", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let file_name\
    \ = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let letters = CharacterSet.letters.inverted\n    let letters_set = letters.inverted\n\
    \    let letters_set_count = letters_set.count\n    let letters_set_count_minus_1\
    \ = letters_set_count - 1\n    let letters_set_count_minus_2 = letters_set_count_minus_1\
    \ - 1\n    let letters_set_count_minus_3 = letters_set_count_minus_2 - 1\n   \
    \ let letters_set_count_minus_4 = letters_set_count_minus_3 - 1\n    let letters_set_count_minus_5\
    \ = letters_set_count_minus_4 - 1\n    let letters_set_count_minus_6 = letters_set_count_minus_5\
    \ - 1\n    let letters_set_count_minus_7 = letters_set_count_minus_6 - 1\n   \
    \ let letters_set_count_minus_8 = letters_set_count_minus_7 - 1\n    let letters_set_count_minus_9\
    \ = letters_set_count_minus_8 - 1\n    let letters_set_count_minus_10 = letters_set_count_minus_9\
    \ - 1\n    let letters_set_count_minus_11 = letters_set_count_minus_10 - 1\n \
    \   let letters_set_count_minus_12 = letters_set_count_minus_11 - 1\n    let letters_set_count_minus_13\
    \ = letters_set_count_minus_12 - 1\n    let letters_set_count_minus_14 = letters_set_count_minus_13\
    \ - 1\n    let letters_set_count_minus_15 = letters_set_count_minus_14 - 1\n \
    \   let letters_set_count_minus_16 = letters_set_count_minus_15 - 1\n    let letters_set_count_minus_17\
    \ = letters_set_count_minus_16 - 1\n    let letters_set_count_minus_18 = letters_set_count_minus_17\
    \ - 1\n    let letters_set_count_minus_19 = letters_set_count_minus_18 - 1\n \
    \   let letters_set_count_minus_20 = letters_set_count_minus_19 - 1\n    let letters_set_count_minus_21\
    \ = letters_set_count_minus_20 - 1\n    let letters_set_count_minus_22 = letters_set_count_minus_21\
    \ - 1\n    let letters_set_count_minus_23 = letters_set_count_minus_22 - 1\n \
    \   let letters_set_count_minus_24 = letters_set_count_minus_23 - 1", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    let result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if let match = result {\n        return String(file_name[Range(match.range(at:\
    \ 1), in: file_name)!])\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : file_name.startIndex\n\
    \    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name[dot_index..<dot_index+1]\n    let letters = first_letter\n     \
    \   .unicodeScalars\n        .filter({ $0.isLetter})\n        .map({ $0.value\
    \ })\n        .joined(separator: \"\")\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let last_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = last_letter\n        .unicodeScalars\n        .filter({ $0.isLetter})\n\
    \        .map({ $0.value })\n        .joined(separator: \"\")\n    if dot_index\
    \ != dot_index+1 {\n        return letters.isEmpty ? \"No\" : \"Yes\"\n    }\n\
    \    if letters.contains(\"0\") || letters.contains(\"9\") {\n        return \"\
    No\"\n    }\n    if letters.contains(\"a\") || letters.contains(\"z\") || letters.contains(\"\
    A\") || letters.contains(\"Z\") {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index != dot_index!\
    \ {\n        return \"No\"\n    }\n    if letter_index != letter_index! {\n  \
    \      return \"No\"\n    }\n    if file_name.count == 0 {\n        return \"\
    No\"\n    }\n    if file_name.count > 3 {\n        return \"No\"\n    }\n    if\
    \ file_name.contains(\".\") {\n        return \"No\"\n    }\n    if file_name.prefix(1).isEmpty\
    \ {\n        return \"No\"\n    }\n    if file_name.suffix(1).contains(\"txt\"\
    ) || file_name.suffix(1).contains(\"exe\") || file_name.suffix(1).contains(\"\
    dll\") {\n        return \"Yes\"\n    }\n    return \"No\"", "    let regex =\
    \ try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n\
    \    let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf16.count))\n    if results.count == 0 {\n        return\
    \ \"No\"\n    }\n    if results.count == 1 {\n        if let range = results.first?.range\
    \ {\n            let start = file_name.index(range.lowerBound, offsetBy: 0)\n\
    \            let end = file_name.index(range.upperBound, offsetBy: 0)\n      \
    \      if start == end {\n                return \"No\"\n            }\n     \
    \   }\n    }\n    return \"Yes\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: .caseInsensitive)\n    return regex.firstMatch(in:\
    \ file_name, options: .anchored, range: NSRange(location: 0, length: file_name.utf16.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: .anchored, range:\
    \ NSRange(location: 0, length: file_name.utf16.count)).rangeAt(1).length > 0 &&\n\
    \        file_name.utf16.firstIndex(of: \".\") != nil &&\n        file_name.utf16.firstIndex(of:\
    \ \".\") != 0 &&\n        file_name.utf16.firstIndex(of: \".\") != file_name.utf16.endIndex\
    \ - 1\n        ? \"Yes\"\n        : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = ", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    let matches = regex.matches(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.utf16.count))\n    if\
    \ matches.count == 0 {\n        return \"No\"\n    }\n    if matches.count ==\
    \ 1 {\n        if file_name.substring(with: matches[0].range).isEmpty{\n     \
    \       return \"No\"\n        }\n        if file_name.substring(with: matches[0].range).first\
    \ >= 'a' && file_name.substring(with: matches[0].range).first <= 'z' {\n     \
    \       return \"No\"\n        }\n        if file_name.substring(with: matches[0].range).first\
    \ >= 'A' && file_name.substring(with: matches[0].range).first <= 'Z' {\n     \
    \       return \"No\"\n        }\n    }\n    return \"Yes\"", "    if file_name.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n  \
    \      return \"No\"\n    }\n    if file_name.starts(with: \"a\") || file_name.starts(with:\
    \ \"A\") {\n        return \"No\"\n    }\n    if file_name.ends(with: \"txt\"\
    ) || file_name.ends(with: \"exe\") || file_name.ends(with: \"dll\") {\n      \
    \  return \"Yes\"\n    }\n    return \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n   \
    \ let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count))\n    if result != nil {\n        let range = result.range\n\
    \        let substring = file_name.substring(with: range)\n        let isFileName\
    \ = substring.hasPrefix(\".\")\n        let isFileExtension = substring.hasSuffix(\"\
    .txt\") || substring.hasSuffix(\".exe\") || substring.hasSuffix(\".dll\")\n  \
    \      return isFileName && isFileExtension\n    }\n    return \"No\"", "\tlet\
    \ file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \"\
    .\")\n\tlet first_letter = file_name.prefix(upTo: dot_index)\n\tlet file_name\
    \ = file_name.dropFirst(dot_index)\n\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet second_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet file_name = file_name.dropLast(dot_index)\n\tlet file_name\
    \ = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ third_letter = file_name.suffix(from: dot_index)\n\tlet file_name = file_name.dropLast(dot_index)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet fourth_letter = file_name.suffix(from: dot_index)\n\tlet file_name\
    \ = file_name.dropLast(dot_index)\n\tlet file_name = file_name.lowercased()\n\t\
    let dot_index = file_name.index(of: \".\")\n\tlet fifth_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet file_name = file_name.dropLast(dot_index)\n\tlet file_name\
    \ = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ sixth_letter = file_name.suffix(from: dot_index)\n\tlet file_name = file_name.dropLast(dot_index)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet seventh_letter = file_name.suffix(from: dot_index)\n\tlet file_name\
    \ = file_name.dropLast(dot_index)\n\tlet file_name = file_name.lowercased()\n\t\
    let dot_index = file_name.index(of: \".\")\n\tlet eighth_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet file_name = file_name.dropLast(dot_index)\n\tlet file_name\
    \ = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ ninth_letter = file_name.suffix(from: dot_index)\n\tlet file_name = file_name.dropLast(dot_index)\n\
    \tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet tenth_letter = file_name.suffix(from: dot_index)\n\tlet file_name\
    \ = file_name.dropLast(dot_index)\n\tlet file_name = file_name.lowercased()\n\t\
    let dot_index = file_name.index(of: \".\")\n\tlet eleventh_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet file_name = file_name", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let file_name = file_name[dot_index..<file_name.endIndex]\n\tlet file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n\tlet file_name = file_name.lowercased()\n\
    \tlet letter_index = file_name.index(of: \"a\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"A\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"0\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"9\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \".\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"-\")\n\tlet letter_index = letter_index!\n\
    \tlet letter_index = file_name.index(of: \"_\")\n\tlet letter_index = letter_index!\n",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\
    )\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.firstIndex(of: \".\")\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : file_name.startIndex\n\tlet dot_index = dot_index != nil\
    \ ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet\
    \ dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index !=\
    \ nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\t\
    let dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\
    \tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index\
    \ != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil", "    let pattern\
    \ = \"^[0-9]{0,3}\\.[a-zA-Z0-9]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSRange(location: 0, length: file_name.utf8.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n",
  "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index!", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_length = dot_index - file_name.startIndex\n\
    \    let dot_length = dot_length!\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let ", "    \n    // 1. Check\
    \ the length of the file's name\n    if file_name.count > 3 {\n        return\
    \ \"No\"\n    }\n    \n    // 2. Check the file's name\n    if file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    \n    // 3. Check the file's name\n\
    \    if file_name.starts(with: \"a\") && file_name.ends(with: \"z\") || file_name.starts(with:\
    \ \"A\") && file_name.ends(with: \"Z\") {\n        return \"Yes\"\n    }\n   \
    \ \n    // 4. Check the file's name\n    if file_name.range(of: \"^[a-zA-Z]\"\
    , options: .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n\
    \    // 5. Check the file's name\n    if file_name.range(of: \"^[0-9]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 6.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 7.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 8.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 9.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 10.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 11.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 12.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 13.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 14.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9.-]\", options:\
    \ .regularExpression) != nil {\n        return \"Yes\"\n    }\n    \n    // 15.\
    \ Check the file's name\n    if file_name.range(of: \"^[^a-zA-Z0-9", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimming", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).first >= 97\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).first <= 122 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last >= 65 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last\
    \ <= 90\n        ? \"Yes\"\n        : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.tri", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        file_name.substring(to: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(before: file_name.index(before: file_name.index(before: file_name.index(before:\
    \ file_name.index(", "\tlet file_name = file_name.lowercased()\n\tlet dot_index\
    \ = file_name.index(of: \".\")\n\tlet first_letter = file_name.prefix(upTo: dot_index)\n\
    \tlet last_letter = file_name.suffix(from: dot_index)\n\tlet valid_characters\
    \ = CharacterSet.letters.union(CharacterSet(charactersIn: \"0123456789\"))\n\t\
    let is_valid = valid_characters.isSuperset(of: CharacterSet(charactersIn: first_letter))\n\
    \tlet is_valid_extension = valid_characters.isSuperset(of: CharacterSet(charactersIn:\
    \ last_letter))\n\tlet is_valid_extension_without_dot = \"exe\".lowercased() ==\
    \ \"exe\"\n\tlet is_valid_extension_without_dot_and_extension = \"exe\".lowercased()\
    \ == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"\n\tlet is_valid_extension_without_dot_and_extension_without_extension_and_extension_without_extension_without_extension_without_extension_without_extension\
    \ = \"exe\".lowercased() == \"exe\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = (0..<26).first\n    let letter_index\
    \ = letter_index!\n    let letter_index = letter_index.advanced(by: 1)\n    let\
    \ letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let ", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let file_name\
    \ = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let letter_index = file_name.index(of: \"a\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"A\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"z\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"Z\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"0\")\n    let letter_index = letter_index!\n\
    \    let letter_index = file_name.index(of: \"9\")\n    let letter_index = letter_index!\n\
    \    if dot_index != dot_index! {\n        return \"No\"\n    }\n    if letter_index\
    \ != letter_index! {\n        return \"No\"\n    }\n    if file_name.count !=\
    \ 1 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n    \
    \    return \"No\"\n    }\n    if file_name.characters.first != letter(at: 0)\
    \ {\n        return \"No\"\n    }\n    if file_name.characters.last != letter(at:\
    \ file_name.characters.count-1) {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let first_letter\
    \ = file_name[dot_index..<file_name.count]\n    let letters = first_letter\n \
    \       .unicodeScalars\n        .filter({ $0.isLetter() })\n        .map({ $0.value\
    \ })\n        .sorted()\n        .map({ String($0) })\n        .joined(separator:\
    \ \"\")\n    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let last_letter = file_name[dot_index..<file_name.count]\n\
    \    let last_letter = last_letter\n        .unicodeScalars\n        .filter({\
    \ $0.isLetter() })\n        .map({ $0.value })\n        .sorted()\n        .map({\
    \ String($0) })\n        .joined(separator: \"\")\n    if dot_index == 0 || first_letter.isEmpty\
    \ || letters.count != 1 || dot_index == last_letter.count {\n        return \"\
    No\"\n    }\n    if dot_index == 0 || first_letter.isEmpty || letters.count !=\
    \ 1 || dot_index == last_letter.count {\n        return \"No\"\n    }\n    if\
    \ dot_index == 0 || first_letter.isEmpty || letters.count != 1 || dot_index ==\
    \ last_letter.count {\n        return \"No\"\n    }\n    if dot_index == 0 ||\
    \ first_letter.isEmpty || letters.count != 1 || dot_index == last_letter.count\
    \ {\n        return \"No\"\n    }\n    if dot_index == 0 || first_letter.isEmpty\
    \ || letters.count != 1 || dot_index == last_letter.count {\n        return \"\
    No\"\n    }\n    if dot_index == 0 || first_letter.isEmpty || letters.count !=\
    \ 1 || dot_index == last_letter.count {\n        return \"No\"\n    }\n    if\
    \ dot_index == 0 || first_letter.isEmpty || letters.count != 1 || dot_index ==\
    \ last_letter.count {\n        return \"No\"\n    }\n    if dot_index == 0 ||\
    \ first_letter.isEmpty || letters.count != 1 || dot_index == last_letter.count\
    \ {\n        return \"No\"\n    }\n    if dot_index == 0 || first_letter.isEmpty\
    \ || letters.count != 1 || dot_index == last_letter.count {\n        return \"\
    No\"\n    }\n    if dot_index == 0 || first_letter.isEmpty || letters.count !=\
    \ 1 || dot_index == last_letter.count {\n        return \"No\"\n    }\n    if\
    \ dot_index == 0 || first_letter.isEmpty || letters.count != 1 || dot_index ==\
    \ last_letter.count {\n        return \"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    let result =\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count))\n\
    \    \n    if let range = result?.range {\n        let file_name = file_name.substring(with:\
    \ range)\n        if file_name.characters.count == 0 || file_name.characters.count\
    \ > 3 || file_name.characters.first != (file_name.characters.first?.unicodeScalars.first!)!.unicodeScalars.first!.value\
    \ {\n            return \"No\"\n        }\n        \n        let dot_index = file_name.index(file_name.startIndex,\
    \ offsetBy: 1)\n        let dot_char = file_name[dot_index]\n        if dot_char\
    \ != \".\" {\n            return \"No\"\n        }\n        \n        let dot_index\
    \ = file_name.index(dot_index + 1, offsetBy: 1)\n        let dot_char = file_name[dot_index]\n\
    \        if dot_char != \"txt\" && dot_char != \"exe\" && dot_char != \"dll\"\
    \ {\n            return \"No\"\n        }\n        \n        return file_name\n\
    \    } else {\n        return \"No\"\n    }", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != NSNotFound &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != NSNotFound &&\n        regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).location != NSNotFound\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != NSNotFound &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != NSNotFound &&\n        regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).location != NSNotFound\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != NSNotFound &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != NSNotFound &&\n        regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).location != NSNotFound\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != NSNotFound &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != NSNotFound &&\n        regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).location != NSNotFound\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != NSNotFound &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != NSNotFound &&\n        regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).location != NSNotFound ",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ >= file_name.count {\n        return \"No\"\n    }\n    if letter_index == nil\
    \ || letter_index! >= file_name.count {\n        return \"No\"\n    }\n    if\
    \ file_name.count < 3 {\n        return \"No\"\n    }\n    if file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    if file_name.prefix(3).isEmpty {\n \
    \       return \"No\"\n    }\n    if file_name.suffix(3).contains(\"txt\") ||\
    \ file_name.suffix(3).contains(\"exe\") || file_name.suffix(3).contains(\"dll\"\
    ) {\n        return \"Yes\"\n    }\n    return \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let dot_index = dot_index + 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = "]
stop_tokens:
- "\n}"
