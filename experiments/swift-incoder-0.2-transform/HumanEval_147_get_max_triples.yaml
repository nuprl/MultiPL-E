name: HumanEval_147_get_max_triples
language: swift
prompt: "\n/// You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
  \ i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i <\
  \ j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>>\
  \ get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n///\
  \ The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
  \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
  \ == 53361)"
completions: ["    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i *\
    \ i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count", "    var a = [Int]()\n    for i in\
    \ 1...n {\n        a[i] = i * i - i + 1\n    }\n    var count = 0\n    for i in\
    \ 1...n {\n        for j in 1...n {\n            for k in 1...n {\n          \
    \      if i != j && i != k && j != k {\n                    if a[i] < a[j] &&\
    \ a[i] < a[k] {\n                        count += 1\n                    }\n \
    \               }\n            }\n        }\n    }\n    return count", "    var\
    \ a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n  \
    \  }\n    return a.count", "    var a = [Int]()\n    for i in 1...n {\n      \
    \  for j in 1...n {\n            for k in 1...n {\n                if i != j &&\
    \ j != k && i != k && a[j] + a[k] == i*i*i + 1 {\n                    a.append(i*i*i\
    \ + 1)\n                }\n            }\n        }\n    }\n    return a.count",
  "    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            for k in 0..<n {\n                if i != j && j !=\
    \ k && i != k {\n                    let sum = i * i + j * j + k * k\n       \
    \             if sum % 3 == 0 {\n                        count += 1\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var a = [0]\n    for i in 1..<n {\n        a[i] = a[i] * a[i] -\
    \ a[i] + i + 1\n    }\n    return a.maxElement()", "    var a = [Int]()\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    if a[i] + a[j]\
    \ + a[k] == i*i*i + j*j*j + k*k*k {\n                        a.append(i)\n   \
    \                     a.append(j)\n                        a.append(k)\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ a.count", "    var a = Array<Int>()\n    for i in 1...n {\n        for j in\
    \ 1...n {\n            for k in 1...n {\n                if i != j && i != k &&\
    \ j != k {\n                    a.append(i * i - i + 1)\n                }\n \
    \           }\n        }\n    }\n    return a.count", "    var a = Array<Int>(n)\n\
    \    for i : Int in 1...n {\n        a[i] = i * i - i + 1\n    }\n    var count\
    \ = 0\n    for i : Int in 1...n {\n        for j : Int in 1...n {\n          \
    \  for k : Int in 1...n {\n                if i != j && i != k && j != k {\n \
    \                   if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count", "    var a = Array<Int>()\n    for i in 1...n {\n  \
    \      for j in 1...n {\n            for k in 1...n {\n                if i !=\
    \ j && i != k && j != k {\n                    let sum = i * i - i + j * j + k\
    \ * k\n                    if sum % 3 == 0 {\n                        a.append(sum)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count", "    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] -= 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count",
  "    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n {\n    \
    \        for k in 1...n {\n                if i != j && i != k && j != k {\n \
    \                   a.append(i * i - i + 1)\n                }\n            }\n\
    \        }\n    }\n    return a.count", "    var a = Array<Int>()\n    for i in\
    \ 1...n {\n        for j in 1...n {\n            for k in 1...n {\n          \
    \      if i != j && i != k && j != k {\n                    let triple = i * i\
    \ - i + j + k\n                    if triple % 3 == 0 {\n                    \
    \    a.append(triple)\n                    }\n                }\n            }\n\
    \        }\n    }\n    return a.count", "    var a = Array<Int>(n)\n    for i\
    \ in 0..<n {\n        a[i] = i * i - i + 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n     \
    \           if i != j && i != k && j != k {\n                    if a[i] < a[j]\
    \ && a[i] < a[k] {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count", "    var\
    \ a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var count = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n       \
    \         if i < j < k {\n                    if a[i] < a[j] || a[i] < a[k] ||\
    \ a[j] < a[k] {\n                        count += 1\n                    }\n \
    \               }\n            }\n        }\n    }\n    return count", "    var\
    \ a: [Int] = []\n    for i in 1...n {\n        for j in 1...n {\n            for\
    \ k in 1...n {\n                if i < j < k {\n                    a[i] = i *\
    \ i - i + 1\n                }\n            }\n        }\n    }\n    return a.count",
  "    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n {\n       \
    \     for k in 1...n {\n                if i != j && i != k && j != k {\n    \
    \                a[i] = a[i] + a[j] + a[k]\n                }\n            }\n\
    \        }\n    }\n    return a.count", "    var a = Array(n + 1)\n    for i :\
    \ Int in 1...n {\n        a[i] = i * i - i + 1\n    }\n    var count = 0\n   \
    \ for i : Int in 1...n {\n        for j : Int in 1...n {\n            for k :\
    \ Int in 1...n {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count", "    var a: [Int] = []\n    for i in 1...n {\n\
    \        for j in 1...n {\n            for k in 1...n {\n                if i\
    \ != j && i != k && j != k {\n                    if a[i] + a[j] + a[k] == i*i*i\
    \ + j*j*j + k*k*k {\n                        a.append(i*i*i + j*j*j + k*k*k)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count", "    var a = Array<Int>()\n    for i in 1...n {\n       \
    \ for j in 1...n {\n            for k in 1...n {\n                if i != j &&\
    \ i != k && j != k {\n                    let triple = a[i] + a[j] + a[k]\n  \
    \                  if triple % 3 == 0 {\n                        return triple\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return 0"]
stop_tokens:
- "\n}"
