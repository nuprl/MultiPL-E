name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n///\
  \ >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr:\
  \ [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    var sortedArr = arr\n    \n    for index in 0..<sortedArr.count\
    \ {\n        let ones = sortedArr[index] & 1\n        \n        if ones == 0 {\n\
    \            sortedArr.swapAt(index, index + 1)\n        }\n    }\n    \n    return\
    \ sortedArr", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    if\
    \ ones > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlace(by:\
    \ {\n            $0.decimalValue < $1.decimalValue\n        })\n    }\n    return\
    \ result", "    var sortedArray = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - oneCount\n          \
    \  oneCount = 0\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            sortedArray.append(element)\n        } else {\n        \
    \    decimalCount += element - oneCount\n            oneCount = 0\n        }\n\
    \    }\n    sortedArray = sortedArray.reverse()\n    return sortedArray", '    return
    arr.sorted()', "    var result = arr\n    for i in 0..<arr.count {\n        let\
    \ ones = arr[i].trailingZeroBitCount()\n        if ones > 0 {\n            let\
    \ decimal = arr[i].decimalValue()\n            if decimal > 0 {\n            \
    \    let index = result.index(of: decimal)\n                result.remove(at:\
    \ index)\n                result.insert(decimal, at: i)\n            } else {\n\
    \                let index = result.index(of: ones)\n                result.remove(at:\
    \ index)\n                result.insert(ones, at: i)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for number in arr {\n\
    \        let binaryString = String(number, radix: 2)\n        let count = binaryString.count\n\
    \        let decimal = Int(binaryString, radix: 2)\n        if count == 1 {\n\
    \            result.insert(decimal, at: 0)\n        } else {\n            let\
    \ index = result.index(of: decimal)\n            if index != nil {\n         \
    \       result[index!] = decimal\n            } else {\n                result.insert(decimal,\
    \ at: 0)\n            }\n        }\n    }\n    return result", '    return arr.sorted()',
  "    var result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].bitCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ for i in 0..<arr.count {\n        let ones = arr[i].bitCount()\n        if ones\
    \ == 0 {\n            result[i] = arr[i]\n        }\n    }\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones < 0 {\n           \
    \ result[i] = -result[i]\n        }\n    }\n    return result", "    var result\
    \ = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ return result.sorted(by: { $0.binCount() < $1.binCount() })", "    var sorted\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < arr.count\
    \ {\n        sorted = append(sorted, arr[i])\n        i += 1\n    }\n    for j\
    \ = i; j > 0; j-- {\n        for k = j - 1; k >= 0; k-- {\n            if arr[j]\
    \ > arr[k] {\n                let temp = arr[j]\n                arr[j] = arr[k]\n\
    \                arr[k] = temp\n            }\n        }\n    }\n    return sorted",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ", "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n   \
    \     ones = num.trailingZeroBitCount()\n        if ones == 0 {\n            result.insert(num,\
    \ at: 0)\n        } else {\n            result.insert(num, at: result.count -\
    \ ones)\n        }\n    }\n    return result", "    var result = arr\n    for\
    \ i in 0..<arr.count {\n        let ones = arr.filter{$0 == 1}.count\n       \
    \ if ones > i {\n            let tmp = result[i]\n            result[i] = result[ones]\n\
    \            result[ones] = tmp\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var ones = [Int]()\n    var zeros = [Int]()\n    for x\
    \ in arr {\n        if x != 0 {\n            ones.append(x)\n        } else {\n\
    \            zeros.append(x)\n        }\n    }\n    ones = sort_array(ones)\n\
    \    zeros = sort_array(zeros)\n    for x in ones {\n        for y in zeros {\n\
    \            if x == y {\n                continue\n            }\n          \
    \  if x < y {\n                result.append(x)\n            } else {\n      \
    \          result.append(y)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var dec = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    dec += num\n        }\n    }\n    if ones > 0 {\n        result = dec.sorted()\n\
    \    }\n    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if\
    \ ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n    result.sort\
    \ { $0.binCount() < $1.binCount() }\n    return result", "    var result = [Int]()\n\
    \    var count = 0\n    for element in arr {\n        if element == 1 {\n    \
    \        count += 1\n        } else {\n            count = 0\n        }\n    \
    \    if count > 1 {\n            result.insert(element, at: result.endIndex)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                oneCount--\n\
    \                result.insert(result.count - oneCount, num)\n            } else\
    \ {\n                result.insert(result.count, num)\n            }\n       \
    \ }\n    }\n    return result", "    \n    var result = [Int]()\n    \n    for\
    \ element in arr {\n        let ones = count_ones(element)\n        if ones ==\
    \ 0 {\n            result.append(element)\n        } else {\n            let decimal\
    \ = element / pow(2, ones)\n            result.append(decimal)\n        }\n  \
    \  }\n    \n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ let decimal = arr[i].decimalValue()\n            if decimal > 0 {\n        \
    \        let index = result.index(of: decimal)\n                result.remove(at:\
    \ index)\n                result.insert(decimal, at: i)\n            } else {\n\
    \                let index = result.index(of: ones)\n                result.remove(at:\
    \ index)\n                result.insert(ones, at: i)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    var\
    \ j = 0\n    var k = arr.count\n    while i < k {\n        if arr[i] == 1 {\n\
    \            result.append(i)\n            i += 1\n        } else {\n        \
    \    j = i\n            while j < k {\n                if arr[j] == 1 {\n    \
    \                result.append(j)\n                    j += 1\n              \
    \  } else {\n                    k = j\n                    while k < k {\n  \
    \                      if arr[k] == 1 {\n                            result.append(k)\n\
    \                            k += 1\n                        } else {\n      \
    \                      i = k\n                            break\n            \
    \            }\n                    }\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element\n        }\n    }\n    if ones > 0 {\n        result =\
    \ sort_array(arr: arr, ones: ones, decimal: decimal)\n    } else {\n        result\
    \ = sort_array(arr: arr, ones: 0, decimal: decimal)\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimal -= num\n        }\n    }\n    for num in arr {\n        if\
    \ num == 1 {\n            ones += 1\n        } else {\n            decimal +=\
    \ num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n       \
    \     ones += 1\n        } else {\n            decimal -= num\n        }\n   \
    \ }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n    \
    \    } else {\n            decimal += num\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal -= num\n        }\n    }\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal += num\n \
    \       }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal -= num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += num\n        }\n    }\n    for num in arr {\n        if\
    \ num == 1 {\n            ones += 1\n        } else {\n            decimal -=\
    \ num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n       \
    \     ones += 1\n        } else {\n            decimal += num\n        }\n   \
    \ }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n    \
    \    } else {\n            decimal -= num\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += num\n        }\n    }\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal -= num\n \
    \       }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimal -= num\n        }\n    }\n    for num in arr {\n        if\
    \ num == 1 {\n            ones += 1\n        } else {\n            decimal +=\
    \ num\n        }\n    }\n    for num in ", "    var sorted = [Int]()\n    var\
    \ ones = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBitCount()\n\
    \        decimal = num.decimalValue()\n        if ones > 0 {\n            sorted\
    \ = sorted.sorted { $0 < $1 }\n        }\n        if decimal > 0 {\n         \
    \   sorted = sorted.sorted { $0 < $1 }\n        }\n    }\n    return sorted",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr\
    \ {\n        if x == 1 {\n            ones += 1\n        } else {\n          \
    \  decimal += pow(x, 2)\n        }\n    }\n    if ones > 0 {\n        result =\
    \ sort_array(arr: arr, ones: ones, decimal: decimal)\n    }\n    if ones < 0 {\n\
    \        result = sort_array(arr: arr, ones: -ones, decimal: -decimal)\n    }\n\
    \    return result", "    var result = [Int]()\n    var ones = 0\n    var decimal\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += element * pow(10, ones)\n      \
    \  }\n    }\n    for element in arr {\n        if element == 1 {\n           \
    \ ones += 1\n        } else {\n            decimal += element * pow(10, ones)\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            ", '    return arr.sorted()',
  "    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ temp = 0\n    var count = 0\n    for _ in arr {\n        i += 1\n        count\
    \ += arr[i]\n    }\n    for _ in arr {\n        j += 1\n        count += arr[j]\n\
    \    }\n    for _ in arr {\n        k += 1\n        count += arr[k]\n    }\n \
    \   for _ in arr {\n        if count == 0 {\n            temp += arr[i]\n    \
    \        i += 1\n            count -= arr[i]\n        } else {\n            temp\
    \ += arr[j]\n            j += 1\n            count -= arr[j]\n        }\n    \
    \    if count == 0 {\n            temp += arr[k]\n            k += 1\n       \
    \     count -= arr[k]\n        }\n        if count == 0 {\n            result.insert(i,\
    \ temp)\n            temp = 0\n            i = 0\n            j = 0\n        \
    \    k = 0\n            count = 0\n        }\n    }\n    return result", "   \
    \ var sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones > 0 {\n        sorted =\
    \ sorted.sorted()\n    }\n    if decimal > 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    return sorted", '    return arr.sorted()', "    var result = [Int]()\n\
    \    var oneCount = 0\n    for element in arr {\n        if element == 1 {\n \
    \           oneCount++\n        } else {\n            if oneCount > 0 {\n    \
    \            result.append((oneCount - 1) * 10 + element)\n                oneCount\
    \ = 0\n            } else {\n                result.insert(element, at: 0)\n \
    \           }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr: arr,\
    \ ones: ones, decimal: decimal)\n    }\n    if ones == 0 {\n        result = sort_array(arr:\
    \ arr, decimal: decimal)\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n   \
    \ } else {\n        result.sortInPlaceByDecreasingOrder(decimal)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for v in arr {\n        if v == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += v\n        }\n    }\n    if ones > 0 {\n        result\
    \ = sort_array(arr: arr)\n        result.append(decimal)\n    } else {\n     \
    \   result = arr\n    }\n    return result", '    return arr.sorted()', "    var\
    \ result = [Int]()\n    var ones = [Int]()\n    var zeros = [Int]()\n    for num\
    \ in arr {\n        if num == 1 {\n            ones.append(num)\n        } else\
    \ {\n            zeros.append(num)\n        }\n    }\n    for num in ones {\n\
    \        result.append(num)\n    }\n    for num in zeros {\n        result.append(num)\n\
    \    }\n    return result", '    return arr.sorted()', "    var result = [Int]()\n\
    \    var ones = [Int]()\n    var zeros = [Int]()\n    for x in arr {\n       \
    \ if x == 0 {\n            zeros.append(x)\n        } else {\n            ones.append(x)\n\
    \        }\n    }\n    for x in ones {\n        let index = zeros.indexOf(x)\n\
    \        if index != -1 {\n            zeros.remove(at: index)\n            result.insert(x,\
    \ at: index)\n        } else {\n            result.insert(x, at: result.count)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 0 {\n            continue\n     \
    \   }\n        result.append(num)\n        i += 1\n    }\n    for num in arr {\n\
    \        if num == 0 {\n            continue\n        }\n        if i > 0 {\n\
    \            if result[i-1] > num {\n                result[i-1] = num\n     \
    \       }\n        } else {\n            result.append(num)\n        }\n     \
    \   i += 1\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n                ones = 0\n            }\n            result.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            if ones > 0 {\n                result.append((ones - 1)\
    \ * 10)\n            }\n            ones = 1\n            result.append(element)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result", "    var result = [Int]()\n    var oneCount = 0\n\
    \    for num in arr {\n        if num == 1 {\n            oneCount++\n       \
    \ } else {\n            oneCount = 0\n        }\n        if oneCount == 0 {\n\
    \            result.append(num)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var ones = 0\n    for x in arr {\n        ones = x & 1\n\
    \        if ones == 0 {\n            result.append(x)\n        } else {\n    \
    \        switch ones {\n            case 1:\n                result.sort()\n \
    \           case 2:\n                result.sort()\n            case 3:\n    \
    \            result.sort()\n            case 4:\n                result.sort()\n\
    \            case 5:\n                result.sort()\n            case 6:\n   \
    \             result.sort()\n            default:\n                break\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for value in arr {\n        if value\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += value\n\
    \        }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    } else\
    \ {\n        result.sortInPlaceWithComparator({ (lhs, rhs) -> Bool in\n      \
    \      return lhs.compare(rhs) == .orderedAscending\n        })\n    }\n    return\
    \ result", '    return arr.sorted()', '    return arr.sorted()', "    var result\
    \ = [Int]()\n    var ones = 0\n    var decimal = 0\n    for number in arr {\n\
    \        if number == 1 {\n            ones += 1\n        } else {\n         \
    \   decimal += number\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n\
    \    }\n    if ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n\
    \        result.sort()\n    }\n    if decimal > 0 {\n        result = sort_array(result)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for number in arr {\n        if number == 1 {\n           \
    \ ones += 1\n        } else {\n            decimal += number\n        }\n    }\n\
    \    if ones > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceByDecreasingOrder(decimal)\n\
    \    }\n    return result", "    var sortedArray = [Int]()\n    var oneCount =\
    \ 0\n    var decimalCount = 0\n    for number in arr {\n        if number == 1\
    \ {\n            oneCount += 1\n        } else {\n            decimalCount +=\
    \ number - oneCount\n            oneCount = 0\n        }\n    }\n    if oneCount\
    \ > 0 {\n        decimalCount += oneCount - 1\n    }\n    for number in arr {\n\
    \        if number == 1 {\n            sortedArray.append(number)\n        } else\
    \ {\n            sortedArray.append(decimalCount / number)\n            decimalCount\
    \ %= number\n        }\n    }\n    return sortedArray", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for number in arr {\n        if number\
    \ == 0 {\n            ones += 1\n        } else {\n            decimal += number\n\
    \        }\n    }\n    for number in arr {\n        if number == 0 {\n       \
    \     ones += 1\n        } else {\n            decimal -= number\n        }\n\
    \    }\n    if ones == arr.count {\n        result = arr\n    } else {\n     \
    \   result = arr\n        for number in arr {\n            if number == 0 {\n\
    \                ones += 1\n            } else {\n                decimal += number\n\
    \            }\n        }\n        for number in arr {\n            if number\
    \ == 0 {\n                ones += 1\n            } else {\n                decimal\
    \ -= number\n            }\n        }\n        if ones == arr.count {\n      \
    \      result = arr\n        } else {\n            result = arr\n            for\
    \ number in arr {\n                if number == 0 {\n                    ones\
    \ += 1\n                } else {\n                    decimal += number\n    \
    \            }\n            }\n            for number in arr {\n             \
    \   if number == 0 {\n                    ones += 1\n                } else {\n\
    \                    decimal -= number\n                }\n            }\n   \
    \         if ones == arr.count {\n                result = arr\n            }\
    \ else {\n                result = arr\n                for number in arr {\n\
    \                    if number == 0 {\n                        ones += 1\n   \
    \                 } else {\n                        decimal += number\n      \
    \              }\n                }\n                for number in arr {\n   \
    \                 if number == 0 {\n                        ones += 1\n      \
    \              } else {\n                        decimal -= number\n         \
    \           }\n                }\n                if ones == arr.count {\n   \
    \                 result = arr\n                } else {\n                   \
    \ result = arr\n                    for number in arr {\n                    \
    \    if number == 0 {\n                            ones += 1\n               \
    \         } else {\n                            decimal += number\n          \
    \              }\n                    }\n                    for number in arr\
    \ {\n                        if number == 0 {\n                            ones\
    \ += 1\n                        } else {\n                            decimal\
    \ -= number\n                        }\n                    }\n              \
    \      if ones == arr.count {\n                        result = arr\n        \
    \            } else {\n                        result = arr\n                \
    \        for number in arr {\n                            if number == 0 {\n \
    \                               ones += 1\n                            } else\
    \ {\n                                decimal += number\n                     \
    \       }\n                        }\n                        for number in arr\
    \ {\n                            if number == 0 {\n                          \
    \      ones += 1\n                            } else {\n                     \
    \           decimal -= number\n                            }\n               \
    \         }\n                        if ones == arr.count {\n                \
    \            result = arr\n                        } else {\n                \
    \            result = arr\n                            for number in arr {\n \
    \                               if number == 0 {\n                           \
    \         ones += 1\n                                } else {\n              \
    \                      decimal += number\n                                }\n\
    \                            }\n                            for number in arr\
    \ {\n                                if number == 0 {\n                      \
    \              ones += 1\n                                } else {\n         \
    \                           decimal -= number\n                              \
    \  }\n                            }\n                            if ones == arr.count\
    \ {\n                                result = arr\n                          \
    \  } else {\n                                result = arr\n                  \
    \              for number in arr {\n", "    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            result += [ones]\n            ones = 1\n  \
    \      }\n    }\n    result += [ones]\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    for x in arr {\n        if x == 1 {\n            ones +=\
    \ 1\n        } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n            }\n            ones = 1\n            result.append(x)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for num in arr {\n        if num == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += num\n        }\n    }\n    if ones\
    \ == 0 {\n        result = arr\n    } else {\n        result = arr.sorted()\n\
    \    }\n    if ones > 0 {\n        result = result.sorted()\n    }\n    if decimal\
    \ > 0 {\n        result = result.sorted()\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var ones = [0]\n    for num in arr\
    \ {\n        if num == 1 {\n            ones[0]++\n        } else {\n        \
    \    if ones[0] > 0 {\n                ones[0]--\n                result.insert(result.end(),\
    \ ones[0])\n            }\n            ones[0] = 1\n            result.insert(result.end(),\
    \ num)\n        }\n    }\n    if ones[0] > 0 {\n        ones[0]--\n        result.insert(result.end(),\
    \ ones[0])\n    }\n    return result", '    return arr.sorted()', "    var result\
    \ = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in arr {\n   \
    \     if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += num\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr:\
    \ arr)\n        ones = 0\n        decimal = 0\n    }\n    for num in arr {\n \
    \       if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ -= num\n        }\n    }\n    if ones == 0 {\n        result = arr.sorted()\n\
    \    }\n    if decimal > 0 {\n        result = result.sorted()\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = 0\n    var j = 0\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            if count > 0 {\n                result.append(j)\n\
    \                count = 0\n            }\n            j = i\n            i =\
    \ element\n        }\n    }\n    if count > 0 {\n        result.append(j)\n  \
    \  }\n    return result", "    var result = [Int]()\n    for x in arr {\n    \
    \    let binary = x.binary(radix: 2)\n        let decimal = Int(binary)\n    \
    \    if decimal < 0 {\n            decimal = -decimal\n        }\n        if decimal\
    \ > result.count {\n            result.append(decimal)\n        } else {\n   \
    \         result[decimal] = x\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]++\n        } else {\n          \
    \  zeros[0]++\n        }\n    }\n    for x in ones {\n        if x > zeros[0]\
    \ {\n            result.insert(zeros[0], x)\n            zeros[0]--\n        }\n\
    \    }\n    for x in zeros {\n        if x > ones[0] {\n            result.insert(ones[0],\
    \ x)\n            ones[0]--\n        }\n    }\n    return result", "    var result\
    \ = arr\n    for index in 0..<arr.count {\n        let value = arr[index]\n  \
    \      if value == 0 {\n            continue\n        }\n        let ones = binary(value,\
    \ width: 32)\n        let decimal = ones * 10\n        if decimal > result.last\
    \ {\n            result.removeLast()\n        }\n        result.append(decimal)\n\
    \    }\n    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for idx in 0..<arr.count {\n        let ones = arr[idx] & 1\n        if ones\
    \ == 0 {\n            result[idx] = arr[idx]\n        } else {\n            let\
    \ decimal = arr[idx] >> 1\n            result[idx] = decimal\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var oneCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            oneCount = 0\n        }\n        if oneCount > 0 {\n        \
    \    result.insert(result.count, num)\n        }\n    }\n    return result.sorted()",
  '    return arr.sorted()', '    return arr.sorted()', "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += pow(x, 2)\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += pow(x, 2)\n        }\n    }\n  \
    \  for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr", "    var\
    \ sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr {\n\
    \        if x != 0 {\n            ones += 1\n            decimal = decimal * 10\
    \ + x\n        } else {\n            sorted.append(decimal)\n            decimal\
    \ = 0\n            ones = 0\n        }\n    }\n    sorted.append(decimal)\n  \
    \  return sorted", "    var result = arr\n    for idx in 0..<arr.count {\n   \
    \     if arr[idx] == 0 {\n            swap(&result[idx], &result[idx+1])\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    var ones =\
    \ 0\n    var decimal = 0\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n\
    \    if ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n       \
    \ result = result.sorted()\n    }\n    if decimal > 0 {\n        result = result.sorted()\n\
    \    }\n    return result", "    var sorted = [Int]()\n    var oneCount = 0\n\
    \    for num in arr {\n        if num == 1 {\n            oneCount++\n       \
    \ } else {\n            sorted.append(num)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        sorted.sort()\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let bin = String(format: \"%0*b\", i, arr[i])\n\
    \        let count = bin.characters.filter({ $0 == \"1\" }).count\n        result[i]\
    \ = Int(bin.characters.filter({ $0 == \"1\" }).count) / Int(count)\n    }\n  \
    \  result.sort()\n    return result", "    var result = [Int]()\n    var ones\
    \ = [0]\n    for x in arr {\n        if x != 0 {\n            ones = append(ones,\
    \ 1)\n        } else {\n            ones = append(ones, 0)\n        }\n    }\n\
    \    for x in ones {\n        if x > 0 {\n            result = append(result,\
    \ x)\n        }\n    }\n    for x in ones {\n        if x < 0 {\n            result\
    \ = append(result, -x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            result.insert(oneCount,\
    \ num)\n            oneCount = 0\n        }\n    }\n    if oneCount > 0 {\n  \
    \      result.insert(oneCount, arr[arr.count-1])\n    }\n    return result", " \
    \   var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones > 0 {\n        result =\
    \ sort_array(arr)\n        result[result.count-1] = decimal\n    } else {\n  \
    \      result = arr\n    }\n    return result", "    var result = [Int]()\n  \
    \  var ones = 0\n    for element in arr {\n        if element == 1 {\n       \
    \     ones += 1\n        } else {\n            switch ones {\n            case\
    \ 0:\n                result.append(element)\n            case 1:\n          \
    \      result.append(element)\n            case 2:\n                result.append(element)\n\
    \            case 3:\n                result.append(element)\n            case\
    \ 4:\n                result.append(element)\n            case 5:\n          \
    \      result.append(element)\n            case 6:\n                result.append(element)\n\
    \            }\n            ones = 0\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones > 0 {\n        result =\
    \ sort_array(arr)\n    }\n    if ones == 0 {\n        result = decimal\n    }\n\
    \    return result", "    var sortedArr = arr\n    \n    for index in 0..<sortedArr.count\
    \ {\n        let ones = sortedArr[index] & 1\n        \n        if ones == 0 {\n\
    \            sortedArr.swapAt(index, index + 1)\n        }\n    }\n    \n    return\
    \ sortedArr", "    var result = [Int]()\n    var count = 0\n    for element in\
    \ arr {\n        if element == 1 {\n            count += 1\n        } else {\n\
    \            count = 0\n        }\n        if count > 0 {\n            result.insert(element,\
    \ at: result.endIndex)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for num in arr {\n \
    \       if num == 0 {\n            zeros.append(num)\n        } else {\n     \
    \       ones.append(num)\n        }\n    }\n    for num in ones {\n        if\
    \ zeros.contains(num) {\n            zeros.remove(num)\n        } else {\n   \
    \         result.append(num)\n        }\n    }\n    for num in zeros {\n     \
    \   if ones.contains(num) {\n            ones.remove(num)\n        } else {\n\
    \            result.append(num)\n        }\n    }\n    return result", "    var\
    \ result = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n\
    \        let bin = String(format: \"%08b\", arr[i])\n        let count = bin.count\n\
    \        if count < 8 {\n            result[i] = 0\n        } else {\n       \
    \     let bin = String(format: \"%08b\", arr[i])\n            let count = bin.count\n\
    \            let bin = String(format: \"%0*d\", 0, bin)\n            let count\
    \ = bin.count\n            result[i] = Int(bin, radix: 2)\n        }\n    }\n\
    \    return result.sorted()", '    return arr.sorted()', '    return arr.sorted()',
  "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + num) // sort by decimal\
    \ value\n            }\n            oneCount = 0\n        }\n    }\n    if oneCount\
    \ > 0 {\n        result.append((oneCount - 1) * 10 + num) // sort by decimal value\n\
    \    }\n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ let decimal = arr[i].decimalValue()\n            if decimal > 0 {\n        \
    \        let index = arr.index(of: decimal)\n                result[index] = arr[i]\n\
    \                arr.remove(at: i)\n                i = index\n            } else\
    \ {\n                let index = arr.index(of: ones)\n                result[index]\
    \ = arr[i]\n                arr.remove(at: i)\n                i = index\n   \
    \         }\n        }\n    }\n    return result", "    var sortedArr = arr\n\
    \    \n    for i in 0..<sortedArr.count {\n        let ones = sortedArr[i].bitCount()\n\
    \        if ones == 0 {\n            sortedArr.swapAt(i, sortedArr.count - 1 -\
    \ i)\n        }\n    }\n    \n    return sortedArr", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for element in arr {\n        ones\
    \ += element\n        decimal += element / 2\n    }\n    if ones < 0 {\n     \
    \   ones = -ones\n        decimal = -decimal\n    }\n    for element in arr {\n\
    \        if element == 0 {\n            continue\n        }\n        let index\
    \ = element / 2\n        if ones == 0 {\n            result.insert(index, element)\n\
    \        } else {\n            let index = element / 2\n            if decimal\
    \ == 0 {\n                result.insert(index, element)\n            } else {\n\
    \                result.insert(index, element + decimal)\n            }\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    var count =\
    \ 0\n    for el in arr {\n        if el == 1 {\n            count += 1\n     \
    \   } else {\n            if count > 0 {\n                result.append((count\
    \ - 1) * 10 + el)\n                count = 0\n            }\n        }\n    }\n\
    \    if count > 0 {\n        result.append((count - 1) * 10 + arr[arr.count])\n\
    \    }\n    return result", '    return arr.sorted()', "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for value in arr {\n        if value\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += value\n\
    \        }\n    }\n    if ones > 0 {\n        result.sort(by: { (a, b) -> Bool\
    \ in\n            return a > b\n        })\n    } else {\n        result.sort(by:\
    \ { (a, b) -> Bool in\n            return a < b\n        })\n    }\n    for value\
    \ in arr {\n        if value == 1 {\n            ones += 1\n        } else {\n\
    \            decimal -= value\n        }\n    }\n    for _ in 0..<ones {\n   \
    \     result.insert(decimal, decimal)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for x in arr {\n   \
    \     if x == 1 {\n            ones[0]++\n        } else {\n            zeros[0]++\n\
    \        }\n    }\n    for x in ones {\n        result.append(x)\n    }\n    for\
    \ x in zeros {\n        result.append(x)\n    }\n    for x in arr {\n        if\
    \ x == 1 {\n            ones[0]--\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in ones {\n        result.append(x)\n    }\n    for\
    \ x in zeros {\n        result.append(x)\n    }\n    return result", '    return
    arr.sorted()', '    return arr.sorted()', "    var result = arr\n    for idx in\
    \ 0..<arr.count {\n        if arr[idx] == 0 {\n            result.remove(at: idx)\n\
    \        }\n    }\n    return result", "    var result = arr\n    if arr.count\
    \ < 2 {\n        return result\n    }\n    var ones = [0]\n    var zeros = [0]\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {\n            zeros[0]++\n        }\n    }\n    for x in arr {\n        if\
    \ x == 1 {\n            ones[0]--\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            zeros[0]++\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]--\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]++\n        } else {\n            zeros[0]++\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n        }\
    \ else {\n            zeros[0]--\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones[0]++\n        } else {\n            zeros[0]++\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            zeros[0]--\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]++\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]--\n        } else {\n            zeros[0]--\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n        }\
    \ else {\n            zeros[0]--\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones[0]--\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            zeros[0]--\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]--\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]++\n        } else {\n            zeros[0]--\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n        }\
    \ else {\n            zeros[0]--\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones[0]++\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            zeros[0]--\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]++\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]--", "    var result = [Int]()\n    var ones = [Int]()\n    var\
    \ zeros = [Int]()\n    for num in arr {\n        if num == 1 {\n            ones.append(num)\n\
    \        } else {\n            zeros.append(num)\n        }\n    }\n    for num\
    \ in ones {\n        result.append(num)\n    }\n    for num in zeros {\n     \
    \   result.append(num)\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n                ones = 0\n            }\n            result.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for num in arr {\n        if num == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += num\n        }\n    }\n    if ones\
    \ == 0 {\n        result = arr\n    } else {\n        result = arr.sorted()\n\
    \    }\n    if ones > 0 {\n        result = result.sorted()\n    }\n    if decimal\
    \ > 0 {\n        result = result.sorted()\n    }\n    return result", "    var\
    \ sortedArr = arr\n    sortedArr = arr.sorted()\n    return sortedArr", "    var\
    \ result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr {\n\
    \        ones += x\n        decimal += x * (ones - decimal)\n    }\n    for x\
    \ in arr {\n        if ones == 0 {\n            result.insert(decimal, x)\n  \
    \      } else {\n            result.insert(decimal, x - decimal)\n        }\n\
    \        ones = x - ones\n        decimal = x - decimal\n    }\n    return result",
  "    var result = [Int]()\n    for el in arr {\n        let bin = String(bin: el,\
    \ radix: 2)\n        let index = bin.index(bin.startIndex, offsetBy: 1)\n    \
    \    let count = bin[index..<bin.endIndex].count\n        result.append(el)\n\
    \        result.sort(by: { (a, b) -> Bool in\n            if a > b {\n       \
    \         return true\n            } else if a < b {\n                return false\n\
    \            } else {\n                return count > 0 ? a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedAscending : a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedDescending\n            }\n        })\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones > 0 {\n                result.append((ones - 1) * 10)\n               \
    \ ones = 0\n            }\n            result.append(num)\n        }\n    }\n\
    \    if ones > 0 {\n        result.append((ones - 1) * 10)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var count = 0\n    for element in arr\
    \ {\n        if element == 1 {\n            count += 1\n        } else {\n   \
    \         count = 0\n        }\n        if count > 0 {\n            result.append(element)\n\
    \        }\n    }\n    if count > 0 {\n        result.append(count)\n    }\n \
    \   return result", "    var result = arr\n    for index in 0..<arr.count {\n\
    \        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let decimal = arr[index] >> 1\n        if decimal > 0 {\n\
    \            result[index] = decimal\n        } else {\n            result[index]\
    \ = -decimal\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for x in arr {\n        if\
    \ x == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += Int(x) * Int(oneCount)\n            oneCount = 0\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            result.append(x)\n        } else\
    \ {\n            decimalCount += Int(x) * Int(oneCount)\n            oneCount\
    \ = 0\n        }\n    }\n    for x in arr {\n        if x == 1 {\n           \
    \ result.append(x)\n        } else {\n            decimalCount += Int(x) * Int(oneCount)\n\
    \            oneCount = 0\n        }\n    }\n    for x in arr {\n        if x\
    \ == 1 {\n            result.append(x)\n        } else {\n            decimalCount\
    \ += Int(x) * Int(oneCount)\n            oneCount = 0\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            result.append(x)\n        } else\
    \ {\n            decimalCount += Int(x) * Int(oneCount)\n            oneCount\
    \ = 0\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ ones = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n\
    \        } else {\n            ones = ones * 2 + 1\n        }\n        result.append(num)\n\
    \    }\n    if ones == 0 {\n        return result\n    }\n    var decimal = ones\n\
    \    var decimalIndex = 0\n    var decimalSum = 0\n    for num in arr {\n    \
    \    decimalSum += num\n        if decimalSum > decimal {\n            decimal\
    \ = decimalSum\n            decimalIndex = num\n        }\n    }\n    result.insert(decimalIndex,\
    \ arr[decimalIndex])\n    return result", "    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for v in arr {\n        if v == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += v\n        }\n    }\n    if ones\
    \ > 0 {\n        ones = dec / ones\n        dec = dec % ones\n    }\n    for v\
    \ in arr {\n        if v == 1 {\n            dec -= 1\n            if dec > 0\
    \ {\n                dec -= 1\n            }\n        } else {\n            dec\
    \ += v\n        }\n        result.insert(dec, v)\n    }\n    return result", " \
    \   var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            result += [element]\n        } else\
    \ {\n            result += [element - decimal + ones]\n        }\n    }\n    return\
    \ result", "    var sorted: [Int] = []\n    for num in arr {\n        let bin\
    \ = String(num, radix: 2)\n        let count = bin.characters.filter({ $0 == \"\
    1\" }).count\n        sorted.append(Int(count) * 10)\n        sorted.append(num)\n\
    \    }\n    sorted.sort()\n    return sorted", "    var result = [Int]()\n   \
    \ var ones = [0]\n    var decimals = [0]\n    var decimalsIndex = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            ones[decimalsIndex] += 1\n    \
    \    } else {\n            decimals[decimalsIndex] += 1\n        }\n        decimalsIndex\
    \ += 1\n    }\n    for decimalIndex in 0..<decimals.count {\n        let decimal\
    \ = decimals[decimalIndex]\n        if decimal == 1 {\n            decimalsIndex\
    \ -= 1\n        }\n        let onesCount = ones[decimalsIndex]\n        if onesCount\
    \ > 0 {\n            decimalsIndex += 1\n        }\n        let onesIndex = decimalsIndex\n\
    \        result.append(arr[decimalIndex])\n        ones[onesIndex] -= onesCount\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \            i += 1\n        } else {\n            if j == i {\n             \
    \   result.append(k)\n                j += 1\n            } else {\n         \
    \       if k > result[j] {\n                    result.append(k)\n           \
    \         j += 1\n                } else {\n                    result.append(result[j])\n\
    \                    j += 1\n                }\n            }\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    for x in arr {\n     \
    \   if x == 1 {\n            result.insert(result.count, x)\n        } else {\n\
    \            let y = x % 10\n            let z = x / 10\n            let z = z\
    \ * 10 + y\n            result.insert(result.count, z)\n        }\n    }\n   \
    \ return result", "    var result = [Int]()\n    var ones = 0\n    var decimal\
    \ = 0\n    for number in arr {\n        ones = number & 1\n        decimal = number\
    \ >> 1\n        if decimal > 0 {\n            result.append(decimal)\n       \
    \ } else {\n            result.append(ones)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    for v in arr {\n        if v ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n  \
    \              result.insert(result.count - ones, v)\n                ones = 0\n\
    \            } else {\n                result.insert(result.count, v)\n      \
    \      }\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var oneCount = 0\n    for num in arr {\n        if num == 1 {\n           \
    \ oneCount++\n        } else {\n            oneCount = 0\n        }\n        if\
    \ oneCount > 0 {\n            result.insert(result.count, num)\n        }\n  \
    \  }\n    if oneCount > 0 {\n        result.insert(result.count, oneCount)\n \
    \   }\n    return result", "    var result = [Int]()\n    var ones = [0]\n   \
    \ var zeros = [0]\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            zeros[0]++\n        }\n    }\n    for x in ones\
    \ {\n        result.append(x)\n    }\n    for x in zeros {\n        result.append(x)\n\
    \    }\n    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let ones = arr.filter{$0 == 1}.count\n\
    \        result[i] = ones\n        if ones > 0 {\n            result[i] = Int(pow(2.0,\
    \ Double(ones)) - 1.0)\n        }\n    }\n    return result.sorted()", "    var\
    \ result = [Int]()\n    var i = 0\n    for num in arr {\n        if num == 1 {\n\
    \            result.append(i)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var ones = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           if ones == 0 {\n                result.append(num)\n            }\
    \ else {\n                if num < result[result.count - 1] {\n              \
    \      result.append(num)\n                } else {\n                    result.insert(result.count\
    \ - 1, num)\n                }\n            }\n            ones = 0\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = [1]\n  \
    \  for x in arr {\n        if x == 1 {\n            ones = append(ones, 1)\n \
    \       } else {\n            ones = append(ones, 0)\n        }\n    }\n    for\
    \ x in ones {\n        if x == 1 {\n            result = append(result, x)\n \
    \       } else {\n            result = append(result, 0)\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var oneCount = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            oneCount++\n        } else {\n\
    \            if oneCount > 0 {\n                oneCount--\n                result.insert(result.count\
    \ - oneCount, num)\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var oneCount = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            oneCount++\n        } else {\n            if oneCount >\
    \ 0 {\n                result.sort()\n                oneCount = 0\n         \
    \   }\n            result.append(element)\n        }\n    }\n    if oneCount >\
    \ 0 {\n        result.sort()\n    }\n    return result", "    var result = arr\n\
    \    for index in stride(from: 0, to: arr.count, by: 1) {\n        let ones =\
    \ arr[index].trailingZeroBitCount\n        if ones > 0 {\n            let decimal\
    \ = arr[index].trailingZeroBitCount / 2\n            let index = result.index(of:\
    \ decimal)\n            result[index] = arr[index]\n            result[index +\
    \ 1] = arr[index + 1]\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var ones = 0\n    for el in arr {\n        if el == 1 {\n     \
    \       ones += 1\n        } else {\n            if ones == 0 {\n            \
    \    result.append(el)\n            } else {\n                result.insert(result.count\
    \ - ones, el)\n            }\n            ones = 0\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        ones = num.bitCount(&ones)\n        decimal = num.decimalValue()\n\
    \        if ones > 0 {\n            result.insert(decimal, num)\n        } else\
    \ {\n            result.insert(-decimal, num)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var i = 0\n    for num in arr {\n        if num ==\
    \ 0 {\n            continue\n        }\n        if i == 0 {\n            result.append(num)\n\
    \        } else {\n            if num == result[i-1] {\n                result.append(num)\n\
    \            } else {\n                result.insert(i, num)\n            }\n\
    \        }\n        i += 1\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var dec = 0\n    for num in arr {\n        if num == 1\
    \ {\n            ones += 1\n        } else {\n            dec += num\n       \
    \ }\n    }\n    for num in arr {\n        if num == 1 {\n            dec -= num\n\
    \        }\n        if dec > 0 {\n            dec -= num\n        } else {\n \
    \           dec += num\n        }\n        if dec > 0 {\n            dec -= num\n\
    \        } else {\n            dec += num\n        }\n        if dec > 0 {\n \
    \           dec -= num\n        } else {\n            dec += num\n        }\n\
    \        if dec > 0 {\n            dec -= num\n        } else {\n            dec\
    \ += num\n        }\n        if dec > 0 {\n            dec -= num\n        } else\
    \ {\n            dec += num\n        }\n        if dec > 0 {\n            dec\
    \ -= num\n        } else {\n            dec += num\n        }\n        if dec\
    \ > 0 {\n            dec -= num\n        } else {\n            dec += num\n  \
    \      }\n        if dec > 0 {\n            dec -= num\n        } else {\n   \
    \         dec += num\n        }\n        if dec > 0 {\n            dec -= num\n\
    \        } else {\n            dec += num\n        }\n        if dec > 0 {\n \
    \           dec -= num\n        } else {\n            dec += num\n        }\n\
    \        if dec > 0 {\n            dec -= num\n        } else {\n            dec\
    \ += num\n        }\n        if dec > 0 {\n            dec -= num\n        } else\
    \ {\n            dec += num\n        }\n        if dec > 0 {\n            dec\
    \ -= num\n        } else {\n            dec += num\n        }\n        if dec\
    \ > 0 {\n            dec -= num\n        } else {\n            dec += num\n  \
    \      }\n        if dec > 0 {\n            dec -= num\n        } else {\n   \
    \         dec += num\n        }\n        if dec > 0 {\n            dec -= num\n\
    \        } else {\n            dec += num\n        }\n        if dec > 0 {\n \
    \           dec -= num\n        } else {\n            dec += num\n        }\n\
    \        if dec > 0 {\n            dec -= num\n        } else {\n            dec\
    \ += num\n        }\n        if dec > 0 {\n            dec -= num\n        } else\
    \ {\n            dec += num\n        }\n        if dec > 0 {\n            dec\
    \ -= num\n        } else {\n            dec += num\n        }\n        if dec\
    \ > 0 {\n            dec -= num", "    var result = [Int]()\n    var ones = 0\n\
    \    var decimal = 0\n    for num in arr {\n        if num == 1 {\n          \
    \  ones += 1\n        } else {\n            decimal += num\n        }\n    }\n\
    \    if ones > 0 {\n        result = sort_array(arr)\n        ones = 0\n     \
    \   decimal = 0\n    }\n    for num in arr {\n        if num == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal -= num\n        }\n    \
    \    if decimal < 0 {\n            decimal = 0\n            ones += 1\n      \
    \  }\n    }\n    for num in arr {\n        if num == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += num\n        }\n        if decimal\
    \ > 0 {\n            decimal = 0\n            ones += 1\n        }\n    }\n  \
    \  for num in arr {\n        if num == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal -= num\n        }\n        if decimal < 0 {\n       \
    \     decimal = 0\n            ones += 1\n        }\n        if decimal > 0 {\n\
    \            decimal = 0\n            ones += 1\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += num\n        }\n        if decimal > 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n        if decimal < 0 {\n          \
    \  decimal = 0\n            ones += 1\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ -= num\n        }\n        if decimal < 0 {\n            decimal = 0\n     \
    \       ones += 1\n        }\n        if decimal > 0 {\n            decimal =\
    \ 0\n            ones += 1\n        }\n        if decimal > 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n    }\n    for num in arr {\n       \
    \ if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += num\n        }\n        if decimal > 0 {\n            decimal = 0\n     \
    \       ones += 1\n        }\n        if decimal < 0 {\n            decimal =\
    \ 0\n            ones += 1\n        }\n        if decimal > 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n        if decimal > 0 {\n          \
    \  decimal = 0\n            ones += 1\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ -= num\n        }\n        if decimal < 0 {\n            decimal = 0\n     \
    \       ones += 1\n        }\n        if decimal > 0 {\n            decimal =\
    \ 0\n            ones += 1\n        }\n        if decimal < 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n        if decimal > 0 {\n          \
    \  decimal = 0\n            ones += 1\n        }\n        if decimal > 0 {\n \
    \           decimal = 0\n            ones += 1\n        }\n    }", "    var result\
    \ = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in arr {\n   \
    \     if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += num\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr:\
    \ arr)\n    }\n    if ones == 0 {\n        result.sort()\n    }\n    if ones <\
    \ 0 {\n        result.sort(by: {$0 < $1})\n    }\n    if decimal > 0 {\n     \
    \   result = result.sorted()\n    }\n    if decimal < 0 {\n        result.sort(by:\
    \ {$0 > $1})\n    }\n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 0 {\n            swap(&result[i], &result[i+1])\n  \
    \      }\n    }\n    return result", "    var result = [Int]()\n    var ones =\
    \ 0\n    for x in arr {\n        ones = x & 1\n        result.insert(x, ones)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aOnes = a & 1\n \
    \       let bOnes = b & 1\n        if aOnes == bOnes {\n            return a <\
    \ b\n        }\n        return aOnes < bOnes\n    })\n    return result", "  \
    \  var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.insert(result.count - oneCount, num)\n       \
    \         oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result", '    return arr.sorted()',
  '    return arr.sorted()', "    var result = [Int]()\n    for num in arr {\n   \
    \     let bin = String(num, radix: 2)\n        let count = bin.count\n       \
    \ let decimal = Int(bin, radix: 10)\n        if count == 1 {\n            result.append(decimal)\n\
    \        } else {\n            let maxIndex = result.count - 1\n            let\
    \ maxValue = result[maxIndex]\n            if decimal > maxValue {\n         \
    \       result[maxIndex] = decimal\n            }\n        }\n    }\n    return\
    \ result", "    var result = arr\n    var oneCount = 0\n    for element in arr\
    \ {\n        if element == 1 {\n            oneCount++\n        } else {\n   \
    \         if oneCount > 0 {\n                oneCount--\n                result.sort()\n\
    \            }\n            oneCount = 0\n        }\n        result.append(element)\n\
    \    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return result",
  "    var result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].bitCount()\n\
    \        if ones < 0 {\n            ones = -ones\n        }\n        let decimal\
    \ = arr[i].truncatingRemainder(dividingBy: 1)\n        if decimal != 0 {\n   \
    \         result[i] = decimal\n        }\n        if ones == 0 {\n           \
    \ result[i] = 0\n        }\n    }\n    return result", "    var sorted = [Int]()\n\
    \    for num in arr {\n        let bin = String(num, radix: 2)\n        let count\
    \ = bin.characters.filter({ $0 == \"1\" }).count\n        sorted.append(count)\n\
    \    }\n    sorted.sort()\n    return sorted", "    var result = [Int]()\n   \
    \ var ones = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]++\n        } else {\n            zeros[0]++\n        }\n\
    \    }\n    for x in ones {\n        if x > 0 {\n            result.insert(result.count-1,\
    \ x)\n        }\n    }\n    for x in zeros {\n        if x > 0 {\n           \
    \ result.insert(result.count-1, x)\n        }\n    }\n    return result", '    return
    arr.sorted()', '    return arr.sorted()', "    var result = [Int]()\n    var i\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    result.sort()\n    return result", '    return
    arr.sorted()', "    var result = arr\n    for i := 0; i < len(arr); i++ {\n  \
    \      if arr[i] == 0 {\n            continue\n        }\n        j := i\n   \
    \     for j > 0 && arr[j-1] == 0 {\n            j--\n        }\n        if j >\
    \ i {\n            swap(&result[i], &result[j])\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for number in arr {\n        if number == 1 {\n            ones += 1\n  \
    \      } else {\n            decimal += number\n        }\n    }\n    if ones\
    \ == arr.count {\n        result.sort()\n    } else {\n        result.sort(by:\
    \ {\n            decimal.compare($0, $1) == .orderedAscending\n        })\n  \
    \  }\n    return result", "    var result = [Int]()\n    for x in arr {\n    \
    \    let binary = binary(x)\n        let decimal = Int(binary)\n        if decimal\
    \ > 0 {\n            result.insert(decimal, at: 0)\n        } else {\n       \
    \     result.insert(-decimal, at: 0)\n        }\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var oneCount = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.insert(result.count\
    \ - oneCount, element)\n                oneCount = 0\n            } else {\n \
    \               result.insert(result.count, element)\n            }\n        }\n\
    \    }\n    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if\
    \ ones == 0 {\n            result[i] = arr[i]\n        } else {\n            result[i]\
    \ = arr[i].decimalValue\n        }\n    }\n    return result", "    var result\
    \ = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n\
    \        if ones > 0 {\n            switch ones {\n            case 1:\n     \
    \           result.sort(by: {$0 < $1})\n            case 2:\n                result.sort(by:\
    \ {$0 > $1})\n            case 3:\n                result.sort(by: {$0 > $1 &&\
    \ $0 < $2})\n            case 4:\n                result.sort(by: {$0 > $1 &&\
    \ $0 > $2 && $0 < $3})\n            case 5:\n                result.sort(by: {$0\
    \ > $1 && $0 > $2 && $0 > $3 && $0 < $4})\n            case 6:\n             \
    \   result.sort(by: {$0 > $1 && $0 > $2 && $0 > $3 && $0 > $4 && $0 < $5})\n \
    \           case 7:\n                result.sort(by: {$0 > $1 && $0 > $2 && $0\
    \ > $3 && $0 > $4 && $0 > $5 && $0 < $6})\n            case 8:\n             \
    \   result.sort(by: {$0 > $1 && $0 > $2 && $0 > $3 && $0 > $4 && $0 > $5 && $0\
    \ > $6 && $0 < $7})\n            case 9:\n                result.sort(by: {$0\
    \ > $1 && $0 > $2 && $0 > $3 && $0 > $4 && $0 > $5 && $0 > $6 && $0 > $7 && $0\
    \ < $8})\n            case 10:\n                result.sort(by: {$0 > $1 && $0\
    \ > $2 && $0 > $3 && $0 > $4 && $0 > $5 && $0 > $6 && $0 > $7 && $0 > $8 && $0\
    \ < $9})\n            case 11:\n                result.sort(by: {$0 > $1 && $0\
    \ > $2 && $0 > $3 && $0 > $4 && $0 > $5 && $0 > $6 && $0 > $7 && $0 > $8 && $0\
    \ > $9 && $0 < $10})\n            case 12:\n                result.sort(by: {$0\
    \ > $1 && $0 > $2 && $0 > $3 && $0 > $4 && $0 > $5 && $0 > $6 && $0 > $7 && $0\
    \ > $8 && $0 > $9 && $0 > $10 && $0 < $11})\n            case 13:\n          \
    \      ", "    var result = arr\n    for index in stride(from: 0, to: arr.count,\
    \ by: 1) {\n        let ones = arr[index] & 1\n        if ones > 0 {\n       \
    \     swap(&result[index], &result[index + 1])\n        }\n    }\n    return result",
  "    var sorted = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ count = 0\n    for k in arr {\n        if k == 1 {\n            sorted.append(k)\n\
    \            count++\n        } else {\n            if count > 0 {\n         \
    \       sorted.append(count)\n                count = 0\n            }\n     \
    \       sorted.append(k)\n        }\n    }\n    if count > 0 {\n        sorted.append(count)\n\
    \    }\n    return sorted", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element * pow(10, decimal)\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       result += [element]\n        } else {\n            result += [element\
    \ - decimal]\n        }\n    }\n    return result", "    var sortedArr = arr\n\
    \    var oneCount = [Int]()\n    var decimalCount = [Int]()\n    for num in arr\
    \ {\n        oneCount[num.ones()] += 1\n        decimalCount[num.decimal()] +=\
    \ 1\n    }\n    sortedArr = arr.sorted()\n    for num in arr {\n        if oneCount[num.ones()]\
    \ == 1 {\n            sortedArr = sortedArr.sorted(by: {$0.decimal() < $1.decimal()})\n\
    \        }\n    }\n    return sortedArr", '    return arr.sorted()', "    var\
    \ result = [Int]()\n    for x in arr {\n        var count = 0\n        for y in\
    \ x {\n            if y == 1 {\n                count += 1\n            }\n  \
    \      }\n        if count == 0 {\n            result.insert(x, at: 0)\n     \
    \   } else {\n            result.insert(x, at: result.count - count)\n       \
    \ }\n    }\n    return result", '    return arr.sorted()', "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for number in arr {\n        if number\
    \ == 0 {\n            ones += 1\n        } else {\n            decimal += number\n\
    \        }\n    }\n    if ones == 0 {\n        result = arr\n    } else {\n  \
    \      result = arr.sorted()\n    }\n    if ones > 0 {\n        result = result.sorted()\n\
    \    }\n    if decimal > 0 {\n        result = result.sorted()\n    }\n    return\
    \ result", "    var result = [Int]()\n    for num in arr {\n        if num ==\
    \ 0 {\n            continue\n        }\n        var bin = binary(num)\n      \
    \  var decimal = decimal(bin)\n        if decimal < 0 {\n            decimal =\
    \ -decimal\n            bin = bin.reverse()\n        }\n        if decimal > result.count\
    \ {\n            result = result + [num]\n        } else {\n            result[decimal]\
    \ = num\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var count = 0\n    for num in arr {\n        if num == 1 {\n            count\
    \ += 1\n        } else {\n            if count > 0 {\n                result.insert(count,\
    \ num)\n                count = 0\n            } else {\n                result.insert(num,\
    \ num)\n            }\n        }\n    }\n    return result", '    return arr.sorted()',
  "    var result = [Int]()\n    for x in arr {\n        if x != 0 {\n           \
    \ result.insert(x, 0)\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ count = 0\n    for k in arr {\n        if k == 1 {\n            count = count\
    \ + 1\n        } else {\n            if count > 0 {\n                result[j]\
    \ = result[k]\n                j = j + 1\n                count = 0\n        \
    \    }\n            result[j] = k\n            j = j + 1\n        }\n    }\n \
    \   if count > 0 {\n        result[j] = result[k]\n    }\n    return result",
  "    var result = arr\n    for idx in 0..<arr.count {\n        if result[idx] ==\
    \ 0 {\n            result.remove(at: idx)\n        }\n    }\n    return result.sorted()",
  '    return arr.sorted()', '    return arr.sorted()', "    var sortedArray = [Int]()\n\
    \    var oneCount = [Int]()\n    for num in arr {\n        oneCount[num] = oneCount[num]\
    \ + 1\n    }\n    for num in oneCount {\n        if oneCount[num] == 1 {\n   \
    \         sortedArray.append(num)\n        }\n    }\n    for num in arr {\n  \
    \      if oneCount[num] == 1 {\n            sortedArray.append(num)\n        }\n\
    \    }\n    return sortedArray", "    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ result.sort(by: { (a, b) -> Bool in\n        let aOnes = a.binCount()\n    \
    \    let bOnes = b.binCount()\n        if aOnes > bOnes {\n            return\
    \ true\n        } else if aOnes < bOnes {\n            return false\n        }\
    \ else {\n            return a.decimalValue() < b.decimalValue()\n        }\n\
    \    })\n    return result", "    var result = [Int]()\n    var i = 0\n    for\
    \ v in arr {\n        if v == 0 {\n            result.append(i)\n        }\n \
    \       i += 1\n    }\n    for v in arr {\n        if v == 0 {\n            continue\n\
    \        }\n        j = i\n        for _ in 0..<v {\n            j += 1\n    \
    \    }\n        if j < i {\n            swap(&result[i], &result[j])\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    var ones = [Int]()\n\
    \    var zeros = [Int]()\n    for x in arr {\n        if x == 1 {\n          \
    \  ones.append(x)\n        } else {\n            zeros.append(x)\n        }\n\
    \    }\n    for x in ones {\n        result.insert(result.count-1, x)\n    }\n\
    \    for x in zeros {\n        result.insert(result.count-1, x)\n    }\n    return\
    \ result", '    return arr.sorted()', "    var result = [Int]()\n    for element\
    \ in arr {\n        let ones = count_ones(element)\n        if ones == 0 {\n \
    \           result.insert(element, at: 0)\n        } else {\n            let decimal\
    \ = element / pow(2, ones)\n            result.insert(decimal, at: 0)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    var oneCount =\
    \ [Int]()\n    var decimalCount = [Int]()\n    for num in arr {\n        oneCount[num]\
    \ = oneCount[num] + 1\n    }\n    for num in oneCount {\n        decimalCount[num]\
    \ = decimalCount[num] + num\n    }\n    for num in decimalCount {\n        if\
    \ decimalCount[num] > 0 {\n            result.append(num)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var ones = [0]\n    var zeros\
    \ = [0]\n    for x in arr {\n        if x == 1 {\n            ones = append(ones,\
    \ 0)\n        } else {\n            ones = append(ones, 1)\n        }\n      \
    \  if x == 0 {\n            zeros = append(zeros, 0)\n        } else {\n     \
    \       zeros = append(zeros, 1)\n        }\n    }\n    ones = append(ones, 0)\n\
    \    zeros = append(zeros, 0)\n    for x in ones {\n        if x < len(zeros)\
    \ {\n            result.append(zeros[x])\n        } else {\n            result.append(x)\n\
    \        }\n    }\n    for x in zeros {\n        if x < len(ones) {\n        \
    \    result.append(ones[x])\n        } else {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = arr\n    var count =\
    \ [Int]()\n    for x in arr {\n        count[x & 1] += 1\n    }\n    for x in\
    \ count {\n        if x > result.count {\n            result = result\n      \
    \  }\n    }\n    for x in arr {\n        if x & 1 != 0 {\n            result.insert(x,\
    \ result.count)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        ones +=\
    \ num\n        decimal = ones * 10 + decimal\n    }\n    result.sortInPlace()\n\
    \    for num in arr {\n        if num == 1 {\n            result.removeLast()\n\
    \        } else {\n            result.append(num)\n        }\n    }\n    for num\
    \ in result {\n        ones -= num\n        decimal = ones * 10 + decimal\n  \
    \  }\n    return result", "    var sorted = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBits()\n \
    \       decimal = num.decimalValue()\n        if ones == 0 {\n            sorted.append(decimal)\n\
    \        } else {\n            sorted.append(decimal)\n            sorted.append(ones)\n\
    \        }\n    }\n    sorted.sort()\n    return sorted", "    var sorted = [Int]()\n\
    \    var i = 0\n    for num in arr {\n        if num == 0 {\n            sorted.append(0)\n\
    \        } else {\n            sorted.append(sorted.last! + num)\n        }\n\
    \    }\n    for num in sorted {\n        if num > 0 {\n            sorted.insert(i,\
    \ num)\n            i += 1\n        }\n    }\n    return sorted", '    return
    arr.sorted()', '    return arr.sorted()', '    return arr.sorted()', "    var\
    \ result = [Int]()\n    var ones = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            ones = ones - 1\n\
    \        }\n        if ones == 0 {\n            result.append(element)\n     \
    \       ones = 1\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal += num\n \
    \       }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n\
    \    if ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n       \
    \ result = sort_array(result)\n    }\n    if decimal > 0 {\n        result = sort_array(result)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for number in arr {\n        if number\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += number\n\
    \        }\n    }\n    if ones > 0 {\n        result = sort_array(arr: arr)\n\
    \    }\n    if ones == 0 {\n        result = sort_array(arr: result)\n    }\n\
    \    if decimal > 0 {\n        result = sort_array(arr: result)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for x in arr {\n        if x != 0 {\n            ones += 1\n            decimal\
    \ = decimal * 10 + x\n        } else {\n            if ones > 0 {\n          \
    \      result.insert(decimal, at: result.endIndex)\n                ones = 0\n\
    \                decimal = 0\n            }\n        }\n    }\n    if ones > 0\
    \ {\n        result.insert(decimal, at: result.endIndex)\n    }\n    return result",
  "    var result = arr\n    if arr.count < 2 {\n        return result\n    }\n  \
    \  var ones = [0]\n    for i in 0..<arr.count {\n        if arr[i] == 1 {\n  \
    \          ones[0]++\n        } else {\n            ones[0] = 0\n        }\n \
    \   }\n    for i in 0..<arr.count {\n        if arr[i] == 1 {\n            ones[0]--\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if arr[i] == 1 {\n  \
    \          result[i] = ones[0]\n            ones[0] = 0\n        } else {\n  \
    \          result[i] = arr[i]\n        }\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - oneCount\n          \
    \  oneCount = 0\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            result.append(element)\n        } else {\n            decimalCount\
    \ += element - oneCount\n            oneCount = 0\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            result.append(element)\n  \
    \      } else {\n            decimalCount += element - oneCount\n            oneCount\
    \ = 0\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            result.append(element)\n        } else {\n            decimalCount\
    \ += element - oneCount\n            oneCount = 0\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            result.append(element)\n  \
    \      } else {\n            decimalCount += element - oneCount\n            oneCount\
    \ = 0\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ ones = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += num\n       \
    \ }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n    if\
    \ ones == 0 {\n        result.sort()\n    }\n    if ones == 1 && decimal <= 0\
    \ {\n        result = sort_array(arr)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for x in arr {\n   \
    \     if x != 0 {\n            ones = append(ones, 1)\n        } else {\n    \
    \        zeros = append(zeros, 1)\n        }\n    }\n    for x in ones {\n   \
    \     if x < zeros.count {\n            zeros = append(zeros, 0)\n        } else\
    \ {\n            result = append(result, 0)\n        }\n    }\n    for x in zeros\
    \ {\n        if x < ones.count {\n            ones = append(ones, 0)\n       \
    \ } else {\n            result = append(result, 0)\n        }\n    }\n    for\
    \ x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n        if x < ones.count {\n            ones = append(ones,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n        if x < ones.count {\n            ones = append(ones,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n        if x < ones.count {\n            ones = append(ones,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n        if x < ones.count {\n            ones = append(ones,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n        if x < ones.count {\n            ones = append(ones,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n        if x < ones.count {\n            ones = append(ones,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in ones {\n        if x < zeros.count {\n            zeros = append(zeros,\
    \ 0)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    for x in zeros {\n", "    var result = [Int]()\n    for num in arr {\n\
    \        let bin = String(num, radix: 2)\n        let count = bin.characters.filter({\
    \ $0 == \"1\" }).count\n        if count == 0 {\n            result.insert(num,\
    \ at: 0)\n        } else {\n            let decimal = Int(bin, radix: 2)\n   \
    \         result.insert(decimal, at: 0)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var oneCount = 0\n    for element in arr {\n    \
    \    if element == 1 {\n            oneCount++\n        } else {\n           \
    \ oneCount = 0\n        }\n        if oneCount == 0 {\n            result.append(element)\n\
    \        }\n    }\n    if oneCount > 0 {\n        oneCount = 0\n        for element\
    \ in arr {\n            if element == 1 {\n                oneCount++\n      \
    \      } else {\n                oneCount = 0\n            }\n            if oneCount\
    \ == 0 {\n                result.append(element)\n            }\n        }\n \
    \   }\n    return result", "    var result = arr\n    var ones = 0\n    var decimal\
    \ = 0\n    for x in arr {\n        if x != 0 {\n            ones += 1\n      \
    \      decimal = decimal * 10 + x\n        }\n    }\n    if ones == 0 {\n    \
    \    result = arr\n    } else {\n        result = result.sorted()\n    }\n   \
    \ for x in result {\n        if x % 10 == 0 {\n            x = x / 10\n      \
    \  }\n        if x < 0 {\n            x *= -1\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var oneCount = 0\n    for element in arr {\n    \
    \    if element == 1 {\n            oneCount++\n        } else {\n           \
    \ oneCount = 0\n        }\n        if oneCount == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       result.append(element)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            oneCount++\n        } else {\n\
    \            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        for num in arr {\n            if num == 1 {\n                result.insert(result.end(),\
    \ num)\n            }\n        }\n    } else {\n        for num in arr {\n   \
    \         if num == 1 {\n                result.insert(result.end(), decimalCount)\n\
    \            }\n        }\n    }\n    return result", "    var result = arr\n\
    \    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if\
    \ ones > 0 {\n            switch ones {\n            case 1:\n               \
    \ result.swapAt(i, result.count - 1 - i)\n            case 2:\n              \
    \  result.swapAt(i, result.count - 1 - i)\n            case 3:\n             \
    \   result.swapAt(i, result.count - 1 - i)\n            case 4:\n            \
    \    result.swapAt(i, result.count - 1 - i)\n            case 5:\n           \
    \     result.swapAt(i, result.count - 1 - i)\n            case 6:\n          \
    \      result.swapAt(i, result.count - 1 - i)\n            default:\n        \
    \        break\n            }\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 1)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            zeros = append(zeros, 0)\n        }\n    }\n", '    return arr.sorted()',
  '    return arr.sorted()', "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for idx in 0..<arr.count {\n        let ones = arr[idx] & 1\n        if ones\
    \ == 0 {\n            result[idx] = arr[idx]\n        } else {\n            let\
    \ index = idx / 2\n            let left = arr[index]\n            let right =\
    \ arr[index + 1]\n            let mid = left + right\n            let midOnes\
    \ = mid & 1\n            if midOnes == 0 {\n                result[index] = mid\n\
    \            } else {\n                result[index] = mid\n                result[index\
    \ + 1] = mid\n            }\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
