name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n///\
  \ >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr:\
  \ [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    var sortedArr = arr\n    \n    for index in 0..<sortedArr.count\
    \ {\n        let ones = sortedArr[index] & 1\n        \n        if ones == 0 {\n\
    \            sortedArr.swapAt(index, index + 1)\n        }\n    }\n    \n    return\
    \ sortedArr", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    if\
    \ ones > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlace(by:\
    \ {\n            $0.decimalValue < $1.decimalValue\n        })\n    }\n    return\
    \ result", "    var sortedArray = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - oneCount\n          \
    \  oneCount = 0\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            sortedArray.append(element)\n        } else {\n        \
    \    decimalCount += element - oneCount\n            oneCount = 0\n        }\n\
    \    }\n    sortedArray = sortedArray.reverse()\n    return sortedArray", '    return
    arr.sorted()', "    var result = arr\n    for i in 0..<arr.count {\n        let\
    \ ones = arr[i].trailingZeroBitCount()\n        if ones > 0 {\n            let\
    \ decimal = arr[i].decimalValue()\n            if decimal > 0 {\n            \
    \    let index = result.index(of: decimal)\n                result.remove(at:\
    \ index)\n                result.insert(decimal, at: i)\n            } else {\n\
    \                let index = result.index(of: ones)\n                result.remove(at:\
    \ index)\n                result.insert(ones, at: i)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for number in arr {\n\
    \        let binaryString = String(number, radix: 2)\n        let count = binaryString.count\n\
    \        let decimal = Int(binaryString, radix: 2)\n        if count == 1 {\n\
    \            result.insert(decimal, at: 0)\n        } else {\n            let\
    \ index = result.index(of: decimal)\n            if index != nil {\n         \
    \       result[index!] = decimal\n            } else {\n                result.insert(decimal,\
    \ at: 0)\n            }\n        }\n    }\n    return result", '    return arr.sorted()',
  "    var result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].bitCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ for i in 0..<arr.count {\n        let ones = arr[i].bitCount()\n        if ones\
    \ == 0 {\n            result[i] = arr[i]\n        }\n    }\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones < 0 {\n           \
    \ result[i] = -result[i]\n        }\n    }\n    return result", "    var result\
    \ = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ return result.sorted(by: { $0.binCount() < $1.binCount() })", "    var sorted\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < arr.count\
    \ {\n        sorted = append(sorted, arr[i])\n        i += 1\n    }\n    for j\
    \ = i; j > 0; j-- {\n        for k = j - 1; k >= 0; k-- {\n            if arr[j]\
    \ > arr[k] {\n                let temp = arr[j]\n                arr[j] = arr[k]\n\
    \                arr[k] = temp\n            }\n        }\n    }\n    return sorted",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ", "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n   \
    \     ones = num.trailingZeroBitCount()\n        if ones == 0 {\n            result.insert(num,\
    \ at: 0)\n        } else {\n            result.insert(num, at: result.count -\
    \ ones)\n        }\n    }\n    return result", "    var result = arr\n    for\
    \ i in 0..<arr.count {\n        let ones = arr.filter{$0 == 1}.count\n       \
    \ if ones > i {\n            let tmp = result[i]\n            result[i] = result[ones]\n\
    \            result[ones] = tmp\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var ones = [Int]()\n    var zeros = [Int]()\n    for x\
    \ in arr {\n        if x != 0 {\n            ones.append(x)\n        } else {\n\
    \            zeros.append(x)\n        }\n    }\n    ones = sort_array(ones)\n\
    \    zeros = sort_array(zeros)\n    for x in ones {\n        for y in zeros {\n\
    \            if x == y {\n                continue\n            }\n          \
    \  if x < y {\n                result.append(x)\n            } else {\n      \
    \          result.append(y)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var dec = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    dec += num\n        }\n    }\n    if ones > 0 {\n        result = dec.sorted()\n\
    \    }\n    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if\
    \ ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n    result.sort\
    \ { $0.binCount() < $1.binCount() }\n    return result", "    var result = [Int]()\n\
    \    var count = 0\n    for element in arr {\n        if element == 1 {\n    \
    \        count += 1\n        } else {\n            count = 0\n        }\n    \
    \    if count > 1 {\n            result.insert(element, at: result.endIndex)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                oneCount--\n\
    \                result.insert(result.count - oneCount, num)\n            } else\
    \ {\n                result.insert(result.count, num)\n            }\n       \
    \ }\n    }\n    return result", "    \n    var result = [Int]()\n    \n    for\
    \ element in arr {\n        let ones = count_ones(element)\n        if ones ==\
    \ 0 {\n            result.append(element)\n        } else {\n            let decimal\
    \ = element / pow(2, ones)\n            result.append(decimal)\n        }\n  \
    \  }\n    \n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ let decimal = arr[i].decimalValue()\n            if decimal > 0 {\n        \
    \        let index = result.index(of: decimal)\n                result.remove(at:\
    \ index)\n                result.insert(decimal, at: i)\n            } else {\n\
    \                let index = result.index(of: ones)\n                result.remove(at:\
    \ index)\n                result.insert(ones, at: i)\n            }\n        }\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
