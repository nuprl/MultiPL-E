language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp44g3zfz_.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp44g3zfz_.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwx6558iq.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpwx6558iq.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpwx6558iq.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpwx65"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv5gg08ai.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpv5gg08ai.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpv5gg08ai.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpv5gg08ai.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1hdnwrc4.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1hdnwrc4.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    for _ in 0..<operand.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result **= operand[i]\n        default:\n            break\n       \
    \ }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt4krwrkx.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpt4krwrkx.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand = operand[index..<operand.count]\n\
    \        switch operator {\n        case \"+\":\n            result += operand[0]\n\
    \        case \"-\":\n            result -= operand[0]\n        case \"*\":\n\
    \            result *= operand[0]\n        case \"//\":\n            result /=\
    \ operand[0]\n        case \"**\":\n            result **= operand[0]\n      \
    \  default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp39u4arvo.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp39u4arvo.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp39u4arvo.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmp39u4arvo.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmp39u4arvo.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmp39u4arvo.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmp39u4arvo.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp39u4arvo.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp39u4arvo.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpi9a4njih.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpi9a4njih.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand = operand[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpcp6pcm9r.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpcp6pcm9r.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpcp6pcm9r.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmpcp6pcm9r.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmpcp6pcm9r.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmpcp6pcm9r.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmpcp6pcm9r.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpcp6pcm9r.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpcp6pcm9r.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    for _ in 0..<operand.count {\n        if i == operator.count {\n\
    \            break\n        }\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[j]\n            i += 1\n            j += 1\n\
    \        case \"-\":\n            result -= operand[j]\n            i += 1\n \
    \           j += 1\n        case \"*\":\n            result *= operand[j]\n  \
    \          i += 1\n            j += 1\n        case \"//\":\n            result\
    \ /= operand[j]\n            i += 1\n            j += 1\n        case \"**\":\n\
    \            result **= operand[j]\n            i += 1\n            j += 1\n \
    \       default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpauft82fj.swift:25:17: error: expected expression after operator\n\
    \        if i == operator.count {\n                ^\n/tmp/tmpauft82fj.swift:25:25:\
    \ error: '.' is not allowed in operator names\n        if i == operator.count\
    \ {\n                        ^\n/tmp/tmpauft82fj.swift:28:16: error: expected\
    \ expression in 'switch' statement\n        switch operator[i] {\n           \
    \    ^\n/tmp/tmpauft82fj.swift:28:24: error: '[' is not allowed in operator names\n\
    \        switch operator[i] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rg1ceo.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpz8rg1ceo.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp44g3zfz_.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp44g3zfz_.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            fatalError(\"Invalid operator\")\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphnvo0myf.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmphnvo0myf.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmphnvo0myf.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmphnvo0myf.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp44g3zfz_.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp44g3zfz_.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    while i < operator.count {\n        switch operator[i] {\n        case \"\
    +\":\n            result = result + operand[i]\n        case \"-\":\n        \
    \    result = result - operand[i]\n        case \"*\":\n            result = result\
    \ * operand[i]\n        case \"//\":\n            result = result / operand[i]\n\
    \        case \"**\":\n            result = result ** operand[i]\n        default:\n\
    \            break\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpn79smc5y.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpn79smc5y.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjcfpjo_1.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpjcfpjo_1.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpjcfpjo_1.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpjcfpjo_1.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptn_ae769.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmptn_ae769.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmptn_ae769.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmptn_ae769.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv5gg08ai.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpv5gg08ai.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpv5gg08ai.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpv5gg08ai.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index+1]\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaee_j_hp.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaee_j_hp.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"//\":\n            result\
    \ /= operand[index]\n        case \"**\":\n            result *= operand[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6tfwob5x.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp6tfwob5x.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp6tfwob5x.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp6tfwob5x.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvj9gzleo.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpvj9gzleo.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpvj9gzleo.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpvj9gzleo.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            fatalError(\"Invalid operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvygu_6y2.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpvygu_6y2.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmple2dngls.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmple2dngls.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmple2dngls.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmple2dngls.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3wbia4kl.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmp3wbia4kl.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmp3wbia4kl.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmp3wbia4kl.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rg1ceo.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpz8rg1ceo.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while\
    \ i < operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i]\n        case \"-\":\n            result -= operand[i]\n\
    \        case \"*\":\n            result *= operand[i]\n        case \"//\":\n\
    \            result /= operand[i]\n        case \"**\":\n            result **=\
    \ operand[i]\n        default:\n            fatalError(\"Invalid operator\")\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkij9ih0a.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpkij9ih0a.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_z6t9g86.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp_z6t9g86.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"/\":\n            result /= operand\n\
    \        case \"//\":\n            result /= operand\n        case \"**\":\n \
    \           result **= operand\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjlv0ufij.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpjlv0ufij.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpjlv0ufij.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpjlv0ufij.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpjlv0ufij.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpjlv0ufij.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpjlv0ufij.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzvhmghec.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpzvhmghec.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpl8w72tmi.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpl8w72tmi.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpl8w72tmi.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpl8w72tmi.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unexpected operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppllaez8s.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmppllaez8s.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmppllaez8s.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmppllaez8s.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rg1ceo.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpz8rg1ceo.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let left = operand[index]\n        let right = operand[index + 1]\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ left\n        case \"-\":\n            result -= left\n        case \"*\":\n\
    \            result *= left\n        case \"//\":\n            result /= left\n\
    \        case \"**\":\n            result **= left\n        default:\n       \
    \     fatalError(\"unknown operator\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8zdt_bjt.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp8zdt_bjt.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            break\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaomo_3zj.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpaomo_3zj.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        for operator in operator {\n\
    \            switch operator {\n            case \"+\":\n                result\
    \ += value\n            case \"-\":\n                result -= value\n       \
    \     case \"*\":\n                result *= value\n            case \"//\":\n\
    \                result /= value\n            case \"**\":\n                result\
    \ **= value\n            default:\n                break\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6jp_cz9o.swift:24:13: error: expected pattern\n        for operator\
    \ in operator {\n            ^\n/tmp/tmp6jp_cz9o.swift:24:13: error: expected\
    \ Sequence expression for for-each loop\n        for operator in operator {\n\
    \            ^\n/tmp/tmp6jp_cz9o.swift:24:13: error: expected '{' to start the\
    \ body of for-each loop\n        for operator in operator {\n            ^\n/tmp/tmp6jp_cz9o.swift:25:20:\
    \ error: expected expression in 'switch' statement\n            switch operator\
    \ {\n                   ^\n/tmp/tmp6jp_cz9o.swift:25:29: error: expected operator\
    \ name in operator declaration\n            switch operator {\n              \
    \              ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgiwqs01u.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpgiwqs01u.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwx6558iq.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpwx6558iq.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpwx6558iq.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpwx65"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1hdnwrc4.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1hdnwrc4.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Unknown operator: \\(operator[index])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnfq629y_.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpnfq629y_.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pthayim.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_pthayim.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_pthayim.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_pthayim.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_pthayim.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_pthayim.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_pthayim.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var operator_index = 0\n    var operand1_index = 0\n\
    \    var operand2_index = 0\n    var operator_string = \"\"\n    var operand1_string\
    \ = \"\"\n    var operand2_string = \"\"\n    var operator_string_index = 0\n\
    \    var operand1_string_index = 0\n    var operand2_string_index = 0\n    \n\
    \    while i < operator.count {\n        operator_string = operator[i]\n     \
    \   operand1_string = operand[operand1_index]\n        operand2_string = operand[operand2_index]\n\
    \        operator_string_index = operator.index(operator_string)\n        operand1_string_index\
    \ = operand.index(operand1_string)\n        operand2_string_index = operand.index(operand2_string)\n\
    \        \n        if operator_string_index < operand1_string_index {\n      \
    \      result += operand[operand2_index]\n            operand2_index += 1\n  \
    \      } else if operator_string_index < operand2_string_index {\n           \
    \ result += operand[operand1_index]\n            operand1_index += 1\n       \
    \ } else {\n            result += operand[operand1_index]\n            result\
    \ += operand[operand2_index]\n            operand1_index += 1\n            operand2_index\
    \ += 1\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyw7vc9du.swift:35:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpyw7vc9du.swift:35:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4c4cyyfz.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp4c4cyyfz.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Invalid operator: \\(operator)\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpak2774kq.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpak2774kq.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpak2774kq.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpak2774kq.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpak2774kq.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpak2774kq.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpak2774kq.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3wbia4kl.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmp3wbia4kl.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmp3wbia4kl.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmp3wbia4kl.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptedi75xx.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmptedi75xx.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmptedi75xx.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmptedi75xx.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjcfpjo_1.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpjcfpjo_1.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpjcfpjo_1.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpjcfpjo_1.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp01kl8biz.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp01kl8biz.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var operator_index\
    \ = 0\n    var operand_index = 0\n    var operator = operator[operator_index]\n\
    \    var operand = operand[operand_index]\n    while operator != \"\" {\n    \
    \    switch operator {\n        case \"+\":\n            result = result + operand\n\
    \            operator_index += 1\n            operator = operator[operator_index]\n\
    \            operand = operand[operand_index]\n        case \"-\":\n         \
    \   result = result - operand\n            operator_index += 1\n            operator\
    \ = operator[operator_index]\n            operand = operand[operand_index]\n \
    \       case \"*\":\n            result = result * operand\n            operator_index\
    \ += 1\n            operator = operator[operator_index]\n            operand =\
    \ operand[operand_index]\n        case \"//\":\n            result = result /\
    \ operand\n            operator_index += 1\n            operator = operator[operator_index]\n\
    \            operand = operand[operand_index]\n        case \"**\":\n        \
    \    result = result ** operand\n            operator_index += 1\n           \
    \ operator = operator[operator_index]\n            operand = operand[operand_index]\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7atmh9a7.swift:24:9: error: keyword 'operator' cannot be used as\
    \ an identifier here\n    var operator = operator[operator_index]\n        ^\n\
    /tmp/tmp7atmh9a7.swift:24:9: note: if this name is unavoidable, use backticks\
    \ to escape it\n    var operator = operator[operator_index]\n        ^~~~~~~~\n\
    \        `operator`\n/tmp/tmp7atmh9a7.swift:24:20: error: expected initial value\
    \ after '='\n    var operator = operator[operator_index]\n                   ^\n\
    /tmp/tmp7atmh9a7.swift:24:19: error: consecutive statements on a line must be\
    \ separated by ';'\n    var operator = operator[operator_index]\n            \
    \      ^\n                  ;\n/tmp/tmp7atmh9a7.swift:24:28: error: '[' is not\
    \ allowed in operator names\n    var operator = operator[operator_index]\n   \
    \                        ^\n/tmp/tmp7atmh9a7.swift:26:11: error: expected expression,\
    \ var, or let in 'while' condition\n    while operator != \"\" {\n          ^\n\
    /tmp/tmp7atmh9a7.swift:26:11: error: operator must be declared as 'prefix', 'postfix',\
    \ or 'infix'\n    while operator != \"\" {\n          ^\n/tmp/tmp7atmh9a7.swift:26:11:\
    \ error: 'operator' may only be declared at file scope\n    while operator !=\
    \ \"\" {\n          ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Invalid operator: \\(operator)\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpak2774kq.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpak2774kq.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpak2774kq.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpak2774kq.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpak2774kq.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpak2774kq.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpak2774kq.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyrreniva.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpyrreniva.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptn_ae769.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmptn_ae769.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmptn_ae769.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmptn_ae769.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvj9gzleo.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpvj9gzleo.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpvj9gzleo.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpvj9gzleo.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjcfpjo_1.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpjcfpjo_1.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpjcfpjo_1.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpjcfpjo_1.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpo4zam3ul.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpo4zam3ul.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Unknown operator: \\(operator)\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbspb6lp3.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpbspb6lp3.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpbspb6lp3.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpbspb6lp3.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpbspb6lp3.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpbspb6lp3.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpbspb6lp3.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pthayim.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_pthayim.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_pthayim.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_pthayim.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_pthayim.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_pthayim.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_pthayim.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Unknown operator: \\(operator)\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbspb6lp3.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpbspb6lp3.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpbspb6lp3.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpbspb6lp3.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpbspb6lp3.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpbspb6lp3.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpbspb6lp3.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pthayim.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_pthayim.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_pthayim.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_pthayim.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_pthayim.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_pthayim.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_pthayim.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unexpected operator: \\(operator[index])\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_87o8cjv.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp_87o8cjv.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unknown operator\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpeozjyjum.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpeozjyjum.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpeozjyjum.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpeozjyjum.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        if i == operator.count {\n            break\n\
    \        }\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \       i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkb3yiydc.swift:24:17: error: expected expression after operator\n\
    \        if i == operator.count {\n                ^\n/tmp/tmpkb3yiydc.swift:24:25:\
    \ error: '.' is not allowed in operator names\n        if i == operator.count\
    \ {\n                        ^\n/tmp/tmpkb3yiydc.swift:27:16: error: expected\
    \ expression in 'switch' statement\n        switch operator[i] {\n           \
    \    ^\n/tmp/tmpkb3yiydc.swift:27:24: error: '[' is not allowed in operator names\n\
    \        switch operator[i] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpphyjftgk.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpphyjftgk.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzvhmghec.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpzvhmghec.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += value\n        case \"-\":\n       \
    \     result -= value\n        case \"*\":\n            result *= value\n    \
    \    case \"/\":\n            result /= value\n        case \"//\":\n        \
    \    result //= value\n        case \"**\":\n            result **= value\n  \
    \      default:\n            fatalError(\"Unexpected operator: \\(operator[index])\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpw3fe91vg.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpw3fe91vg.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += value\n        case \"-\":\n       \
    \     result -= value\n        case \"*\":\n            result *= value\n    \
    \    case \"//\":\n            result /= value\n        case \"**\":\n       \
    \     result **= value\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_9v4tx2u.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp_9v4tx2u.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsfee7y9p.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpsfee7y9p.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp01kl8biz.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp01kl8biz.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operator {\n      \
    \  case \"+\":\n            result += operand1\n        case \"-\":\n        \
    \    result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator)\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa3105ia5.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpa3105ia5.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpa3105ia5.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmpa3105ia5.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmpa3105ia5.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmpa3105ia5.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmpa3105ia5.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpa3105ia5.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpa3105ia5.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operator1 = operator[index]\n\
    \        switch operator1 {\n        case \"+\":\n            result += operand1\n\
    \        case \"-\":\n            result -= operand1\n        case \"*\":\n  \
    \          result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result **= operand1\n        default:\n   \
    \         break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptew3wpws.swift:24:25: error: expected initial value after '='\n\
    \        let operator1 = operator[index]\n                        ^\n/tmp/tmptew3wpws.swift:24:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operator1 = operator[index]\n                       ^\n                    \
    \   ;\n/tmp/tmptew3wpws.swift:24:33: error: '[' is not allowed in operator names\n\
    \        let operator1 = operator[index]\n                                ^\n\
    /tmp/tmptew3wpws.swift:35:20: error: cannot find operator '**=' in scope\n   \
    \         result **= operand1\n                   ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp61kjtw4n.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp61kjtw4n.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operator {\n      \
    \  case \"+\":\n            result += operand1\n        case \"-\":\n        \
    \    result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"/\":\n            result /= operand1\n        case \"**\":\n \
    \           result **= operand1\n        default:\n            fatalError(\"Invalid\
    \ operator\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ajz10k.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpa1ajz10k.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpa1ajz10k.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmpa1ajz10k.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmpa1ajz10k.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmpa1ajz10k.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmpa1ajz10k.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpa1ajz10k.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpa1ajz10k.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += value\n        case \"-\":\n       \
    \     result -= value\n        case \"*\":\n            result *= value\n    \
    \    case \"//\":\n            result /= value\n        case \"**\":\n       \
    \     result **= value\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv9rqkdtc.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpv9rqkdtc.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptedi75xx.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmptedi75xx.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmptedi75xx.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmptedi75xx.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2l4xbqad.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp2l4xbqad.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += value\n        case \"-\":\n       \
    \     result -= value\n        case \"*\":\n            result *= value\n    \
    \    case \"//\":\n            result /= value\n        case \"**\":\n       \
    \     result **= value\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv9rqkdtc.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpv9rqkdtc.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"/\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Unknown operator: \\(operator)\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfcpycrg3.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpfcpycrg3.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpfcpycrg3.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpfcpycrg3.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpfcpycrg3.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpfcpycrg3.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpfcpycrg3.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprbepyigg.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprbepyigg.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operator1 = operator[index]\n\
    \        switch operator1 {\n        case \"+\":\n            result += operand1\n\
    \        case \"-\":\n            result -= operand1\n        case \"*\":\n  \
    \          result *= operand1\n        case \"/\":\n            result /= operand1\n\
    \        case \"**\":\n            result **= operand1\n        default:\n   \
    \         break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpn69qpy2x.swift:24:25: error: expected initial value after '='\n\
    \        let operator1 = operator[index]\n                        ^\n/tmp/tmpn69qpy2x.swift:24:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operator1 = operator[index]\n                       ^\n                    \
    \   ;\n/tmp/tmpn69qpy2x.swift:24:33: error: '[' is not allowed in operator names\n\
    \        let operator1 = operator[index]\n                                ^\n\
    /tmp/tmpn69qpy2x.swift:35:20: error: cannot find operator '**=' in scope\n   \
    \         result **= operand1\n                   ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpndm374r2.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpndm374r2.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpndm374r2.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpndm374r2.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        if i == operator.count {\n            break\n\
    \        }\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            break\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpruxmgo03.swift:24:17: error: expected expression after operator\n\
    \        if i == operator.count {\n                ^\n/tmp/tmpruxmgo03.swift:24:25:\
    \ error: '.' is not allowed in operator names\n        if i == operator.count\
    \ {\n                        ^\n/tmp/tmpruxmgo03.swift:27:16: error: expected\
    \ expression in 'switch' statement\n        switch operator[i] {\n           \
    \    ^\n/tmp/tmpruxmgo03.swift:27:24: error: '[' is not allowed in operator names\n\
    \        switch operator[i] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv5gg08ai.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpv5gg08ai.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpv5gg08ai.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpv5gg08ai.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2l4xbqad.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp2l4xbqad.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptedi75xx.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmptedi75xx.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmptedi75xx.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmptedi75xx.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[i])\")\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpo4zam3ul.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpo4zam3ul.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppaub7wyh.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmppaub7wyh.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmppaub7wyh.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmppaub7wyh.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var temp = 0\n    var temp2 = 0\n    var temp3 = 0\n\
    \    var temp4 = 0\n    var temp5 = 0\n    var temp6 = 0\n    var temp7 = 0\n\
    \    var temp8 = 0\n    var temp9 = 0\n    var temp10 = 0\n    var temp11 = 0\n\
    \    var temp12 = 0\n    var temp13 = 0\n    var temp14 = 0\n    var temp15 =\
    \ 0\n    var temp16 = 0\n    var temp17 = 0\n    var temp18 = 0\n    var temp19\
    \ = 0\n    var temp20 = 0\n    var temp21 = 0\n    var temp22 = 0\n    var temp23\
    \ = 0\n    var temp24 = 0\n    var temp25 = 0\n    var temp26 = 0\n    var temp27\
    \ = 0\n    var temp28 = 0\n    var temp29 = 0\n    var temp30 = 0\n    var temp31\
    \ = 0\n    var temp32 = 0\n    var temp33 = 0\n    var temp34 = 0\n    var temp35\
    \ = 0\n    var temp36 = 0\n    var temp37 = 0\n    var temp38 = 0\n    var temp39\
    \ = 0\n    var temp40 = 0\n    var temp41 = 0\n    var temp42 = 0\n    var temp43\
    \ = 0\n    var temp44 = 0\n    var temp45 = 0\n    var temp46 = 0\n    var temp47\
    \ = 0\n    var temp48 = 0\n    var temp49 = 0\n    var temp50 = 0\n    var temp51\
    \ = 0\n    var temp52 = 0\n    var temp53 = 0\n    var temp54 = 0\n    var temp55\
    \ = 0\n    var temp56 = 0\n    var temp57 = 0\n    var temp58 = 0\n    var temp59\
    \ = 0\n    var temp60 = 0\n    var temp61 = 0\n    var temp62 = 0\n    var temp63\
    \ = 0\n    var temp64 = 0\n    var temp65 = 0\n    var temp66 = 0\n    var temp67\
    \ = 0\n    var temp68 = 0\n    var temp69 = 0\n    var temp70 = 0\n    var temp71\
    \ = 0\n    var temp72 = 0\n    var temp73 = 0\n    var temp74 = 0\n    var temp75\
    \ = 0\n    var temp76 = 0\n    var temp77 = 0\n    var temp78 = 0\n    var temp79\
    \ = 0\n    var temp80 = 0\n    var temp81 = 0\n    var temp82 = 0\n    var temp83\
    \ = 0\n    var temp84 = 0\n    var temp85 = 0\n    var temp86 = 0\n    var temp87\
    \ = 0\n    var temp88 = 0\n    var temp89 = 0\n    var temp90 = 0\n    var temp91\
    \ = 0\n    var temp92 = 0\n    var temp93 = 0\n    var temp94 = 0\n    var temp95\
    \ = 0\n    var temp96 = 0\n    var temp97 = 0\n    var temp98 = 0\n    var temp99\
    \ = 0\n    var temp100\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmhjrg0z0.swift:124:9: error: type annotation missing in pattern\n\
    \    var temp100\n        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var operator_index = 0\n    var operand1 = 0\n   \
    \ var operand2 = 0\n    var operator_index = 0\n    var operator = operator[0]\n\
    \    var operand = operand[0]\n    var operand2 = operand[1]\n    var operator\
    \ = operator[0]\n    var operand = operand[0]\n    var operand2 = operand[1]\n\
    \    var operator = operator[0]\n    var operand = operand[0]\n    var operand2\
    \ = operand[1]\n    var operator = operator[0]\n    var operand = operand[0]\n\
    \    var operand2 = operand[1]\n    var operator = operator[0]\n    var operand\
    \ = operand[0]\n    var operand2 = operand[1]\n    var operator = operator[0]\n\
    \    var operand = operand[0]\n    var operand2 = operand[1]\n    var operator\
    \ = operator[0]\n    var operand = operand[0]\n    var operand2 = operand[1]\n\
    \    var operator = operator[0]\n    var operand = operand[0]\n    var operand2\
    \ = operand[1]\n    var operator = operator[0]\n    var operand = operand[0]\n\
    \    var operand2 = operand[1]\n    var operator = operator[0]\n    var operand\
    \ = operand[0]\n    var operand2 = operand[1]\n    var operator = operator[0]\n\
    \    var operand = operand[0]\n    var operand2 = operand[1]\n    var operator\
    \ = operator[0]\n    var operand = operand[0]\n    var operand2 = operand[1]\n\
    \    var operator = operator[0]\n    var operand = operand[0]\n    var operand2\
    \ = operand[1]\n    var operator = operator[0]\n    var operand = operand[0]\n\
    \    var operand2 = operand[1]\n    var operator = operator[0]\n    var operand\
    \ = operand[0]\n    var operand2 = operand[1]\n    var operator = operator[0]\n\
    \    var operand = operand[0]\n    var operand2 = operand[1]\n    var operator\
    \ = operator[0]\n    var operand = operand[0]\n    var operand2 = operand[1]\n\
    \    var operator = operator[0]\n    var operand = operand[0]\n    var operand2\
    \ = operand[1]\n    var operator = operator[0]\n    var operand = operand[0]\n\
    \    var operand2 = operand[1]\n    var operator = operator[0]\n    var operand\
    \ = operand[0]\n    var operand2 = operand[1]\n    var operator = operator[0]\n\
    \    var operand = operand[0]\n    var operand2 = operand[1]\n    var operator\
    \ = operator[0]\n    var operand = operand[0]\n    var operand2 = operand[1]\n\
    \    var operator = operator[0]\n    var operand = operand[0]\n    var operand2\
    \ = operand[1]\n    var operator = operator[0]\n    var operand = operand[0]\n\
    \    var operand2 = operand[1]\n    var operator = operator[0]\n    var operand\
    \ = operand[0]\n    var operand2 = operand[1]\n    var operator = operator[0]\n\
    \    var operand = operand[0]\n    var operand2 = operand[1]\n    var operator\
    \ = operator[0]\n    var operand = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp19yxc4ts.swift:29:9: error: keyword 'operator' cannot be used as\
    \ an identifier here\n    var operator = operator[0]\n        ^\n/tmp/tmp19yxc4ts.swift:29:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var operator\
    \ = operator[0]\n        ^~~~~~~~\n        `operator`\n/tmp/tmp19yxc4ts.swift:29:20:\
    \ error: expected initial value after '='\n    var operator = operator[0]\n  \
    \                 ^\n/tmp/tmp19yxc4ts.swift:29:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    var operator = operator[0]\n       \
    \           ^\n                  ;\n/tmp/tmp19yxc4ts.swift:29:28: error: '[' is\
    \ not allowed in operator names\n    var operator = operator[0]\n            \
    \               ^\n/tmp/tmp19yxc4ts.swift:32:9: error: keyword 'operator' cannot\
    \ be used as an identifier here\n    var operator = operator[0]\n        ^\n/tmp/tmp19yxc4ts.swift:32:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var operator\
    \ = operator[0]\n        ^~~~~~~~\n        `operator`\n/tmp/tmp19yxc4ts.swift:32:20:\
    \ error: expected initial value after '='\n    var operator = operator[0]\n  \
    \                 ^\n/tmp/tmp19yxc4ts.swift:32:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    var operator = operator[0]\n       \
    \           ^\n                  ;\n/tmp/tmp19yxc4ts.swift:32:28: error: '[' is\
    \ not allowed in operator names\n    var operator = operator[0]\n            \
    \               ^\n/tmp/tmp19yxc4ts.swift:35:9: error: keyword 'operator' cannot\
    \ be used as an identifier here\n    var operator = operator[0]\n        ^\n/tmp/tmp19yxc4ts.swift:35:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var operator\
    \ = operator[0]\n        ^~~~~~~~\n        `operator`\n/tmp/tmp19yxc4ts.swift:35:20:\
    \ error: expected initial value after '='\n    var operator = operator[0]\n  \
    \                 ^\n/tmp/tmp19yxc4ts.swift:35:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    var operator = operator[0]\n       \
    \           ^\n                  ;\n/tmp/tmp19yxc4ts.swift:35:28: error: '[' is"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    for _ in 0..<operand.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result **= operand[i]\n        default:\n            fatalError(\"Invalid\
    \ operator\")\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpr3qf0vlz.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpr3qf0vlz.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyrreniva.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpyrreniva.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    for k in 0..<operand.count {\n        result += operand[i]\
    \ * operator[j] * operand[k]\n        i += 1\n        j += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4ve7u_uw.swift:26:32: error: expected expression after operator\n\
    \        result += operand[i] * operator[j] * operand[k]\n                   \
    \            ^\n/tmp/tmp4ve7u_uw.swift:26:40: error: '[' is not allowed in operator\
    \ names\n        result += operand[i] * operator[j] * operand[k]\n           \
    \                            ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"/\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpl39wtxgz.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpl39wtxgz.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyrreniva.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpyrreniva.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyrreniva.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpyrreniva.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rg1ceo.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpz8rg1ceo.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmple2dngls.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmple2dngls.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmple2dngls.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmple2dngls.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pthayim.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_pthayim.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_pthayim.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_pthayim.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_pthayim.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_pthayim.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_pthayim.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwx6558iq.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpwx6558iq.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpwx6558iq.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpwx65"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operator {\n      \
    \  case \"+\":\n            result += operand1\n        case \"-\":\n        \
    \    result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator)\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa3105ia5.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpa3105ia5.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpa3105ia5.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmpa3105ia5.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmpa3105ia5.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmpa3105ia5.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmpa3105ia5.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpa3105ia5.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpa3105ia5.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operator {\n      \
    \  case \"+\":\n            result += operand1\n        case \"-\":\n        \
    \    result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            fatalError(\"\
    Unknown operator: \\(operator)\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv81htrhd.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpv81htrhd.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpv81htrhd.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmpv81htrhd.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmpv81htrhd.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmpv81htrhd.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmpv81htrhd.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpv81htrhd.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpv81htrhd.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpphyjftgk.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpphyjftgk.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Invalid operator\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_mg2eptf.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_mg2eptf.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_mg2eptf.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_mg2eptf.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_mg2eptf.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_mg2eptf.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_mg2eptf.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp01kl8biz.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp01kl8biz.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Unknown operator: \\(operator[index])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnfq629y_.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpnfq629y_.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pthayim.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmp_pthayim.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmp_pthayim.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmp_pthayim.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmp_pthayim.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp_pthayim.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp_pthayim.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1hdnwrc4.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1hdnwrc4.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"//\":\n            result\
    \ /= operand[index]\n        case \"**\":\n            result *= operand[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptvl4eqax.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmptvl4eqax.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var operator_index = 0\n    var operand1_index\
    \ = 0\n    var operand2_index = 0\n    var operator_index2 = 0\n    var operand1_index2\
    \ = 0\n    var operand2_index2 = 0\n    var operator_index3 = 0\n    var operand1_index3\
    \ = 0\n    var operand2_index3 = 0\n    var operator_index4 = 0\n    var operand1_index4\
    \ = 0\n    var operand2_index4 = 0\n    var operator_index5 = 0\n    var operand1_index5\
    \ = 0\n    var operand2_index5 = 0\n    var operator_index6 = 0\n    var operand1_index6\
    \ = 0\n    var operand2_index6 = 0\n    var operator_index7 = 0\n    var operand1_index7\
    \ = 0\n    var operand2_index7 = 0\n    var operator_index8 = 0\n    var operand1_index8\
    \ = 0\n    var operand2_index8 = 0\n    var operator_index9 = 0\n    var operand1_index9\
    \ = 0\n    var operand2_index9 = 0\n    var operator_index10 = 0\n    var operand1_index10\
    \ = 0\n    var operand2_index10 = 0\n    var operator_index11 = 0\n    var operand1_index11\
    \ = 0\n    var operand2_index11 = 0\n    var operator_index12 = 0\n    var operand1_index12\
    \ = 0\n    var operand2_index12 = 0\n    var operator_index13 = 0\n    var operand1_index13\
    \ = 0\n    var operand2_index13 = 0\n    var operator_index14 = 0\n    var operand1_index14\
    \ = 0\n    var operand2_index14 = 0\n    var operator_index15 = 0\n    var operand1_index15\
    \ = 0\n    var operand2_index15 = 0\n    var operator_index16 = 0\n    var operand1_index16\
    \ = 0\n    var operand2_index16 = 0\n    var operator_index17 = 0\n    var operand1_index17\
    \ = 0\n    var operand2_index17 = 0\n    var operator_index18 = 0\n    var operand1_index18\
    \ = 0\n    var operand2_index18 = 0\n    var operator_index19 = 0\n    var operand1_index19\
    \ = 0\n    var operand2_index19 = 0\n    var operator_index20 = 0\n    var operand1_index20\
    \ = 0\n    var operand2_index20 = 0\n    var operator_index21 = 0\n    var operand1_index21\
    \ = 0\n    var operand2_index21 = 0\n    var operator_index22 = 0\n    var operand1_index22\
    \ = 0\n    var operand2_index22 = 0\n    var operator_index23 = 0\n    var operand1_index23\
    \ = 0\n    var operand2_index23 = 0\n    var operator_index24 = 0\n    var operand1_index24\
    \ = 0\n    var operand2_index24 = 0\n    var operator_index25 = 0\n    var operand1_index25\
    \ = 0\n    var operand2_index25\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp13nyaaje.swift:99:9: error: type annotation missing in pattern\n\
    \    var operand2_index25\n        ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpndm374r2.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpndm374r2.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpndm374r2.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpndm374r2.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"unknown operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7n8ovo7p.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp7n8ovo7p.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmple2dngls.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmple2dngls.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmple2dngls.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmple2dngls.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            fatalError(\"Invalid operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3wbia4kl.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmp3wbia4kl.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmp3wbia4kl.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmp3wbia4kl.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvj9gzleo.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpvj9gzleo.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpvj9gzleo.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpvj9gzleo.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpp1c4wph0.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpp1c4wph0.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        let operator = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operator {\n      \
    \  case \"+\":\n            result += operand1\n        case \"-\":\n        \
    \    result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            break\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppmjxpnhy.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmppmjxpnhy.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmppmjxpnhy.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmppmjxpnhy.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmppmjxpnhy.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmppmjxpnhy.swift:23:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmppmjxpnhy.swift:23:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmppmjxpnhy.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmppmjxpnhy.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"/\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5a5zp453.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp5a5zp453.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp5a5zp453.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp5a5zp453.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        let operator = operator[index]\n\
    \        switch operator {\n        case \"+\":\n            result += value\n\
    \        case \"-\":\n            result -= value\n        case \"*\":\n     \
    \       result *= value\n        case \"//\":\n            result /= value\n \
    \       case \"**\":\n            result **= value\n        default:\n       \
    \     fatalError(\"Invalid operator\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz4jslzcu.swift:24:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[index]\n            ^\n\
    /tmp/tmpz4jslzcu.swift:24:13: note: if this name is unavoidable, use backticks\
    \ to escape it\n        let operator = operator[index]\n            ^~~~~~~~\n\
    \            `operator`\n/tmp/tmpz4jslzcu.swift:24:24: error: expected initial\
    \ value after '='\n        let operator = operator[index]\n                  \
    \     ^\n/tmp/tmpz4jslzcu.swift:24:23: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operator = operator[index]\n         \
    \             ^\n                      ;\n/tmp/tmpz4jslzcu.swift:24:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmpz4jslzcu.swift:25:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpz4jslzcu.swift:25:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"//\":\n            result /= operandValue\n   \
    \     case \"**\":\n            result **= operandValue\n        default:\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3ey5qnmw.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmp3ey5qnmw.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmp3ey5qnmw.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmp3ey5qnmw.swift:37:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp01kl8biz.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp01kl8biz.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rg1ceo.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpz8rg1ceo.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzvhmghec.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpzvhmghec.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        if i == operator.count {\n            break\n\
    \        }\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            break\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpruxmgo03.swift:24:17: error: expected expression after operator\n\
    \        if i == operator.count {\n                ^\n/tmp/tmpruxmgo03.swift:24:25:\
    \ error: '.' is not allowed in operator names\n        if i == operator.count\
    \ {\n                        ^\n/tmp/tmpruxmgo03.swift:27:16: error: expected\
    \ expression in 'switch' statement\n        switch operator[i] {\n           \
    \    ^\n/tmp/tmpruxmgo03.swift:27:24: error: '[' is not allowed in operator names\n\
    \        switch operator[i] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator: \\(operator[index])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppaub7wyh.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmppaub7wyh.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmppaub7wyh.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmppaub7wyh.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"/\":\n            result /=\
    \ operandValue\n        case \"**\":\n            result **= operandValue\n  \
    \      default:\n            fatalError(\"Unknown operator: \\(operatorValue)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptn_ae769.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmptn_ae769.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmptn_ae769.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmptn_ae769.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphbo3kwe4.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmphbo3kwe4.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Invalid operator\")\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzvhmghec.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpzvhmghec.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n  \
    \  var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n   \
    \ var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsxjnk9ug.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpsxjn"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmple2dngls.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmple2dngls.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmple2dngls.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmple2dngls.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv5gg08ai.swift:24:29: error: expected initial value after '='\n\
    \        let operatorValue = operator[index]\n                            ^\n\
    /tmp/tmpv5gg08ai.swift:24:28: error: consecutive statements on a line must be\
    \ separated by ';'\n        let operatorValue = operator[index]\n            \
    \               ^\n                           ;\n/tmp/tmpv5gg08ai.swift:24:37:\
    \ error: '[' is not allowed in operator names\n        let operatorValue = operator[index]\n\
    \                                    ^\n/tmp/tmpv5gg08ai.swift:35:20: error: cannot\
    \ find operator '**=' in scope\n            result **= operandValue\n        \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvj9gzleo.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpvj9gzleo.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpvj9gzleo.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpvj9gzleo.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var operator_index = 0\n    var operand1_index = 0\n\
    \    var operand2_index = 0\n    var operator_string = \"\"\n    var operand1_string\
    \ = \"\"\n    var operand2_string = \"\"\n    var operator_string_index = 0\n\
    \    var operand1_string_index = 0\n    var operand2_string_index = 0\n    var\
    \ operator_string_index2 = 0\n    var operand1_string_index2 = 0\n    var operand2_string_index2\
    \ = 0\n    var operator_string_index3 = 0\n    var operand1_string_index3 = 0\n\
    \    var operand2_string_index3 = 0\n    var operator_string_index4 = 0\n    var\
    \ operand1_string_index4 = 0\n    var operand2_string_index4 = 0\n    var operator_string_index5\
    \ = 0\n    var operand1_string_index5 = 0\n    var operand2_string_index5 = 0\n\
    \    var operator_string_index6 = 0\n    var operand1_string_index6 = 0\n    var\
    \ operand2_string_index6 = 0\n    var operator_string_index7 = 0\n    var operand1_string_index7\
    \ = 0\n    var operand2_string_index7 = 0\n    var operator_string_index8 = 0\n\
    \    var operand1_string_index8 = 0\n    var operand2_string_index8 = 0\n    var\
    \ operator_string_index9 = 0\n    var operand1_string_index9 = 0\n    var operand2_string_index9\
    \ = 0\n    var operator_string_index10 = 0\n    var operand1_string_index10 =\
    \ 0\n    var operand2_string_index10 = 0\n    var operator_string_index11 = 0\n\
    \    var operand1_string_index11 = 0\n    var operand2_string_index11 = 0\n  \
    \  var operator_string_index12 = 0\n    var operand1_string_index12 = 0\n    var\
    \ operand2_string_index12 = 0\n    var operator_string_index13 = 0\n    var operand1_string_index13\
    \ = 0\n    var operand2_string_index13 = 0\n    var operator_string_index14 =\
    \ 0\n    var operand1_string_index14 = 0\n    var operand2_string_index14 = 0\n\
    \    var operator_string_index15 = 0\n    var operand1_string_index15 = 0\n  \
    \  var operand2_string_index15 = 0\n    var operator_string_index16 = 0\n    var\
    \ operand1_string_index16 = 0\n    var operand2_string_index16 = 0\n    var operator_string_index17\
    \ = 0\n    var operand1_string_index17 = 0\n    var operand2_string_index17 =\
    \ 0\n    var operator_string_index18 = 0\n    var operand1_string_index18 = 0\n\
    \    var operand2_string_index18 = 0\n    var operator_string_index19 = 0\n  \
    \  var operand1_string_index19 = 0\n    var operand2_string_index19 = 0\n    var\
    \ operator_string_index20 = 0\n    var operand1_string_index20 = 0\n    var operand2_string_index20\
    \ = 0\n    var operator_string_index21 = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxn3bg4g8.swift:21:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmpxn3bg4g8.swift:22:9: warning:\
    \ initialization of variable 'i' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpxn3bg4g8.swift:23:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpxn3bg4g8.swift:24:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpxn3bg4g8.swift:25:9:\
    \ warning: initialization of variable 'operator_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpxn3bg4g8.swift:26:9: warning: initialization\
    \ of variable 'operand1_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var operand1_index = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxn3bg4g8.swift:27:9: warning: initialization of variable 'operand2_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var operand2_index = 0\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpxn3bg4g8.swift:28:9:\
    \ warning: initialization of variable 'operator_string' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var operator_string = \"\
    \"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpxn3bg4g8.swift:29:9: warning: initialization\
    \ of variable 'operand1_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var operand1_string = \"\"\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxn3bg4g8.swift:30:9: warning: initialization of variable 'operand2_string'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var operand2_string = \"\"\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpxn3bg4g8.swift:31:9:\
    \ warning: initialization of variable 'o"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let value = operand[index]\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += value\n        case \"-\":\n       \
    \     result -= value\n        case \"*\":\n            result *= value\n    \
    \    case \"//\":\n            result /= value\n        case \"**\":\n       \
    \     result **= value\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppxd9erje.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmppxd9erje.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n  \
    \  var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n   \
    \ var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsxjnk9ug.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpsxjnk9ug.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpsxjn"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2l4xbqad.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp2l4xbqad.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwx6558iq.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpwx6558iq.swift:22:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpwx6558iq.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:23:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpwx6558iq.swift:50:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:24:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpwx6558iq.swift:51:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:25:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpwx6558iq.swift:52:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:26:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpwx6558iq.swift:53:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:27:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpwx6558iq.swift:54:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:28:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpwx6558iq.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:29:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpwx6558iq.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:30:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpwx6558iq.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:31:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpwx6558iq.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:32:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpwx6558iq.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpwx65"
  stdout: ''
  timestamp: 1660012394
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaxef_zxy.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpaxef_zxy.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index\
    \ + 1]\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp01kl8biz.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp01kl8biz.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operand1 = operand[index]\n        let operand2 = operand[index+1]\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ operand1\n        case \"-\":\n            result -= operand1\n        case\
    \ \"*\":\n            result *= operand1\n        case \"//\":\n            result\
    \ /= operand1\n        case \"**\":\n            result **= operand1\n       \
    \ default:\n            fatalError(\"Unknown operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvaw1_0xu.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpvaw1_0xu.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpupxgh27o.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpupxgh27o.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpupxgh27o.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpupxgh27o.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuij30jwg.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpuij30jwg.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpuij30jwg.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpuij30jwg.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    for\
    \ _ in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1hdnwrc4.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp1hdnwrc4.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        let operandValue = operand[index]\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operandValue\n        case \"\
    -\":\n            result -= operandValue\n        case \"*\":\n            result\
    \ *= operandValue\n        case \"//\":\n            result /= operandValue\n\
    \        case \"**\":\n            result **= operandValue\n        default:\n\
    \            fatalError(\"Unknown operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpw_nek3w6.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpw_nek3w6.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012445
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprh0_dmch.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmprh0_dmch.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz8rg1ceo.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpz8rg1ceo.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012393
