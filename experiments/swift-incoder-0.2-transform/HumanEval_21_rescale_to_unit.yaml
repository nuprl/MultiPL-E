name: HumanEval_21_rescale_to_unit
language: swift
prompt: "\n/// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0])\n///\
  \ [0.0, 0.25, 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) ==\
  \ [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
  \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
  \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
completions: ["    var min = Double(Int.max)\n    var max = Double(Int.min)\n    for\
    \ number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number /= max - min\n    }\n    return scaled", "    var scaled: [Double]\
    \ = []\n    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double\
    \ = Double.lowestFiniteMagnitude\n    for number in numbers {\n        min = min(min,\
    \ number)\n        max = max(max, number)\n    }\n    for number in numbers {\n\
    \        scaled.append(number - min)\n        scaled.append(number - max)\n  \
    \  }\n    return scaled", "    var rescaled: [Double] = []\n    var smallest:\
    \ Double = Double.greatestFiniteMagnitude\n    var largest: Double = Double.lowestFiniteMagnitude\n\
    \    for number in numbers {\n        let rescaled = number / largest\n      \
    \  rescaled.append(rescaled)\n        largest = max(largest, number)\n       \
    \ smallest = min(smallest, number)\n    }\n    for number in numbers {\n     \
    \   let rescaled = number - smallest / largest\n        rescaled.append(rescaled)\n\
    \    }\n    return rescaled", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result = [Double](repeating: 0.0, count: numbers.count)\n\
    \    for number in numbers {\n        result[numbers.index(of: number)] = number\
    \ / max(max - min, Double(1))\n    }\n    return result", "    var rescaled: [Double]\
    \ = []\n    var smallest: Double = Double.greatestFiniteMagnitude\n    var largest:\
    \ Double = Double.leastFiniteMagnitude\n    for number in numbers {\n        rescaled.append(number\
    \ / largest)\n        largest = number\n    }\n    for number in numbers {\n \
    \       rescaled.append(number / smallest)\n        smallest = number\n    }\n\
    \    return rescaled", "    var min: Double = Double(Int.max)\n    var max: Double\
    \ = Double(Int.min)\n    for number in numbers {\n        min = min(min, number)\n\
    \        max = max(max, number)\n    }\n    var result: [Double] = []\n    for\
    \ number in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    guard numbers.count > 1 else { return\
    \ numbers }\n    var min = Double(numbers.first!)\n    var max = Double(numbers.last!)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append((number - min) / (max - min))\n    }\n    return scaled",
  "    var min = Double(Int.max)\n    var max = Double(Int.min)\n    for number in\
    \ numbers {\n        min = min(min, number)\n        max = max(max, number)\n\
    \    }\n    var scaled: [Double] = []\n    for number in numbers {\n        scaled.append(number\
    \ - min)\n    }\n    for number in scaled {\n        number = number / max\n \
    \   }\n    return scaled", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var result: [Double] = []\n    for number in numbers {\n        result.append(min\
    \ + ((max - min) * (number - min) / (max - min)))\n    }\n    return result",
  "    var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number - max)\n  \
    \  }\n    return result", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append(number - min)\n    }\n    for number in scaled {\n    \
    \    number /= max - min\n    }\n    return scaled", "    var scaledNumbers =\
    \ [Double]()\n    var min: Double = Double.greatestFiniteMagnitude\n    var max:\
    \ Double = Double.lowestFiniteMagnitude\n    for number in numbers {\n       \
    \ let scaledNumber = (number - min) / (max - min)\n        scaledNumbers.append(scaledNumber)\n\
    \        min = min(number, min)\n        max = max(number, max)\n    }\n    return\
    \ scaledNumbers", "    var min = Double(Int.max)\n    var max = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append((number - min) / (max - min))\n    }\n    return scaled",
  "    var min = Double(numbers[0])\n    var max = Double(numbers[0])\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ result = [Double]()\n    for number in numbers {\n        result.append(number\
    \ - min)\n        result.append(max - number)\n    }\n    return result", "  \
    \  var min: Double = Double.greatestFiniteMagnitude\n    var max: Double = Double.leastFiniteMagnitude\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var result: [Double] = []\n    for number in numbers {\n\
    \        result.append(number - min)\n        result.append(number / max - min)\n\
    \    }\n    return result", "    var min: Double = Double(Int.max)\n    var max:\
    \ Double = Double(Int.min)\n    for number in numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    var result: [Double] = []\n    for number\
    \ in numbers {\n        result.append(number - min)\n        result.append(number\
    \ - max)\n    }\n    return result", "    var min: Double = Double.greatestFiniteMagnitude\n\
    \    var max: Double = Double.lowestFiniteMagnitude\n    for number in numbers\
    \ {\n        min = min(min, number)\n        max = max(max, number)\n    }\n \
    \   var scaled: [Double] = []\n    for number in numbers {\n        scaled.append((number\
    \ - min) / (max - min))\n    }\n    return scaled", "    var rescaled: [Double]\
    \ = []\n    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        rescaled.append(number - min)\n        min\
    \ = min(min, number)\n        max = max(max, number)\n    }\n    for number in\
    \ numbers {\n        rescaled.append(number / max - min)\n    }\n    return rescaled",
  "    var min: Double = Double(Int.max)\n    var max: Double = Double(Int.min)\n\
    \    for number in numbers {\n        min = min(min, number)\n        max = max(max,\
    \ number)\n    }\n    var scaled: [Double] = []\n    for number in numbers {\n\
    \        scaled.append((number - min) / (max - min))\n    }\n    return scaled"]
stop_tokens:
- "\n}"
